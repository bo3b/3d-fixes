// Black cartoon outlines.
// ---- Created with 3Dmigoto v1.2.68 on Sat Jan 13 19:00:46 2018
cbuffer cb1 : register(b1)
{
  float4 cb1[3];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD7,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD4,
  out float4 o2 : TEXCOORD5,
  out float4 o3 : TEXCOORD6,
  out float4 o4 : TEXCOORD8,
  out float4 o5 : TEXCOORD9,
  out float4 o6 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xy = cb1[1].xy;
  o0.zw = cb1[2].xy;
  r0.xyz = v1.xyz;
  r0.w = 1;
  r0.x = dot(r0.xyzw, cb0[4].xyzw);
  r0.y = 1 / cb0[5].w;
  r0.x = -r0.x * r0.y;
  r0.x = min(1, r0.x);
  r0.y = cb0[8].w * r0.x;
  o1.w = r0.x;
  r0.x = max(0.00999999978, r0.y);
  r0.x = min(0.5, r0.x);
  r0.y = -0.5 + -r0.x;
  r0.z = -2 * r0.x;
  r0.x = r0.x + r0.x;
  o1.x = -1 / r0.x;
  o1.y = r0.y / r0.z;
  o1.z = 0;
  o2.xyzw = float4(0,0,1,0);
  o3.xyz = v1.xyz;
  o4.xyz = float3(0,0,1);
  o4.w = v1.w;
  r0.xyz = cb0[1].xyw * v1.yyy;
  r0.xyz = v1.xxx * cb0[0].xyw + r0.xyz;
  r0.xyz = v1.zzz * cb0[2].xyw + r0.xyz;
  r0.xyz = cb0[3].xyw + r0.xyz;
  r0.xy = r0.xy / r0.zz;
  r0.xy = float2(1,1) + r0.xy;
  r0.x = 0.5 * r0.x;
  o5.y = -r0.y * 0.5 + 1;
  o5.x = r0.x;
  o5.zw = float2(0,0);
  o6.xyzw = v0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.68 on Sat Jan 13 19:00:46 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 7   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 4   xyzw        1     NONE   float   xyzw
// TEXCOORD                 5   xyzw        2     NONE   float   xyzw
// TEXCOORD                 6   xyz         3     NONE   float   xyz 
// TEXCOORD                 8   xyzw        4     NONE   float   xyzw
// TEXCOORD                 9   xyzw        5     NONE   float   xyzw
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 1
mov o0.xy, cb1[1].xyxx
mov o0.zw, cb1[2].xxxy
mov r0.xyz, v1.xyzx
mov r0.w, l(1.000000)
dp4 r0.x, r0.xyzw, cb0[4].xyzw
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[5].w
mul r0.x, r0.y, -r0.x
min r0.x, r0.x, l(1.000000)
mul r0.y, r0.x, cb0[8].w
mov o1.w, r0.x
max r0.x, r0.y, l(0.010000)
min r0.x, r0.x, l(0.500000)
add r0.y, -r0.x, l(-0.500000)
mul r0.z, r0.x, l(-2.000000)
add r0.x, r0.x, r0.x
div o1.x, l(-1.000000), r0.x
div o1.y, r0.y, r0.z
mov o1.z, l(0)
mov o2.xyzw, l(0,0,1.000000,0)
mov o3.xyz, v1.xyzx
mov o4.xyz, l(0,0,1.000000,0)
mov o4.w, v1.w
mul r0.xyz, v1.yyyy, cb0[1].xywx
mad r0.xyz, v1.xxxx, cb0[0].xywx, r0.xyzx
mad r0.xyz, v1.zzzz, cb0[2].xywx, r0.xyzx
add r0.xyz, r0.xyzx, cb0[3].xywx
div r0.xy, r0.xyxx, r0.zzzz
add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r0.x, r0.x, l(0.500000)
mad o5.y, -r0.y, l(0.500000), l(1.000000)
mov o5.x, r0.x
mov o5.zw, l(0,0,0,0)
mov o6.xyzw, v0.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
