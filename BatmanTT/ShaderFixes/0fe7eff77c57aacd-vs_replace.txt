// Outlined boxes for dialog choices.
//
// Can only do this using the texture filtering, because
// other game elements use this shader, like the E and Shift-Q.
// Can't set this to screen depth in PS, so using this.

// ---- Created with 3Dmigoto v1.3.0 on Wed Jan 31 01:44:46 2018
cbuffer cb4 : register(b4)
{
  float4 cb4[6];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[3];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[8];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[6];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  float3 v3 : NORMAL0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD4,
  out float4 o2 : TEXCOORD5,
  out float3 o3 : TEXCOORD6,
  out float4 o4 : SV_Position0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.xxyy * cb2[1].zzww + cb2[1].xxyy;
  r0.xyzw = cb4[2].xyzw * r0.xyzw;
  r0.xy = r0.xy + r0.zw;
  o0.xy = cb4[3].xy + r0.xy;
  r0.xyzw = v2.xxyy * cb2[2].zzww + cb2[2].xxyy;
  r0.xyzw = cb4[4].xyzw * r0.xyzw;
  r0.xy = r0.xy + r0.zw;
  o0.zw = cb4[5].xy + r0.xy;
  r0.w = 1;
  r1.xyz = cb2[7].xyz * v0.www;
  r1.xyz = v0.xyz * cb2[5].xyz + r1.xyz;
  r1.xyz = cb2[6].xyz + r1.xyz;
  r1.xyz = cb1[6].xyz * r1.xyz;
  r1.w = dot(r1.xyz, cb1[0].xyz);
  r0.x = cb1[0].w + r1.w;
  r1.w = dot(r1.xyz, cb1[1].xyz);
  r1.x = dot(r1.xyz, cb1[2].xyz);
  r0.z = cb1[2].w + r1.x;
  r0.y = cb1[1].w + r1.w;
  r0.w = dot(r0.xyzw, cb0[4].xyzw);
  r0.xyz = cb3[2].xyz + r0.xyz;
  r1.x = 1 / cb0[5].w;
  r0.w = r1.x * -r0.w;
  o1.w = min(1, r0.w);
  o1.xyz = float3(0,0,0);
  r1.x = dot(v3.xyz, cb1[0].xyz);
  r1.y = dot(v3.xyz, cb1[1].xyz);
  r1.z = dot(v3.xyz, cb1[2].xyz);
  r0.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r0.w);
  r0.w = cmp(0 < r0.w);
  r1.xyz = r1.xyz * r1.www;
  o2.xyz = r0.www ? r1.xyz : float3(0.57735002,0.57735002,0.57735002);
  o2.w = 0;
  o3.xyz = r0.xyz;
  r1.xyzw = cb0[1].xyzw * r0.yyyy;
  r1.xyzw = r0.xxxx * cb0[0].xyzw + r1.xyzw;
  r0.xyzw = r0.zzzz * cb0[2].xyzw + r1.xyzw;
  o4.xyzw = cb0[3].xyzw + r0.xyzw;

// x2=1 only when a texture is active.  
float x2 = IniParams.Load(int2(2, 0)).x;
if (x2 == 1)
{
  // Move it back to screen depth to match text.
  float depth = StereoParams.Load(0).x; 
  float convergence = StereoParams.Load(0).y; 
  o4.x -= depth * (o4.w - convergence);
}

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.0 on Wed Jan 31 01:44:46 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xy          2     NONE   float   xy  
// NORMAL                   0   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 4   xyzw        1     NONE   float   xyzw
// TEXCOORD                 5   xyzw        2     NONE   float   xyzw
// TEXCOORD                 6   xyz         3     NONE   float   xyz 
// SV_Position              0   xyzw        4      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[8], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_input v2.xy
dcl_input v3.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output_siv o4.xyzw, position
dcl_temps 2
mad r0.xyzw, v1.xxyy, cb2[1].zzww, cb2[1].xxyy
mul r0.xyzw, r0.xyzw, cb4[2].xyzw
add r0.xy, r0.zwzz, r0.xyxx
add o0.xy, r0.xyxx, cb4[3].xyxx
mad r0.xyzw, v2.xxyy, cb2[2].zzww, cb2[2].xxyy
mul r0.xyzw, r0.xyzw, cb4[4].xyzw
add r0.xy, r0.zwzz, r0.xyxx
add o0.zw, r0.xxxy, cb4[5].xxxy
mov r0.w, l(1.000000)
mul r1.xyz, v0.wwww, cb2[7].xyzx
mad r1.xyz, v0.xyzx, cb2[5].xyzx, r1.xyzx
add r1.xyz, r1.xyzx, cb2[6].xyzx
mul r1.xyz, r1.xyzx, cb1[6].xyzx
dp3 r1.w, r1.xyzx, cb1[0].xyzx
add r0.x, r1.w, cb1[0].w
dp3 r1.w, r1.xyzx, cb1[1].xyzx
dp3 r1.x, r1.xyzx, cb1[2].xyzx
add r0.z, r1.x, cb1[2].w
add r0.y, r1.w, cb1[1].w
dp4 r0.w, r0.xyzw, cb0[4].xyzw
add r0.xyz, r0.xyzx, cb3[2].xyzx
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[5].w
mul r0.w, -r0.w, r1.x
min o1.w, r0.w, l(1.000000)
mov o1.xyz, l(0,0,0,0)
dp3 r1.x, v3.xyzx, cb1[0].xyzx
dp3 r1.y, v3.xyzx, cb1[1].xyzx
dp3 r1.z, v3.xyzx, cb1[2].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r1.w, r0.w
lt r0.w, l(0.000000), r0.w
mul r1.xyz, r1.wwww, r1.xyzx
movc o2.xyz, r0.wwww, r1.xyzx, l(0.577350,0.577350,0.577350,0)
mov o2.w, l(0)
mov o3.xyz, r0.xyzx
mul r1.xyzw, r0.yyyy, cb0[1].xyzw
mad r1.xyzw, r0.xxxx, cb0[0].xyzw, r1.xyzw
mad r0.xyzw, r0.zzzz, cb0[2].xyzw, r1.xyzw
add o4.xyzw, r0.xyzw, cb0[3].xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
