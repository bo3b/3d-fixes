
cbuffer _Globals : register(b0)
{
  float4 g_ReverseProjectionParams : packoffset(c100);
  float4 g_ReverseProjectionParams2 : packoffset(c101);
  float4 g_ViewportScaleOffset : packoffset(c84);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float3 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_hdrWindowParams : packoffset(c147);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);
  float4 g_DepthParams : packoffset(c110);
  float4 g_LinearFogColor : packoffset(c16);
  float4 g_LinearFogParams : packoffset(c17);
  float4 g_DepthValueParams : packoffset(c18);
  float4x4 g_WorldViewProj : packoffset(c0);
  float4 g_EyeXAxis : packoffset(c8);
  float4 g_EyeYAxis : packoffset(c9);
  float4 g_EyeZAxis : packoffset(c10);
  float4 g_EyeWorldPosition_Resolve : packoffset(c11);

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c64);


  struct
  {
    float4 m_UseHQFiltering;
  } g_ShadowPerfOptions : packoffset(c63);

  float4 g_IrradianceSHCoef[7] : packoffset(c24);
  float4 g_WorldLightmapParameters : packoffset(c87);
  float4 g_WorldLightmapUVParameters : packoffset(c88);
  float4 g_WorldLightmapColor : packoffset(c89);
  float4 g_WorldAOParameters : packoffset(c90);
  float4 g_WorldAORangeParameters : packoffset(c91);
  float4 g_DebugValue : packoffset(c148) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);

  struct
  {
    float2 m_VPOS;
    float3 m_ShadowResult;
    float3 m_WorldPosition;
    float3 m_WorldNormal;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float m_SpecularPower;
  } c : packoffset(c149);

}
SamplerState DepthSurface_s : register(s2);
SamplerState g_PointClampSampler_NG_s : register(s3);
SamplerState g_WorldLightmapColorSampler_s : register(s7);
SamplerState g_WorldLightMapSampler_s : register(s12);
SamplerComparisonState g_ShadowSampler_s : register(s15);
Texture2D<float4> g_Albedo_NG : register(t0);
Texture2D<float4> g_Normals_NG : register(t1);
Texture2D<float4> DepthSurface : register(t2);
Texture2D<float4> g_WorldLightmapColorSampler : register(t7);
Texture2D<float4> g_WorldLightMapSampler : register(t12);
Texture2D<float4> g_ShadowTexture : register(t15);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.xy = r0.xy * g_ViewportScaleOffset.xy + g_ViewportScaleOffset.zw;
  r1.xyzw = DepthSurface.Sample(DepthSurface_s, r0.xy).xyzw;
  r0.z = g_ReverseProjectionParams.z * r1.x + g_ReverseProjectionParams.w;
  r0.w = g_ReverseProjectionParams2.z * r1.x + g_ReverseProjectionParams2.w;
  r0.z = r0.z / r0.w;
  r1.xyz = v2.xyz * r0.zzz + v3.xyz;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
float4 r21, r22;
r21.xyz = r1.xyz;
r21.w = 1.000000000e+000;
r22.x = dot(r21.xyzw, g_WorldToView._m00_m10_m20_m30);
r22.y = dot(r21.xyzw, g_WorldToView._m01_m11_m21_m31);
r22.z = dot(r21.xyzw, g_WorldToView._m02_m12_m22_m32);
r22.w = dot(r21.xyzw, g_WorldToView._m03_m13_m23_m33);
r22.x +=  stereoParams.x * (-r22.z - stereoParams.y ) * g_ReverseProjectionParams.x;
r21.x = dot(r22.xyzw, g_ViewToWorld._m00_m10_m20_m30);
r21.y = dot(r22.xyzw, g_ViewToWorld._m01_m11_m21_m31);
r21.z = dot(r22.xyzw, g_ViewToWorld._m02_m12_m22_m32);
r1.xyz = r21.xyz;


  r2.xyzw = g_Normals_NG.Sample(g_PointClampSampler_NG_s, r0.xy).xyzw;
  r0.xyzw = g_Albedo_NG.Sample(g_PointClampSampler_NG_s, r0.xy).xyzw;
  r2.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r2.xyz;
  r3.xyz = r2.xyz + r2.xyz;
  r2.xyz = g_EyePosition.xyz + -r1.xyz;
  r4.x = dot(r2.xyz, r2.xyz);
  r4.x = rsqrt(r4.x);
  r4.y = 1.200000000e+001 * r2.w;
  r4.y = exp2(r4.y);
  r1.w = 1.000000000e+000;
  r5.y = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m00_m10_m20_m30);
  r5.z = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m01_m11_m21_m31);
  r5.w = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m02_m12_m22_m32);
  r6.xyz = r5.yzw * g_Shadows.m_ScalesX.xyz + g_Shadows.m_OffsetsX.xyz;
  r7.xyz = r5.yzw * g_Shadows.m_ScalesY.xyz + g_Shadows.m_OffsetsY.xyz;
  r8.xyz = r5.yzw * g_Shadows.m_ScalesZ.xyz + g_Shadows.m_OffsetsZ.xyz;
  r5.xyz = r5.yzw * g_Shadows.m_ScalesW.xyz + g_Shadows.m_OffsetsW.xyz;
  r4.z = abs(r6.x) < g_Shadows.m_CascadesRangesMax.x;
  r4.w = abs(r6.y) < g_Shadows.m_CascadesRangesMax.x;
  r1.w = r4.w ? r4.z : 0;
  r4.z = abs(r7.x) < g_Shadows.m_CascadesRangesMax.y;
  r4.w = abs(r7.y) < g_Shadows.m_CascadesRangesMax.y;
  r4.z = r4.w ? r4.z : 0;
  r9.x = abs(r8.x) < g_Shadows.m_CascadesRangesMax.z;
  r9.y = abs(r8.y) < g_Shadows.m_CascadesRangesMax.z;
  r4.w = r9.y ? r9.x : 0;
  r9.x = abs(r5.x) < g_Shadows.m_CascadesRangesMax.w;
  r9.y = abs(r5.y) < g_Shadows.m_CascadesRangesMax.w;
  r5.w = r9.y ? r9.x : 0;
  r9.x = r4.z ? r7.x : r6.x;
  r9.y = r4.z ? r7.y : r6.y;
  r9.z = r4.z ? r7.z : r6.z;
  r9.x = r4.w ? r8.x : r9.x;
  r9.y = r4.w ? r8.y : r9.y;
  r9.z = r4.w ? r8.z : r9.z;
  r5.x = r5.w ? r5.x : r9.x;
  r5.y = r5.w ? r5.y : r9.y;
  r5.z = r5.w ? r5.z : r9.z;
  r6.w = r4.z ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r6.w = r4.w ? g_Shadows.m_OffsetsZ.w : r6.w;
  r6.w = r5.w ? g_Shadows.m_OffsetsW.w : r6.w;
  r9.xyzw = g_Shadows.m_CascadesRangesMax.yyzz + -abs(-r5.xyxy);
  r9.x = r4.z ? r9.x : 10;
  r9.y = r4.z ? r9.y : 10;
  r9.x = r4.w ? r9.z : r9.x;
  r9.y = r4.w ? r9.w : r9.y;
  r9.zw = g_Shadows.m_CascadesRangesMax.ww + -abs(-r5.xy);
  r9.x = r5.w ? r9.z : r9.x;
  r9.y = r5.w ? r9.w : r9.y;
  r9.xy = saturate(-r9.xy * float2(1.000000e+001,1.000000e+001) + float2(1.000000e+000,1.000000e+000));
  r7.w = max(r9.y, r9.x);
  r1.w = r4.z ? r1.w : 0;
  r1.w = (int)r1.w & 0x3f800000;
  r8.w = r4.z ? 0x3f800000 : 0;
  r1.w = r4.w ? r8.w : r1.w;
  r8.w = r4.w ? 0x3f800000 : 0;
  r1.w = r5.w ? r8.w : r1.w;
  r8.w = r7.w * r1.w;
  r9.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r5.xyz;
  r9.x = r9.y * g_Shadows.m_ScalesX.w + r6.w;
  r10.xyzw = r9.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r10.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r10.xyzw;
  r11.x = floor(r10.w);
  r11.y = floor(r10.y);
  r10.xyzw = -r11.yyxx + r10.xyzw;
  r12.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r11.xyxy;
  r5.xy = g_Shadows.m_ShadowMapSize.xy * r12.zw;
  r5.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.xy, r9.w).x;
  r13.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r11.xyxy;
  r13.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r13.xyzw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r5.y = 4.000000000e+000 * r5.y;
  r5.x = r5.x * 4.000000000e+000 + r5.y;
  r11.zw = float2(4.000000e+000,4.000000e+000) + r11.xy;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r11.zw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r9.w).x;
  r5.x = r5.y * 4.000000000e+000 + r5.x;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.zw, r9.w).x;
  r5.x = r5.y * 4.000000000e+000 + r5.x;
  r13.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r11.xyxw;
  r13.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r13.xyzw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r5.x = r5.y * 4.000000000e+000 + r5.x;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.zw, r9.w).x;
  r9.xyz = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r10.wyw;
  r5.y = dot(r5.yy, r9.xx);
  r5.x = r5.x + r5.y;
  r5.yz = float2(7.500000e+000,0.000000e+000) + r11.xw;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r5.yz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r9.w).x;
  r5.y = dot(r5.yy, r10.ww);
  r5.x = r5.x + r5.y;
  r13.zw = float2(4.000000e+000,5.000000e-001) + r11.xy;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r9.w).x;
  r5.y = r5.y + r5.y;
  r5.x = r5.y * r9.y + r5.x;
  r14.zw = float2(4.000000e+000,7.500000e+000) + r11.xy;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r14.zw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r9.w).x;
  r5.y = dot(r5.yy, r10.yy);
  r5.x = r5.x + r5.y;
  r5.yz = r9.xz + -r10.yy;
  r11.zw = saturate(r5.yz);
  r12.zw = r11.zw * r11.zz;
  r5.y = 1.000000000e+000 + -abs(-r5.y);
  r5.y = max(r5.y, 0.000000000e+000);
  r5.z = -r5.y * 5.000000000e-001 + r11.w;
  r5.y = r5.z * r5.y + r12.w;
  r11.zw = min(r9.yx, r10.wy);
  r15.xy = -r11.zw * float2(5.000000e-001,5.000000e-001) + r9.yx;
  r11.zw = r15.xy * r11.zw;
  r11.zw = r9.yy * r9.xx + r11.zw;
  r5.z = r10.w + r10.y;
  r5.z = saturate(-1.000000000e+000 + r5.z);
  r5.z = r5.z * r5.z;
  r15.xy = -r5.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r5.z = r12.z * 5.000000000e-001 + r11.z;
  r5.z = max(r5.z, 9.999999825e-014);
  r6.w = r11.z / r5.z;
  r6.w = r11.x + r6.w;
  r13.y = 1.500000000e+000 + r6.w;
  r13.yz = g_Shadows.m_ShadowMapSize.xy * r13.yw;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.yz, r9.w).x;
  r5.x = r6.w * r5.z + r5.x;
  r5.z = r12.z * 5.000000000e-001 + r5.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r5.y = r5.y / r5.z;
  r5.y = r11.x + r5.y;
  r16.y = 5.000000000e-001 + r5.y;
  r17.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r11.yxyx;
  r16.z = r17.x;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r16.yz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r5.x = r5.y * r5.z + r5.x;
  r5.y = r15.x + r11.w;
  r5.y = max(r5.y, 9.999999825e-014);
  r5.z = r15.x / r5.y;
  r5.z = r11.x + r5.z;
  r18.y = 5.000000000e-001 + r5.z;
  r18.z = r17.z;
  r11.zw = g_Shadows.m_ShadowMapSize.xy * r18.yz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.zw, r9.w).x;
  r5.x = r5.z * r5.y + r5.x;
  r5.y = 1.000000e+000 / r15.y;
  r5.y = r11.y + r5.y;
  r17.x = 1.500000000e+000 + r5.y;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r17.yx;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r9.w).x;
  r5.x = r5.y * r15.y + r5.x;
  r15.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r9.xxy;
  r5.yz = r15.xy + -r10.yy;
  r11.zw = saturate(r5.yz);
  r12.zw = r11.zw * r11.zz;
  r5.y = 1.000000000e+000 + -abs(-r5.y);
  r5.y = max(r5.y, 0.000000000e+000);
  r5.z = -r5.y * 5.000000000e-001 + r11.w;
  r5.y = r5.z * r5.y + r12.w;
  r5.z = min(r9.y, r9.x);
  r11.zw = r15.xz * r9.yx;
  r13.yz = -r5.zz * float2(5.000000e-001,5.000000e-001) + r9.yx;
  r13.yz = r13.yz * r5.zz + r11.zw;
  r16.yw = min(r10.yw, r15.xz);
  r18.yw = -r16.yw * float2(5.000000e-001,5.000000e-001) + r15.xz;
  r11.zw = r18.yw * r16.yw + r11.zw;
  r10.xyzw = r9.xxyy + r10.xyzw;
  r10.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r10.xyzw);
  r10.xyzw = r10.xyzw * r10.xyzw;
  r10.xyzw = -r10.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r5.z = r12.z * 5.000000000e-001 + r13.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r6.w = r13.y / r5.z;
  r6.w = 1.500000000e+000 + r6.w;
  r13.x = r12.x + -r6.w;
  r13.xy = g_Shadows.m_ShadowMapSize.xy * r13.xw;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r5.x = r6.w * r5.z + r5.x;
  r5.z = r12.z * 5.000000000e-001 + r5.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r5.y = r5.y / r5.z;
  r5.y = 5.000000000e-001 + r5.y;
  r16.x = r12.x + -r5.y;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r16.xz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r5.x = r5.y * r5.z + r5.x;
  r5.y = r11.z + r10.x;
  r5.y = max(r5.y, 9.999999825e-014);
  r5.z = r10.x / r5.y;
  r5.z = 5.000000000e-001 + r5.z;
  r18.x = r12.x + -r5.z;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r18.xz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r5.x = r5.z * r5.y + r5.x;
  r5.yz = float2(1.000000e+000,1.000000e+000) / r10.yw;
  r5.y = r11.y + r5.y;
  r17.x = 1.500000000e+000 + r5.y;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r17.wx;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r5.x = r5.y * r10.y + r5.x;
  r10.xy = r9.xz + -r9.yy;
  r12.zw = saturate(r10.xy);
  r13.xy = r12.zw * r12.zz;
  r5.y = 1.000000000e+000 + -abs(-r10.x);
  r5.y = max(r5.y, 0.000000000e+000);
  r6.w = -r5.y * 5.000000000e-001 + r12.w;
  r5.y = r6.w * r5.y + r13.y;
  r6.w = r13.x * 5.000000000e-001 + r11.w;
  r6.w = max(r6.w, 9.999999825e-014);
  r9.z = r11.w / r6.w;
  r9.z = r11.x + r9.z;
  r14.y = 1.500000000e+000 + r9.z;
  r10.xy = g_Shadows.m_ShadowMapSize.xy * r14.yw;
  r9.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r9.w).x;
  r5.x = r9.z * r6.w + r5.x;
  r6.w = r13.x * 5.000000000e-001 + r5.y;
  r6.w = max(r6.w, 9.999999825e-014);
  r5.y = r5.y / r6.w;
  r5.y = r11.x + r5.y;
  r16.z = 5.000000000e-001 + r5.y;
  r16.yw = float2(6.500000e+000,5.500000e+000) + r11.yy;
  r10.xy = g_Shadows.m_ShadowMapSize.xy * r16.zy;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r9.w).x;
  r5.x = r5.y * r6.w + r5.x;
  r5.y = r13.z + r10.z;
  r5.y = max(r5.y, 9.999999825e-014);
  r6.w = r10.z / r5.y;
  r6.w = r11.x + r6.w;
  r16.x = 5.000000000e-001 + r6.w;
  r10.xy = g_Shadows.m_ShadowMapSize.xy * r16.xw;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r9.w).x;
  r5.x = r6.w * r5.y + r5.x;
  r5.y = 1.500000000e+000 + r5.z;
  r17.z = r12.y + -r5.y;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r17.yz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r9.w).x;
  r5.x = r5.y * r10.w + r5.x;
  r5.yz = r15.xy + -r9.yy;
  r10.xy = saturate(r5.yz);
  r10.xz = r10.xy * r10.xx;
  r5.y = 1.000000000e+000 + -abs(-r5.y);
  r5.y = max(r5.y, 0.000000000e+000);
  r5.z = -r5.y * 5.000000000e-001 + r10.y;
  r5.y = r5.z * r5.y + r10.z;
  r10.yz = min(r9.xy, r15.zx);
  r11.xy = -r10.yz * float2(5.000000e-001,5.000000e-001) + r15.zx;
  r10.yz = r11.xy * r10.yz;
  r10.yz = r15.zz * r15.xx + r10.yz;
  r5.z = r9.x + r9.y;
  r5.z = saturate(-1.000000000e+000 + r5.z);
  r5.z = r5.z * r5.z;
  r9.xy = -r5.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r5.z = r10.x * 5.000000000e-001 + r10.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r6.w = r10.y / r5.z;
  r6.w = 1.500000000e+000 + r6.w;
  r14.x = r12.x + -r6.w;
  r10.yw = g_Shadows.m_ShadowMapSize.xy * r14.xw;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.yw, r9.w).x;
  r5.x = r6.w * r5.z + r5.x;
  r5.z = r10.x * 5.000000000e-001 + r5.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r5.y = r5.y / r5.z;
  r5.y = 5.000000000e-001 + r5.y;
  r16.x = r12.x + -r5.y;
  r10.xy = g_Shadows.m_ShadowMapSize.xy * r16.xy;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r9.w).x;
  r5.x = r5.y * r5.z + r5.x;
  r5.y = r10.z + r9.x;
  r5.y = max(r5.y, 9.999999825e-014);
  r5.z = r9.x / r5.y;
  r5.z = 5.000000000e-001 + r5.z;
  r16.z = r12.x + -r5.z;
  r9.xz = g_Shadows.m_ShadowMapSize.xy * r16.zw;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xz, r9.w).x;
  r5.x = r5.z * r5.y + r5.x;
  r5.y = 1.000000e+000 / r9.y;
  r5.y = 1.500000000e+000 + r5.y;
  r17.z = r12.y + -r5.y;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r17.wz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r9.w).x;
  r5.x = r5.y * r9.y + r5.x;
  r5.x = g_Shadows.m_ShadowContrast.x * r5.x;
  r5.y = g_Shadows.m_ShadowContrast.x + -1.000000000e+000;
  r5.y = 5.000000000e-001 * r5.y;
  r5.x = saturate(r5.x * 2.439024299e-002 + -r5.y);
  r5.y = 0.000000000e+000 < r8.w;
  if (r5.y != 0) {
  r6.x = r4.w ? r7.x : r6.x;
  r6.y = r4.w ? r7.y : r6.y;
  r6.z = r4.w ? r7.z : r6.z;
  r6.x = r5.w ? r8.x : r6.x;
  r6.y = r5.w ? r8.y : r6.y;
  r6.z = r5.w ? r8.z : r6.z;
  r5.y = r4.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r5.y = r5.w ? g_Shadows.m_OffsetsZ.w : r5.y;
  r6.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r6.xyz;
  r6.x = r6.y * g_Shadows.m_ScalesX.w + r5.y;
  r9.xyzw = r6.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r9.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r9.xyzw;
  r10.x = floor(r9.w);
  r10.y = floor(r9.y);
  r9.xyzw = -r10.yyxx + r9.xyzw;
  r11.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r10.xyxy;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r11.zw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r6.w).x;
  r12.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r10.xyxy;
  r12.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r12.xyzw;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r6.w).x;
  r5.z = 4.000000000e+000 * r5.z;
  r5.y = r5.y * 4.000000000e+000 + r5.z;
  r10.zw = float2(4.000000e+000,4.000000e+000) + r10.xy;
  r6.xy = g_Shadows.m_ShadowMapSize.xy * r10.zw;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r6.w).x;
  r5.y = r5.z * 4.000000000e+000 + r5.y;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r6.w).x;
  r5.y = r5.z * 4.000000000e+000 + r5.y;
  r12.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r10.xyxw;
  r12.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r12.xyzw;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r6.w).x;
  r5.y = r5.z * 4.000000000e+000 + r5.y;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r6.w).x;
  r6.xyz = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r9.wyw;
  r5.z = dot(r5.zz, r6.xx);
  r5.y = r5.y + r5.z;
  r7.xy = float2(7.500000e+000,0.000000e+000) + r10.xw;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r7.xy;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r6.w).x;
  r5.z = dot(r5.zz, r9.ww);
  r5.y = r5.y + r5.z;
  r12.zw = float2(4.000000e+000,5.000000e-001) + r10.xy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r12.zw;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r6.w).x;
  r5.z = r5.z + r5.z;
  r5.y = r5.z * r6.y + r5.y;
  r13.zw = float2(4.000000e+000,7.500000e+000) + r10.xy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r6.w).x;
  r5.z = dot(r5.zz, r9.yy);
  r5.y = r5.y + r5.z;
  r7.xy = r6.xz + -r9.yy;
  r7.yz = saturate(r7.xy);
  r8.xy = r7.yz * r7.yy;
  r5.z = 1.000000000e+000 + -abs(-r7.x);
  r5.z = max(r5.z, 0.000000000e+000);
  r7.x = -r5.z * 5.000000000e-001 + r7.z;
  r5.z = r7.x * r5.z + r8.y;
  r7.xy = min(r6.yx, r9.wy);
  r8.yz = -r7.xy * float2(5.000000e-001,5.000000e-001) + r6.yx;
  r7.xy = r8.yz * r7.xy;
  r7.xy = r6.yy * r6.xx + r7.xy;
  r7.z = r9.w + r9.y;
  r7.z = saturate(-1.000000000e+000 + r7.z);
  r7.z = r7.z * r7.z;
  r8.yz = -r7.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r7.z = r8.x * 5.000000000e-001 + r7.x;
  r7.z = max(r7.z, 9.999999825e-014);
  r7.x = r7.x / r7.z;
  r7.x = r10.x + r7.x;
  r12.y = 1.500000000e+000 + r7.x;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r12.yw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r6.w).x;
  r5.y = r7.x * r7.z + r5.y;
  r7.x = r8.x * 5.000000000e-001 + r5.z;
  r7.x = max(r7.x, 9.999999825e-014);
  r5.z = r5.z / r7.x;
  r5.z = r10.x + r5.z;
  r14.y = 5.000000000e-001 + r5.z;
  r15.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r10.yxyx;
  r14.z = r15.x;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r14.yz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r6.w).x;
  r5.y = r5.z * r7.x + r5.y;
  r5.z = r8.y + r7.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r7.x = r8.y / r5.z;
  r7.x = r10.x + r7.x;
  r7.y = 5.000000000e-001 + r7.x;
  r7.z = r15.z;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r7.yz;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r6.w).x;
  r5.y = r7.y * r5.z + r5.y;
  r5.z = 1.000000e+000 / r8.z;
  r5.z = r10.y + r5.z;
  r15.x = 1.500000000e+000 + r5.z;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r15.yx;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r6.w).x;
  r5.y = r5.z * r8.z + r5.y;
  r8.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r6.xxy;
  r10.zw = r8.xy + -r9.yy;
  r11.zw = saturate(r10.zw);
  r12.yz = r11.zw * r11.zz;
  r5.z = 1.000000000e+000 + -abs(-r10.z);
  r5.z = max(r5.z, 0.000000000e+000);
  r7.y = -r5.z * 5.000000000e-001 + r11.w;
  r5.z = r7.y * r5.z + r12.z;
  r7.y = min(r6.y, r6.x);
  r10.zw = r8.xz * r6.yx;
  r11.zw = -r7.yy * float2(5.000000e-001,5.000000e-001) + r6.yx;
  r11.zw = r11.zw * r7.yy + r10.zw;
  r14.yw = min(r8.xz, r9.yw);
  r16.xy = -r14.yw * float2(5.000000e-001,5.000000e-001) + r8.xz;
  r10.zw = r16.xy * r14.yw + r10.zw;
  r9.xyzw = r6.xxyy + r9.xyzw;
  r9.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r9.xyzw);
  r9.xyzw = r9.xyzw * r9.xyzw;
  r9.xyzw = -r9.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r7.y = r12.y * 5.000000000e-001 + r11.z;
  r7.y = max(r7.y, 9.999999825e-014);
  r11.z = r11.z / r7.y;
  r11.z = 1.500000000e+000 + r11.z;
  r12.x = r11.x + -r11.z;
  r12.xz = g_Shadows.m_ShadowMapSize.xy * r12.xw;
  r11.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xz, r6.w).x;
  r5.y = r11.z * r7.y + r5.y;
  r7.y = r12.y * 5.000000000e-001 + r5.z;
  r7.y = max(r7.y, 9.999999825e-014);
  r5.z = r5.z / r7.y;
  r5.z = 5.000000000e-001 + r5.z;
  r14.x = r11.x + -r5.z;
  r12.xy = g_Shadows.m_ShadowMapSize.xy * r14.xz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r6.w).x;
  r5.y = r5.z * r7.y + r5.y;
  r5.z = r10.z + r9.x;
  r5.z = max(r5.z, 9.999999825e-014);
  r7.y = r9.x / r5.z;
  r7.y = 5.000000000e-001 + r7.y;
  r7.x = r11.x + -r7.y;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r7.xz;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r6.w).x;
  r5.y = r7.x * r5.z + r5.y;
  r7.xy = float2(1.000000e+000,1.000000e+000) / r9.yw;
  r5.z = r10.y + r7.x;
  r15.x = 1.500000000e+000 + r5.z;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r15.wx;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r6.w).x;
  r5.y = r5.z * r9.y + r5.y;
  r7.xz = r6.xz + -r6.yy;
  r9.xy = saturate(r7.xz);
  r12.xy = r9.xy * r9.xx;
  r5.z = 1.000000000e+000 + -abs(-r7.x);
  r5.z = max(r5.z, 0.000000000e+000);
  r6.z = -r5.z * 5.000000000e-001 + r9.y;
  r5.z = r6.z * r5.z + r12.y;
  r6.z = r12.x * 5.000000000e-001 + r10.w;
  r6.z = max(r6.z, 9.999999825e-014);
  r7.x = r10.w / r6.z;
  r7.x = r10.x + r7.x;
  r13.y = 1.500000000e+000 + r7.x;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r13.yw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r6.w).x;
  r5.y = r7.x * r6.z + r5.y;
  r6.z = r12.x * 5.000000000e-001 + r5.z;
  r6.z = max(r6.z, 9.999999825e-014);
  r5.z = r5.z / r6.z;
  r5.z = r10.x + r5.z;
  r12.z = 5.000000000e-001 + r5.z;
  r12.yw = float2(6.500000e+000,5.500000e+000) + r10.yy;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r12.zy;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r6.w).x;
  r5.y = r5.z * r6.z + r5.y;
  r5.z = r11.w + r9.z;
  r5.z = max(r5.z, 9.999999825e-014);
  r6.z = r9.z / r5.z;
  r6.z = r10.x + r6.z;
  r12.x = 5.000000000e-001 + r6.z;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r12.xw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r6.w).x;
  r5.y = r6.z * r5.z + r5.y;
  r5.z = 1.500000000e+000 + r7.y;
  r15.z = r11.y + -r5.z;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r15.yz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r6.w).x;
  r5.y = r5.z * r9.w + r5.y;
  r7.xy = r8.xy + -r6.yy;
  r7.yz = saturate(r7.xy);
  r9.xy = r7.yz * r7.yy;
  r5.z = 1.000000000e+000 + -abs(-r7.x);
  r5.z = max(r5.z, 0.000000000e+000);
  r6.z = -r5.z * 5.000000000e-001 + r7.z;
  r5.z = r6.z * r5.z + r9.y;
  r7.xy = min(r6.xy, r8.zx);
  r9.yz = -r7.xy * float2(5.000000e-001,5.000000e-001) + r8.zx;
  r7.xy = r9.yz * r7.xy;
  r7.xy = r8.zz * r8.xx + r7.xy;
  r6.x = r6.x + r6.y;
  r6.x = saturate(-1.000000000e+000 + r6.x);
  r6.x = r6.x * r6.x;
  r6.xy = -r6.xx * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r6.z = r9.x * 5.000000000e-001 + r7.x;
  r6.z = max(r6.z, 9.999999825e-014);
  r7.x = r7.x / r6.z;
  r7.x = 1.500000000e+000 + r7.x;
  r13.x = r11.x + -r7.x;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r13.xw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r6.w).x;
  r5.y = r7.x * r6.z + r5.y;
  r6.z = r9.x * 5.000000000e-001 + r5.z;
  r6.z = max(r6.z, 9.999999825e-014);
  r5.z = r5.z / r6.z;
  r5.z = 5.000000000e-001 + r5.z;
  r12.x = r11.x + -r5.z;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r12.xy;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r6.w).x;
  r5.y = r5.z * r6.z + r5.y;
  r5.z = r7.y + r6.x;
  r5.z = max(r5.z, 9.999999825e-014);
  r6.x = r6.x / r5.z;
  r6.x = 5.000000000e-001 + r6.x;
  r12.z = r11.x + -r6.x;
  r6.xz = g_Shadows.m_ShadowMapSize.xy * r12.zw;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xz, r6.w).x;
  r5.y = r6.x * r5.z + r5.y;
  r5.z = 1.000000e+000 / r6.y;
  r5.z = 1.500000000e+000 + r5.z;
  r15.z = r11.y + -r5.z;
  r6.xz = g_Shadows.m_ShadowMapSize.xy * r15.wz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xz, r6.w).x;
  r5.y = r5.z * r6.y + r5.y;
  r5.y = 2.439024299e-002 * r5.y;
  r1.w = -r7.w * r1.w + 1.000000000e+000;
  r4.z = r4.z ? g_Shadows.m_NoiseScale.y : 0;
  r4.z = r4.w ? g_Shadows.m_NoiseScale.z : r4.z;
  r4.z = r5.w ? g_Shadows.m_NoiseScale.w : r4.z;
  r1.w = r1.w * r4.z + 1.000000000e+000;
  r4.z = g_Shadows.m_ShadowContrast.x * r1.w;
  r1.w = g_Shadows.m_ShadowContrast.x * r1.w + -1.000000000e+000;
  r1.w = 5.000000000e-001 * r1.w;
  r1.w = saturate(r5.y * r4.z + -r1.w);
  r1.w = r1.w + -r5.x;
  r5.x = r8.w * r1.w + r5.x;
  }
  r5.yzw = -g_EyePosition.xyz + r1.xyz;
  r1.w = dot(r5.yzw, r5.yzw);
  r1.w = saturate(r1.w * g_Shadows.m_FadeParams.x + g_Shadows.m_FadeParams.y);
  r1.w = saturate(r5.x + r1.w);
  r3.w = 1.000000000e+000;
  r5.x = dot(g_IrradianceSHCoef[0].xyzw, r3.xyzw);
  r5.y = dot(g_IrradianceSHCoef[1].xyzw, r3.xyzw);
  r5.z = dot(g_IrradianceSHCoef[2].xyzw, r3.xyzw);
  r6.xyzw = r3.xyzz * r3.yzzx;
  r7.x = dot(g_IrradianceSHCoef[3].xyzw, r6.xyzw);
  r7.y = dot(g_IrradianceSHCoef[4].xyzw, r6.xyzw);
  r7.z = dot(g_IrradianceSHCoef[5].xyzw, r6.xyzw);
  r3.w = r3.y * r3.y;
  r3.w = r3.x * r3.x + -r3.w;
  r5.xyz = r7.xyz + r5.xyz;
  r5.xyz = g_IrradianceSHCoef[6].xyz * r3.www + r5.xyz;
  r4.zw = r1.xy * g_WorldLightmapUVParameters.zw + float2(5.000000e-001,5.000000e-001);
  r6.xyzw = g_WorldLightMapSampler.SampleLevel(g_WorldLightMapSampler_s, r4.zw, 0.000000000e+000).xyzw;
  r7.xyzw = g_WorldLightmapColorSampler.SampleLevel(g_WorldLightmapColorSampler_s, r4.zw, 0.000000000e+000).xyzw;
  r7.xyz = g_WorldLightmapColor.xxx * r7.xyz;
  r4.zw = r6.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r1.xy = g_WorldLightmapColor.yy * r4.zw;
  r6.z = r6.z * g_WorldLightmapParameters.w + g_WorldLightmapParameters.y;
  r6.xy = float2(0.000000e+000,0.000000e+000);
  r1.z = -r1.z;
  r1.xyz = r6.xyz + r1.xyz;
  r3.w = dot(r1.xyz, r1.xyz);
  r3.w = rsqrt(r3.w);
  r6.xyz = r3.www * r1.xyz;
  r1.x = saturate(dot(r3.xyz, r6.xyz));
  r6.xyz = r2.xyz * r4.xxx + r6.xyz;
  r1.y = dot(r6.xyz, r6.xyz);
  r1.y = rsqrt(r1.y);
  r6.xyz = r6.xyz * r1.yyy;
  r1.y = saturate(dot(r3.xyz, r6.xyz));
  r1.y = log2(r1.y);
  r1.y = r4.y * r1.y;
  r1.y = exp2(r1.y);
  r1.y = r1.x * r1.y;
  r3.w = 2.000000000e+000 + r4.y;
  r1.y = r3.w * r1.y;
  r1.y = 1.250000000e-001 * r1.y;
  r1.z = g_WorldLightmapParameters.z * abs(r1.z);
  r1.z = saturate(-r1.z * r1.z + r6.w);
  r6.xyz = r7.xyz * r1.zzz;
  r7.xyz = r6.xyz * r1.xxx;
  r1.xyz = r6.xyz * r1.yyy;
  r1.xyz = r1.xyz * r0.www;
  r1.xyz = r7.xyz * r0.xyz + r1.xyz;
  r4.z = saturate(dot(g_DeferredDirectLight.m_Direction.xyz, r3.xyz));
  r6.xyz = g_DeferredDirectLight.m_Color.xyz * r0.xyz;
  r6.xyz = r6.xyz * r1.www;
  r6.xyz = r6.xyz * r4.zzz;
  r0.xyz = r5.xyz * r0.xyz + r6.xyz;
  r2.xyz = r2.xyz * r4.xxx + g_DeferredDirectLight.m_Direction.xyz;
  r4.x = dot(r2.xyz, r2.xyz);
  r4.x = rsqrt(r4.x);
  r2.xyz = r4.xxx * r2.xyz;
  r3.x = saturate(dot(r3.xyz, r2.xyz));
  r3.x = log2(r3.x);
  r3.x = r4.y * r3.x;
  r3.x = exp2(r3.x);
  r3.x = r4.z * r3.x;
  r3.x = r3.x * r3.w;
  r3.x = 1.250000000e-001 * r3.x;
  r3.xyz = g_DeferredDirectLight.m_Color.xyz * r3.xxx;
  r3.xyz = r3.xyz * r1.www;
  r1.w = saturate(dot(r2.xyz, g_DeferredDirectLight.m_Direction.xyz));
  r1.w = 1.000000000e+000 + -r1.w;
  r2.x = r1.w * r1.w;
  r2.x = r2.x * r2.x;
  r1.w = r2.x * r1.w;
  r2.x = 1.000000000e+000 + -r0.w;
  r0.w = r2.x * r1.w + r0.w;
  r0.xyz = r3.xyz * r0.www + r0.xyz;
  o0.xyz = r0.xyz + r1.xyz;
  o0.w = r2.w;
  return;
}
