//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer Global_Constants
// {
//
//   float4 g_Global_DepthRes;          // Offset:    0 Size:    16
//   float4 g_Global_DepthChannel;      // Offset:   16 Size:    16
//   float4 g_Global_ScreenRes;         // Offset:   32 Size:    16
//   float4 g_Global_ShadowMapRes;      // Offset:   48 Size:    16
//   float4 g_Global_LightPositionAndRadius;// Offset:   64 Size:    16
//   float4 g_Global_FalloffParams;     // Offset:   80 Size:    16
//   row_major float4x4 g_Global_InvLightProj[6];// Offset:   96 Size:   384 [unused]
//   row_major float4x4 g_Global_InvProjection;// Offset:  480 Size:    64
//   row_major float4x4 g_Global_InvView;// Offset:  544 Size:    64
//   row_major float4x4 g_Global_EyeViewToLightView;// Offset:  608 Size:    64 [unused]
//   float4 g_Global_NumCascades;       // Offset:  672 Size:    16
//   row_major float4x4 g_Global_EyeViewToLightTex[6];// Offset:  688 Size:   384
//   float4 g_Global_LightData[6];      // Offset: 1072 Size:    96 [unused]
//   float4 g_Global_LightRadiusUVScale[6];// Offset: 1168 Size:    96 [unused]
//   float4 g_Global_ViewLocation[6];   // Offset: 1264 Size:    96 [unused]
//   float4 g_Global_MapID[6];          // Offset: 1360 Size:    96 [unused]
//   float4 g_Global_ZBias[6];          // Offset: 1456 Size:    96
//   float4 g_Global_TransformToLHS[6]; // Offset: 1552 Size:    96 [unused]
//   float g_Global_LightSize;          // Offset: 1648 Size:     4 [unused]
//   float g_Global_CascadeIndex;       // Offset: 1652 Size:     4 [unused]
//   float g_Global_EyeZFar;            // Offset: 1656 Size:     4 [unused]
//   float g_Global_EyeZNear;           // Offset: 1660 Size:     4 [unused]
//   float g_Global_TransitionScaleZ;   // Offset: 1664 Size:     4
//   float g_Global_InvertEyeDepth;     // Offset: 1668 Size:     4
//   float g_Global_SpotLight;          // Offset: 1672 Size:     4
//   float g_Global_LightSizeMinPercent;// Offset: 1676 Size:     4 [unused]
//   float g_Global_ShadowIntensity;    // Offset: 1680 Size:     4
//   float g_Global_MinWeightExponent;  // Offset: 1684 Size:     4 [unused]
//   float g_Global_MaxWeight;          // Offset: 1688 Size:     4 [unused]
//   float Pad;                         // Offset: 1692 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PointSampler                      sampler      NA          NA    0        1
// tShadowMap                        texture   float          2d    0        1
// tDepthBuffer                      texture  float4          2d    6        1
// tStereoFixUp                      texture  float4          2d   10        1
// Global_Constants                  cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xy          2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   x           0   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[106], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyw
dcl_output o0.x
dcl_temps 4
mul r0.xy, v0.xyxx, cb0[2].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.zw, l(0.062500, 0.500000, 0.000000, 0.000000), t10.zwxy, s0
ne r1.x, v1.w, l(1.000000)
add r1.y, -r0.w, v1.w
mad r1.y, r0.z, r1.y, v1.x
movc r1.x, r1.x, r1.y, v1.x
mov r1.y, v1.y
div r1.xy, r1.xyxx, v1.wwww
mad r1.zw, r1.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
eq r2.x, cb0[42].x, l(1.000000)
movc r0.xy, r2.xxxx, r1.zwzz, r0.xyxx
mul r1.zw, cb0[0].zzzw, cb0[2].xxxy
mul r0.xy, r0.xyxx, r1.zwzz
eq r1.z, cb0[1].x, l(1.000000)
if_nz r1.z
  sample_l_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t6.yzxw, s0, l(0.000000)
else 
  eq r1.w, cb0[1].y, l(1.000000)
  if_nz r1.w
    sample_l_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t6.xzyw, s0, l(0.000000)
  else 
    eq r1.w, cb0[1].z, l(1.000000)
    if_nz r1.w
      sample_l_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t6.xyzw, s0, l(0.000000)
    else 
      sample_l_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t6.xywz, s0, l(0.000000)
    endif 
  endif 
endif 
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[104].y
add r0.y, -r1.z, l(1.000000)
movc r0.x, r0.x, r0.y, r1.z
mad r0.xy, r0.xxxx, cb0[32].zwzz, cb0[33].zwzz
div r0.x, r0.x, r0.y
mul r1.xy, |r0.xxxx|, r1.xyxx
ne r0.y, |r0.x|, l(1.000000)
add r0.w, -r0.w, |r0.x|
mad r0.z, -r0.z, r0.w, r1.x
movc r0.y, r0.y, r0.z, r1.x
mul r0.zw, r1.yyyy, cb0[31].xxxy
mad r0.yz, r0.yyyy, cb0[30].xxyx, r0.zzwz
add r0.yz, r0.yyzy, cb0[33].xxyx
mul r1.xyzw, r0.zzzz, cb0[44].xyzw
mad r1.xyzw, r0.yyyy, cb0[43].xyzw, r1.xyzw
mad r1.xyzw, r0.xxxx, cb0[45].xyzw, r1.xyzw
add r1.xyzw, r1.xywz, cb0[46].xywz
eq r0.w, cb0[104].z, l(1.000000)
div r1.xyz, r1.xywx, r1.zzzz
movc r1.xyz, r0.wwww, r1.xyzx, r1.xywx
add r0.w, r1.z, cb0[91].x
min r0.w, r0.w, l(1.000000)
mov r2.xz, l(-8.000000,0,-6.000000,0)
mov r1.zw, l(0,0,0,-8.000000)
loop 
  lt r3.x, l(8.000000), r1.w
  breakc_nz r3.x
  mov r2.y, r1.w
  mad r3.xy, r2.xyxx, cb0[3].zwzz, r1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r3.xyxx, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r3.x, r1.z, l(1.000000)
  movc r1.z, r2.y, r3.x, r1.z
  add r1.w, r1.w, l(2.000000)
endloop 
mov r1.w, r1.z
mov r2.x, l(-8.000000)
loop 
  lt r2.y, l(8.000000), r2.x
  breakc_nz r2.y
  mov r2.w, r2.x
  mad r2.yw, r2.zzzw, cb0[3].zzzw, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r2.ywyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r2.w, r1.w, l(1.000000)
  movc r1.w, r2.y, r2.w, r1.w
  add r2.x, r2.x, l(2.000000)
endloop 
mov r2.xz, l(-4.000000,0,-2.000000,0)
mov r1.z, r1.w
mov r3.x, l(-8.000000)
loop 
  lt r3.y, l(8.000000), r3.x
  breakc_nz r3.y
  mov r2.y, r3.x
  mad r3.yz, r2.xxyx, cb0[3].zzwz, r1.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r3.yzyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r3.y, r1.z, l(1.000000)
  movc r1.z, r2.y, r3.y, r1.z
  add r3.x, r3.x, l(2.000000)
endloop 
mov r1.w, r1.z
mov r2.x, l(-8.000000)
loop 
  lt r2.y, l(8.000000), r2.x
  breakc_nz r2.y
  mov r2.w, r2.x
  mad r2.yw, r2.zzzw, cb0[3].zzzw, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r2.ywyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r2.w, r1.w, l(1.000000)
  movc r1.w, r2.y, r2.w, r1.w
  add r2.x, r2.x, l(2.000000)
endloop 
mov r2.xz, l(0,0,2.000000,0)
mov r1.z, r1.w
mov r3.x, l(-8.000000)
loop 
  lt r3.y, l(8.000000), r3.x
  breakc_nz r3.y
  mov r2.y, r3.x
  mad r3.yz, r2.xxyx, cb0[3].zzwz, r1.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r3.yzyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r3.y, r1.z, l(1.000000)
  movc r1.z, r2.y, r3.y, r1.z
  add r3.x, r3.x, l(2.000000)
endloop 
mov r1.w, r1.z
mov r2.x, l(-8.000000)
loop 
  lt r2.y, l(8.000000), r2.x
  breakc_nz r2.y
  mov r2.w, r2.x
  mad r2.yw, r2.zzzw, cb0[3].zzzw, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r2.ywyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r2.w, r1.w, l(1.000000)
  movc r1.w, r2.y, r2.w, r1.w
  add r2.x, r2.x, l(2.000000)
endloop 
mov r2.xz, l(4.000000,0,6.000000,0)
mov r1.z, r1.w
mov r3.x, l(-8.000000)
loop 
  lt r3.y, l(8.000000), r3.x
  breakc_nz r3.y
  mov r2.y, r3.x
  mad r3.yz, r2.xxyx, cb0[3].zzwz, r1.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r3.yzyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r3.y, r1.z, l(1.000000)
  movc r1.z, r2.y, r3.y, r1.z
  add r3.x, r3.x, l(2.000000)
endloop 
mov r1.w, r1.z
mov r2.x, l(-8.000000)
loop 
  lt r2.y, l(8.000000), r2.x
  breakc_nz r2.y
  mov r2.w, r2.x
  mad r2.yw, r2.zzzw, cb0[3].zzzw, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r2.ywyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r2.w, r1.w, l(1.000000)
  movc r1.w, r2.y, r2.w, r1.w
  add r2.x, r2.x, l(2.000000)
endloop 
mov r2.x, l(8.000000)
mov r1.z, r1.w
mov r2.z, l(-8.000000)
loop 
  lt r2.w, l(8.000000), r2.z
  breakc_nz r2.w
  mov r2.y, r2.z
  mad r2.yw, r2.xxxy, cb0[3].zzzw, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r2.ywyy, t0.yxzw, s0, l(0.000000)
  lt r2.y, r2.y, r0.w
  add r2.w, r1.z, l(1.000000)
  movc r1.z, r2.y, r2.w, r1.z
  add r2.z, r2.z, l(2.000000)
endloop 
ne r1.z, r1.z, l(0.000000)
if_nz r1.z
  mov r1.zw, l(0,0,0,-8.000000)
  loop 
    lt r2.x, l(8.000000), r1.w
    breakc_nz r2.x
    mul r2.x, r1.w, cb0[3].z
    mov r3.x, r1.z
    mov r3.y, l(-8.000000)
    loop 
      lt r2.z, l(8.000000), r3.y
      breakc_nz r2.z
      mul r2.y, r3.y, cb0[3].w
      add r2.yz, r1.xxyx, r2.xxyx
      sample_l_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t0.yxzw, s0, l(0.000000)
      add r2.y, -r0.w, r2.y
      mad_sat r2.y, r2.y, cb0[104].x, l(1.000000)
      add r3.x, r2.y, r3.x
      add r3.y, r3.y, l(1.000000)
    endloop 
    mov r1.z, r3.x
    add r1.w, r1.w, l(1.000000)
  endloop 
  mul r0.w, r1.z, l(0.003460)
else 
  mov r0.w, l(1.000000)
endif 
eq r1.x, cb0[5].w, l(1.000000)
mul r2.xyzw, r0.zzzz, cb0[35].xyzw
mad r2.xyzw, r0.yyyy, cb0[34].xyzw, r2.xyzw
mad r2.xyzw, r0.xxxx, cb0[36].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[37].xyzw
div r0.xyz, r2.xyzx, r2.wwww
add r0.xyz, -r0.xyzx, cb0[4].xyzx
mul r0.xyz, r0.xyzx, cb0[4].wwww
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
mad r0.x, r0.x, cb0[5].x, cb0[5].y
max r0.x, r0.x, l(0.000000)
mad r0.x, -r0.x, r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb0[5].z
exp r0.x, r0.x
add r0.y, r0.w, l(-1.000000)
mad r0.x, r0.x, r0.y, l(1.000000)
movc r0.x, r1.x, r0.x, r0.w
add r0.y, -r0.x, l(1.000000)
mad r0.x, cb0[105].x, r0.y, r0.x
eq r0.y, r0.x, l(1.000000)
discard_nz r0.y
mov o0.x, r0.x
ret 
// Approximately 225 instruction slots used
 