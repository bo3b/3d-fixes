
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float4 g_IrradianceTextureBiasScale : packoffset(c143);
  float4 g_DepthParams : packoffset(c150);
  float4 g_NeutralValue : packoffset(c129);
  float4 g_VerticalAttenuationValues : packoffset(c130);
  float4 g_WorldLightmapUVParameters : packoffset(c158);
  float4 g_WorldAOParameters : packoffset(c144);
  float4 g_WorldAORangeParameters : packoffset(c145);
  float4 g_DebugValue : packoffset(c159) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
}

cbuffer ShadowConstscb : register(b1)
{

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c0);

}
SamplerState g_LinearClampSampler_NG_s : register(s4);
SamplerState g_CloudShadowSampler_s : register(s6);
SamplerState g_IrradianceWeightsTexture_s : register(s11);
SamplerState g_AmbientCubeTexture_s : register(s13);
SamplerState g_ShadowMaskSampler_s : register(s15);
Texture2DMS<float4,4> g_TextureNormalDX11_MSAA : register(t1);
Texture2DMS<float,4> g_TextureDepthDX11_MSAA : register(t2);
Texture2D<float4> g_SSAOTexture_NG : register(t3);
Texture2D<float4> g_WorldAOTexture_NG : register(t4);
Texture2D<float4> g_CloudShadowSampler : register(t6);
Texture2D<float4> g_IrradianceTexturecAr_NG : register(t8);
Texture2D<float4> g_IrradianceTexturecAg_NG : register(t9);
Texture2D<float4> g_IrradianceTexturecAb_NG : register(t10);
TextureCube<float4> g_IrradianceWeightsTexture : register(t11);
Texture2D<float4> g_GroundHeightTexture_NG : register(t12);
TextureCube<float4> g_AmbientCubeTexture : register(t13);
Texture2D<float4> g_ShadowMaskTexture : register(t15);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.xy = r0.xy * g_ViewportScaleOffset.xy + g_ViewportScaleOffset.zw;
  g_TextureDepthDX11_MSAA.GetDimensions(r0.z, r0.w, bitmask.x);
  r0.zw = r0.zw;
  r0.zw = r0.xy * r0.zw;
  r1.xy = (int2)r0.zw;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_TextureDepthDX11_MSAA.Load(r1.xyz,0.000000000e+000).x;
  r0.z = g_ReverseProjectionParams.z + r0.z;
  r0.z = g_ReverseProjectionParams.w / r0.z;
  r1.xyz = v2.xyz * r0.zzz + v3.xyz;

//Mike_ar69 - Stereo Shift
float4 stereoParams = StereoParams.Load(0);
float4 r21, r22;
r21.xyz = r1.xyz;
r21.w = 1.000000000e+000;
r22.x = dot(r21.xyzw, g_WorldToView._m00_m10_m20_m30);
r22.y = dot(r21.xyzw, g_WorldToView._m01_m11_m21_m31);
r22.z = dot(r21.xyzw, g_WorldToView._m02_m12_m22_m32);
r22.w = dot(r21.xyzw, g_WorldToView._m03_m13_m23_m33);
r22.x +=  stereoParams.x * (-r22.z - stereoParams.y ) * g_ReverseProjectionParams.x;
r21.x = dot(r22.xyzw, g_ViewToWorld._m00_m10_m20_m30);
r21.y = dot(r22.xyzw, g_ViewToWorld._m01_m11_m21_m31);
r21.z = dot(r22.xyzw, g_ViewToWorld._m02_m12_m22_m32);
r1.xyz = r21.xyz;


  g_TextureNormalDX11_MSAA.GetDimensions(r0.z, r0.w, bitmask.x);
  r0.zw = r0.zw;
  r0.zw = r0.xy * r0.zw;
  r2.xy = (int2)r0.zw;
  r2.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyz = g_TextureNormalDX11_MSAA.Load(r2.xyz,0.000000000e+000).xyz;
  r0.z = g_SSAOTexture_NG.Sample(g_LinearClampSampler_NG_s, r0.xy).x;
  r2.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r2.xyz;
  r2.xyz = r2.xyz + r2.xyz;
  r3.x = 0 != g_Shadows.m_ShadowContrast.y;
  r3.y = 0 != g_Shadows.m_ShadowContrast.z;
  if (r3.x != 0) {
  r3.xzw = r2.xyz * g_WorldAOParameters.xxy + r1.xyz;
  r3.xz = r3.xz * g_WorldLightmapUVParameters.zw + g_WorldLightmapUVParameters.xy;
  r0.w = g_WorldAOTexture_NG.SampleLevel(g_LinearClampSampler_NG_s, r3.xz, 0.000000000e+000).x;
  r0.w = r0.w * g_WorldAORangeParameters.z + g_WorldAORangeParameters.w;
  r1.w = g_WorldAORangeParameters.x + r3.w;
  r0.w = r1.w + -r0.w;
  r1.w = 1.000000e+000 / g_WorldAORangeParameters.x;
  r0.w = saturate(r1.w * r0.w);
  r0.w = r0.w * r0.w;
  r0.w = max(r0.w, g_WorldAORangeParameters.y);
  } else {
  r0.w = 1.000000000e+000;
  }
  r3.xzw = g_AmbientCubeTexture.SampleLevel(g_AmbientCubeTexture_s, r2.xyz, 0.000000000e+000).xyz;
  r4.xyz = r3.xzw * r0.www;
  if (r3.y != 0) {
  r5.xy = g_IrradianceTextureBiasScale.xy + r1.xy;
  r5.xy = g_IrradianceTextureBiasScale.zw * r5.xy;
  r1.w = g_GroundHeightTexture_NG.Sample(g_LinearClampSampler_NG_s, r5.xy).x;
  r1.w = g_VerticalAttenuationValues.x * r1.w + g_VerticalAttenuationValues.y;
  r1.w = saturate(r1.z * g_VerticalAttenuationValues.z + r1.w);
  r6.xyzw = g_IrradianceTexturecAr_NG.Sample(g_LinearClampSampler_NG_s, r5.xy).xyzw;
  r6.xyzw = -g_NeutralValue.xxxx + r6.xyzw;
  r6.xyzw = r1.wwww * r6.xyzw + g_NeutralValue.xxxx;
  r7.xyzw = g_IrradianceTexturecAg_NG.Sample(g_LinearClampSampler_NG_s, r5.xy).xyzw;
  r7.xyzw = -g_NeutralValue.yyyy + r7.xyzw;
  r7.xyzw = r1.wwww * r7.xyzw + g_NeutralValue.yyyy;
  r5.xyzw = g_IrradianceTexturecAb_NG.Sample(g_LinearClampSampler_NG_s, r5.xy).xyzw;
  r5.xyzw = -g_NeutralValue.zzzz + r5.xyzw;
  r5.xyzw = r1.wwww * r5.xyzw + g_NeutralValue.zzzz;
  r2.xyzw = g_IrradianceWeightsTexture.SampleLevel(g_IrradianceWeightsTexture_s, r2.xyz, 0.000000000e+000).xyzw;
  r6.x = dot(r2.xyzw, r6.xyzw);
  r6.y = dot(r2.xyzw, r7.xyzw);
  r6.z = dot(r2.xyzw, r5.xyzw);
  r4.xyz = r0.www * r3.xzw + r6.xyz;
  }
  o0.xyz = r4.xyz * r0.zzz;
  r0.x = g_ShadowMaskTexture.SampleLevel(g_ShadowMaskSampler_s, r0.xy, 0.000000000e+000).x;
  r0.yzw = -g_EyePosition.xyz + r1.xyz;
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = saturate(r0.y * g_Shadows.m_FadeParams.x + g_Shadows.m_FadeParams.y);
  r0.x = saturate(r0.x + r0.y);
  r0.yz = r1.xy * g_Shadows.m_CloudUVScaleOffset.xy + g_Shadows.m_CloudUVScaleOffset.zw;
  r0.y = g_CloudShadowSampler.SampleLevel(g_CloudShadowSampler_s, r0.yz, 0.000000000e+000).x;
  r0.y = saturate(-g_Shadows.m_CloudShadowsParams.y + r0.y);
  r0.y = saturate(g_Shadows.m_CloudShadowsParams.x + r0.y);
  o0.w = r0.x * r0.y;
  return;
}
