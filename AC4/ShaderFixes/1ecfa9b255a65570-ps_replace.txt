// Manually fix error: Sample count must be non-zero.
//	Was Texture2DMS<float,0>
//	Also fix warning.

cbuffer cb0 : register(b0)
{
  row_major float4x4 g_mViewProj : packoffset(c0);
  row_major float4x4 g_mViewProjInv : packoffset(c4);
  row_major float4x4 g_mLightProj[4] : packoffset(c8);
  row_major float4x4 g_mLightProjInv[4] : packoffset(c24);
  float3 g_vEyePosition : packoffset(c40);
  float3 g_vLightPosition : packoffset(c41);
  float3 g_vSigmaAbsorption : packoffset(c42);
  float3 g_vSigmaScatter : packoffset(c43);
  float g_fDistanceScale : packoffset(c40.w);
  float g_fBufferWidthInv : packoffset(c41.w);
  float g_fBufferHeightInv : packoffset(c42.w);
  float g_fResMultiplier : packoffset(c43.w);
  float4 g_vCascadeOffsetAndScale[4] : packoffset(c44);
  float4 g_vLightDir : packoffset(c48);
  float4 g_vAirlightParams : packoffset(c49);
  float4 g_vCascadeTessFactor : packoffset(c50);
  float4 g_vShadowMapDim : packoffset(c51);
}
SamplerState g_sPoint_s : register(s0);
Texture2D<float> g_tGodraysBuffer : register(t0);
	Texture2DMS<float> tDepthMap : register(t1);
Texture2D<float> tDepthMapLowRes : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = g_fBufferWidthInv;
  r1.y = g_fBufferHeightInv;
  r1.zw = v1.xy / r1.xy;
  r2.xy = g_fResMultiplier * r1.xy;
  r0.xy = (int2)r1.zw;
	r0.x = tDepthMap.Load(r0.x,0.000000000e+000).x;
  r0.x = 1.000000e+000 / r0.x;
  r0.yz = v1.xy / r2.xy;
  r1.x = round(r0.y);
  r1.y = round(r0.z);
  r0.yz = frac(r0.yz);
  r1.zw = r1.xy * r2.xy;
  r0.w = tDepthMapLowRes.SampleLevel(g_sPoint_s, r1.zw, 0.000000000e+000).x;
  r1.z = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r1.zw, 0.000000000e+000).x;
  r3.x = 1.000000e+000 / r0.w;
  r4.xy = r1.xy * r2.xy + r2.xy;
  r0.w = tDepthMapLowRes.SampleLevel(g_sPoint_s, r4.xy, 0.000000000e+000).x;
  r1.w = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r4.xy, 0.000000000e+000).x;
  r3.w = 1.000000e+000 / r0.w;
  r2.z = 0.000000000e+000;
  r2.xyzw = r1.xyxy * r2.xyxy + r2.xzzy;
  r0.w = tDepthMapLowRes.SampleLevel(g_sPoint_s, r2.xy, 0.000000000e+000).x;
  r3.y = 1.000000e+000 / r0.w;
  r0.w = tDepthMapLowRes.SampleLevel(g_sPoint_s, r2.zw, 0.000000000e+000).x;
  r3.z = 1.000000e+000 / r0.w;
  r3.xyzw = r3.xyzw + -r0.xxxx;
  r3.xyzw = abs(r3.xyzw) * float4(2.000000e+004,2.000000e+004,2.000000e+004,2.000000e+004) + float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000);
  r0.xw = float2(1.000000e+000,1.000000e+000) + -r0.zy;
  r4.xyzw = r0.wyzy * r0.xxwz;
  r0.xyzw = r4.xyzw / r3.xyzw;
  r1.x = dot(r0.xyzw, float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000));
  r0.xyzw = r0.xyzw / r1.xxxx;
  r1.x = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r2.xy, 0.000000000e+000).x;
  r1.y = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r2.zw, 0.000000000e+000).x;
  r0.y = r1.x * r0.y;
  r0.x = r1.z * r0.x + r0.y;
  r0.x = r1.y * r0.z + r0.x;
  o0.xyzw = r1.wwww * r0.wwww + r0.xxxx;
  return;
}