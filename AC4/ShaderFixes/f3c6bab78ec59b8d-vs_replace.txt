//Menu Lighting and Lightning
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_EarthCurvatureParams : packoffset(c10);
  float4 g_ConstDebugReferenceVS : packoffset(c12);
  float4 g_EyeWorldPosition : packoffset(c14);
  float4 RainUVScroll : packoffset(c15);
  float4 g_EyeWorldPosition_Resolve : packoffset(c16);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ClipPlane : packoffset(c18);
  float4x4 g_InverseView : packoffset(c19);
  float4 g_EyeXAxis : packoffset(c23);
  float4 g_EyeYAxis : packoffset(c24);
  float4 g_EyeZAxis : packoffset(c25);
  float4x4 g_TextureMatrix : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4x4 g_WorldViewProj : packoffset(c41);
  float4x4 g_WorldView : packoffset(c45);
  float4x4 g_World : packoffset(c49);
  float4x4 g_WorldViewProjPrevFrame : packoffset(c53);
  float g_EntityVisualScaleFactor : packoffset(c57);
  float4 g_GlobalWindVS : packoffset(c58);
  float4 g_EarthCurvatureUpVector : packoffset(c59);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_NumLights : packoffset(c98);
  float g_HasSunNG : packoffset(c99);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_DepthParams : packoffset(c150);
  float4 g_WorldLightMapParameters1 : packoffset(c155);
  float4 g_WorldLightMapParameters2 : packoffset(c156);
  float4 g_WorldLightMapParameters3 : packoffset(c157);
  float4 g_WorldLightMapUVParameters : packoffset(c158);
  float4 g_WorldAOParameters : packoffset(c144);
  float4 g_WorldAORangeParameters : packoffset(c145);
  float4 g_WeatherExposedParams : packoffset(c143);
  float4 g_DebugValue : packoffset(c159) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.z = dot(r0.xyzw, g_WorldViewProj._m02_m12_m22_m32);
  r1.x = dot(r0.xyzw, g_WorldViewProj._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_WorldViewProj._m01_m11_m21_m31);
  r1.w = dot(r0.xyzw, g_WorldViewProj._m03_m13_m23_m33);


//Mike_ar69 - Stereo Shift
float4 r21;
float4 stereoParams = StereoParams.Load(0);
r21.xyzw = r1.xyzw;
if(r1.w != 1.0)
{
	r1.x += stereoParams.x * (r1.w - stereoParams.y);
}
o0.xyzw = r21.xyzw;


  o1.xyzw = r1.xyzw;
  r0.xy = r1.xy / r1.ww;
  r0.yzw = g_EyeYAxis.xyz * r0.yyy;
  r0.xyz = g_EyeXAxis.xyz * r0.xxx + r0.yzw;
  o2.xyz = g_EyeZAxis.xyz + r0.xyz;
  o3.xyz = g_EyeWorldPosition_Resolve.xyz;
  return;
}
