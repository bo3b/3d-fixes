
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float3x3 Operator691_1_matrix : packoffset(c128);
  float Alpha_2 : packoffset(c131);
  float3x3 Operator685_3_matrix : packoffset(c132);
}
SamplerState Operator323_0_s : register(s0);
SamplerState Operator681_1_s : register(s1);
SamplerState Operator6811_2_s : register(s2);
SamplerState DepthSurface_s : register(s8);
Texture2D<float4> Operator323_0 : register(t0);
Texture2D<float4> Operator681_1 : register(t1);
Texture2D<float4> Operator6811_2 : register(t2);
Texture2D<float4> DepthSurface : register(t8);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : COLOR0,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float3 v8 : TEXCOORD6,
  uint v9 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float2 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  o0.xyz = g_SelectionOverlayCol.xyz + float3(1.000000e+001,1.000000e+001,1.000000e+001);
  o0.w = 0.000000000e+000;
  r0.x = dot(v7.xyz, v7.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v7.xyz * r0.xxx;
  r1.xyz = -g_NormalScale.xxx * r0.xyz;
  r0.x = v9.x ? r1.x : r0.x;
  r0.y = v9.x ? r1.y : r0.y;
  r0.z = v9.x ? r1.z : r0.z;
  o1.xyz = saturate(r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001));
  o1.w = 0.000000000e+000;
  r0.xy = v0.xy * g_VPosToUV.xy + g_VPosToUV.zw;
  r0.zw = float2(-5.000000e-001,-5.000000e-001) + r0.xy;
  r0.zw = r0.zw * float2(2.000000e+000,-2.000000e+000) + g_ReverseProjectionParams2.xy;
  r0.zw = g_ReverseProjectionParams.xy * r0.zw;
  r1.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.xy, 0.000000000e+000).xyzw;
  r0.xy = r0.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r1.x = g_ReverseProjectionParams.z + r1.x;
  r1.z = g_ReverseProjectionParams.w / r1.x;
  r1.xy = r1.zz * r0.zw;
  r1.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r1.x +=  stereoParams.x * (-r1.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r2.x = dot(r1.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r2.z = 1.000000000e+000;
  r1.x = dot(r2.xyz, Operator685_3_matrix._m00_m10_m20);
  r1.y = dot(r2.xyz, Operator685_3_matrix._m01_m11_m21);
  r1.xyzw = Operator6811_2.Sample(Operator6811_2_s, r1.xy).xyzw;
  r3.xyzw = Operator681_1.Sample(Operator681_1_s, v2.xy).xyzw;
  r0.z = r3.y * r1.y;
  r1.x = dot(r2.xyz, Operator691_1_matrix._m00_m10_m20);
  r1.y = dot(r2.xyz, Operator691_1_matrix._m01_m11_m21);
  r1.xyzw = Operator323_0.Sample(Operator323_0_s, r1.xy).xyzw;
  r0.z = r1.y * r0.z;
  r0.z = saturate(2.500000000e+000 * r0.z);
  o2.xyz = r0.zzz * float3(3.360780e-001,4.300000e-001,4.392160e-001) + float3(2.600000e-001,3.700000e-001,4.000000e-001);
  o2.w = 0.000000000e+000;
  r0.zw = v8.xy / v8.zz;
  r0.xy = r0.xy + -r0.zw;
  o3.xy = saturate(r0.xy * float2(4.000000e+000,4.000000e+000) + float2(4.980000e-001,4.980000e-001));
  return;
}
