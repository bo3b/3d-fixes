
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float4 g_IrradianceTextureBiasScale : packoffset(c143);
  float4 g_DepthParams : packoffset(c150);
  float4 g_NeutralValue : packoffset(c129);
  float4 g_VerticalAttenuationValues : packoffset(c130);
  float4 g_WorldLightmapUVParameters : packoffset(c158);
  float4 g_WorldAOParameters : packoffset(c144);
  float4 g_WorldAORangeParameters : packoffset(c145);
  float4 g_DebugValue : packoffset(c159) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
}

cbuffer ShadowConstscb : register(b1)
{

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c0);

}
SamplerState DepthSurface_s : register(s2);
SamplerState g_PointClampSampler_NG_s : register(s3);
SamplerState g_LinearClampSampler_NG_s : register(s4);
SamplerState g_AmbientCubeTexture_s : register(s13);
SamplerComparisonState g_ShadowSampler_s : register(s15);
Texture2D<float4> g_Normals_NG : register(t1);
Texture2D<float4> DepthSurface : register(t2);
Texture2D<float4> g_SSAOTexture_NG : register(t3);
Texture2D<float4> g_WorldAOTexture_NG : register(t4);
TextureCube<float4> g_AmbientCubeTexture : register(t13);
Texture2D<float4> g_ShadowTexture : register(t15);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.xy = r0.xy * g_ViewportScaleOffset.xy + g_ViewportScaleOffset.zw;
  r1.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.xy, 0.000000000e+000).xyzw;
  r0.z = g_ReverseProjectionParams.z + r1.x;
  r0.z = g_ReverseProjectionParams.w / r0.z;
  r1.xyz = v2.xyz * r0.zzz + v3.xyz;

//Mike_ar69 - Stereo Shift
float4 stereoParams = StereoParams.Load(0);
float4 r21, r22;
r21.xyz = r1.xyz;
r21.w = 1.000000000e+000;
r22.x = dot(r21.xyzw, g_WorldToView._m00_m10_m20_m30);
r22.y = dot(r21.xyzw, g_WorldToView._m01_m11_m21_m31);
r22.z = dot(r21.xyzw, g_WorldToView._m02_m12_m22_m32);
r22.w = dot(r21.xyzw, g_WorldToView._m03_m13_m23_m33);
r22.x +=  stereoParams.x * (-r22.z - stereoParams.y ) * g_ReverseProjectionParams.x;
r21.x = dot(r22.xyzw, g_ViewToWorld._m00_m10_m20_m30);
r21.y = dot(r22.xyzw, g_ViewToWorld._m01_m11_m21_m31);
r21.z = dot(r22.xyzw, g_ViewToWorld._m02_m12_m22_m32);
r1.xyz = r21.xyz;


  r2.xyzw = g_Normals_NG.Sample(g_PointClampSampler_NG_s, r0.xy).xyzw;
  r0.xyzw = g_SSAOTexture_NG.Sample(g_LinearClampSampler_NG_s, r0.xy).xyzw;
  r0.yzw = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r2.xyz;
  r0.yzw = r0.yzw + r0.yzw;
  r2.x = 0 != g_Shadows.m_ShadowContrast.y;
  r2.y = 0 != g_Shadows.m_ShadowContrast.z;
  r2.z = 0 != g_Shadows.m_ShadowContrast.w;
  if (r2.x != 0) {
  r3.xyz = r0.yzw * g_WorldAOParameters.xxy + r1.xyz;
  r3.xy = r3.xy * g_WorldLightmapUVParameters.zw + g_WorldLightmapUVParameters.xy;
  r4.xyzw = g_WorldAOTexture_NG.SampleLevel(g_LinearClampSampler_NG_s, r3.xy, 0.000000000e+000).xyzw;
  r2.w = r4.x * g_WorldAORangeParameters.z + g_WorldAORangeParameters.w;
  r3.x = g_WorldAORangeParameters.x + r3.z;
  r2.w = r3.x + -r2.w;
  r3.x = 1.000000e+000 / g_WorldAORangeParameters.x;
  r2.w = saturate(r3.x * r2.w);
  r2.w = r2.w * r2.w;
  r2.w = max(r2.w, g_WorldAORangeParameters.y);
  } else {
  r2.w = 1.000000000e+000;
  }
  r3.xyzw = g_AmbientCubeTexture.SampleLevel(g_AmbientCubeTexture_s, r0.yzw, 0.000000000e+000).xyzw;
  r0.yzw = r3.xyz * r2.www;
  o0.xyz = r0.yzw * r0.xxx;
  r1.w = 1.000000000e+000;
  r0.y = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m00_m10_m20_m30);
  r0.z = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m01_m11_m21_m31);
  r0.w = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m02_m12_m22_m32);
  r3.xyz = r0.yzw * g_Shadows.m_ScalesX.xyz + g_Shadows.m_OffsetsX.xyz;
  r4.xyz = r0.yzw * g_Shadows.m_ScalesY.xyz + g_Shadows.m_OffsetsY.xyz;
  r5.xyz = r0.yzw * g_Shadows.m_ScalesZ.xyz + g_Shadows.m_OffsetsZ.xyz;
  r0.xyz = r0.yzw * g_Shadows.m_ScalesW.xyz + g_Shadows.m_OffsetsW.xyz;
  r6.x = abs(r3.x) < g_Shadows.m_CascadesRangesMax.x;
  r6.y = abs(r3.y) < g_Shadows.m_CascadesRangesMax.x;
  r0.w = r6.y ? r6.x : 0;
  r6.x = abs(r4.x) < g_Shadows.m_CascadesRangesMax.y;
  r6.y = abs(r4.y) < g_Shadows.m_CascadesRangesMax.y;
  r1.w = r6.y ? r6.x : 0;
  r6.x = abs(r5.x) < g_Shadows.m_CascadesRangesMax.z;
  r6.y = abs(r5.y) < g_Shadows.m_CascadesRangesMax.z;
  r2.w = r6.y ? r6.x : 0;
  r6.x = abs(r0.x) < g_Shadows.m_CascadesRangesMax.w;
  r6.y = abs(r0.y) < g_Shadows.m_CascadesRangesMax.w;
  r3.w = r6.y ? r6.x : 0;
  r6.x = r1.w ? r4.x : r3.x;
  r6.y = r1.w ? r4.y : r3.y;
  r6.z = r1.w ? r4.z : r3.z;
  r6.x = r2.w ? r5.x : r6.x;
  r6.y = r2.w ? r5.y : r6.y;
  r6.z = r2.w ? r5.z : r6.z;
  r0.x = r3.w ? r0.x : r6.x;
  r0.y = r3.w ? r0.y : r6.y;
  r0.z = r3.w ? r0.z : r6.z;
  r4.w = r1.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r4.w = r2.w ? g_Shadows.m_OffsetsZ.w : r4.w;
  r4.w = r3.w ? g_Shadows.m_OffsetsW.w : r4.w;
  r6.xyzw = g_Shadows.m_CascadesRangesMax.yyzz + -abs(-r0.xyxy);
  r6.x = r1.w ? r6.x : 10;
  r6.y = r1.w ? r6.y : 10;
  r6.x = r2.w ? r6.z : r6.x;
  r6.y = r2.w ? r6.w : r6.y;
  r6.zw = g_Shadows.m_CascadesRangesMax.ww + -abs(-r0.xy);
  r6.x = r3.w ? r6.z : r6.x;
  r6.y = r3.w ? r6.w : r6.y;
  r6.xy = saturate(-r6.xy * float2(1.000000e+001,1.000000e+001) + float2(1.000000e+000,1.000000e+000));
  r5.w = max(r6.y, r6.x);
  r0.w = (int)r0.w & (int)r1.w;
  r0.w = (int)r0.w & 0x3f800000;
  r6.x = (int)r1.w & 0x3f800000;
  r0.w = r2.w ? r6.x : r0.w;
  r6.x = (int)r2.w & 0x3f800000;
  r0.w = r3.w ? r6.x : r0.w;
  r0.w = r5.w * r0.w;
  r0.w = (int)r0.w & (int)r2.x;
  r6.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r0.xyz;
  r6.x = r6.y * g_Shadows.m_ScalesX.w + r4.w;
  r7.xyzw = r6.zxxx / g_Shadows.m_ShadowMapSize.yxxx;
  r7.xyzw = float4(-2.500000e+000,-2.500000e+000,-2.500000e+000,-2.500000e+000) + r7.xyzw;
  r8.x = floor(r7.w);
  r8.y = floor(r7.x);
  r8.z = floor(r7.w);
  r8.w = floor(r7.x);
  r7.xyzw = -r8.wzzz + r7.xyzw;
  r8.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r8.xyzw;
  if (r2.x != 0) {
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.000000e-001,1.500000e+000,1.500000e+000,1.500000e+000) + r8.zwzw;
  r0.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r0.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(1.500000e+000,5.000000e-001,5.000000e-001,5.000000e-001) + r8.zwzw;
  r0.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r4.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(2.500000e+000,1.500000e+000,3.500000e+000,1.500000e+000) + r8.zwzw;
  r5.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(3.500000e+000,5.000000e-001,2.500000e+000,5.000000e-001) + r8.zwzw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(4.500000e+000,1.500000e+000,5.500000e+000,1.500000e+000) + r8.zwzw;
  r9.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r9.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r10.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.500000e+000,5.000000e-001,4.500000e+000,5.000000e-001) + r8.zwzw;
  r9.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r6.w).x;
  r9.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r6.w).x;
  r10.xyzw = float4(5.355339e-001,1.535534e+000,1.000000e+000,1.000000e+000) + -r7.wwxw;
  r11.xy = saturate(r10.xy + -r7.xx);
  r11.x = r11.x * r11.x;
  r4.w = r11.x * r4.w;
  r11.xz = min(r10.zw, r11.yy);
  r10.xy = saturate(r10.xy);
  r12.xy = float2(1.000000e+000,1.000000e+000) + -r10.xy;
  r11.w = min(r11.x, r12.x);
  r12.x = -r11.w * 5.000000000e-001 + r11.x;
  r11.w = r12.x * r11.w;
  r10.x = r11.x * r10.x + r11.w;
  r11.x = saturate(5.355339050e-001 + -r7.x);
  r11.w = 1.000000000e+000 + -r11.x;
  r12.x = min(r11.w, r11.z);
  r12.z = -r12.x * 5.000000000e-001 + r11.z;
  r12.x = r12.z * r12.x;
  r11.z = r11.z * r11.x + r12.x;
  r12.x = -r7.x + -r7.w;
  r12.x = saturate(2.535533905e+000 + r12.x);
  r12.z = 1.000000000e+000 + -r11.y;
  r12.z = min(r12.z, r12.x);
  r12.w = -r12.z * 5.000000000e-001 + r12.x;
  r12.z = r12.w * r12.z;
  r11.y = r12.x * r11.y + r12.z;
  r0.z = r10.x * r0.z;
  r0.z = r4.w * 5.000000000e-001 + r0.z;
  r0.x = r0.x * r11.z + r0.z;
  r0.x = r0.y * r11.y + r0.x;
  r0.y = min(r10.z, r12.y);
  r0.z = -r0.y * 5.000000000e-001 + r10.z;
  r0.y = r0.z * r0.y;
  r0.y = r10.z * r10.y + r0.y;
  r0.z = saturate(5.355339050e-001 + r7.w);
  r4.w = 1.000000000e+000 + -r0.z;
  r4.w = min(r4.w, r10.z);
  r10.x = -r4.w * 5.000000000e-001 + r10.z;
  r4.w = r10.x * r4.w;
  r0.z = r10.z * r0.z + r4.w;
  r4.w = r7.w + r7.x;
  r4.w = saturate(-1.535533905e+000 + r4.w);
  r4.w = r4.w * r4.w;
  r4.w = -r4.w * 5.000000000e-001 + 1.000000000e+000;
  r10.x = r10.w + r7.x;
  r10.x = saturate(-1.535533905e+000 + r10.x);
  r10.x = r10.x * r10.x;
  r10.x = -r10.x * 5.000000000e-001 + 1.000000000e+000;
  r0.x = r6.z * r0.y + r0.x;
  r0.x = r6.y * r0.z + r0.x;
  r0.x = r5.w * r4.w + r0.x;
  r0.x = r6.x * r10.x + r0.x;
  r0.yz = float2(5.355339e-001,1.000000e+000) + -r10.ww;
  r4.w = saturate(r0.y + -r7.x);
  r4.w = r4.w * r4.w;
  r4.w = r4.w * r9.z;
  r5.w = -r10.w + -r7.x;
  r6.xy = saturate(float2(1.535534e+000,2.535534e+000) + r5.ww);
  r5.w = min(r6.x, r10.z);
  r0.y = saturate(r0.y);
  r6.z = 1.000000000e+000 + -r0.y;
  r6.z = min(r5.w, r6.z);
  r9.z = -r6.z * 5.000000000e-001 + r5.w;
  r6.z = r9.z * r6.z;
  r0.y = r5.w * r0.y + r6.z;
  r0.z = min(r0.z, r6.x);
  r5.w = min(r11.w, r0.z);
  r6.z = -r5.w * 5.000000000e-001 + r0.z;
  r5.w = r6.z * r5.w;
  r0.z = r0.z * r11.x + r5.w;
  r5.w = 1.000000000e+000 + -r6.x;
  r5.w = min(r5.w, r6.y);
  r6.z = -r5.w * 5.000000000e-001 + r6.y;
  r5.w = r6.z * r5.w;
  r5.w = r6.y * r6.x + r5.w;
  r0.x = r9.w * r0.y + r0.x;
  r0.x = r4.w * 5.000000000e-001 + r0.x;
  r0.x = r9.x * r5.w + r0.x;
  r0.x = r9.y * r0.z + r0.x;
  } else {
  r0.x = 0.000000000e+000;
  }
  if (r2.y != 0) {
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.000000e-001,3.500000e+000,1.500000e+000,3.500000e+000) + r8.zwzw;
  r0.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r0.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(1.500000e+000,2.500000e+000,5.000000e-001,2.500000e+000) + r8.zwzw;
  r4.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r5.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(2.500000e+000,3.500000e+000,3.500000e+000,3.500000e+000) + r8.zwzw;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(3.500000e+000,2.500000e+000,2.500000e+000,2.500000e+000) + r8.zwzw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r9.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r10.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(4.500000e+000,3.500000e+000,5.500000e+000,3.500000e+000) + r8.zwzw;
  r9.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r6.w).x;
  r9.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r6.w).x;
  r10.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.500000e+000,2.500000e+000,4.500000e+000,2.500000e+000) + r8.zwzw;
  r9.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r6.w).x;
  r10.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r6.w).x;
  r10.yzw = float3(1.535534e+000,1.000000e+000,1.000000e+000) + -r7.xwx;
  r10.y = saturate(r10.y);
  r11.x = 1.000000000e+000 + -r10.y;
  r11.y = min(r10.z, r11.x);
  r11.z = -r11.y * 5.000000000e-001 + r10.z;
  r11.y = r11.z * r11.y;
  r11.y = r10.z * r10.y + r11.y;
  r11.z = saturate(5.355339050e-001 + r7.x);
  r11.w = 1.000000000e+000 + -r11.z;
  r12.x = min(r10.z, r11.w);
  r12.y = -r12.x * 5.000000000e-001 + r10.z;
  r12.x = r12.y * r12.x;
  r12.x = r10.z * r11.z + r12.x;
  r12.y = r7.x + r7.w;
  r12.y = saturate(-1.535533905e+000 + r12.y);
  r12.y = r12.y * r12.y;
  r12.y = -r12.y * 5.000000000e-001 + 1.000000000e+000;
  r12.zw = r10.wz + r7.wx;
  r12.zw = saturate(float2(-1.535534e+000,-1.535534e+000) + r12.zw);
  r12.zw = r12.zw * r12.zw;
  r12.zw = -r12.zw * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r5.w = r5.w * r11.y + r0.x;
  r4.w = r4.w * r12.y + r5.w;
  r0.y = r0.y * r12.x + r4.w;
  r0.y = r0.z * r12.z + r0.y;
  r0.y = r0.y + r9.x;
  r0.y = r0.y + r6.z;
  r0.y = r0.y + r6.x;
  r0.y = r0.y + r6.y;
  r0.z = 1.000000000e+000 + -r10.z;
  r4.w = min(r11.x, r0.z);
  r5.w = -r4.w * 5.000000000e-001 + r0.z;
  r4.w = r5.w * r4.w;
  r4.w = r0.z * r10.y + r4.w;
  r5.w = min(r11.w, r0.z);
  r6.x = -r5.w * 5.000000000e-001 + r0.z;
  r5.w = r6.x * r5.w;
  r0.z = r0.z * r11.z + r5.w;
  r5.w = r10.w + r10.z;
  r5.w = saturate(-1.535533905e+000 + r5.w);
  r5.w = r5.w * r5.w;
  r5.w = -r5.w * 5.000000000e-001 + 1.000000000e+000;
  r0.y = r10.x * r12.w + r0.y;
  r0.y = r9.w * r4.w + r0.y;
  r0.y = r9.y * r5.w + r0.y;
  r0.x = r9.z * r0.z + r0.y;
  }
  if (r2.z != 0) {
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.000000e-001,5.500000e+000,1.500000e+000,5.500000e+000) + r8.zwzw;
  r0.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r0.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(1.500000e+000,4.500000e+000,5.000000e-001,4.500000e+000) + r8.zwzw;
  r4.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r5.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(2.500000e+000,5.500000e+000,3.500000e+000,5.500000e+000) + r8.zwzw;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r9.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(3.500000e+000,4.500000e+000,2.500000e+000,4.500000e+000) + r8.zwzw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r6.w).x;
  r9.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.zw, r6.w).x;
  r10.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(4.500000e+000,5.500000e+000,5.500000e+000,5.500000e+000) + r8.zwzw;
  r9.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r6.w).x;
  r9.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r6.w).x;
  r8.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.500000e+000,4.500000e+000,4.500000e+000,4.500000e+000) + r8.xyzw;
  r8.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r6.w).x;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.zw, r6.w).x;
  r10.xyzw = float4(5.355339e-001,1.535534e+000,1.000000e+000,1.000000e+000) + -r7.yzxw;
  r7.xy = saturate(r10.xy + -r10.zz);
  r7.x = r7.x * r7.x;
  r0.y = r7.x * r0.y;
  r11.xyzw = float4(1.000000e+000,5.355339e-001,5.355339e-001,1.000000e+000) + -r10.zzww;
  r7.x = min(r7.y, r11.x);
  r10.xy = saturate(r10.xy);
  r8.yz = float2(1.000000e+000,1.000000e+000) + -r10.xy;
  r7.z = min(r7.x, r8.y);
  r8.y = -r7.z * 5.000000000e-001 + r7.x;
  r7.z = r8.y * r7.z;
  r7.x = r7.x * r10.x + r7.z;
  r7.z = min(r7.y, r10.w);
  r8.yw = saturate(r11.zy);
  r12.xy = float2(1.000000e+000,1.000000e+000) + -r8.yw;
  r9.w = min(r7.z, r12.y);
  r10.x = -r9.w * 5.000000000e-001 + r7.z;
  r9.w = r10.x * r9.w;
  r7.z = r7.z * r8.w + r9.w;
  r9.w = -r10.z + -r7.w;
  r9.w = saturate(2.535533905e+000 + r9.w);
  r10.x = 1.000000000e+000 + -r7.y;
  r10.x = min(r9.w, r10.x);
  r11.y = -r10.x * 5.000000000e-001 + r9.w;
  r10.x = r11.y * r10.x;
  r7.y = r9.w * r7.y + r10.x;
  r5.w = r5.w * r7.z + r0.x;
  r4.w = r4.w * r7.y + r5.w;
  r0.y = r0.y * 5.000000000e-001 + r4.w;
  r0.y = r0.z * r7.x + r0.y;
  r0.z = min(r8.z, r11.x);
  r4.w = -r0.z * 5.000000000e-001 + r11.x;
  r0.z = r4.w * r0.z;
  r0.z = r11.x * r10.y + r0.z;
  r4.w = saturate(5.355339050e-001 + r7.w);
  r5.w = 1.000000000e+000 + -r4.w;
  r5.w = min(r5.w, r11.x);
  r7.x = -r5.w * 5.000000000e-001 + r11.x;
  r5.w = r7.x * r5.w;
  r4.w = r11.x * r4.w + r5.w;
  r5.w = r10.z + r7.w;
  r5.w = saturate(-1.535533905e+000 + r5.w);
  r5.w = r5.w * r5.w;
  r5.w = -r5.w * 5.000000000e-001 + 1.000000000e+000;
  r7.x = r10.w + r10.z;
  r7.x = saturate(-1.535533905e+000 + r7.x);
  r7.x = r7.x * r7.x;
  r7.x = -r7.x * 5.000000000e-001 + 1.000000000e+000;
  r0.y = r9.x * r5.w + r0.y;
  r0.y = r6.z * r7.x + r0.y;
  r0.y = r6.x * r0.z + r0.y;
  r0.y = r6.y * r4.w + r0.y;
  r0.z = saturate(r11.z + -r10.z);
  r0.z = r0.z * r0.z;
  r0.z = r0.z * r9.z;
  r4.w = -r10.z + -r10.w;
  r6.xy = saturate(float2(1.535534e+000,2.535534e+000) + r4.ww);
  r7.xy = min(r6.xx, r11.xw);
  r7.zw = min(r12.xy, r7.xy);
  r9.xz = -r7.zw * float2(5.000000e-001,5.000000e-001) + r7.xy;
  r7.zw = r9.xz * r7.zw;
  r7.xy = r7.xy * r8.yw + r7.zw;
  r4.w = 1.000000000e+000 + -r6.x;
  r4.w = min(r4.w, r6.y);
  r5.w = -r4.w * 5.000000000e-001 + r6.y;
  r4.w = r5.w * r4.w;
  r4.w = r6.y * r6.x + r4.w;
  r0.y = r6.w * r4.w + r0.y;
  r0.y = r8.x * r7.y + r0.y;
  r0.y = r9.y * r7.x + r0.y;
  r0.x = r0.z * 5.000000000e-001 + r0.y;
  }
  r0.x = g_Shadows.m_ShadowContrast.x * r0.x;
  r0.y = -1.000000000e+000 + g_Shadows.m_ShadowContrast.x;
  r0.y = 5.000000000e-001 * r0.y;
  r0.x = saturate(r0.x * 4.828426987e-002 + -r0.y);
  r0.y = 0.000000000e+000 < r0.w;
  if (r0.y != 0) {
  r3.x = r2.w ? r4.x : r3.x;
  r3.y = r2.w ? r4.y : r3.y;
  r3.z = r2.w ? r4.z : r3.z;
  r3.x = r3.w ? r5.x : r3.x;
  r3.y = r3.w ? r5.y : r3.y;
  r3.z = r3.w ? r5.z : r3.z;
  r0.y = r2.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r0.y = r3.w ? g_Shadows.m_OffsetsZ.w : r0.y;
  r4.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r3.xyz;
  r4.x = r4.y * g_Shadows.m_ScalesX.w + r0.y;
  r5.xyzw = r4.zxxx / g_Shadows.m_ShadowMapSize.yxxx;
  r5.xyzw = float4(-2.500000e+000,-2.500000e+000,-2.500000e+000,-2.500000e+000) + r5.xyzw;
  r6.x = floor(r5.w);
  r6.y = floor(r5.x);
  r6.z = floor(r5.w);
  r6.w = floor(r5.x);
  r5.xyzw = -r6.wzzz + r5.xyzw;
  r6.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r6.xyzw;
  if (r2.x != 0) {
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.000000e-001,1.500000e+000,1.500000e+000,1.500000e+000) + r6.zwzw;
  r0.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r0.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(1.500000e+000,5.000000e-001,5.000000e-001,5.000000e-001) + r6.zwzw;
  r2.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r3.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(2.500000e+000,1.500000e+000,3.500000e+000,1.500000e+000) + r6.zwzw;
  r3.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r3.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(3.500000e+000,5.000000e-001,2.500000e+000,5.000000e-001) + r6.zwzw;
  r4.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r4.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(4.500000e+000,1.500000e+000,5.500000e+000,1.500000e+000) + r6.zwzw;
  r4.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r8.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.500000e+000,5.000000e-001,4.500000e+000,5.000000e-001) + r6.zwzw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r4.w).x;
  r7.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.zw, r4.w).x;
  r8.xyzw = float4(5.355339e-001,1.535534e+000,1.000000e+000,1.000000e+000) + -r5.wwxw;
  r9.xy = saturate(r8.xy + -r5.xx);
  r7.w = r9.x * r9.x;
  r3.x = r7.w * r3.x;
  r9.xz = min(r8.zw, r9.yy);
  r8.xy = saturate(r8.xy);
  r10.xy = float2(1.000000e+000,1.000000e+000) + -r8.xy;
  r7.w = min(r9.x, r10.x);
  r9.w = -r7.w * 5.000000000e-001 + r9.x;
  r7.w = r9.w * r7.w;
  r7.w = r9.x * r8.x + r7.w;
  r8.x = saturate(5.355339050e-001 + -r5.x);
  r9.x = 1.000000000e+000 + -r8.x;
  r9.w = min(r9.x, r9.z);
  r10.x = -r9.w * 5.000000000e-001 + r9.z;
  r9.w = r10.x * r9.w;
  r9.z = r9.z * r8.x + r9.w;
  r9.w = -r5.x + -r5.w;
  r9.w = saturate(2.535533905e+000 + r9.w);
  r10.x = 1.000000000e+000 + -r9.y;
  r10.x = min(r9.w, r10.x);
  r10.z = -r10.x * 5.000000000e-001 + r9.w;
  r10.x = r10.z * r10.x;
  r9.y = r9.w * r9.y + r10.x;
  r2.x = r7.w * r2.x;
  r2.x = r3.x * 5.000000000e-001 + r2.x;
  r0.y = r0.y * r9.z + r2.x;
  r0.y = r0.z * r9.y + r0.y;
  r0.z = min(r8.z, r10.y);
  r2.x = -r0.z * 5.000000000e-001 + r8.z;
  r0.z = r2.x * r0.z;
  r0.z = r8.z * r8.y + r0.z;
  r2.x = saturate(5.355339050e-001 + r5.w);
  r3.x = 1.000000000e+000 + -r2.x;
  r3.x = min(r3.x, r8.z);
  r7.w = -r3.x * 5.000000000e-001 + r8.z;
  r3.x = r7.w * r3.x;
  r2.x = r8.z * r2.x + r3.x;
  r3.x = r5.w + r5.x;
  r3.x = saturate(-1.535533905e+000 + r3.x);
  r3.x = r3.x * r3.x;
  r3.x = -r3.x * 5.000000000e-001 + 1.000000000e+000;
  r7.w = r8.w + r5.x;
  r7.w = saturate(-1.535533905e+000 + r7.w);
  r7.w = r7.w * r7.w;
  r7.w = -r7.w * 5.000000000e-001 + 1.000000000e+000;
  r0.y = r4.y * r0.z + r0.y;
  r0.y = r4.x * r2.x + r0.y;
  r0.y = r3.y * r3.x + r0.y;
  r0.y = r3.z * r7.w + r0.y;
  r3.xy = float2(5.355339e-001,1.000000e+000) + -r8.ww;
  r0.z = saturate(r3.x + -r5.x);
  r0.z = r0.z * r0.z;
  r0.z = r0.z * r7.y;
  r2.x = -r8.w + -r5.x;
  r4.xy = saturate(float2(1.535534e+000,2.535534e+000) + r2.xx);
  r2.x = min(r4.x, r8.z);
  r3.x = saturate(r3.x);
  r3.z = 1.000000000e+000 + -r3.x;
  r3.z = min(r2.x, r3.z);
  r7.y = -r3.z * 5.000000000e-001 + r2.x;
  r3.z = r7.y * r3.z;
  r2.x = r2.x * r3.x + r3.z;
  r3.x = min(r3.y, r4.x);
  r3.y = min(r9.x, r3.x);
  r3.z = -r3.y * 5.000000000e-001 + r3.x;
  r3.y = r3.z * r3.y;
  r3.x = r3.x * r8.x + r3.y;
  r3.y = 1.000000000e+000 + -r4.x;
  r3.y = min(r3.y, r4.y);
  r3.z = -r3.y * 5.000000000e-001 + r4.y;
  r3.y = r3.z * r3.y;
  r3.y = r4.y * r4.x + r3.y;
  r0.y = r7.z * r2.x + r0.y;
  r0.y = r0.z * 5.000000000e-001 + r0.y;
  r0.y = r4.z * r3.y + r0.y;
  r0.y = r7.x * r3.x + r0.y;
  } else {
  r0.y = 0.000000000e+000;
  }
  if (r2.y != 0) {
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.000000e-001,3.500000e+000,1.500000e+000,3.500000e+000) + r6.zwzw;
  r0.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r2.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(1.500000e+000,2.500000e+000,5.000000e-001,2.500000e+000) + r6.zwzw;
  r2.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r3.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(2.500000e+000,3.500000e+000,3.500000e+000,3.500000e+000) + r6.zwzw;
  r3.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r3.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(3.500000e+000,2.500000e+000,2.500000e+000,2.500000e+000) + r6.zwzw;
  r4.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r4.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(4.500000e+000,3.500000e+000,5.500000e+000,3.500000e+000) + r6.zwzw;
  r4.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r8.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.500000e+000,2.500000e+000,4.500000e+000,2.500000e+000) + r6.zwzw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r4.w).x;
  r7.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.zw, r4.w).x;
  r8.xyz = float3(1.535534e+000,1.000000e+000,1.000000e+000) + -r5.xwx;
  r8.x = saturate(r8.x);
  r7.w = 1.000000000e+000 + -r8.x;
  r8.w = min(r7.w, r8.y);
  r9.x = -r8.w * 5.000000000e-001 + r8.y;
  r8.w = r9.x * r8.w;
  r8.w = r8.y * r8.x + r8.w;
  r9.x = saturate(5.355339050e-001 + r5.x);
  r9.y = 1.000000000e+000 + -r9.x;
  r9.z = min(r8.y, r9.y);
  r9.w = -r9.z * 5.000000000e-001 + r8.y;
  r9.z = r9.w * r9.z;
  r9.z = r8.y * r9.x + r9.z;
  r9.w = r5.x + r5.w;
  r9.w = saturate(-1.535533905e+000 + r9.w);
  r9.w = r9.w * r9.w;
  r9.w = -r9.w * 5.000000000e-001 + 1.000000000e+000;
  r10.xy = r8.zy + r5.wx;
  r10.xy = saturate(float2(-1.535534e+000,-1.535534e+000) + r10.xy);
  r10.xy = r10.xy * r10.xy;
  r10.xy = -r10.xy * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r3.x = r3.x * r8.w + r0.y;
  r2.y = r2.y * r9.w + r3.x;
  r0.z = r0.z * r9.z + r2.y;
  r0.z = r2.x * r10.x + r0.z;
  r0.z = r0.z + r4.y;
  r0.z = r0.z + r4.x;
  r0.z = r0.z + r3.y;
  r0.z = r0.z + r3.z;
  r2.x = 1.000000000e+000 + -r8.y;
  r2.y = min(r7.w, r2.x);
  r3.x = -r2.y * 5.000000000e-001 + r2.x;
  r2.y = r3.x * r2.y;
  r2.y = r2.x * r8.x + r2.y;
  r3.x = min(r9.y, r2.x);
  r3.y = -r3.x * 5.000000000e-001 + r2.x;
  r3.x = r3.y * r3.x;
  r2.x = r2.x * r9.x + r3.x;
  r3.x = r8.z + r8.y;
  r3.x = saturate(-1.535533905e+000 + r3.x);
  r3.x = r3.x * r3.x;
  r3.x = -r3.x * 5.000000000e-001 + 1.000000000e+000;
  r0.z = r7.z * r10.y + r0.z;
  r0.z = r7.y * r2.y + r0.z;
  r0.z = r4.z * r3.x + r0.z;
  r0.y = r7.x * r2.x + r0.z;
  }
  if (r2.z != 0) {
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.000000e-001,5.500000e+000,1.500000e+000,5.500000e+000) + r6.zwzw;
  r0.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r2.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(1.500000e+000,4.500000e+000,5.000000e-001,4.500000e+000) + r6.zwzw;
  r2.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r2.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(2.500000e+000,5.500000e+000,3.500000e+000,5.500000e+000) + r6.zwzw;
  r3.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r3.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(3.500000e+000,4.500000e+000,2.500000e+000,4.500000e+000) + r6.zwzw;
  r3.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r4.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r7.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(4.500000e+000,5.500000e+000,5.500000e+000,5.500000e+000) + r6.zwzw;
  r4.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r4.w).x;
  r4.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.zw, r4.w).x;
  r6.xyzw = g_Shadows.m_ShadowMapSize.xyxy * float4(5.500000e+000,4.500000e+000,4.500000e+000,4.500000e+000) + r6.xyzw;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r4.w).x;
  r4.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.zw, r4.w).x;
  r7.xyzw = float4(5.355339e-001,1.535534e+000,1.000000e+000,1.000000e+000) + -r5.yzxw;
  r5.xy = saturate(r7.xy + -r7.zz);
  r5.x = r5.x * r5.x;
  r0.z = r5.x * r0.z;
  r8.xyzw = float4(1.000000e+000,5.355339e-001,5.355339e-001,1.000000e+000) + -r7.zzww;
  r5.x = min(r5.y, r8.x);
  r7.xy = saturate(r7.xy);
  r6.yz = float2(1.000000e+000,1.000000e+000) + -r7.xy;
  r5.z = min(r5.x, r6.y);
  r6.y = -r5.z * 5.000000000e-001 + r5.x;
  r5.z = r6.y * r5.z;
  r5.x = r5.x * r7.x + r5.z;
  r5.z = min(r5.y, r7.w);
  r6.yw = saturate(r8.zy);
  r9.xy = float2(1.000000e+000,1.000000e+000) + -r6.yw;
  r7.x = min(r5.z, r9.y);
  r8.y = -r7.x * 5.000000000e-001 + r5.z;
  r7.x = r8.y * r7.x;
  r5.z = r5.z * r6.w + r7.x;
  r7.x = -r7.z + -r5.w;
  r7.x = saturate(2.535533905e+000 + r7.x);
  r8.y = 1.000000000e+000 + -r5.y;
  r8.y = min(r7.x, r8.y);
  r9.z = -r8.y * 5.000000000e-001 + r7.x;
  r8.y = r9.z * r8.y;
  r5.y = r7.x * r5.y + r8.y;
  r2.z = r2.z * r5.z + r0.y;
  r2.y = r2.y * r5.y + r2.z;
  r0.z = r0.z * 5.000000000e-001 + r2.y;
  r0.z = r2.x * r5.x + r0.z;
  r2.x = min(r6.z, r8.x);
  r2.y = -r2.x * 5.000000000e-001 + r8.x;
  r2.x = r2.y * r2.x;
  r2.x = r8.x * r7.y + r2.x;
  r2.y = saturate(5.355339050e-001 + r5.w);
  r2.z = 1.000000000e+000 + -r2.y;
  r2.z = min(r2.z, r8.x);
  r5.x = -r2.z * 5.000000000e-001 + r8.x;
  r2.z = r5.x * r2.z;
  r2.y = r8.x * r2.y + r2.z;
  r2.z = r7.z + r5.w;
  r2.z = saturate(-1.535533905e+000 + r2.z);
  r2.z = r2.z * r2.z;
  r2.z = -r2.z * 5.000000000e-001 + 1.000000000e+000;
  r5.x = r7.w + r7.z;
  r5.x = saturate(-1.535533905e+000 + r5.x);
  r5.x = r5.x * r5.x;
  r5.x = -r5.x * 5.000000000e-001 + 1.000000000e+000;
  r0.z = r4.x * r2.z + r0.z;
  r0.z = r3.z * r5.x + r0.z;
  r0.z = r3.x * r2.x + r0.z;
  r0.z = r3.y * r2.y + r0.z;
  r2.x = saturate(r8.z + -r7.z);
  r2.x = r2.x * r2.x;
  r2.x = r2.x * r4.z;
  r2.y = -r7.z + -r7.w;
  r2.yz = saturate(float2(1.535534e+000,2.535534e+000) + r2.yy);
  r3.xy = min(r2.yy, r8.xw);
  r4.xz = min(r9.xy, r3.xy);
  r5.xy = -r4.xz * float2(5.000000e-001,5.000000e-001) + r3.xy;
  r4.xz = r5.xy * r4.xz;
  r3.xy = r3.xy * r6.yw + r4.xz;
  r3.z = 1.000000000e+000 + -r2.y;
  r3.z = min(r2.z, r3.z);
  r4.x = -r3.z * 5.000000000e-001 + r2.z;
  r3.z = r4.x * r3.z;
  r2.y = r2.z * r2.y + r3.z;
  r0.z = r4.w * r2.y + r0.z;
  r0.z = r6.x * r3.y + r0.z;
  r0.z = r4.y * r3.x + r0.z;
  r0.y = r2.x * 5.000000000e-001 + r0.z;
  }
  r0.y = 4.828426987e-002 * r0.y;
  r0.z = 1.000000000e+000 + -r0.w;
  r1.w = (int)r1.w & (int)g_Shadows.m_NoiseScale.y;
  r1.w = r2.w ? g_Shadows.m_NoiseScale.z : r1.w;
  r1.w = r3.w ? g_Shadows.m_NoiseScale.w : r1.w;
  r0.z = r0.z * r1.w + 1.000000000e+000;
  r1.w = g_Shadows.m_ShadowContrast.x * r0.z;
  r0.z = g_Shadows.m_ShadowContrast.x * r0.z + -1.000000000e+000;
  r0.z = 5.000000000e-001 * r0.z;
  r0.y = saturate(r0.y * r1.w + -r0.z);
  r0.y = r0.y + -r0.x;
  r0.x = r0.w * r0.y + r0.x;
  }
  r0.yzw = -g_EyePosition.xyz + r1.xyz;
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = saturate(r0.y * g_Shadows.m_FadeParams.x + g_Shadows.m_FadeParams.y);
  o0.w = saturate(r0.x + r0.y);
  return;
}
