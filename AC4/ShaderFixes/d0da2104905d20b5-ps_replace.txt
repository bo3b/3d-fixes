
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float ZMultiplier_1 : packoffset(c128);
  float ZBias_2 : packoffset(c129);
  float DepthMultiplier_3 : packoffset(c130);
  float DepthBias_4 : packoffset(c131);
  float4 PuckColor_5 : packoffset(c132);
  bool g_HasSunOther : packoffset(c133);
}
SamplerState DepthSurface_s : register(s8);
SamplerState g_AmbientCubeTexture_s : register(s13);
Texture2D<float4> DepthSurface : register(t8);
TextureCube<float4> g_AmbientCubeTexture : register(t13);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.x = v2.w < 0.000000000e+000;
  if (r0.x != 0) discard;
  r0.x = dot(v5.xyz, v5.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v5.xyz * r0.xxx;
  r1.x = dot(r0.xyz, float3(-4.082480e-001,-7.071070e-001,5.773503e-001));
  r1.y = dot(r0.xzy, float3(-4.082480e-001,5.773503e-001,7.071070e-001));
  r1.z = dot(r0.xz, float2(8.164970e-001,5.773503e-001));
  r1.w = r0.z;
  r1.xyzw = r1.xyzw * float4(1.000000e+000,1.000000e+000,1.000000e+000,-5.000000e-001) + float4(0.000000e+000,0.000000e+000,0.000000e+000,5.000000e-001);
  r2.xyz = saturate(r1.xyz);
  r1.xyz = r2.xyz * r1.xyz;
  r2.x = dot(r1.xyzw, g_LightingIrradianceCoeffsR.xyzw);
  r2.y = dot(r1.xyzw, g_LightingIrradianceCoeffsG.xyzw);
  r2.z = dot(r1.xyzw, g_LightingIrradianceCoeffsB.xyzw);
  r1.xyzw = g_AmbientCubeTexture.SampleLevel(g_AmbientCubeTexture_s, r0.xyz, 0.000000000e+000).xyzw;
  r1.xyz = r1.xyz + r2.xyz;
  r1.xyz = r1.xyz * PuckColor_5.xyz + PuckColor_5.xyz;
  o0.xyz = g_SelectionOverlayCol.xyz + r1.xyz;
  r1.xyz = v2.xyz;
  r1.w = 0.000000000e+000;
  r1.xyzw = g_EyePosition.xyzw + -r1.xyzw;
  r0.w = dot(r1.xyzw, r1.xyzw);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.x = dot(r0.xyz, r1.xyz);
  r0.x = saturate(r0.x * 2.000000000e+000 + -1.000000000e+000);
  r0.yz = v0.xy * g_VPosToUV.xy + g_VPosToUV.zw;
  r1.xy = float2(-5.000000e-001,-5.000000e-001) + r0.yz;
  r2.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.yz, 0.000000000e+000).xyzw;
  r0.y = g_ReverseProjectionParams.z + r2.x;
  r2.z = g_ReverseProjectionParams.w / r0.y;
  r0.yz = r1.xy * float2(2.000000e+000,-2.000000e+000) + g_ReverseProjectionParams2.xy;
  r0.yz = g_ReverseProjectionParams.xy * r0.yz;
  r2.xy = r0.yz * r2.zz;
  r2.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r2.x +=  stereoParams.x * (-r2.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r1.x = dot(r2.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r1.z = dot(r2.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r0.yzw = g_WorldEntityPosition.xyz + -r1.xyz;
  r1.x = v2.z + -r1.z;
  r1.x = ZMultiplier_1 * r1.x;
  r1.x = saturate(ZBias_2 * r1.x);
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = sqrt(r0.y);
  r0.y = DepthMultiplier_3 * r0.y + DepthBias_4;
  r0.y = 1.000000000e+000 + -r0.y;
  r0.y = saturate(r0.y * r1.x);
  r0.x = r0.x * r0.y;
  r0.y = -g_WorldEntityPosition.z + v2.z;
  r0.y = saturate(-r0.y * 1.000000000e+001 + 1.000000000e+000);
  r0.x = r0.x * r0.y;
  o0.w = r0.x;
  o1.w = r0.x;
  o1.xyz = v1.zzz / v1.www;
  return;
}
