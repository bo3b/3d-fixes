
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float4 CharacterPosition_1 : packoffset(c128);
  float Distancecritic_2 : packoffset(c129);
  float CurrentDistance_3 : packoffset(c130);
  float MaxDistance_4 : packoffset(c131);
  float3x3 UVWhiteRoomFloor_5_matrix : packoffset(c132);
  float isNaval_6 : packoffset(c135);
  float3x3 UVFil_7_matrix : packoffset(c136);
  float3x3 Operator863_8_matrix : packoffset(c139);
  float3x3 UVSmoke1_9_matrix : packoffset(c142);
  float3x3 Operator1012_10_matrix : packoffset(c145);
  float IsUnderwater_11 : packoffset(c148);
}
SamplerState Operator856_0_s : register(s0);
SamplerState Operator7482_1_s : register(s1);
SamplerState Operator917_2_s : register(s2);
SamplerState Operator1019_3_s : register(s3);
SamplerState DepthSurface_s : register(s8);
SamplerState g_DisolveNoiseTexture_s : register(s14);
Texture2D<float4> Operator856_0 : register(t0);
Texture2D<float4> Operator7482_1 : register(t1);
Texture2D<float4> Operator917_2 : register(t2);
Texture2D<float4> Operator1019_3 : register(t3);
Texture2D<float4> DepthSurface : register(t8);
Texture2D<float4> g_DisolveNoiseTexture : register(t14);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float3 v8 : TEXCOORD7,
  uint v9 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float2 o3 : SV_Target3)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v0.xy * g_VPosToUV.xy + g_VPosToUV.zw;
  r0.zw = float2(2.000000e+001,2.000000e+001) * r0.xy;
  r1.xyzw = g_DisolveNoiseTexture.Sample(g_DisolveNoiseTexture_s, r0.zw).xyzw;
  r0.z = r1.w * g_DisolveFactor.x + g_DisolveFactor.y;
  r0.z = r0.z < 0.000000000e+000;
  if (r0.z != 0) discard;
  r0.z = CurrentDistance_3 / MaxDistance_4;
  r0.w = CurrentDistance_3 + 3.000000000e+000;
  r1.x = CurrentDistance_3 + -r0.w;
  r0.z = r0.z * r1.x + r0.w;
  r0.z = min(r0.z, MaxDistance_4);
  r0.z = max(r0.z, Distancecritic_2);
  r1.xyz = -CharacterPosition_1.xyz + v3.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r0.z = r0.w + -r0.z;
  r0.z = 8.333333582e-002 * r0.z;
  r1.xyzw = isNaval_6 * float4(-8.500000e-001,-4.900000e+000,-1.000000e-001,2.600000e+001) + float4(1.000000e+000,5.000000e+000,9.000000e-001,4.000000e+000);
  r0.z = saturate(r1.y * r0.z);
  r0.w = abs(v2.y) + -r1.z;
  r0.w = saturate(1.000000000e+001 * r0.w);
  r0.zw = float2(1.000000e+000,1.000000e+000) + -r0.zw;
  r2.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.xy, 0.000000000e+000).xyzw;
  r1.y = g_ReverseProjectionParams.z + r2.x;
  r2.z = g_ReverseProjectionParams.w / r1.y;
  r1.y = -v1.w + -r2.z;
  r1.x = saturate(r1.y * r1.x);
  r1.y = r1.x * r0.z;
  r0.w = r1.y * r0.w;
  r0.z = r1.x * r0.z + -r0.w;
  r0.z = IsUnderwater_11 * r0.z + r0.w;
  r3.xyzw = float4(1.000000e+000,-1.000000e+000,1.000000e+000,1.000000e+000) * v7.xyzw;
  r0.w = dot(r3.xyzw, r3.xyzw);
  r0.w = rsqrt(r0.w);
  r1.xy = float2(1.000000e+000,-1.000000e+000) * v7.xy;
  r1.xy = r1.xy * r0.ww;
  r3.xy = v2.xy;
  r3.z = 1.000000000e+000;
  r4.x = dot(r3.xyz, UVWhiteRoomFloor_5_matrix._m00_m10_m20);
  r4.y = dot(r3.xyz, UVWhiteRoomFloor_5_matrix._m01_m11_m21);
  r1.xy = r1.xy * float2(-1.300000e+000,-1.300000e+000) + r4.xy;
  r1.z = 1.000000000e+000;
  r3.x = dot(r1.xyz, Operator1012_10_matrix._m00_m10_m20);
  r3.y = dot(r1.xyz, Operator1012_10_matrix._m01_m11_m21);
  r4.xyzw = Operator856_0.Sample(Operator856_0_s, r3.xy).xyzw;
  r1.xy = r4.xy * float2(2.100000e-001,2.100000e-001) + r3.xy;
  r1.z = 1.000000000e+000;
  r5.x = dot(r1.xyz, UVFil_7_matrix._m00_m10_m20);
  r5.y = dot(r1.xyz, UVFil_7_matrix._m01_m11_m21);
  r5.xyzw = Operator7482_1.Sample(Operator7482_1_s, r5.xy).xyzw;
  r0.w = saturate(r5.x);
  r0.z = saturate(r0.z * 2.000000000e+000 + -r0.w);
  r0.z = -g_AlphaTestValue + r0.z;
  r0.z = r0.z < 0.000000000e+000;
  if (r0.z != 0) discard;
  o0.xyz = g_SelectionOverlayCol.xyz;
  o0.w = 0.000000000e+000;
  r0.z = dot(v6.xyz, v6.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = v6.xyz * r0.zzz;
  o1.xyz = saturate(r1.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001));
  o1.w = 0.000000000e+000;
  r3.z = 1.000000000e+000;
  r1.x = dot(r3.xyz, UVSmoke1_9_matrix._m00_m10_m20);
  r1.y = dot(r3.xyz, UVSmoke1_9_matrix._m01_m11_m21);
  r6.xyzw = Operator7482_1.Sample(Operator7482_1_s, r1.xy).xyzw;
  r0.z = saturate(r6.y + r6.y);
  r1.xy = float2(1.100000e+000,1.100000e+000) * r3.xy;
  r3.xy = float2(5.000000e-001,4.000000e+002) * r3.xy;
  r1.z = 1.000000000e+000;
  r6.x = dot(r1.xyz, Operator863_8_matrix._m00_m10_m20);
  r6.y = dot(r1.xyz, Operator863_8_matrix._m01_m11_m21);
  r6.xyzw = Operator7482_1.Sample(Operator7482_1_s, r6.xy).xyzw;
  r0.w = max(r6.z, 2.000000030e-001);
  r1.x = 1.000000000e+000 + -r5.x;
  r3.z = r5.x * 3.000000000e+000 + r3.y;
  r3.xyzw = Operator917_2.Sample(Operator917_2_s, r3.xz).xyzw;
  r3.x = saturate(r3.x);
  r1.x = abs(r1.x) * abs(r1.x);
  r0.w = r1.x * r0.w;
  r0.z = r0.w * 6.000000000e+000 + r0.z;
  r1.xyz = float3(1.568625e-001,2.549020e-001,2.705890e-001) * r0.zzz;
  r0.z = abs(r4.y) * abs(r4.y);
  r0.z = r0.z * r0.z;
  r0.z = abs(r4.y) * r0.z;
  r1.xyz = r0.zzz * float3(2.980390e-001,4.274510e-001,4.588240e-001) + r1.xyz;
  r1.xyz = float3(8.627450e-002,1.803920e-001,1.882350e-001) + r1.xyz;
  r1.xyz = float3(4.000000e-001,4.000000e-001,4.000000e-001) * r1.xyz;
  r5.xyz = v3.xyz;
  r5.w = 0.000000000e+000;
  r6.xyzw = -g_EyePosition.xyzw + r5.xyzw;
  r0.z = dot(r6.xyzw, r6.xyzw);
  r0.z = rsqrt(r0.z);
  r3.yzw = r6.xyz * r0.zzz;
  r0.z = dot(float3(2.672612e-001,8.017837e-001,-5.345225e-001), r3.yzw);
  r0.z = 1.000000000e+000 + r0.z;
  r0.z = saturate(5.000000000e-001 * r0.z);
  r0.z = log2(r0.z);
  r0.z = 4.000000060e-001 * r0.z;
  r0.z = exp2(r0.z);
  r0.w = 1.000000000e+000 + -r0.z;
  r3.yzw = float3(-7.882352e-001,-9.215690e-001,-9.607843e-001) * r0.zzz;
  r0.z = 4.000000060e-001 * r0.w;
  r6.xyzw = Operator1019_3.Sample(Operator1019_3_s, r0.xy).xyzw;
  r3.yzw = r6.xyz * r0.zzz + r3.yzw;
  r3.yzw = float3(8.078430e-001,9.490200e-001,1.000000e+000) + r3.yzw;
  r1.xyz = r1.xyz * r3.xxx + r3.yzw;
  r3.xyz = float3(2.078430e-001,2.588240e-001,2.862750e-001) + r1.xyz;
  r1.xyz = -r3.xyz + r1.xyz;
  r0.zw = float2(-5.000000e-001,-5.000000e-001) + r0.xy;
  r0.xy = r0.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r0.zw = r0.zw * float2(2.000000e+000,-2.000000e+000) + g_ReverseProjectionParams2.xy;
  r0.zw = g_ReverseProjectionParams.xy * r0.zw;
  r2.xy = r0.zw * r2.zz;
  r2.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r2.x +=  stereoParams.x * (-r2.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r6.z = dot(r2.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r6.w = dot(r2.xyzw, g_ViewToWorld._m03_m13_m23_m33);
  r6.x = dot(r2.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r6.y = dot(r2.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r2.xyzw = -r6.xyzw + r5.xyzw;
  r0.zw = r4.xy * float2(6.000000e-001,6.000000e-001) + r6.xy;
  r4.xyzw = Operator7482_1.Sample(Operator7482_1_s, r0.zw).xyzw;
  r0.z = dot(r2.xyzw, r2.xyzw);
  r0.z = sqrt(r0.z);
  r0.z = -2.000000000e+000 + r0.z;
  r0.z = saturate(r0.z / r1.w);
  r0.z = r4.y * 8.999999762e-001 + r0.z;
  o2.xyz = r0.zzz * r1.xyz + r3.xyz;
  o2.w = 0.000000000e+000;
  r0.zw = v8.xy / v8.zz;
  r0.xy = r0.xy + -r0.zw;
  o3.xy = saturate(r0.xy * float2(4.000000e+000,4.000000e+000) + float2(4.980000e-001,4.980000e-001));
  return;
}
