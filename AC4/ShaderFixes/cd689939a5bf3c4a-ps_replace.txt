// Manually fixed shader.
//	needed to be const[] to make it icb, and not 4x4, just float4

cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float4 DisplacementTextureTexelSize0 : packoffset(c128);
  float4 DisplacementTextureTexelSize1 : packoffset(c129);
}
SamplerState DisplacementTexture_s : register(s0);
Texture2D<float4> DisplacementTexture : register(t0);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { 0, 0, 0, 0},
                              { 1.000000, 0, 0, 0},
                              { 2.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 1.000000, 1.000000, 0, 0},
                              { 2.000000, 1.000000, 0, 0},
                              { 0, 2.000000, 0, 0},
                              { 1.000000, 2.000000, 0, 0},
                              { 2.000000, 2.000000, 0, 0},
                              { 0, 3.000000, 0, 0},
                              { 1.000000, 3.000000, 0, 0},
                              { 2.000000, 3.000000, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask;
  r0.xy = v1.xy * float2(1.000000e+000,-1.000000e+000) + float2(0.000000e+000,1.000000e+000);
  r0.xy = DisplacementTextureTexelSize1.xy * r0.xy;
  r0.x = floor(r0.x);
  r0.y = floor(r0.y);
  r0.xy = DisplacementTextureTexelSize0.xy * r0.xy;
  r0.xy = r0.xy * float2(2.000000e+000,4.000000e+000) + DisplacementTextureTexelSize0.zw;
  r1.xyzw = float4(1.000000e+004,1.000000e+004,1.000000e+004,1.000000e+004);
  r2.xyzw = float4(-1.000000e+004,-1.000000e+004,-1.000000e+004,-1.000000e+004);
  r3.xyzw = float4(1.000000e+004,1.000000e+004,1.000000e+004,1.000000e+004);
  r4.xyzw = float4(-1.000000e+004,-1.000000e+004,-1.000000e+004,-1.000000e+004);
  r0.z = 0.000000000e+000;
  while (true) {
  r0.w = (int)r0.z >= (int)3;
  if (r0.w != 0) break;
  // was backwards shift
	r0.w = (uint)r0.z << 2;
  r5.xy = icb[r0.w].xy * DisplacementTextureTexelSize0.xy + r0.xy;
  r5.xyzw = DisplacementTexture.SampleLevel(DisplacementTexture_s, r5.xy, 0.000000000e+000).xyzw;
  r6.xyz = (int3)r0.www + int3(1,2,3);
  r5.zw = icb[r6.x].xy * DisplacementTextureTexelSize0.xy + r0.xy;
  r7.xyzw = DisplacementTexture.SampleLevel(DisplacementTexture_s, r5.zw, 0.000000000e+000).xyzw;
  r5.zw = icb[r6.y].xy * DisplacementTextureTexelSize0.xy + r0.xy;
  r8.xyzw = DisplacementTexture.SampleLevel(DisplacementTexture_s, r5.zw, 0.000000000e+000).xyzw;
  r5.zw = icb[r6.z].xy * DisplacementTextureTexelSize0.xy + r0.xy;
  r6.xyzw = DisplacementTexture.SampleLevel(DisplacementTexture_s, r5.zw, 0.000000000e+000).xzwy;
  r9.x = r5.x;
  r9.y = r7.x;
  r9.z = r8.x;
  r9.w = r6.x;
  r1.xyzw = min(r1.xyzw, r9.xyzw);
  r2.xyzw = max(r2.xyzw, r9.xyzw);
  r6.x = r5.y;
  r6.y = r7.y;
  r6.z = r8.y;
  r3.xyzw = min(r3.xyzw, r6.xyzw);
  r4.xyzw = max(r4.xyzw, r6.xyzw);
  r0.z = (int)r0.z + 1;
  }
  r5.xyzw = DisplacementTextureTexelSize0.xyxy * float4(0.000000e+000,4.000000e+000,1.000000e+000,4.000000e+000) + r0.xyxy;
  r6.xyzw = DisplacementTexture.SampleLevel(DisplacementTexture_s, r5.xy, 0.000000000e+000).xyzw;
  r5.xyzw = DisplacementTexture.SampleLevel(DisplacementTexture_s, r5.zw, 0.000000000e+000).zxwy;
  r0.xy = DisplacementTextureTexelSize0.xy * float2(2.000000e+000,4.000000e+000) + r0.xy;
  r0.xyzw = DisplacementTexture.SampleLevel(DisplacementTexture_s, r0.xy, 0.000000000e+000).yxzw;
  r1.xy = min(r1.zw, r1.xy);
  r0.w = min(r1.y, r1.x);
  r5.xz = r6.xy;
  r1.x = r0.y;
  r1.yz = float2(1.000000e+004,-1.000000e+004);
  r1.yw = min(r1.xy, r5.xy);
  r1.y = min(r1.w, r1.y);
  o0.x = min(r0.w, r1.y);
  r1.yw = max(r2.zw, r2.xy);
  r0.w = max(r1.w, r1.y);
  r1.xy = max(r1.xz, r5.xy);
  r1.x = max(r1.y, r1.x);
  o0.y = max(r0.w, r1.x);
  r1.xy = min(r3.zw, r3.xy);
  r0.w = min(r1.y, r1.x);
  r0.yz = float2(1.000000e+004,-1.000000e+004);
  r1.xy = min(r0.xy, r5.zw);
  r0.y = min(r1.y, r1.x);
  o0.z = min(r0.y, r0.w);
  r0.yw = max(r4.zw, r4.xy);
  r0.xz = max(r0.xz, r5.zw);
  r0.xy = max(r0.zw, r0.xy);
  o0.w = max(r0.x, r0.y);
  return;
}