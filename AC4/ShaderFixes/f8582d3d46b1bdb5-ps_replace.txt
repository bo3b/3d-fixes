// White HUD text for "Find the Assassin"
// Also in minimap for OP.
// And text in UI

cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float4 g_ConstColor : packoffset(c128);
  float4 g_ConstColorAdd : packoffset(c129);
  float4 g_TextBlurWeights : packoffset(c130);
  float4 g_ConstColorMul : packoffset(c131);
  float4 g_DistanceFieldFloatArray[5] : packoffset(c132);
}
SamplerState s0_s : register(s0);
Texture2D<float4> s0 : register(t0);

Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  
	// constants specified in the .ini file.
	float4 iniParams = IniParams.Load(0);
	if (iniParams.w == 1.0) {
		o0.xyzw = float4(1.0, 0, 1.0, 1.0);
		return;
	}

  r0.x = g_DistanceFieldFloatArray[0].x == -1.000000;
  if (r0.x != 0) {
	  r0.xyzw = s0.Sample(s0_s, v1.xy).xyzw;
	  r0.x = 1.000000000e+000;
	  o0.xyzw = r0.xxxw * g_ConstColorMul.xyzw + g_ConstColorAdd.xyzw;
	  return;
  }
  r0.xyzw = s0.Sample(s0_s, v1.xy).xyzw;
  r0.x = 1.000000000e+000 + -r0.w;
  r0.y = g_DistanceFieldFloatArray[1].x != -1.000000;
  if (r0.y != 0) {
	  r0.y = g_DistanceFieldFloatArray[1].z != 0;
	  r0.z = g_DistanceFieldFloatArray[1].w != 0;
	  r0.y = (int)r0.z | (int)r0.y;
	  if (r0.y != 0) {
		  r0.yz = g_DistanceFieldFloatArray[1].zw + v1.xy;
		  r1.xyzw = s0.Sample(s0_s, r0.yz).xyzw;
		  r0.y = 1.000000000e+000 + -r1.w;
	  } else {
		  r0.y = r0.x;
	  }
	  r0.z = r0.y >= g_DistanceFieldFloatArray[1].x;
	  r0.w = r0.y < g_DistanceFieldFloatArray[1].y;
	  r1.x = g_DistanceFieldFloatArray[1].y + -g_DistanceFieldFloatArray[1].x;
	  r0.y = -g_DistanceFieldFloatArray[1].x + r0.y;
	  r1.x = 1.000000e+000 / r1.x;
	  r0.y = saturate(r1.x * r0.y);
	  r1.x = r0.y * -2.000000000e+000 + 3.000000000e+000;
	  r0.y = r0.y * r0.y;
	  r0.y = r1.x * r0.y;
	  r0.y = r0.w ? r0.y : 1.000000000e+000;
	  r1.xyz = g_DistanceFieldFloatArray[3].xyz + -g_ConstColor.xyz;
	  r1.xyz = r0.yyy * r1.xyz + g_ConstColor.xyz;
	  r1.x = r0.z ? r1.x : g_ConstColor.x;
	  r1.y = r0.z ? r1.y : g_ConstColor.y;
	  r1.z = r0.z ? r1.z : g_ConstColor.z;
  } else {
	  r1.xyz = g_ConstColor.xyz;
  }
  r0.y = g_DistanceFieldFloatArray[0].x != g_DistanceFieldFloatArray[0].y;
  r0.z = g_DistanceFieldFloatArray[0].x + -g_DistanceFieldFloatArray[0].y;
  r0.w = -g_DistanceFieldFloatArray[0].y + r0.x;
  r0.z = 1.000000e+000 / r0.z;
  r0.z = saturate(r0.w * r0.z);
  r0.w = r0.z * -2.000000000e+000 + 3.000000000e+000;
  r0.z = r0.z * r0.z;
  r0.z = r0.w * r0.z;
  r0.w = g_DistanceFieldFloatArray[0].y >= r0.x;
  r0.w = r0.w ? 1.0 : 0;
  r1.w = r0.y ? r0.z : r0.w;
  r0.y = g_DistanceFieldFloatArray[2].x != -1.000000;
  if (r0.y != 0) {
	  r0.y = g_DistanceFieldFloatArray[2].z != 0;
	  r0.z = g_DistanceFieldFloatArray[2].w != 0;
	  r0.y = (int)r0.z | (int)r0.y;
	  if (r0.y != 0) {
		  r0.yz = g_DistanceFieldFloatArray[2].zw + v1.xy;
		  r2.xyzw = s0.Sample(s0_s, r0.yz).xyzw;
		  r0.x = 1.000000000e+000 + -r2.w;
	  }
	  r0.y = g_DistanceFieldFloatArray[2].y >= r0.x;
	  r0.z = g_DistanceFieldFloatArray[2].x < r0.x;
	  r0.w = g_DistanceFieldFloatArray[2].x + -g_DistanceFieldFloatArray[2].y;
	  r0.x = -g_DistanceFieldFloatArray[2].y + r0.x;
	  r0.w = 1.000000e+000 / r0.w;
	  r0.x = saturate(r0.x * r0.w);
	  r0.w = r0.x * -2.000000000e+000 + 3.000000000e+000;
	  r0.x = r0.x * r0.x;
	  r0.x = r0.w * r0.x;
	  r2.w = r0.z ? r0.x : 1.000000000e+000;
	  r2.xyz = g_DistanceFieldFloatArray[4].xyz;
	  r3.xyzw = -r2.xyzw + r1.xyzw;
	  r2.xyzw = r1.wwww * r3.xyzw + r2.xyzw;
	  r1.x = r0.y ? r2.x : r1.x;
	  r1.y = r0.y ? r2.y : r1.y;
	  r1.z = r0.y ? r2.z : r1.z;
	  r1.w = r0.y ? r2.w : r1.w;
  }
  o0.xyzw = r1.xyzw * g_ConstColorMul.xyzw + g_ConstColorAdd.xyzw;
  return;
}