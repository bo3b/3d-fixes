// Manually fixed shader.
//  As near as I can tell, this should be using the 0th element of that array.
// 	Using the 0 element gives me the same ASM.

cbuffer Global_Constants : register(b0)
{
  float4 g_Global_DepthRes : packoffset(c0);
  float4 g_Global_DepthChannel : packoffset(c1);
  float4 g_Global_ScreenRes : packoffset(c2);
  float4 g_Global_ShadowMapRes : packoffset(c3);
  float4 g_Global_LightPositionAndRadius : packoffset(c4);
  float4 g_Global_FalloffParams : packoffset(c5);
  row_major float4x4 g_Global_InvLightProj[6] : packoffset(c6);
  row_major float4x4 g_Global_InvProjection : packoffset(c30);
  row_major float4x4 g_Global_InvView : packoffset(c34);
  row_major float4x4 g_Global_EyeViewToLightView : packoffset(c38);
  float4 g_Global_NumCascades : packoffset(c42);
  row_major float4x4 g_Global_EyeViewToLightTex[6] : packoffset(c43);
  float4 g_Global_LightData[6] : packoffset(c67);
  float4 g_Global_LightRadiusUVScale[6] : packoffset(c73);
  float4 g_Global_ViewLocation[6] : packoffset(c79);
  float4 g_Global_MapID[6] : packoffset(c85);
  float4 g_Global_ZBias[6] : packoffset(c91);
  float4 g_Global_TransformToLHS[6] : packoffset(c97);
  float g_Global_LightSize : packoffset(c103);
  float g_Global_CascadeIndex : packoffset(c103.y);
  float g_Global_EyeZFar : packoffset(c103.z);
  float g_Global_EyeZNear : packoffset(c103.w);
  float g_Global_TransitionScaleZ : packoffset(c104);
  float g_Global_InvertEyeDepth : packoffset(c104.y);
  float g_Global_SpotLight : packoffset(c104.z);
  float g_Global_LightSizeMinPercent : packoffset(c104.w);
  float g_Global_ShadowIntensity : packoffset(c105);
  float g_Global_MinWeightExponent : packoffset(c105.y);
  float g_Global_MaxWeight : packoffset(c105.z);
  float Pad : packoffset(c105.w);
}
SamplerState PointSampler_s : register(s0);
SamplerComparisonState PCF_Sampler_s : register(s1);
Texture2D<float> tShadowMap : register(t0);
Texture2D<float4> tDepthBuffer : register(t6);
Texture2D<float4> tStereoFixUp : register(t10);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  out float o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.xy = g_Global_ScreenRes.zw * v0.xy;
  r0.zw = tStereoFixUp.Sample(PointSampler_s, float2(6.250000e-002,5.000000e-001)).xy;
  r1.x = v1.w != 1.000000;
  r1.y = v1.w + -r0.w;
  r1.y = r0.z * r1.y + v1.x;
  r1.x = r1.x ? r1.y : v1.x;
  r1.y = v1.y;
  r1.xy = r1.xy / v1.ww;
  r1.zw = r1.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r2.x = g_Global_NumCascades.x == 1.000000;
  r0.x = r2.x ? r1.z : r0.x;
  r0.y = r2.x ? r1.w : r0.y;
  r1.zw = g_Global_ScreenRes.xy * g_Global_DepthRes.zw;
  r0.xy = r1.zw * r0.xy;
  r1.z = g_Global_DepthChannel.x == 1.000000;
  if (r1.z != 0) {
  r1.z = tDepthBuffer.SampleLevel(PointSampler_s, r0.xy, 0.000000000e+000).x;
  } else {
  r1.w = g_Global_DepthChannel.y == 1.000000;
  if (r1.w != 0) {
  r1.z = tDepthBuffer.SampleLevel(PointSampler_s, r0.xy, 0.000000000e+000).y;
  } else {
  r1.w = g_Global_DepthChannel.z == 1.000000;
  if (r1.w != 0) {
  r1.z = tDepthBuffer.SampleLevel(PointSampler_s, r0.xy, 0.000000000e+000).z;
  } else {
  r1.z = tDepthBuffer.SampleLevel(PointSampler_s, r0.xy, 0.000000000e+000).w;
  }
  }
  }
  r0.x = 0.000000e+000 != g_Global_InvertEyeDepth;
  r0.y = 1.000000000e+000 + -r1.z;
  r0.x = r0.x ? r0.y : r1.z;
  r0.xy = r0.xx * g_Global_InvProjection._m22_m23 + g_Global_InvProjection._m32_m33;
  r0.x = r0.x / r0.y;
  r1.xy = r1.xy * abs(r0.xx);
  r0.y = abs(r0.x) != 1.000000;
  r0.w = abs(r0.x) + -r0.w;
  r0.z = -r0.z * r0.w + r1.x;
  r0.y = r0.y ? r0.z : r1.x;
  r0.zw = g_Global_InvProjection._m10_m11 * r1.yy;
  r0.yz = r0.yy * g_Global_InvProjection._m00_m01 + r0.zw;
  r0.yz = g_Global_InvProjection._m30_m31 + r0.yz;
  r1.xyzw = g_Global_EyeViewToLightTex[0]._m10_m11_m12_m13 * r0.zzzz;
  r1.xyzw = r0.yyyy * g_Global_EyeViewToLightTex[0]._m00_m01_m02_m03 + r1.xyzw;
  r1.xyzw = r0.xxxx * g_Global_EyeViewToLightTex[0]._m20_m21_m22_m23 + r1.xyzw;
  r1.xyzw = g_Global_EyeViewToLightTex[0]._m30_m31_m33_m32 + r1.xywz;
  r0.w = g_Global_SpotLight == 1.000000;
  r1.xyz = r1.xyw / r1.zzz;
  r1.x = r0.w ? r1.x : r1.x;
  r1.y = r0.w ? r1.y : r1.y;
  r1.z = r0.w ? r1.z : r1.w;
  r0.w = g_Global_ZBias[0].x + r1.z;
  r0.w = min(r0.w, 1.000000000e+000);
  r2.xz = float2(-8.000000e+000,-6.000000e+000);
  r1.zw = float2(0.000000e+000,-8.000000e+000);
  while (true) {
  r3.x = 8.000000000e+000 < r1.w;
  if (r3.x != 0) break;
  r2.y = r1.w;
  r3.xy = r2.xy * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r3.xy, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r3.x = 1.000000000e+000 + r1.z;
  r1.z = r2.y ? r3.x : r1.z;
  r1.w = 2.000000000e+000 + r1.w;
  }
  r1.w = r1.z;
  r2.x = -8.000000000e+000;
  while (true) {
  r2.y = 8.000000000e+000 < r2.x;
  if (r2.y != 0) break;
  r2.w = r2.x;
  r2.yw = r2.zw * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r2.yw, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r2.w = 1.000000000e+000 + r1.w;
  r1.w = r2.y ? r2.w : r1.w;
  r2.x = 2.000000000e+000 + r2.x;
  }
  r2.xz = float2(-4.000000e+000,-2.000000e+000);
  r1.z = r1.w;
  r3.x = -8.000000000e+000;
  while (true) {
  r3.y = 8.000000000e+000 < r3.x;
  if (r3.y != 0) break;
  r2.y = r3.x;
  r3.yz = r2.xy * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r3.yz, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r3.y = 1.000000000e+000 + r1.z;
  r1.z = r2.y ? r3.y : r1.z;
  r3.x = 2.000000000e+000 + r3.x;
  }
  r1.w = r1.z;
  r2.x = -8.000000000e+000;
  while (true) {
  r2.y = 8.000000000e+000 < r2.x;
  if (r2.y != 0) break;
  r2.w = r2.x;
  r2.yw = r2.zw * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r2.yw, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r2.w = 1.000000000e+000 + r1.w;
  r1.w = r2.y ? r2.w : r1.w;
  r2.x = 2.000000000e+000 + r2.x;
  }
  r2.xz = float2(0.000000e+000,2.000000e+000);
  r1.z = r1.w;
  r3.x = -8.000000000e+000;
  while (true) {
  r3.y = 8.000000000e+000 < r3.x;
  if (r3.y != 0) break;
  r2.y = r3.x;
  r3.yz = r2.xy * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r3.yz, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r3.y = 1.000000000e+000 + r1.z;
  r1.z = r2.y ? r3.y : r1.z;
  r3.x = 2.000000000e+000 + r3.x;
  }
  r1.w = r1.z;
  r2.x = -8.000000000e+000;
  while (true) {
  r2.y = 8.000000000e+000 < r2.x;
  if (r2.y != 0) break;
  r2.w = r2.x;
  r2.yw = r2.zw * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r2.yw, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r2.w = 1.000000000e+000 + r1.w;
  r1.w = r2.y ? r2.w : r1.w;
  r2.x = 2.000000000e+000 + r2.x;
  }
  r2.xz = float2(4.000000e+000,6.000000e+000);
  r1.z = r1.w;
  r3.x = -8.000000000e+000;
  while (true) {
  r3.y = 8.000000000e+000 < r3.x;
  if (r3.y != 0) break;
  r2.y = r3.x;
  r3.yz = r2.xy * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r3.yz, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r3.y = 1.000000000e+000 + r1.z;
  r1.z = r2.y ? r3.y : r1.z;
  r3.x = 2.000000000e+000 + r3.x;
  }
  r1.w = r1.z;
  r2.x = -8.000000000e+000;
  while (true) {
  r2.y = 8.000000000e+000 < r2.x;
  if (r2.y != 0) break;
  r2.w = r2.x;
  r2.yw = r2.zw * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r2.yw, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r2.w = 1.000000000e+000 + r1.w;
  r1.w = r2.y ? r2.w : r1.w;
  r2.x = 2.000000000e+000 + r2.x;
  }
  r2.x = 8.000000000e+000;
  r1.z = r1.w;
  r2.z = -8.000000000e+000;
  while (true) {
  r2.w = 8.000000000e+000 < r2.z;
  if (r2.w != 0) break;
  r2.y = r2.z;
  r2.yw = r2.xy * g_Global_ShadowMapRes.zw + r1.xy;
  r2.y = tShadowMap.SampleLevel(PointSampler_s, r2.yw, 0.000000000e+000).x;
  r2.y = r2.y < r0.w;
  r2.w = 1.000000000e+000 + r1.z;
  r1.z = r2.y ? r2.w : r1.z;
  r2.z = 2.000000000e+000 + r2.z;
  }
  r1.z = r1.z != 0.000000;
  if (r1.z != 0) {
  r1.zw = float2(0.000000e+000,-8.000000e+000);
  while (true) {
  r2.x = 8.000000000e+000 < r1.w;
  if (r2.x != 0) break;
  r2.x = g_Global_ShadowMapRes.z * r1.w;
  r3.x = r1.z;
  r3.y = -8.000000000e+000;
  while (true) {
  r2.z = 8.000000000e+000 < r3.y;
  if (r2.z != 0) break;
  r2.y = g_Global_ShadowMapRes.w * r3.y;
  r2.yz = r2.xy + r1.xy;
  r2.y = tShadowMap.SampleCmpLevelZero(PCF_Sampler_s, r2.yz, r0.w).x;
  r3.x = r3.x + r2.y;
  r3.y = 1.000000000e+000 + r3.y;
  }
  r1.z = r3.x;
  r1.w = 1.000000000e+000 + r1.w;
  }
  r0.w = 3.460207721e-003 * r1.z;
  } else {
  r0.w = 1.000000000e+000;
  }
  r1.x = g_Global_FalloffParams.w == 1.000000;
  r2.xyzw = g_Global_InvView._m10_m11_m12_m13 * r0.zzzz;
  r2.xyzw = r0.yyyy * g_Global_InvView._m00_m01_m02_m03 + r2.xyzw;
  r2.xyzw = r0.xxxx * g_Global_InvView._m20_m21_m22_m23 + r2.xyzw;
  r2.xyzw = g_Global_InvView._m30_m31_m32_m33 + r2.xyzw;
  r0.xyz = r2.xyz / r2.www;
  r0.xyz = g_Global_LightPositionAndRadius.xyz + -r0.xyz;
  r0.xyz = g_Global_LightPositionAndRadius.www * r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = r0.x * g_Global_FalloffParams.x + g_Global_FalloffParams.y;
  r0.x = max(r0.x, 0.000000000e+000);
  r0.x = -r0.x * r0.x + 1.000000000e+000;
  r0.x = max(r0.x, 0.000000000e+000);
  r0.x = log2(r0.x);
  r0.x = g_Global_FalloffParams.z * r0.x;
  r0.x = exp2(r0.x);
  r0.y = -1.000000000e+000 + r0.w;
  r0.x = r0.x * r0.y + 1.000000000e+000;
  r0.x = r1.x ? r0.x : r0.w;
  r0.y = 1.000000000e+000 + -r0.x;
  r0.x = g_Global_ShadowIntensity * r0.y + r0.x;
  r0.y = r0.x == 1.000000;
  if (r0.y != 0) discard;
  o0.x = r0.x;
  return;
}