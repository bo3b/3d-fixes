
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float OffsetU_1 : packoffset(c128);
  float AboveWaterTrue1_2 : packoffset(c129);
  float CubeMapMultiplier_3 : packoffset(c130);
  float3x3 UVLayer0_4_matrix : packoffset(c131);
  float NormalIntensity_5 : packoffset(c134);
  float WatarColorMaxDepth_6 : packoffset(c135);
  float UVFrequency_7 : packoffset(c136);
  float DepthFade_8 : packoffset(c137);
  float RefractionIntensity_9 : packoffset(c138);
  float FresnelExponent_10 : packoffset(c139);
  float MaterialAlpha_11 : packoffset(c140);
  float AlphaRimInvert_12 : packoffset(c141);
  float AlphaRim_13 : packoffset(c142);
  float AlphaRimCoeff_14 : packoffset(c143);
  float4 WaterDeepColor_15 : packoffset(c144);
}
SamplerState CubeMap_0_s : register(s0);
SamplerState NormalMap_0_s : register(s1);
SamplerState DepthSurface_s : register(s8);
SamplerState g_RefractionSampler_s : register(s12);
SamplerState g_DisolveNoiseTexture_s : register(s14);
TextureCube<float4> CubeMap_0 : register(t0);
Texture2D<float4> NormalMap_0 : register(t1);
Texture2D<float4> DepthSurface : register(t8);
Texture2D<float4> g_RefractionSampler : register(t12);
Texture2D<float4> g_DisolveNoiseTexture : register(t14);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : COLOR0,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float3 v8 : TEXCOORD6,
  uint v9 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float2 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xy = v0.xy * g_VPosToUV.xy + g_VPosToUV.zw;
  r0.zw = float2(2.000000e+001,2.000000e+001) * r0.xy;
  r1.xyzw = g_DisolveNoiseTexture.Sample(g_DisolveNoiseTexture_s, r0.zw).xyzw;
  r0.z = r1.w * g_DisolveFactor.x + g_DisolveFactor.y;
  r0.z = r0.z < 0.000000000e+000;
  if (r0.z != 0) discard;
  o0.xyz = g_SelectionOverlayCol.xyz;
  o0.w = 0.000000000e+000;
  r0.z = sin(UVFrequency_7);
  r1.xy = v2.xy;
  r1.z = 1.000000000e+000;
  r0.w = dot(r1.xyz, UVLayer0_4_matrix._m00_m10_m20);
  r1.y = dot(r1.xyz, UVLayer0_4_matrix._m01_m11_m21);
  r1.x = r0.z * OffsetU_1 + r0.w;
  r1.xyzw = NormalMap_0.Sample(NormalMap_0_s, r1.xy).xyzw;
  r2.xyzw = r1.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,1.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,0.000000e+000);
  r1.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r1.xyz;
  r1.xyz = r1.xyz + r1.xyz;
  r0.z = dot(r2.xyzw, r2.xyzw);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r2.xyz = AboveWaterTrue1_2 * float3(0.000000e+000,0.000000e+000,2.000000e+000) + float3(0.000000e+000,0.000000e+000,-1.000000e+000);
  r1.xyz = r1.xyz * r2.zzz + -r2.yyz;
  r1.xyz = NormalIntensity_5 * r1.xyz + r2.xyz;
  r0.z = dot(v6.xyz, v6.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = v6.xyz * r0.zzz;
  r2.xyz = r2.xyz * r1.yyy;
  r0.z = dot(v5.xyz, v5.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyz = v5.xyz * r0.zzz;
  r2.xyz = r1.xxx * r3.xyz + r2.xyz;
  r0.z = dot(v7.xyz, v7.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyz = v7.xyz * r0.zzz;
  r2.xyz = r1.zzz * r3.xyz + r2.xyz;
  r0.zw = r1.xy + r0.xy;
  r1.x = dot(r2.xyz, r2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = r2.xyz * r1.xxx;
  o1.xyz = saturate(r1.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001));
  o1.w = 0.000000000e+000;
  r2.xy = r0.xy + -r0.zw;
  r0.xy = r0.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r3.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.zw, 0.000000000e+000).xyzw;
  r1.w = g_ReverseProjectionParams.z + r3.x;
  r1.w = g_ReverseProjectionParams.w / r1.w;
  r1.w = -v1.w + -r1.w;
  r1.w = 0.000000000e+000 >= r1.w;
  r1.w = r1.w ? 0x3f800000 : 0;
  r0.zw = r1.ww * r2.xy + r0.zw;
  r2.xyzw = g_RefractionSampler.Sample(g_RefractionSampler_s, r0.zw).xyzw;
  r2.xyz = RefractionIntensity_9 * r2.xyz;
  r3.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.zw, 0.000000000e+000).xyzw;
  r0.zw = float2(-5.000000e-001,-5.000000e-001) + r0.zw;
  r0.zw = r0.zw * float2(2.000000e+000,-2.000000e+000) + g_ReverseProjectionParams2.xy;
  r0.zw = g_ReverseProjectionParams.xy * r0.zw;
  r1.w = g_ReverseProjectionParams.z + r3.x;
  r3.z = g_ReverseProjectionParams.w / r1.w;
  r3.xy = r3.zz * r0.zw;
  r3.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r3.x +=  stereoParams.x * (-r3.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r4.x = dot(r3.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r4.y = dot(r3.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r4.z = dot(r3.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r4.w = dot(r3.xyzw, g_ViewToWorld._m03_m13_m23_m33);
  r3.xyz = v4.xyz;
  r3.w = 0.000000000e+000;
  r4.xyzw = r4.xyzw + -r3.xyzw;
  r3.xyzw = g_EyePosition.xyzw + -r3.xyzw;
  r0.z = dot(r4.xyzw, r4.xyzw);
  r0.z = sqrt(r0.z);
  r0.z = saturate(r0.z / WatarColorMaxDepth_6);
  r4.xyz = WaterDeepColor_15.xyz * r0.zzz + -r2.xyz;
  r2.xyz = r0.zzz * r4.xyz + r2.xyz;
  r4.xyz = -g_EyePosition.xzy + v4.xzy;
  r0.z = dot(r4.xyz, r4.xyz);
  r0.z = rsqrt(r0.z);
  r4.xyz = r4.xyz * r0.zzz;
  r0.z = dot(r4.xzy, r1.xyz);
  r0.z = r0.z + r0.z;
  r4.xyz = r1.xzy * -r0.zzz + r4.xyz;
  r4.xyzw = CubeMap_0.Sample(CubeMap_0_s, r4.xyz).xyzw;
  r0.z = dot(r3.xyzw, r3.xyzw);
  r0.z = rsqrt(r0.z);
  r3.xyz = r3.xyz * r0.zzz;
  r0.z = saturate(dot(r3.xyz, r1.xyz));
  r0.z = log2(r0.z);
  r0.z = FresnelExponent_10 * r0.z;
  r0.z = exp2(r0.z);
  r0.z = CubeMapMultiplier_3 * r0.z;
  o2.xyz = r4.xyz * r0.zzz + r2.xyz;
  o2.w = 0.000000000e+000;
  r0.zw = v8.xy / v8.zz;
  r0.xy = r0.xy + -r0.zw;
  o3.xy = saturate(r0.xy * float2(4.000000e+000,4.000000e+000) + float2(4.980000e-001,4.980000e-001));
  return;
}
