// Manually fixed shader.
//     NormalTexture.GetDimensions(r1.y, r1.z);  did not Decompile properly, started as:
//  NormalTexture.GetDimensions(r1.y, r1.z, bitmask.x);

cbuffer RainDropSystemConstantscb : register(b2)
{

  struct
  {
    float4x4 m_View;
    float4x4 m_InvView;
    float4x4 m_ViewProjection;
    float4x4 m_InvViewProjection;
    float4x4 m_InvProjection;
    float4 m_ZConstants;
    float4 m_CameraPosition;
    float4 m_CameraDirection;
    float4 m_FocusDistances;
    float4 m_RainDropParams;
    float4 m_ShapeParams_And_DOF_InterpolationDistanceRatio;
    uint4 m_ClusterIndex;
    uint4 m_RainDropCountInCluster;
    float4 m_DeltaTime;
    uint4 m_ActiveClustersFlag;
    float4 m_ScreenSize;
    float4 m_UseExtraLights;
    float4 m_OmniLight0_PositionFar;
    float4 m_OmniLight0_ColorFade;
    float4 m_OmniLight1_PositionFar;
    float4 m_OmniLight1_ColorFade;
    float4 m_OmniLight2_PositionFar;
    float4 m_OmniLight2_ColorFade;
    float4 m_OmniLight3_PositionFar;
    float4 m_OmniLight3_ColorFade;
    float4 m_OmniLight4_PositionFar;
    float4 m_OmniLight4_ColorFade;
    float4 m_OmniLight5_PositionFar;
    float4 m_OmniLight5_ColorFade;
    float4 m_OmniLight6_PositionFar;
    float4 m_OmniLight6_ColorFade;
    float4 m_OmniLight7_PositionFar;
    float4 m_OmniLight7_ColorFade;
    float4 m_DirectionLight0_Direction;
    float4 m_DirectionLight0_Color;
    float4 m_SpotLight0_PositionFar;
    float4 m_SpotLight0_ColorFade;
    float4 m_SpotLight0_Direction;
    float4 m_SpotLight0_ConeAngles;
    float4 m_XYExtents;
    float4 m_ZExtents;
    float4 m_StartVelocity;
    float4 m_StartVelocityVariance;
    float4 m_StartDirection;
    float4 m_StartDirectionVariance;
    float4 m_RainDropRippleLife;
    float4 m_RainDropRippleLifeVariance;
    float4 m_RandomSeed;
    uint4 m_InitialRandomIndexAndMax;
    float4 m_BounceParams;
    float4 m_GlobalWind;
    float4 m_GlobalWindPrecomputed;
    float4 m_GlobalWindPrecomputed2;
    float4 m_RippleParamsSet1;
    float4 m_RippleParamsSet2;
    float4 m_RippleParamsSet3;
    float4 m_DropletParamsSet1;
    float4 m_DropletParamsSet2;
    float4 m_RippleImpactSurfaceSizeAndInvSize;
    float4 m_DropletSurfaceSizeAndInvSize;
    float4x4 m_RainMatrix;
    float4 m_RainScale;
    float4 m_RainOffset;
    float4 m_WorldAOParameters;
    float4 m_WorldAORangeParameters;
    float4 m_WorldLightmapUVParameters;
  } g_RainDropSystemConstants : packoffset(c0);

}
SamplerState TrilinearAndWrapSamplerState_s : register(s1);
SamplerState LinearAndClampSamplerState_s : register(s3);
Texture2D<float> SourceRippleHeightTexture : register(t1);
Texture2D<float> DepthTexture : register(t2);
Texture2D<float4> NormalTexture : register(t3);
Texture2D<float4> AlbedoTexture : register(t4);
Texture2D<float4> WorldAOTexture : register(t14);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + v0.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = AlbedoTexture.Load(r0.xyw).w;
  r1.y = -9.999999747e-005 + r1.x;
  r1.y = r1.y < 0.000000000e+000;
  if (r1.y != 0) discard;
	NormalTexture.GetDimensions(r1.y, r1.z);
  r2.z = DepthTexture.Load(r0.xyw).x;
  r1.yz = float2(1.000000e+000,1.000000e+000) / r1.yz;
  r2.xy = v0.xy * r1.yz + float2(-5.000000e-001,-5.000000e-001);
  r2.xyz = float3(2.000000e+000,-2.000000e+000,1.000000e+000) * r2.xyz;
  r2.w = 1.000000000e+000;
  r3.x = dot(r2.xyzw, g_RainDropSystemConstants.m_InvViewProjection._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_RainDropSystemConstants.m_InvViewProjection._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_RainDropSystemConstants.m_InvViewProjection._m02_m12_m22_m32);
  r1.y = dot(r2.xyzw, g_RainDropSystemConstants.m_InvViewProjection._m03_m13_m23_m33);
  r1.yzw = r3.xyz / r1.yyy;
  r1.yzw = g_RainDropSystemConstants.m_CameraPosition.xyz + r1.yzw;
  r2.xyz = g_RainDropSystemConstants.m_CameraPosition.xyz + -r1.yzw;
  r2.x = dot(r2.xyz, r2.xyz);
  r2.x = sqrt(r2.x);
  r0.xyz = NormalTexture.Load(r0.xyz).xyz;
  r0.xyzw = r0.zxyz * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.100000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.x = saturate(r0.x);
  r0.x = r0.x * r0.x;
  r0.x = saturate(dot(r0.xx, r1.xx));
  r1.x = -9.999999776e-003 + r0.x;
  r1.x = r1.x < 0.000000000e+000;
  r2.y = 8.000000000e+001 < r2.x;
  r1.x = (int)r1.x | (int)r2.y;
  r2.y = 1.000000e+000 / g_RainDropSystemConstants.m_RippleParamsSet1.x;
  r3.x = -g_RainDropSystemConstants.m_RippleImpactSurfaceSizeAndInvSize.z;
  r3.yw = float2(0.000000e+000,0.000000e+000);
  r2.zw = r1.yz * r2.yy + r3.xy;
  r2.z = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r2.zw).x;
  r3.z = g_RainDropSystemConstants.m_RippleImpactSurfaceSizeAndInvSize.z;
  r4.xy = r1.yz * r2.yy + r3.zw;
  r2.w = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r4.xy).x;
  r4.xz = float2(0.000000e+000,0.000000e+000);
  r4.y = -g_RainDropSystemConstants.m_RippleImpactSurfaceSizeAndInvSize.w;
  r5.xy = r1.yz * r2.yy + r4.xy;
  r5.x = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r5.xy).x;
  r4.w = g_RainDropSystemConstants.m_RippleImpactSurfaceSizeAndInvSize.w;
  r5.yz = r1.yz * r2.yy + r4.zw;
  r2.y = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r5.yz).x;
  r3.xyzw = r1.yzyz * g_RainDropSystemConstants.m_RippleParamsSet3.wwww + r3.xyzw;
  r3.x = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r3.xy).x;
  r3.y = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r3.zw).x;
  r4.xyzw = r1.yzyz * g_RainDropSystemConstants.m_RippleParamsSet3.wwww + r4.xyzw;
  r3.z = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r4.xy).x;
  r3.w = SourceRippleHeightTexture.Sample(TrilinearAndWrapSamplerState_s, r4.zw).x;
  if (r1.x != 0) {
	  o0.xyz = r0.yzw * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
	  o0.w = 1.000000000e+000;
	  return;
  }
  r1.x = 0.000000e+000 != g_RainDropSystemConstants.m_RainDropParams.z;
  if (r1.x != 0) {
	  r1.xyz = r0.yzw * g_RainDropSystemConstants.m_WorldAOParameters.xxy + r1.yzw;
	  r1.xy = r1.xy * g_RainDropSystemConstants.m_WorldLightmapUVParameters.zw + g_RainDropSystemConstants.m_WorldLightmapUVParameters.xy;
	  r1.x = WorldAOTexture.SampleLevel(LinearAndClampSamplerState_s, r1.xy, 0.000000000e+000).x;
	  r1.x = r1.x * g_RainDropSystemConstants.m_WorldAORangeParameters.z + g_RainDropSystemConstants.m_WorldAORangeParameters.w;
	  r1.y = g_RainDropSystemConstants.m_WorldAORangeParameters.x + r1.z;
	  r1.x = r1.y + -r1.x;
	  r1.y = 1.000000e+000 / g_RainDropSystemConstants.m_WorldAORangeParameters.x;
	  r1.x = saturate(r1.x * r1.y);
	  r1.y = r1.x * r1.x;
	  r1.y = r1.y * r1.y;
	  r1.z = r1.x * r1.y;
	  r1.x = r1.x * r1.y + -9.999999776e-003;
	  r1.x = r1.x < 0.000000000e+000;
	  if (r1.x != 0) discard;
  } else {
	  r1.z = 1.000000000e+000;
  }
  r1.x = r2.w + -r2.z;
  r1.y = r2.y + -r5.x;
  r1.w = r3.y + -r3.x;
  r2.y = r3.w + -r3.z;
  r2.x = 5.000000075e-002 * r2.x;
  r2.x = min(r2.x, 1.000000000e+000);
  r1.w = r1.w + -r1.x;
  r3.x = r2.x * r1.w + r1.x;
  r1.x = r2.y + -r1.y;
  r3.y = r2.x * r1.x + r1.y;
  r3.z = 1.000000000e+000;
  r1.xyw = r3.xyz * r0.xxx;
  r1.xyw = g_RainDropSystemConstants.m_RippleParamsSet1.www * r1.xyw;
  r0.xyz = r1.xyw * r1.zzz + r0.yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  o0.xyz = r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o0.w = 1.000000000e+000;
  return;
}