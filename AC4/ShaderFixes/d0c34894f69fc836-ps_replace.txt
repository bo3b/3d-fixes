
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float SpecularNormalScaler : packoffset(c128);
  float WaterOpacity : packoffset(c129);
  float4 OceanConstants : packoffset(c130);
  float4 DepthFalloffMultiplier : packoffset(c131);
  float4 WaterDeepColor : packoffset(c132);
  float FresnelPower : packoffset(c133);
  float AmbientFoam : packoffset(c134);
  float4 FoamTint : packoffset(c135);
  float4 OceanSSSColor : packoffset(c136);
  float DepthFalloffDistance : packoffset(c138);
  float4 AlphaFadeParams : packoffset(c139);
  float4 NormalMapParams : packoffset(c140);
  float4 NormalMapUVScrolling : packoffset(c141);
  float4 WaterShallowColor : packoffset(c142);
  float4 OceanTopologyMapScaleBias : packoffset(c143);
  float4 FoamMaskParams : packoffset(c144);
  float4 FoamChurnParams : packoffset(c145);
  float4 FoamChurnTint : packoffset(c146);
  float4 g_SunSpecularParams : packoffset(c147);
  float4 g_SunSpecularColor : packoffset(c148);
  float4 ColorGradingParams1 : packoffset(c161);
  float4 ColorGradingParams2 : packoffset(c162);
  float4 CausticParams_00 : packoffset(c149);
  float4 CausticParams_01 : packoffset(c150);
  float4 CausticParams_02 : packoffset(c151);
  float4x4 WorldToCausticTransform : packoffset(c152);
  float4 CausticFadeParams : packoffset(c158);
  float4 OverrideFadeParams : packoffset(c170);
}

cbuffer OceanConstscb : register(b5)
{

  struct
  {
    float m_NormalMapScale;
    float m_Bumpiness;
    float m_DistanceFogEnd;
    float m_DistanceFogStart;
    float m_BumpinessFlattenEnd;
    float m_BumpinessFlattenStart;
    float m_WaveFoamScale;
    float4 m_FFTTileParams;
    float4x4 m_OceanCameraViewProj;
    float m_OceanProjectedGridBlendFactor;
    float4 m_NormalFoamOffset;
    float4 m_OceanProjectedCorners[4];
    float4x4 m_OceanProjectorViewProj;
    float4 m_OceanWorldCorners[4];
    float4 m_OceanViewOffset;
    float4 m_OceanSunDirection;
    float4 m_OceanSunColor;
    float4 m_TessellationFactors;
    float4 m_ScreenParams;
    float4 m_RippleImpactSurfaceInvSize;
    float4 m_RippleParamsSet1;
    float4 m_RippleParamsSet3;
    float4 m_WindPocketMapUVScaleAndBias;
    float4 m_WindPocketMapUVScrolling;
  } g_OceanConsts : packoffset(c0);

}
SamplerState WaveFoamRamp_s : register(s1);
SamplerState WaveFoamMap_s : register(s2);
SamplerState DepthFalloffRamp_s : register(s3);
SamplerState FoamMaskMap_s : register(s4);
SamplerState TopologyFoamShallowMask_s : register(s5);
SamplerState g_ReflectionSampler_s : register(s7);
SamplerState DepthSurface_s : register(s8);
SamplerState WindPocketMapSampler_s : register(s9);
SamplerState CausticMapSampler_s : register(s10);
SamplerState GBufferNormalSampler_s : register(s11);
SamplerState g_RefractionSampler_s : register(s12);
SamplerState SourceRippleHeightTexture_s : register(s13);
Texture2D<float4> WaveFoamRamp : register(t1);
Texture2D<float4> WaveFoamMap : register(t2);
Texture2D<float4> DepthFalloffRamp : register(t3);
Texture2D<float4> FoamMaskMap : register(t4);
Texture2D<float4> TopologyFoamShallowMask : register(t5);
Texture2D<float4> g_ReflectionSampler : register(t7);
Texture2D<float4> DepthSurface : register(t8);
Texture2D<float4> WindPocketMapSampler : register(t9);
Texture2D<float4> CausticMapSampler : register(t10);
Texture2D<float4> GBufferNormalSampler : register(t11);
Texture2D<float4> g_RefractionSampler : register(t12);
Texture2D<float4> SourceRippleHeightTexture : register(t13);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : COLOR0,
  float4 v4 : COLOR1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : TEXCOORD4,
  float4 v8 : TEXCOORD5,
  float4 v9 : TEXCOORD6,
  float3 v10 : TEXCOORD7,
  out float4 o0 : SV_Target0,
  out float2 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask;
  r0.xy = v0.xy * g_VPosToUV.xy + g_VPosToUV.zw;
  r0.z = dot(v8.xyz, v8.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = v8.xyz * r0.zzz;
  r2.xyz = g_EyePosition.xyz + -v5.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r0.w);
  r3.xyz = r2.xyz * r1.www;
  r4.xyzw = OceanConstants.xxzz * r1.xyxy;
  r4.xyzw = r4.xyzw * float4(1.000000e+000,1.000000e+000,1.500000e-001,1.500000e-001) + r0.xyxy;
  r4.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,1.500000e-002) + r4.xyzw;
  r5.xyzw = g_ReflectionSampler.SampleLevel(g_ReflectionSampler_s, r4.zw, 0.000000000e+000).xyzw;
  r5.xyz = OceanConstants.yyy * r5.xyz;
  r5.xyz = saturate(r5.xyz * ColorGradingParams1.xyz + ColorGradingParams2.xyz);
  r4.zw = r0.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r6.xy = v10.xy / v10.zz;
  r4.zw = -r6.xy + r4.zw;
  o1.xy = saturate(r4.zw * float2(4.000000e+000,4.000000e+000) + float2(4.980000e-001,4.980000e-001));
  r4.zw = v9.zw * FoamMaskParams.xy + FoamMaskParams.zw;
  r6.xyzw = FoamMaskMap.Sample(FoamMaskMap_s, r4.zw).xyzw;
  r4.zw = v5.xy * OceanTopologyMapScaleBias.xy + OceanTopologyMapScaleBias.zw;
  r7.xyzw = TopologyFoamShallowMask.Sample(TopologyFoamShallowMask_s, r4.zw).xyzw;
  r2.w = saturate(r7.y + r7.y);
  r8.z = v3.z * r6.z + v4.w;
  r3.w = AmbientFoam * r6.y;
  r6.xyzw = WaveFoamMap.Sample(WaveFoamMap_s, v2.zw).xyzw;
  r8.x = r3.w * r2.w + r8.z;
  r8.yw = float2(0.000000e+000,0.000000e+000);
  r9.xyzw = WaveFoamRamp.Sample(WaveFoamRamp_s, r8.xy).xyzw;
  r6.xyz = r9.xyz * r6.xyz;
  r2.w = saturate(dot(r6.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000)));
  r6.xyzw = WaveFoamRamp.Sample(WaveFoamRamp_s, r8.zw).xyzw;
  r4.zw = v9.zw * FoamChurnParams.xy + FoamChurnParams.zw;
  r8.xyzw = WaveFoamMap.Sample(WaveFoamMap_s, r4.zw).xyzw;
  r3.w = FoamChurnTint.w * r6.w;
  r3.w = r3.w * r8.w;
  r6.xyz = FoamChurnTint.xyz * r3.www;
  r6.xyz = r2.www * FoamTint.xyz + r6.xyz;
  r8.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r4.xy, 0.000000000e+000).xyzw;
  r3.w = g_ReverseProjectionParams.z + r8.x;
  r8.z = g_ReverseProjectionParams.w / r3.w;
  r4.zw = g_ReverseProjectionParams2.xy + float2(-1.000000e+000,1.000000e+000);
  r7.xy = r4.xy * float2(2.000000e+000,-2.000000e+000) + r4.zw;
  r7.xy = g_ReverseProjectionParams.xy * r7.xy;
  r8.xy = r7.xy * r8.zz;
  r8.w = 1.000000000e+000;
  r9.z = dot(r8.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r3.w = -v1.w + -r8.z;
  r3.w = 0.000000000e+000 >= r3.w;
  r3.w = r3.w ? 0x3f800000 : 0;
  r7.xy = -r4.xy + r0.xy;
  r7.xy = r3.ww * r7.xy + r4.xy;
  r10.xyzw = g_RefractionSampler.Sample(g_RefractionSampler_s, r7.xy).xyzw;
  r11.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.xy, 0.000000000e+000).xyzw;
  r5.w = g_ReverseProjectionParams.z + r11.x;
  r11.z = g_ReverseProjectionParams.w / r5.w;
  r0.xy = r0.xy * float2(2.000000e+000,-2.000000e+000) + r4.zw;
  r0.xy = g_ReverseProjectionParams.xy * r0.xy;
  r11.xy = r0.xy * r11.zz;
  r11.w = 1.000000000e+000;
  r0.x = dot(r11.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r0.y = -v1.w + -r11.z;
  r0.x = r0.x + -r9.z;
  r0.x = r3.w * r0.x + r9.z;
  r7.x = DepthFalloffDistance * -r0.x;
  r7.y = 0.000000000e+000;
  r11.xyzw = DepthFalloffRamp.Sample(DepthFalloffRamp_s, r7.xy).xyzw;
  r0.x = 1.000000000e+000 + -r11.w;
  r0.x = max(r0.x, v3.y);
  r3.w = r0.y / WaterOpacity;
  r12.w = saturate(max(r0.x, r3.w));
  r7.xyw = r11.xyz * r10.xyz;
  r13.xyz = WaterShallowColor.xyz + -WaterDeepColor.xyz;
  r13.xyz = r7.zzz * r13.xyz + WaterDeepColor.xyz;
  r10.xyz = -r10.xyz * r11.xyz + r13.xyz;
  r7.xyz = r12.www * r10.xyz + r7.xyw;
  r12.xyz = r7.xyz + r6.xyz;
  r0.x = 9.999999747e-005 < g_OceanConsts.m_RippleParamsSet1.w;
  if (r0.x != 0) {
  r0.x = sqrt(r0.w);
  r4.zw = g_OceanConsts.m_OceanViewOffset.xy + v9.zw;
  r0.z = saturate(v8.z * r0.z + -1.000000015e-001);
  r0.z = dot(r0.zz, r0.zz);
  r0.w = 1.000000e+000 / g_OceanConsts.m_RippleParamsSet1.x;
  r6.xy = r4.zw * r0.ww;
  r7.xw = r4.zw * r0.ww + -g_OceanConsts.m_RippleImpactSurfaceInvSize.xy;
  r7.yz = r6.yx;
  r10.xyzw = SourceRippleHeightTexture.Sample(SourceRippleHeightTexture_s, r7.xy).xyzw;
  r7.xyzw = SourceRippleHeightTexture.Sample(SourceRippleHeightTexture_s, r7.zw).xyzw;
  r13.yz = g_OceanConsts.m_RippleParamsSet3.ww * r4.wz;
  r13.xw = r4.zw * g_OceanConsts.m_RippleParamsSet3.ww + -g_OceanConsts.m_RippleImpactSurfaceInvSize.xy;
  r14.xyzw = SourceRippleHeightTexture.Sample(SourceRippleHeightTexture_s, r13.xy).xyzw;
  r13.xyzw = SourceRippleHeightTexture.Sample(SourceRippleHeightTexture_s, r13.zw).xyzw;
  r0.xw = float2(5.000000e-002,4.000000e-002) * r0.xx;
  r0.xzw = min(r0.xzw, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r3.w = r14.x + -r10.x;
  r10.x = r0.x * r3.w + r10.x;
  r3.w = r13.x + -r7.x;
  r10.y = r0.x * r3.w + r7.x;
  r4.zw = r6.xy * g_OceanConsts.m_WindPocketMapUVScaleAndBias.xy + g_OceanConsts.m_WindPocketMapUVScrolling.xy;
  r6.xyzw = WindPocketMapSampler.Sample(WindPocketMapSampler_s, r4.zw).xyzw;
  r0.x = g_OceanConsts.m_WindPocketMapUVScaleAndBias.z + r6.x;
  r0.w = 1.000000000e+000 + -r0.w;
  r0.x = r0.x * r0.w;
  r0.w = r12.w * -4.000000060e-001 + 8.000000119e-001;
  r0.x = r0.x * r0.w;
  r10.z = 1.000000000e+000;
  r6.xyz = r10.xyz * r0.zzz;
  r6.xyz = g_OceanConsts.m_RippleParamsSet1.www * r6.xyz;
  r0.xzw = r6.xyz * r0.xxx + r1.xyz;
  r3.w = dot(r0.xzw, r0.xzw);
  r3.w = rsqrt(r3.w);
  r1.xyz = r3.www * r0.xzw;
  }
  r0.x = abs(r0.y) * AlphaFadeParams.x + AlphaFadeParams.y;
  r0.y = AlphaFadeParams.z * r2.w;
  r0.z = 1.000000000e+000 + -r0.x;
  o0.w = r0.y * r0.z + r0.x;
  r0.x = 1.000000000e+000 + -r2.w;
  r0.y = dot(r3.xyz, r1.xyz);
  r0.y = 1.000000000e+000 + -r0.y;
  r0.y = min(abs(r0.y), 1.000000000e+000);
  r0.y = log2(r0.y);
  r0.z = log2(r0.x);
  r0.y = r0.y * FresnelPower + r0.z;
  r0.y = exp2(r0.y);
  r0.x = v3.w * r0.x;
  r0.xzw = r0.xxx * OceanSSSColor.xyz + v4.xyz;
  r2.w = dot(CausticParams_02.xyz, CausticParams_02.xyz);
  r2.w = r2.w == 0.000000;
  if (r2.w != 0) {
  r6.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  }
  if (r2.w == 0) {
  r9.x = dot(r8.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r9.y = dot(r8.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r9.w = dot(r8.xyzw, g_ViewToWorld._m03_m13_m23_m33);
  r7.x = dot(r9.xyzw, WorldToCausticTransform._m00_m10_m20_m30);
  r7.y = dot(r9.xyzw, WorldToCausticTransform._m01_m11_m21_m31);
  r4.zw = r7.xy / CausticParams_00.zw;
  r2.w = saturate(abs(r9.z) / CausticParams_00.x);
  r2.w = 1.000000000e+000 + -r2.w;
  r3.w = 1.000000000e+000 + -r2.w;
  r3.w = CausticParams_01.x * r3.w;
  r3.w = round(r3.w * 0.5) * 2;
  r7.xy = g_OceanConsts.m_WindPocketMapUVScrolling.xy + r4.zw;
  r7.xyzw = CausticMapSampler.SampleLevel(CausticMapSampler_s, r7.xy, r3.w).xyzw;
  r10.xyzw = GBufferNormalSampler.Sample(GBufferNormalSampler_s, r4.xy).xyzw;
  r9.xyw = r10.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.w = dot(r9.xyw, r9.xyw);
  r3.w = rsqrt(r3.w);
  r3.w = r9.w * r3.w;
  r4.xy = r4.zw * g_OceanConsts.m_WindPocketMapUVScaleAndBias.xy + g_OceanConsts.m_WindPocketMapUVScrolling.xy;
  r4.xyzw = WindPocketMapSampler.Sample(WindPocketMapSampler_s, r4.xy).xyzw;
  r4.x = g_OceanConsts.m_WindPocketMapUVScaleAndBias.z + r4.x;
  r3.w = abs(r3.w) * abs(r3.w);
  r3.w = r3.w * r3.w;
  r3.w = r3.w * r3.w;
  r4.yzw = r7.xyz * r3.www;
  r3.w = abs(r9.z) * CausticFadeParams.x + CausticFadeParams.y;
  r2.w = r3.w * r2.w;
  r4.yzw = r4.yzw * r2.www;
  r2.w = dot(r8.xyz, r8.xyz);
  r2.w = sqrt(r2.w);
  r2.w = saturate(r2.w / CausticParams_00.y);
  r2.w = 1.000000000e+000 + -r2.w;
  r4.yzw = r4.yzw * r2.www;
  r4.yzw = CausticParams_01.yyy * r4.yzw;
  r4.xyz = r4.yzw * r4.xxx;
  r6.xyz = CausticParams_02.xyz * r4.xyz;
  r6.w = 0.000000000e+000;
  }
  r2.w = 1.000000000e+000 + -r12.w;
  r4.xyzw = r2.wwww * r6.xyzw;
  r4.xyzw = r4.xyzw * r11.xyzw + r12.xyzw;
  r2.xyz = r2.xyz * r1.www + g_OceanConsts.m_OceanSunDirection.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r6.x = SpecularNormalScaler;
  r6.z = 1.000000000e+000;
  r6.xyz = r6.xxz * r1.xyz;
  r1.w = dot(r6.xyz, r6.xyz);
  r1.w = rsqrt(r1.w);
  r6.xyz = r6.xyz * r1.www;
  r1.w = saturate(dot(r6.xyz, g_OceanConsts.m_OceanSunDirection.xyz));
  r2.w = saturate(dot(r6.xyz, r2.xyz));
  r3.x = saturate(dot(r6.xyz, r3.xyz));
  r2.x = saturate(dot(g_OceanConsts.m_OceanSunDirection.xyz, r2.xyz));
  r2.y = g_SunSpecularParams.x + 2.000000000e+000;
  r2.y = r2.y * r1.w;
  r2.x = 1.000000000e+000 + -r2.x;
  r2.z = r2.x * r2.x;
  r2.z = r2.z * r2.z;
  r2.x = r2.x * r2.z;
  r2.x = r2.x * 9.800000191e-001 + 1.999999955e-002;
  r2.z = g_SunSpecularParams.x * 7.853981256e-001 + 1.570796251e+000;
  r2.z = sqrt(r2.z);
  r2.z = 1.000000e+000 / r2.z;
  r3.y = 1.000000000e+000 + -r2.z;
  r1.w = r1.w * r3.y + r2.z;
  r2.z = r3.x * r3.y + r2.z;
  r1.w = r2.z * r1.w;
  r1.w = 1.000000e+000 / r1.w;
  r2.y = 1.250000000e-001 * r2.y;
  r2.z = log2(r2.w);
  r2.z = g_SunSpecularParams.x * r2.z;
  r2.z = exp2(r2.z);
  r2.y = r2.y * r2.z;
  r1.w = r2.y * r1.w;
  r1.w = r1.w * r2.x;
  r1.w = 5.999999866e-002 * r1.w;
  r2.xyz = g_SunSpecularColor.xyz * r1.www;
  r2.xyz = max(r2.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.w = saturate(dot(r1.xyz, g_SunDirection.xyz));
  r3.xyz = g_OceanConsts.m_OceanSunColor.xyz * r1.www;
  r2.xyz = r4.xyz * r3.xyz + r2.xyz;
  r3.xyz = r5.xyz + -r2.xyz;
  r2.xyz = r0.yyy * r3.xyz + r2.xyz;
  r0.y = dot(r1.xyz, r1.xyz);
  r0.y = rsqrt(r0.y);
  r1.xyz = r1.xyz * r0.yyy;
  r1.xyw = r1.xyz * r1.xyz;
  r0.y = r1.z >= 0.000000000e+000;
  r1.z = r0.y ? 0x3f800000 : 0;
  r0.y = r0.y ? 0.000000000e+000 : 1.000000000e+000;
  r1.x = r1.x + r1.y;
  r1.y = r1.w * r1.z;
  r3.xyzw = g_AmbientCube[1].xyzw * r1.yyyy;
  r3.xyzw = r1.xxxx * g_AmbientCube[0].xyzw + r3.xyzw;
  r0.y = r1.w * r0.y;
  r1.xyzw = r0.yyyy * g_AmbientCube[2].xyzw + r3.xyzw;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz * r4.xyz;
  r1.xyz = r1.xyz * r4.www + r2.xyz;
  o0.xyz = r1.xyz + r0.xzw;
  return;
}