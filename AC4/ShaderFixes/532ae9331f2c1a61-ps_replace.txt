
cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_DepthParams : packoffset(c150);
  float4 g_WorldLightMapParameters1 : packoffset(c155);
  float4 g_WorldLightMapParameters2 : packoffset(c156);
  float4 g_WorldLightMapParameters3 : packoffset(c157);
  float4 g_WorldLightMapUVParameters : packoffset(c158);
  float4 g_WorldAOParameters : packoffset(c144);
  float4 g_WorldAORangeParameters : packoffset(c145);
  float4 g_WeatherExposedParams : packoffset(c143);
  float4 g_DebugValue : packoffset(c159) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
}
SamplerState DepthSurface_s : register(s2);
SamplerState g_PointClampSampler_NG_s : register(s3);
SamplerState g_WeatherReflectionCubeMap_s : register(s5);
SamplerState g_AmbientTexture_s : register(s13);
Texture2D<float4> g_Albedo_NG : register(t0);
Texture2D<float4> g_Normals_NG : register(t1);
Texture2D<float4> DepthSurface : register(t2);
Texture2D<float4> g_LightingAccumulation_NG : register(t3);
TextureCube<float4> g_WeatherReflectionCubeMap : register(t5);
Texture2D<float4> g_AmbientTexture : register(t13);

Texture2D<float4> StereoParams : register(t125);
void main(  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.xy = r0.xy * g_ViewportScaleOffset.xy + g_ViewportScaleOffset.zw;
  r1.xyzw = DepthSurface.SampleLevel(DepthSurface_s, r0.xy, 0.000000000e+000).xyzw;
  r0.z = g_ReverseProjectionParams.z + r1.x;
  r0.z = g_ReverseProjectionParams.w / r0.z;
  r1.xyz = v2.xyz * r0.zzz + v3.xyz;

//Mike_ar69 - Stereo Shift
float4 stereoParams = StereoParams.Load(0);
float4 r21, r22;
r21.xyz = r1.xyz;
r21.w = 1.000000000e+000;
r22.x = dot(r21.xyzw, g_WorldToView._m00_m10_m20_m30);
r22.y = dot(r21.xyzw, g_WorldToView._m01_m11_m21_m31);
r22.z = dot(r21.xyzw, g_WorldToView._m02_m12_m22_m32);
r22.w = dot(r21.xyzw, g_WorldToView._m03_m13_m23_m33);
r22.x +=  stereoParams.x * (-r22.z - stereoParams.y ) * g_ReverseProjectionParams.x;
r21.x = dot(r22.xyzw, g_ViewToWorld._m00_m10_m20_m30);
r21.y = dot(r22.xyzw, g_ViewToWorld._m01_m11_m21_m31);
r21.z = dot(r22.xyzw, g_ViewToWorld._m02_m12_m22_m32);
r1.xyz = r21.xyz;


  r1.xyw = g_EyePosition.xyz + -r1.xyz;
  r0.z = dot(r1.xyw, r1.xyw);
  r0.z = rsqrt(r0.z);
  r2.xyz = r1.xyw * r0.zzz;
  r1.xyw = r1.xyw * r0.zzz + g_DeferredDirectLight.m_Direction.xyz;
  r3.xyzw = g_Normals_NG.Sample(g_PointClampSampler_NG_s, r0.xy).xyzw;
  r3.xyz = r3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = r3.w + r3.w;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r3.xyz * r0.www;
  r0.w = dot(g_DeferredDirectLight.m_Direction.xyz, r3.xyz);
  r2.w = saturate(dot(r2.xyz, r4.xyz));
  r1.z = -r1.z * r2.w + g_WeatherExposedParams.w;
  r3.xyzw = g_Albedo_NG.Sample(g_PointClampSampler_NG_s, r0.xy).xyzw;
  r1.z = saturate(dot(r1.zz, r3.ww));
  r1.z = max(r1.z, r3.w);
  r1.z = r1.z * 2.000000000e+000 + -1.000000000e+000;
  r2.w = r4.z * 5.000000000e-001 + r1.z;
  r1.z = saturate(g_WeatherExposedParams.z + r1.z);
  r2.w = saturate(5.000000000e-001 + r2.w);
  r1.z = r2.w * r1.z;
  r5.xyzw = g_LightingAccumulation_NG.Sample(g_PointClampSampler_NG_s, r0.xy).xyzw;
  r6.xyzw = g_AmbientTexture.Sample(g_AmbientTexture_s, r0.xy).xyzw;
  r0.x = 1.000000000e+000 + -r5.w;
  r0.x = r1.z * r0.x;
  r0.y = r0.x * r5.w;
  r0.x = -r0.x * 5.000000000e-001 + 1.000000000e+000;
  r0.y = saturate(r0.y * 1.500000000e+000 + r5.w);
  r1.z = 1.000000000e+000 + -r0.y;
  r1.z = 6.000000000e+000 * r1.z;
  r2.w = dot(-r2.xyz, r4.xyz);
  r2.w = r2.w + r2.w;
  r2.xyz = r4.xzy * -r2.www + -r2.xzy;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r2.xyz = r2.xyz * r2.www;
  r2.xyzw = g_WeatherReflectionCubeMap.SampleLevel(g_WeatherReflectionCubeMap_s, r2.xyz, r1.z).xyzw;
  r2.xyz = r2.xyz + r2.xyz;
  r2.xyz = r3.xyz * r0.xxx + r2.xyz;
  r2.xyz = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + r2.xyz;
  r3.xyz = g_DeferredDirectLight.m_Color.xyz * r2.xyz;
  r2.xyz = saturate(r6.xyz * r2.xyz);
  r3.xyz = r3.xyz * r6.www;
  r0.x = 3.000000119e-001 + -r0.w;
  r0.w = saturate(r0.w);
  r0.x = r0.z * r0.x;
  r0.x = max(r0.x, 0.000000000e+000);
  r0.x = r0.w + r0.x;
  r2.xyz = r3.xyz * r0.xxx + r2.xyz;
  r0.x = dot(r1.xyw, r1.xyw);
  r0.x = rsqrt(r0.x);
  r1.xyz = r1.xyw * r0.xxx;
  r0.x = saturate(dot(r4.xyz, r1.xyz));
  r0.x = log2(r0.x);
  r0.z = 8.479969025e+000 * r0.y;
  o0.w = r0.y;
  r0.y = exp2(r0.z);
  r0.x = r0.y * r0.x;
  r0.y = r0.y * 2.000000000e+000 + -2.000000000e+000;
  r0.y = 1.250000000e-001 * r0.y;
  r0.x = exp2(r0.x);
  r0.x = r0.w * r0.x;
  r0.x = r0.x * r0.y;
  r0.xyz = g_DeferredDirectLight.m_Color.xyz * r0.xxx;
  r0.xyz = r0.xyz * r6.www;
  r0.xyz = r0.xyz * float3(6.000000e-002,6.000000e-002,6.000000e-002) + r2.xyz;
  o0.xyz = r0.xyz + r5.xyz;
  return;
}
