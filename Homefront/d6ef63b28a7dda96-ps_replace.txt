// DEcals 2 PS

cbuffer PER_BATCH : register(b0)
{
  float4 PS_ScreenSize : packoffset(c0);
}

cbuffer WeatherDecalBuffer : register(b4)
{

  struct
  {
    row_major float4x4 mClipToDecalSpace;
    float4 vGeneralParams;
    float4 vTextureRect;
  } mWeatherDecals[128] : packoffset(c0);

}

SamplerState _tex0_s : register(s0);
SamplerState _tex2_s : register(s2);
SamplerState _tex5_s : register(s5);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex5 : register(t5);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  nointerpolation int v1 : TEXCOORD0,
  out float o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v0.xy / PS_ScreenSize.xy;
  r1.z = _tex0.SampleLevel(_tex0_s, r0.xy, 0).x;
  r1.xy = r0.xy * float2(2,-2) + float2(-1,1);
  r0.xyz = _tex5.SampleLevel(_tex5_s, r0.xy, 0).xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.w = 1;
  // r0.w = (int)v1.x * 6;
  r0.w = (int)v1.x; // * 6;
  // r2.x = dot(mWeatherDecals[v1.x]._m00_m01_m02_m03, r1.xyzw);
  // r2.y = dot(mWeatherDecals[v1.x]._m10_m11_m12_m13, r1.xyzw);
  // r2.z = dot(mWeatherDecals[v1.x]._m20_m21_m22_m23, r1.xyzw);
  // r1.x = dot(mWeatherDecals[v1.x]._m30_m31_m32_m33, r1.xyzw);
  r2.x = dot(mWeatherDecals[v1.x].mClipToDecalSpace._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(mWeatherDecals[v1.x].mClipToDecalSpace._m10_m11_m12_m13, r1.xyzw);
  r2.z = dot(mWeatherDecals[v1.x].mClipToDecalSpace._m20_m21_m22_m23, r1.xyzw);
  r1.x = dot(mWeatherDecals[v1.x].mClipToDecalSpace._m30_m31_m32_m33, r1.xyzw);
  r1.xyz = r2.xyz / r1.xxx;
  r2.xyzw = r1.xyxy * float4(1,1,-1,-1) + float4(0,0,1,1);
  r2.xyzw = cmp(r2.xyzw < float4(0,0,0,0));
  r2.xy = (int2)r2.zw | (int2)r2.xy;
  r1.w = (int)r2.y | (int)r2.x;
  if (r1.w != 0) discard;
  r2.xy = cmp(r1.zz < float2(0,0.200000003));
  if (r2.x != 0) discard;
  r1.w = r2.y ? 5 : 1.20000005;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = rsqrt(r0.x);
  r0.x = r0.z * r0.x;
  r0.x = r0.x * 0.5 + 0.5;
  r0.yz = mWeatherDecals[v1.x].vGeneralParams.xy * float2(2,2) + float2(-1,-1);
  r0.x = saturate(r0.x * r0.y + -r0.z);
  r0.y = -0.200000003 + r1.z;
  r1.xy = r1.xy * mWeatherDecals[v1.x].vTextureRect.zw + mWeatherDecals[v1.x].vTextureRect.xy;
  r0.z = _tex2.Sample(_tex2_s, r1.xy).w;
  r0.y = r0.y * r1.w;
  r0.y = -r0.y * r0.y + 1;
  r0.y = max(0, r0.y);
  r0.x = r0.y * r0.x;
  r0.x = r0.z * r0.x;
  o0.x = mWeatherDecals[v1.x].vGeneralParams.z * r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.3.11 on Tue Aug 21 20:11:57 2018
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions:
//
// cbuffer PER_BATCH
// {
//
//   float4 PS_ScreenSize;              // Offset:    0 Size:    16
//
// }
//
// cbuffer WeatherDecalBuffer
// {
//
//   struct WeatherDecal
//   {
//
//       row_major float4x4 mClipToDecalSpace;// Offset:    0
//       float4 vGeneralParams;         // Offset:   64
//       float4 vTextureRect;           // Offset:   80
//
//   } mWeatherDecals[128];             // Offset:    0 Size: 12288
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex2                             sampler      NA          NA    2        1
// _tex5                             sampler      NA          NA    5        1
// _tex0                             texture  float4          2d    0        1
// _tex2                             texture  float4          2d    2        1
// _tex5                             texture  float4          2d    5        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// WeatherDecalBuffer                cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy
// TEXCOORD                 0   x           1     NONE     int   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   x           0   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb4[768], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps constant v1.x
dcl_output o0.x
dcl_temps 3
div r0.xy, v0.xyxx, cb0[0].xyxx
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t0.yzxw, s0, l(0.000000)
mad r1.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t5.xyzw, s5, l(0.000000)
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mov r1.w, l(1.000000)
imul null, r0.w, v1.x, l(6)
dp4 r2.x, cb4[r0.w + 0].xyzw, r1.xyzw
dp4 r2.y, cb4[r0.w + 1].xyzw, r1.xyzw
dp4 r2.z, cb4[r0.w + 2].xyzw, r1.xyzw
dp4 r1.x, cb4[r0.w + 3].xyzw, r1.xyzw
div r1.xyz, r2.xyzx, r1.xxxx
mad r2.xyzw, r1.xyxy, l(1.000000, 1.000000, -1.000000, -1.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
lt r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r2.xy, r2.zwzz, r2.xyxx
or r1.w, r2.y, r2.x
discard_nz r1.w
lt r2.xy, r1.zzzz, l(0.000000, 0.200000, 0.000000, 0.000000)
discard_nz r2.x
movc r1.w, r2.y, l(5.000000), l(1.200000)
dp3 r0.x, r0.xyzx, r0.xyzx
rsq r0.x, r0.x
mul r0.x, r0.x, r0.z
mad r0.x, r0.x, l(0.500000), l(0.500000)
mad r0.yz, cb4[r0.w + 4].xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
mad_sat r0.x, r0.x, r0.y, -r0.z
add r0.y, r1.z, l(-0.200000)
mad r1.xy, r1.xyxx, cb4[r0.w + 5].zwzz, cb4[r0.w + 5].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.xywz, s2
mul r0.y, r1.w, r0.y
mad r0.y, -r0.y, r0.y, l(1.000000)
max r0.y, r0.y, l(0.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r0.x, r0.z
mul o0.x, r0.x, cb4[r0.w + 4].z
ret
// Approximately 36 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
