cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float Distortion_ScrollU : packoffset(c0);
  float Distortion_ScrollV : packoffset(c1);
  float Diffuse_ScrollV_1 : packoffset(c2);
  float4 Diffuse_Color : packoffset(c3);
  float Main_Opacity : packoffset(c4);
  float Diffuse_ScrollU_1 : packoffset(c5);
  float Distortion_Amount : packoffset(c6);
  float Fade_Distance : packoffset(c7);
  float Diffuse_Light_Amount : packoffset(c8);
  float Specular_Alpha : packoffset(c9);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Diffuse_MapSampler_s : register(s0);
SamplerState Distortion_MapSampler_s : register(s1);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Diffuse_MapSampler : register(t0);
Texture2D<float4> Distortion_MapSampler : register(t1);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float2 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xyz = v1.xyz / v1.www;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r1.x = floor(r0.x);
  r1.y = floor(r0.y);
  r0.xy = -r1.xy + r0.xy;
  r1.xy = float2(5.000000e-001,5.000000e-001) + r1.xy;
  r2.xy = r1.xy * cb4[9].xy + cb4[9].xy;
  r2.zw = cb4[9].xy * r1.xy;
  r1.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zw).xyzw;
  r1.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zy).xyzw;
  r1.z = r4.y;
  r1.y = r3.y;
  r3.xyzw = -v3.xxxx + r1.xyzw;
  r1.x = 5.000000e-001 >= r1.x;
  r1.y = 5.000000e-001 >= r1.y;
  r1.z = 5.000000e-001 >= r1.z;
  r1.w = 5.000000e-001 >= r1.w;
  r1.x = r1.x ? 1 : 0;
  r1.y = r1.y ? 1 : 0;
  r1.z = r1.z ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r1.xyzw = r3.xyzw + r1.xyzw;
  r2.xy = r1.xy + r1.zw;
  r2.x = r2.x >= r2.y;
  r2.y = r2.y >= r2.x;
  r0.w = r2.y ? 1.000000 : 0;
  r2.x = r2.x ? -1.000000000e+000 : -0.000000000e+000;
  r0.w = r2.x + r0.w;
  r2.x = r0.w == 0.000000;
  r3.x = saturate(r0.x + r0.w);
  r1.zw = max(r1.yw, r1.xz);
  r0.w = r1.y + -r1.x;
  r1.x = r1.w + -r1.z;
  r1.y = r1.x == 0.000000;
  r3.y = saturate(r1.x + r0.y);
  r0.x = saturate(r0.x + r0.w);
  r0.w = abs(r0.w) >= 1.000000000e+000;
  r1.x = r1.y ? r2.x : 0;
  r0.w = r0.w ? r1.x : 0;
  r0.y = 0.000000000e+000;
  r0.x = r0.w ? r0.x : r3.x;
  r0.y = r0.w ? r0.y : r3.y;
  r1.xy = cb4[9].xy;
  r0.xy = r0.xy * r1.xy + r2.zw;
  r1.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r1.xyzw = max(r1.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r0.x = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.x = max(r0.x, 1.000000047e-003);
  r0.x = r1.w / r0.x;
  r0.xyw = r1.xyz * r0.xxx;
  r1.xyz = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + r1.xyz;
  r1.xyz = Diffuse_Light_Amount * r1.xyz + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r0.xyw = Specular_Alpha * r0.xyw;
  r2.xyzw = Distortion_MapSampler.Sample(Distortion_MapSampler_s, v2.zw).xyzw;
  r2.xy = r2.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.xy = r2.xy * Distortion_Amount + v2.xy;
  r2.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, r2.xy).xyzw;
  r2.xyzw = Diffuse_Color.xyzw * r2.xyzw;
  r0.xyw = r2.xyz * r1.xyz + r0.xyw;
  r1.x = 1.000000000e+000 + -v3.y;
  r0.xyw = r1.xxx * r0.xyw;
  r1.xyz = v3.yyy * cb4[4].xyz + r0.xyw;
  r0.x = 1.000000e+000 / Fade_Distance;
  r0.x = saturate(r0.z * r0.x);
  r0.y = r0.x * -2.000000000e+000 + 3.000000000e+000;
  r0.x = r0.x * r0.x;
  r0.x = r0.y * r0.x;
  r0.x = r2.w * r0.x;
  r1.w = saturate(Main_Opacity * r0.x);
  o0.xyzw = cb4[1].xyzw * r1.xyzw;
  return;
}