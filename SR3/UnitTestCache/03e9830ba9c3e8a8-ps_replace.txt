
cbuffer vc0 : register(b0)
{
  float Invert_Blend_Map : packoffset(c0);
  float Specular_Power : packoffset(c1);
  float Specular_Power_2 : packoffset(c2);
}
SamplerState Blend_MapSampler_s : register(s0);
Texture2D<float4> Blend_MapSampler : register(t0);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v3.xyz * r0.xxx + float3(0.000000e+000,0.000000e+000,-1.000000e+000);
  r0.z = dot(r0.xyz, r0.xyz);
  r0.z = rsqrt(r0.z);
  r0.xy = r0.xy * r0.zz;
  o0.xy = r0.xy * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  o0.zw = float2(0.000000e+000,1.000000e+000);
  o1.x = saturate(3.051757813e-005 * v2.z);
  o1.y = v2.w;
  o1.zw = float2(0.000000e+000,1.000000e+000);
  r0.x = Invert_Blend_Map >= 1.000000000e+000;
  r0.y = 0.000000000e+000 >= Invert_Blend_Map;
  r0.x = r0.x ? 1 : 0;
  r0.y = r0.y ? 1 : 0;
  r1.xyzw = Blend_MapSampler.Sample(Blend_MapSampler_s, v1.xy).xyzw;
  r0.y = r1.x * r0.y;
  r0.z = 1.000000000e+000 + -r1.x;
  r0.x = r0.z * r0.x + r0.y;
  r0.y = Specular_Power_2 + -Specular_Power;
  r0.x = r0.x * r0.y + Specular_Power;
  r0.x = 1.953125000e-003 * r0.x;
  o2.x = max(r0.x, 3.906250000e-003);
  o2.y = v3.w;
  o2.zw = float2(0.000000e+000,1.000000e+000);
  return;
}