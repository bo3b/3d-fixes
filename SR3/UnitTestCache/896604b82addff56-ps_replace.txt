cbuffer cb4 : register(b4)
{
  float4 cb4[14];
}


cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c0);
  float4 Hair_Parameters : packoffset(c1);
  float2 Hair_Spec_Alpha : packoffset(c2);
  float4 Hair_Spec_Color1 : packoffset(c3);
  float4 Hair_Spec_Color2 : packoffset(c4);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 lightPos : packoffset(c13);
}
SamplerState Dob_MapSampler_s : register(s0);
SamplerState Diffuse_MapSampler_s : register(s1);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Dob_MapSampler : register(t0);
Texture2D<float4> Diffuse_MapSampler : register(t1);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v3.xy / v3.ww;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r0.z = floor(r0.x);
  r0.w = floor(r0.y);
  r0.xy = r0.xy + -r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.xy = r0.zw * cb4[9].xy + cb4[9].xy;
  r1.zw = cb4[9].xy * r0.zw;
  r2.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zw).xyzw;
  r2.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zy).xyzw;
  r2.z = r4.y;
  r2.y = r3.y;
  r3.xyzw = -v4.wwww + r2.xyzw;
  r2.x = 5.000000e-001 >= r2.x;
  r2.y = 5.000000e-001 >= r2.y;
  r2.z = 5.000000e-001 >= r2.z;
  r2.w = 5.000000e-001 >= r2.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.zw = r2.xy + r2.zw;
  r0.z = r0.z >= r0.w;
  r0.w = r0.w >= r0.z;
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.z = r0.w + r0.z;
  r0.w = r0.z == 0.000000;
  r1.x = saturate(r0.x + r0.z);
  r2.zw = max(r2.yw, r2.xz);
  r0.z = r2.y + -r2.x;
  r2.x = r2.w + -r2.z;
  r2.y = r2.x == 0.000000;
  r1.y = saturate(r2.x + r0.y);
  r0.x = saturate(r0.x + r0.z);
  r0.z = abs(r0.z) >= 1.000000000e+000;
  r0.w = r0.w ? r2.y : 0;
  r0.z = r0.z ? r0.w : 0;
  r0.y = 0.000000000e+000;
  r0.x = r0.z ? r0.x : r1.x;
  r0.y = r0.z ? r0.y : r1.y;
  r0.zw = cb4[9].xy;
  r0.xy = r0.xy * r0.zw + r1.zw;
  r0.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r0.xyzw = max(r0.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = max(r1.x, 1.000000047e-003);
  r0.w = r0.w / r1.x;
  r1.xyz = r0.xyz * r0.www;
  r0.w = dot(v2.xyz, v2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v2.xyz * r0.www;
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v4.xyz * r0.www;
  r4.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v1.xy).xyzw;
  r4.xyz = r4.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r3.xyz = -r4.xxx * r3.xyz;
  r2.xyz = -r4.yyy * r2.xyz + r3.xyz;
  r0.w = dot(v5.xyz, v5.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v5.xyz * r0.www;
  r2.xyz = r4.zzz * r3.xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r3.xyz = -cb4[13].xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = dot(r2.xyz, r3.xyz);
  r0.w = 1.000000000e+000 + -abs(-r0.w);
  r1.w = r0.w * r0.w;
  r0.w = log2(r0.w);
  r0.w = 1.000000000e+001 * r0.w;
  r0.w = exp2(r0.w);
  r1.w = r1.w * r1.w;
  r2.x = 1.000000000e+000 + -r0.w;
  r2.yzw = r0.www * r1.xyz;
  r0.w = r2.x * r1.w;
  r1.xyz = r0.www * r1.xyz;
  r1.xyz = Hair_Spec_Color2.xyz * r1.xyz;
  r1.xyz = r2.yzw * Hair_Spec_Color1.xyz + r1.xyz;
  r2.xyzw = Dob_MapSampler.Sample(Dob_MapSampler_s, v1.xy).xzwy;
  r0.w = Hair_Spec_Alpha.x * r2.x;
  r1.xyz = r0.www * r1.xyz;
  r0.w = floor(Hair_Parameters.x);
  r3.x = r0.w == 0;
  r3.y = r0.w == 2;
  r3.z = r0.w == 4;
  r3.w = r0.w == 6;
  r4.xy = (int2)r3.yx | (int2)r3.xw;
  r1.w = (int)r3.z | (int)r4.x;
  r1.w = (int)r3.w | (int)r1.w;
  r3.x = Hair_Parameters.x + -r0.w;
  r4.x = r0.w == 1;
  r4.z = r0.w == 3;
  r4.w = r0.w == 5;
  r0.w = 1.000000000e+000 + -r3.x;
  r0.w = r1.w ? r0.w : r3.x;
  r1.w = Hair_Parameters.y + -Hair_Parameters.z;
  r1.w = r2.y * r1.w + Hair_Parameters.z;
  r0.w = -r1.w * r0.w + 1.000000000e+000;
  r1.w = 1.000000000e+000 + -r1.w;
  r5.x = r2.y * Hair_Parameters.w + Hair_Spec_Alpha.y;
  r5.z = r5.x * r0.w;
  r5.y = r5.x * r1.w;
  r6.x = r4.y ? r5.x : 0;
  r6.y = r4.y ? r5.z : 0;
  r6.z = r4.y ? r5.y : 0;
  r6.x = r4.x ? r5.z : r6.x;
  r6.y = r4.x ? r5.x : r6.y;
  r6.z = r4.x ? r5.y : r6.z;
  r3.x = r3.y ? r5.y : r6.x;
  r3.y = r3.y ? r5.x : r6.y;
  r3.w = r3.y ? r5.z : r6.z;
  r3.x = r4.z ? r5.y : r3.x;
  r3.y = r4.z ? r5.z : r3.y;
  r3.w = r4.z ? r5.x : r3.w;
  r3.x = r3.z ? r5.z : r3.x;
  r3.y = r3.z ? r5.y : r3.y;
  r3.z = r3.z ? r5.x : r3.w;
  r3.x = r4.w ? r5.x : r3.x;
  r3.y = r4.w ? r5.y : r3.y;
  r3.z = r4.w ? r5.z : r3.z;
  r0.xyz = r3.xyz * r0.xyz + r1.xyz;
  r0.w = 1.000000000e+000 + -v5.w;
  r0.xyz = r0.www * r0.xyz;
  r2.xyz = v5.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r2.xyzw;
  return;
}