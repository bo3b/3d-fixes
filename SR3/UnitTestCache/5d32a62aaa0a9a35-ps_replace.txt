cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float Decal_Map_OffsetU : packoffset(c0);
  float Decal_Map_OffsetV : packoffset(c1);
  float Decal_Map_Opacity : packoffset(c2);
  float Self_Illumination : packoffset(c3);
  float Decal_Map_TilingU : packoffset(c4);
  float4 Diffuse_Color : packoffset(c5);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Diffuse_MapSampler_s : register(s0);
SamplerState Decal_MapSampler_s : register(s1);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Diffuse_MapSampler : register(t0);
Texture2D<float4> Decal_MapSampler : register(t1);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xy = v2.xy / v2.ww;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r0.z = floor(r0.x);
  r0.w = floor(r0.y);
  r0.xy = r0.xy + -r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.xy = r0.zw * cb4[9].xy + cb4[9].xy;
  r1.zw = cb4[9].xy * r0.zw;
  r2.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zw).xyzw;
  r2.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zy).xyzw;
  r2.z = r4.y;
  r2.y = r3.y;
  r3.xyzw = -v4.xxxx + r2.xyzw;
  r2.x = 5.000000e-001 >= r2.x;
  r2.y = 5.000000e-001 >= r2.y;
  r2.z = 5.000000e-001 >= r2.z;
  r2.w = 5.000000e-001 >= r2.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.zw = r2.xy + r2.zw;
  r0.z = r0.z >= r0.w;
  r0.w = r0.w >= r0.z;
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.z = r0.w + r0.z;
  r0.w = r0.z == 0.000000;
  r1.x = saturate(r0.x + r0.z);
  r2.zw = max(r2.yw, r2.xz);
  r0.z = r2.y + -r2.x;
  r2.x = r2.w + -r2.z;
  r2.y = r2.x == 0.000000;
  r1.y = saturate(r2.x + r0.y);
  r0.x = saturate(r0.x + r0.z);
  r0.z = abs(r0.z) >= 1.000000000e+000;
  r0.w = r0.w ? r2.y : 0;
  r0.z = r0.z ? r0.w : 0;
  r0.y = 0.000000000e+000;
  r0.x = r0.z ? r0.x : r1.x;
  r0.y = r0.z ? r0.y : r1.y;
  r0.zw = cb4[9].xy;
  r0.xy = r0.xy * r0.zw + r1.zw;
  r0.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r0.w = 4.000000000e+000 * v4.y;
  r1.x = v5.x * r0.w;
  r0.w = 1.000000e+000 / r0.w;
  r1.x = 1.000000e+000 / r1.x;
  r1.y = r1.x / v4.w;
  r1.x = 2.500000000e-001 * r1.x;
  r1.z = v3.w / r1.y;
  r1.w = r1.z >= -r1.z;
  r1.z = frac(abs(r1.z));
  r1.z = r1.w ? r1.z : -r1.z;
  r1.x = r1.z * r1.y + -r1.x;
  r1.y = v3.w + -r1.x;
  r1.z = r0.w / v4.z;
  r0.w = 2.500000000e-001 * r0.w;
  r1.w = v3.z / r1.z;
  r2.x = r1.w >= -r1.w;
  r1.w = frac(abs(r1.w));
  r1.w = r2.x ? r1.w : -r1.w;
  r0.w = r1.w * r1.z + -r0.w;
  r1.x = v3.z + -r0.w;
  r1.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, r1.xy).xyzw;
  r2.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v3.zw).xyzw;
  r2.xyzw = v1.xyzw * r2.xyzw;
  r1.xyzw = r1.xyzw * v1.xyzw + -r2.xyzw;
  r0.w = 1.000000e+000 / v2.z;
  r0.w = saturate(r0.w);
  r0.w = -4.999999888e-003 + r0.w;
  r0.w = saturate(2.222222137e+001 * r0.w);
  r3.x = r0.w * -2.000000000e+000 + 3.000000000e+000;
  r0.w = r0.w * r0.w;
  r0.w = r3.x * r0.w;
  r0.w = min(r0.w, 1.000000000e+000);
  r1.xyzw = r0.wwww * r1.xyzw + r2.xyzw;
  r2.xy = float2(3.200000e+001,3.200000e+001) * v3.xy;
  r2.z = r2.x >= -r2.x;
  r2.w = r2.y >= -r2.y;
  r2.xy = frac(abs(r2.xy));
  r2.x = r2.z ? r2.x : -r2.x;
  r2.y = r2.w ? r2.y : -r2.y;
  r2.xy = -r2.xy * float2(3.125000e-002,3.125000e-002) + v3.xy;
  r2.xyzw = Decal_MapSampler.Sample(Decal_MapSampler_s, r2.xy).xyzw;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r0.w = Self_Illumination * v5.y;
  r0.w = -7.000000000e+000 * r0.w;
  r0.w = Self_Illumination * 8.000000000e+000 + r0.w;
  r2.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * r0.xyz + r2.xyz;
  r0.w = 1.000000000e+000 + -v5.z;
  r0.xyz = r0.www * r0.xyz;
  r1.xyz = v5.zzz * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r1.xyzw;
  return;
}