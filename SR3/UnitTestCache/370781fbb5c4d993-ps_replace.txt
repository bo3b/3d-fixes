cbuffer cb4 : register(b4)
{
  float4 cb4[11];
}


cbuffer vc0 : register(b0)
{
  float4 IR_Light_Pos : packoffset(c0);
  float4 Link_categories : packoffset(c1);
  float4 IR_Light_Dir : packoffset(c2);
  float4 IR_light_back_color : packoffset(c3);
  float4 IR_Light_Color : packoffset(c4);
  float4 IR_Light_Info : packoffset(c5);
}

cbuffer vc4 : register(b4)
{
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState IR_GBuffer_LightingSampler_s : register(s12);
SamplerState IR_GBuffer_NormalsSampler_s : register(s13);
SamplerState IR_GBuffer_DepthSampler_s : register(s14);
Texture2D<float4> IR_GBuffer_LightingSampler : register(t12);
Texture2D<float4> IR_GBuffer_NormalsSampler : register(t13);
Texture2D<float4> IR_GBuffer_DepthSampler : register(t14);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyzw = IR_GBuffer_NormalsSampler.Sample(IR_GBuffer_NormalsSampler_s, v1.xy).xyzw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = dot(r0.xy, r0.xy);
  r0.w = min(r0.w, 1.000000000e+000);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.z = sqrt(r0.w);
  r0.w = r0.z + r0.z;
  r0.xyz = r0.www * r0.xyz;
  r0.w = -r0.z;
  r0.xyz = float3(0.000000e+000,0.000000e+000,1.000000e+000) + r0.xyw;
  r0.x = dot(r0.xyz, -IR_Light_Dir.xyz);
  r0.yz = r0.xx * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.x = min(abs(r0.x), 1.000000000e+000);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.yz = r0.yz * r0.yz;
  r0.yz = min(r0.yz, float2(1.000000e+000,1.000000e+000));
  r1.xyz = IR_Light_Color.xyz * r0.zzz;
  r0.yzw = IR_Light_Color.xyz * r0.yyy + r1.xyz;
  r0.xyz = IR_light_back_color.xyz * r0.xxx + r0.yzw;
  r1.xyzw = IR_GBuffer_DepthSampler.Sample(IR_GBuffer_DepthSampler_s, v1.xy).xyzw;
  r0.w = cb4[10].z * r1.x + cb4[10].w;
  r0.w = 1.000000e+000 / r0.w;
  r1.xyz = -v2.xyz * r0.www + IR_Light_Pos.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r0.w = -IR_Light_Info.y + r0.w;
  r1.x = IR_Light_Info.z + -IR_Light_Info.y;
  r0.w = saturate(r0.w / r1.x);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = log2(r0.w);
  r0.w = IR_Light_Info.x * r0.w;
  r0.w = exp2(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyzw = IR_GBuffer_LightingSampler.Sample(IR_GBuffer_LightingSampler_s, v1.xy).xyzw;
  r0.w = r1.y + r1.y;
  r1.x = r0.w >= -r0.w;
  r0.w = frac(abs(r0.w));
  r0.w = r1.x ? r0.w : -r0.w;
  r1.x = r0.w >= -1.666667e-001;
  r1.y = r0.w >= 1.666667e-001;
  r1.z = r0.w >= 5.000000e-001;
  r1.w = r0.w >= 8.333333e-001;
  r2.x = 1.666667e-001 >= r0.w;
  r2.y = 5.000000e-001 >= r0.w;
  r2.z = 8.333333e-001 >= r0.w;
  r2.w = 1.166667e+000 >= r0.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r1.x = r1.x ? 1 : 0;
  r1.y = r1.y ? 1 : 0;
  r1.z = r1.z ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r1.xyzw = min(r2.xyzw, r1.xyzw);
  r0.w = saturate(dot(Link_categories.xyzw, r1.xyzw));
  o0.xyz = r0.xyz * r0.www;
  o0.w = 0.000000000e+000;
  return;
}