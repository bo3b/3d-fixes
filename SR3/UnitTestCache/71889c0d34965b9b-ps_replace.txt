
cbuffer vc0 : register(b0)
{
  float blur_radius : packoffset(c0);
  float4 focal_params : packoffset(c1);
  float4 pixel_steps : packoffset(c2);
  float4 depth_params : packoffset(c3);
}
Texture2D<float4> depth_textureTexture : register(t0);
Texture2D<float4> color_samplerTexture : register(t1);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xy = pixel_steps.xy * v1.xy;
  r0.y = 2.500000000e-001 * r0.y;
  r0.xy = (int2)r0.xy;
  r0.y = (uint)r0.y << 2;
  r0.z = (int)r0.y + 3;
  r0.y = (int)r0.z + 5;
  r0.y = r0.y;
  r0.y = r0.y < pixel_steps.y;
  r0.w = 0.000000000e+000;
  r1.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, 4, 0)).xyzw;
  r1.x = depth_params.z * r1.x + depth_params.w;
  r1.x = 1.000000e+000 / r1.x;
  r1.xy = -focal_params.zx + r1.xx;
  r1.zw = focal_params.wy + -focal_params.zx;
  r1.xy = saturate(r1.xy / r1.zw);
  r1.y = 1.000000000e+000 + -r1.y;
  r1.x = blur_radius * r1.x + r1.y;
  r0.y = (int)r0.y & (int)r1.x;
  r2.xyzw = (int4)r0.zzzz + int4(-4,2,3,4);
  r2.yzw = r2.yzw;
  r1.x = (int)0 < (int)r2.x;
  r2.x = r2.y < pixel_steps.y;
  r2.y = r2.z < pixel_steps.y;
  r2.z = r2.w < pixel_steps.y;
  r3.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, 3, 0)).xyzw;
  r1.y = depth_params.z * r3.x + depth_params.w;
  r1.y = 1.000000e+000 / r1.y;
  r3.xy = -focal_params.zx + r1.yy;
  r3.xy = saturate(r3.xy / r1.zw);
  r1.y = 1.000000000e+000 + -r3.y;
  r1.y = blur_radius * r3.x + r1.y;
  r1.y = r2.z ? r1.y : 0;
  r0.y = min(r0.y, r1.y);
  r0.y = r0.y * r0.y;
  r3.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, 2, 0)).xyzw;
  r2.z = depth_params.z * r3.x + depth_params.w;
  r2.z = 1.000000e+000 / r2.z;
  r2.zw = -focal_params.zx + r2.zz;
  r2.zw = saturate(r2.zw / r1.zw);
  r2.w = 1.000000000e+000 + -r2.w;
  r2.z = blur_radius * r2.z + r2.w;
  r2.y = (int)r2.z & (int)r2.y;
  r1.y = min(r1.y, r2.y);
  r1.y = r1.y * r1.y;
  r2.z = 4.000000000e+000 * r1.y;
  r2.w = r0.y * 4.000000000e+000 + r2.z;
  r0.y = 4.000000000e+000 * r0.y;
  r2.w = 1.000000000e+000 + r2.w;
  r2.w = -r2.z / r2.w;
  r2.z = r2.w * -r2.z;
  r3.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, 3, 0)).xyzw;
  r3.xyz = r3.xyz * r2.www;
  r0.y = r2.w * r0.y;
  r4.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, 1, 0)).xyzw;
  r2.w = depth_params.z * r4.x + depth_params.w;
  r2.w = 1.000000e+000 / r2.w;
  r4.xy = -focal_params.zx + r2.ww;
  r4.xy = saturate(r4.xy / r1.zw);
  r2.w = 1.000000000e+000 + -r4.y;
  r2.w = blur_radius * r4.x + r2.w;
  r2.x = (int)r2.w & (int)r2.x;
  r4.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, 0, 0)).xyzw;
  r2.w = depth_params.z * r4.x + depth_params.w;
  r2.w = 1.000000e+000 / r2.w;
  r4.xy = -focal_params.zx + r2.ww;
  r4.xy = saturate(r4.xy / r1.zw);
  r2.w = 1.000000000e+000 + -r4.y;
  r2.w = blur_radius * r4.x + r2.w;
  r3.w = min(r2.x, r2.w);
  r2.x = min(r2.y, r2.x);
  r2.x = r2.x * r2.x;
  r2.y = r3.w * r3.w;
  r3.w = 4.000000000e+000 * r2.y;
  r4.x = r2.x * 4.000000000e+000 + r3.w;
  r2.x = 4.000000000e+000 * r2.x;
  r4.x = 1.000000000e+000 + r4.x;
  r4.y = -r2.x / r4.x;
  r4.x = -r3.w / r4.x;
  r5.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, 1, 0)).xyzw;
  r3.xyz = r4.yyy * r5.xyz + r3.xyz;
  r5.xyz = r5.xyz * r4.xxx;
  r6.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, 2, 0)).xyzw;
  r3.xyz = r6.xyz + -r3.xyz;
  r2.z = r4.y * -r2.x + r2.z;
  r4.y = r4.y * r3.w;
  r3.w = r4.x * -r3.w;
  r4.x = r4.x * r2.x;
  r1.y = r1.y * 4.000000000e+000 + r2.x;
  r1.y = 1.000000000e+000 + r1.y;
  r1.y = r1.y + -r2.z;
  r1.y = r4.x / r1.y;
  r2.x = r1.y * r4.y;
  r3.xyz = r1.yyy * r3.xyz;
  o1.z = -r1.y * r0.y;
  r4.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, -4, 0)).xyzw;
  r0.y = depth_params.z * r4.x + depth_params.w;
  r0.y = 1.000000e+000 / r0.y;
  r4.xy = -focal_params.zx + r0.yy;
  r4.xy = saturate(r4.xy / r1.zw);
  r0.y = 1.000000000e+000 + -r4.y;
  r0.y = blur_radius * r4.x + r0.y;
  r0.y = (int)r0.y & (int)r1.x;
  r4.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, -3, 0)).xyzw;
  r1.x = depth_params.z * r4.x + depth_params.w;
  r1.x = 1.000000e+000 / r1.x;
  r1.xy = -focal_params.zx + r1.xx;
  r1.xy = saturate(r1.xy / r1.zw);
  r1.y = 1.000000000e+000 + -r1.y;
  r1.x = blur_radius * r1.x + r1.y;
  r0.y = min(r0.y, r1.x);
  r0.y = r0.y * r0.y;
  r0.y = 4.000000000e+000 * r0.y;
  r4.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, -2, 0)).xyzw;
  r1.y = depth_params.z * r4.x + depth_params.w;
  r1.y = 1.000000e+000 / r1.y;
  r4.xy = -focal_params.zx + r1.yy;
  r4.xy = saturate(r4.xy / r1.zw);
  r1.y = 1.000000000e+000 + -r4.y;
  r1.y = blur_radius * r4.x + r1.y;
  r1.x = min(r1.y, r1.x);
  r1.x = r1.x * r1.x;
  r2.z = r1.x * 4.000000000e+000 + r0.y;
  r1.x = 4.000000000e+000 * r1.x;
  r2.z = 1.000000000e+000 + r2.z;
  r4.xyzw = depth_textureTexture.Load(r0.xzw, int3(0, -1, 0)).xyzw;
  r4.x = depth_params.z * r4.x + depth_params.w;
  r4.x = 1.000000e+000 / r4.x;
  r4.xy = -focal_params.zx + r4.xx;
  r1.zw = saturate(r4.xy / r1.zw);
  r1.w = 1.000000000e+000 + -r1.w;
  r1.z = blur_radius * r1.z + r1.w;
  r1.w = min(r2.w, r1.z);
  r1.y = min(r1.z, r1.y);
  r1.yz = r1.yw * r1.yw;
  r1.w = 4.000000000e+000 * r1.y;
  r1.y = r1.y * 4.000000000e+000 + r1.x;
  r2.w = r1.z * 4.000000000e+000 + r1.w;
  r1.z = 4.000000000e+000 * r1.z;
  r2.w = 1.000000000e+000 + r2.w;
  r4.x = -r1.w / r2.w;
  r2.zw = -r1.xz / r2.zw;
  r6.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, -1, 0)).xyzw;
  r4.yzw = r6.xyz * r4.xxx;
  r5.xyz = r2.www * r6.xyz + r5.xyz;
  r6.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, -3, 0)).xyzw;
  r4.yzw = r2.zzz * r6.xyz + r4.yzw;
  r6.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, -2, 0)).xyzw;
  r7.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, 0, 0)).xyzw;
  r0.xzw = r7.xyz + -r5.xyz;
  r4.yzw = r6.xyz + -r4.yzw;
  r5.x = r4.x * -r1.w;
  r1.w = r2.w * r1.w;
  r2.w = r2.w * -r1.z + r3.w;
  r3.w = r4.x * r1.z;
  r1.z = r2.y * 4.000000000e+000 + r1.z;
  r1.yz = float2(1.000000e+000,1.000000e+000) + r1.yz;
  r1.z = r1.z + -r2.w;
  r1.x = r2.z * -r1.x + r5.x;
  r0.y = r2.z * r0.y;
  r1.x = r1.y + -r1.x;
  r1.x = r1.w / r1.x;
  r2.yzw = r1.xxx * r4.yzw + r3.xyz;
  o0.xyz = -r2.yzw + r0.xzw;
  o0.w = 0.000000000e+000;
  r0.x = r1.x * r3.w + r2.x;
  o1.x = -r1.x * r0.y;
  o1.y = r1.z + -r0.x;
  o1.w = 0.000000000e+000;
  return;
}