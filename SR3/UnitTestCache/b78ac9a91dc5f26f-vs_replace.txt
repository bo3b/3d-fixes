
cbuffer vc2 : register(b2)
{
  float4x4 projTM : packoffset(c0);
  float4 Object_instance_params_2 : packoffset(c5);
  row_major float3x4 objTM : packoffset(c16);
  float3 Position_scale : packoffset(c20);
  float4x4 IR_World2View : packoffset(c22);
}

cbuffer vc3 : register(b3)
{
  row_major float3x4 Bone_weights[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  int2 v1 : TEXCOORD0,
  float3 v2 : NORMAL0,
  float4 v3 : TANGENT0,
  int2 v4 : TEXCOORD1,
  int3 v5 : POSITION1,
  float3 v6 : COLOR0,
  float3 v7 : NORMAL1,
  uint4 v8 : BLENDINDICES0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.w = 1.000000000e+000;
  r1.xyzw = v5.xyzy;
  r1.xyzw = v6.xxxy * r1.xyzw;
  r2.xyz = r1.xyz * float3(1.220703e-004,1.220703e-004,1.220703e-004) + v0.xyz;
  r1.x = r1.w * 1.831054688e-004 + r2.y;
  r2.y = -v6.y * 1.600000024e+000 + r1.x;
  r2.w = 1.000000000e+000;
  r1.x = (int)v8.x * 3;
  r0.x = dot(Bone_weights[v8.x]._m00_m01_m02_m03, r2.xyzw);
  r0.y = dot(Bone_weights[v8.x]._m10_m11_m12_m13, r2.xyzw);
  r0.z = dot(Bone_weights[v8.x]._m20_m21_m22_m23, r2.xyzw);
  r2.x = dot(objTM._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(objTM._m10_m11_m12_m13, r0.xyzw);
  r2.z = dot(objTM._m20_m21_m22_m23, r0.xyzw);
  r2.w = 1.000000000e+000;
  r0.x = dot(r2.xyzw, projTM._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, projTM._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, projTM._m02_m12_m22_m32);
  r0.w = dot(r2.xyzw, projTM._m03_m13_m23_m33);
  o0.xyzw = r0.xyzw;
  o4.xyzw = r0.xyzw;
  o1.xy = v1.xy;
  r0.xyz = v2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.yzw = v7.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.xyz = v6.xxx * r1.yzw + r0.xyz;
  r3.x = dot(Bone_weights[v8.x]._m00_m01_m02, r0.xyz);
  r3.y = dot(Bone_weights[v8.x]._m10_m11_m12, r0.xyz);
  r3.z = dot(Bone_weights[v8.x]._m20_m21_m22, r0.xyz);
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  r3.x = dot(objTM._m00_m01_m02, r0.xyz);
  r3.y = dot(objTM._m10_m11_m12, r0.xyz);
  r3.z = dot(objTM._m20_m21_m22, r0.xyz);
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  r3.x = dot(r0.xyz, IR_World2View._m00_m10_m20);
  r3.y = dot(r0.xyz, IR_World2View._m01_m11_m21);
  r3.z = dot(r0.xyz, IR_World2View._m02_m12_m22);
  o2.xyz = r3.xyz;
  r0.xyzw = v3.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r4.x = dot(Bone_weights[v8.x]._m00_m01_m02, r0.xyz);
  r4.y = dot(Bone_weights[v8.x]._m10_m11_m12, r0.xyz);
  r4.z = dot(Bone_weights[v8.x]._m20_m21_m22, r0.xyz);
  r0.x = r0.w * 5.000000000e-001 + 5.000000000e-001;
  r0.y = dot(r4.xyz, r4.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = r4.xyz * r0.yyy;
  r1.x = dot(objTM._m00_m01_m02, r0.yzw);
  r1.y = dot(objTM._m10_m11_m12, r0.yzw);
  r1.z = dot(objTM._m20_m21_m22, r0.yzw);
  r0.y = dot(r1.xyz, r1.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = r1.xyz * r0.yyy;
  r1.x = dot(r0.yzw, IR_World2View._m00_m10_m20);
  r1.y = dot(r0.yzw, IR_World2View._m01_m11_m21);
  r1.z = dot(r0.yzw, IR_World2View._m02_m12_m22);
  o3.xyz = r1.xyz;
  r0.y = r0.x >= 5.000000000e-001;
  r0.y = r0.y ? 1 : -1;
  r0.z = r0.y ? -128 : 0;
  r0.x = r0.x * 2.550000000e+002 + r0.z;
  r0.x = Object_instance_params_2.x * 3.264000000e+004 + r0.x;
  r0.x = 3.276800000e+004 + r0.x;
  o5.w = 1.525902189e-005 * r0.x;
  o5.x = dot(r2.xyzw, IR_World2View._m00_m10_m20_m30);
  o5.y = dot(r2.xyzw, IR_World2View._m01_m11_m21_m31);
  o5.z = dot(r2.xyzw, IR_World2View._m02_m12_m22_m32);
  r0.xzw = r3.zxy * r1.yzx;
  r0.xzw = r3.yzx * r1.zxy + -r0.xzw;
  o6.xyz = r0.yyy * r0.xzw;
  o6.w = Object_instance_params_2.y;

// Auto-fixed shader
float4 stereo = StereoParams.Load(0);
o4.x += stereo.x * (o4.w - stereo.y);
  return;
}