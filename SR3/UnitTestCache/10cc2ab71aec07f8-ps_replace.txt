
cbuffer vc0 : register(b0)
{
  float blur_radius : packoffset(c0);
  float4 focal_params : packoffset(c1);
  float4 pixel_steps : packoffset(c2);
  float4 depth_params : packoffset(c3);
}
Texture2D<float4> depth_textureTexture : register(t0);
Texture2D<float4> color_samplerTexture : register(t1);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  o0.w = 0.000000000e+000;
  r0.xy = pixel_steps.xy * v1.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.xyzw = color_samplerTexture.Load(r0.xyz).xyzw;
  o0.xyz = r1.xyz;
  r1.xyzw = depth_textureTexture.Load(r0.xyw, int3(0, -1, 0)).xyzw;
  r0.z = depth_params.z * r1.x + depth_params.w;
  r0.z = 1.000000e+000 / r0.z;
  r1.xy = -focal_params.zx + r0.zz;
  r1.zw = focal_params.wy + -focal_params.zx;
  r1.xy = saturate(r1.xy / r1.zw);
  r0.z = 1.000000000e+000 + -r1.y;
  r0.z = blur_radius * r1.x + r0.z;
  r2.xyzw = depth_textureTexture.Load(r0.xyw, int3(0, 0, 0)).xyzw;
  r3.xyzw = depth_textureTexture.Load(r0.xyw, int3(0, 1, 0)).xyzw;
  r0.x = depth_params.z * r3.x + depth_params.w;
  r0.x = 1.000000e+000 / r0.x;
  r0.xw = -focal_params.zx + r0.xx;
  r0.xw = saturate(r0.xw / r1.zw);
  r1.x = depth_params.z * r2.x + depth_params.w;
  r1.x = 1.000000e+000 / r1.x;
  r1.xy = -focal_params.zx + r1.xx;
  r1.xy = saturate(r1.xy / r1.zw);
  r1.y = 1.000000000e+000 + -r1.y;
  r1.x = blur_radius * r1.x + r1.y;
  r0.z = min(r0.z, r1.x);
  r0.z = r0.z * r0.z;
  r0.z = 4.000000000e+000 * r0.z;
  r0.y = r0.y ? r0.z : 0.000000000e+000;
  r0.z = 1.000000000e+000 + -r0.w;
  r0.x = blur_radius * r0.x + r0.z;
  r0.x = min(r0.x, r1.x);
  r0.x = r0.x * r0.x;
  r0.z = r0.x * 4.000000000e+000 + r0.y;
  r0.x = 4.000000000e+000 * r0.x;
  o1.xz = -r0.yx;
  o1.y = 1.000000000e+000 + r0.z;
  o1.w = 0.000000000e+000;
  return;
}