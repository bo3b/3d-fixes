cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c0);
  float4 Diffuse_Color : packoffset(c1);
  float4 Night_Additive_Color : packoffset(c2);
  float Illumination_Map_Amount : packoffset(c3);
  float Illumination_Map_Scroll : packoffset(c4);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float Alpha_Threshold : packoffset(c8);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Diffuse_MapSampler_s : register(s0);
SamplerState Night_Additive_MapSampler_s : register(s1);
SamplerState Illumination_MapSampler_s : register(s2);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Diffuse_MapSampler : register(t0);
Texture2D<float4> Night_Additive_MapSampler : register(t1);
Texture2D<float4> Illumination_MapSampler : register(t2);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v4.xy).xyzw;
  r1.w = 1.000000000e+000;
  r2.x = r0.w * r1.w + -cb4[8].x;
  r2.x = r2.x < 0.000000000e+000;
  if (r2.x != 0) discard;
  r2.xy = v1.xy / v1.ww;
  r2.xy = float2(1.000000e+000,1.000000e+000) + r2.xy;
  r2.x = cb4[9].z * r2.x;
  r2.y = -r2.y * 5.000000000e-001 + 1.000000000e+000;
  r3.y = cb4[9].w * r2.y;
  r3.x = 5.000000000e-001 * r2.x;
  r2.xy = float2(-5.000000e-001,-5.000000e-001) + r3.xy;
  r2.z = floor(r2.x);
  r2.w = floor(r2.y);
  r2.xy = r2.xy + -r2.zw;
  r2.zw = float2(5.000000e-001,5.000000e-001) + r2.zw;
  r3.xy = r2.zw * cb4[9].xy + cb4[9].xy;
  r3.zw = cb4[9].xy * r2.zw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xy).xzwy;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zw).xyzw;
  r4.x = r5.y;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xw).xyzw;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zy).xyzw;
  r4.z = r6.y;
  r4.y = r5.y;
  r5.xyzw = -v2.wwww + r4.xyzw;
  r4.x = 5.000000e-001 >= r4.x;
  r4.y = 5.000000e-001 >= r4.y;
  r4.z = 5.000000e-001 >= r4.z;
  r4.w = 5.000000e-001 >= r4.w;
  r4.x = r4.x ? 1 : 0;
  r4.y = r4.y ? 1 : 0;
  r4.z = r4.z ? 1 : 0;
  r4.w = r4.w ? 1 : 0;
  r5.x = 1.220722e-005 >= abs(r5.x);
  r5.y = 1.220722e-005 >= abs(r5.y);
  r5.z = 1.220722e-005 >= abs(r5.z);
  r5.w = 1.220722e-005 >= abs(r5.w);
  r5.x = r5.x ? 1 : 0;
  r5.y = r5.y ? 1 : 0;
  r5.z = r5.z ? 1 : 0;
  r5.w = r5.w ? 1 : 0;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r2.zw = r4.xy + r4.zw;
  r2.z = r2.z >= r2.w;
  r2.w = r2.w >= r2.z;
  r2.w = r2.w ? 1.000000 : 0;
  r2.z = r2.z ? -1.000000000e+000 : -0.000000000e+000;
  r2.z = r2.w + r2.z;
  r2.w = r2.z == 0.000000;
  r3.x = saturate(r2.x + r2.z);
  r4.zw = max(r4.yw, r4.xz);
  r2.z = r4.y + -r4.x;
  r4.x = r4.w + -r4.z;
  r4.y = r4.x == 0.000000;
  r3.y = saturate(r4.x + r2.y);
  r2.x = saturate(r2.x + r2.z);
  r2.z = abs(r2.z) >= 1.000000000e+000;
  r2.w = r2.w ? r4.y : 0;
  r2.z = r2.z ? r2.w : 0;
  r2.y = 0.000000000e+000;
  r2.x = r2.z ? r2.x : r3.x;
  r2.y = r2.z ? r2.y : r3.y;
  r2.zw = cb4[9].xy;
  r2.xy = r2.xy * r2.zw + r3.zw;
  r2.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.xy).xyzw;
  r2.xyz = max(r2.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r3.xyzw = Night_Additive_MapSampler.Sample(Night_Additive_MapSampler_s, v4.xy).xyzw;
  r3.xyz = v2.xyz * r3.xyz;
  r3.xyz = Time.www * r3.xyz;
  r4.xyzw = Illumination_MapSampler.Sample(Illumination_MapSampler_s, v4.zw).xyzw;
  r2.w = Illumination_Map_Amount * r4.y;
  r3.xyz = r3.xyz * r2.www;
  r1.xyz = v3.xyz;
  r0.xyzw = r1.xyzw * r0.xyzw;
  r1.xyz = r0.xyz * Self_Illumination + r3.xyz;
  r1.xyz = r0.xyz * r2.xyz + r1.xyz;
  r1.w = 1.000000000e+000 + -v3.w;
  r1.xyz = r1.www * r1.xyz;
  r0.xyz = v3.www * cb4[4].xyz + r1.xyz;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}