
cbuffer vc0 : register(b0)
{
  float4 Diffuse_Color : packoffset(c0);
  float Self_Illumination : packoffset(c1);
}

cbuffer vc2 : register(b2)
{
  float4x4 projTM : packoffset(c0);
  float4 eyePos : packoffset(c4);
  float4 Fog_dist : packoffset(c10);
  float4 Object_instance_params : packoffset(c15);
  row_major float3x4 objTM : packoffset(c16);
  float3 Position_scale : packoffset(c20);
  float4x4 IR_World2View : packoffset(c22);
}

cbuffer vc3 : register(b3)
{
  row_major float3x4 Bone_weights[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  int2 v1 : TEXCOORD0,
  float3 v2 : NORMAL0,
  int4 v3 : POSITION1,
  float4 v4 : NORMAL1,
  uint4 v5 : BLENDWEIGHT0,
  uint4 v6 : BLENDINDICES0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xyz = v3.xyz;
  r0.xyz = r0.xyz * float3(1.220703e-004,1.220703e-004,1.220703e-004) + v0.xyz;
  r0.w = 1.000000000e+000;
  r1.xyzw = (int4)v6.xyzw * int4(3,3,3,3);
  r2.xyzw = v5.xyzw;
  r3.xyzw = Bone_weights[r1.y/3]._m00_m01_m02_m03 * r2.yyyy;
  r3.xyzw = r2.xxxx * Bone_weights[r1.x/3]._m00_m01_m02_m03 + r3.xyzw;
  r3.xyzw = r2.zzzz * Bone_weights[r1.z/3]._m00_m01_m02_m03 + r3.xyzw;
  r3.xyzw = r2.wwww * Bone_weights[r1.w/3]._m00_m01_m02_m03 + r3.xyzw;
  r4.x = dot(r3.xyzw, r0.xyzw);
  r5.xyzw = Bone_weights[r1.y/3]._m10_m11_m12_m13 * r2.yyyy;
  r5.xyzw = r2.xxxx * Bone_weights[r1.x/3]._m10_m11_m12_m13 + r5.xyzw;
  r5.xyzw = r2.zzzz * Bone_weights[r1.z/3]._m10_m11_m12_m13 + r5.xyzw;
  r5.xyzw = r2.wwww * Bone_weights[r1.w/3]._m10_m11_m12_m13 + r5.xyzw;
  r4.y = dot(r5.xyzw, r0.xyzw);
  r6.xyzw = Bone_weights[r1.y/3]._m20_m21_m22_m23 * r2.yyyy;
  r6.xyzw = r2.xxxx * Bone_weights[r1.x/3]._m20_m21_m22_m23 + r6.xyzw;
  r6.xyzw = r2.zzzz * Bone_weights[r1.z/3]._m20_m21_m22_m23 + r6.xyzw;
  r1.xyzw = r2.wwww * Bone_weights[r1.w/3]._m20_m21_m22_m23 + r6.xyzw;
  r4.z = dot(r1.xyzw, r0.xyzw);
  r0.x = r2.x + r2.y;
  r0.x = r0.x + r2.z;
  r0.x = r0.x + r2.w;
  r0.x = 1.000000e+000 / r0.x;
  r2.xyz = r4.xyz * r0.xxx;
  r2.w = 1.000000000e+000;
  r4.x = dot(objTM._m00_m01_m02_m03, r2.xyzw);
  r4.y = dot(objTM._m10_m11_m12_m13, r2.xyzw);
  r4.z = dot(objTM._m20_m21_m22_m23, r2.xyzw);
  r4.w = 1.000000000e+000;
  o0.x = dot(r4.xyzw, projTM._m00_m10_m20_m30);
  o0.y = dot(r4.xyzw, projTM._m01_m11_m21_m31);
  o0.z = dot(r4.xyzw, projTM._m02_m12_m22_m32);
  o0.w = dot(r4.xyzw, projTM._m03_m13_m23_m33);
  r0.yzw = -eyePos.xyz + r4.xyz;
  r2.xy = v1.xy;
  o1.xy = float2(9.765625e-004,9.765625e-004) * r2.xy;
  r2.xyz = v2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r4.xyz = v4.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.xyz = r4.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + r2.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r3.x = dot(r3.xyz, r2.xyz);
  r3.y = dot(r5.xyz, r2.xyz);
  r3.z = dot(r1.xyz, r2.xyz);
  r1.xyz = r3.xyz * r0.xxx;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r1.xyz = r1.xyz * r0.xxx;
  r2.x = dot(objTM._m00_m01_m02, r1.xyz);
  r2.y = dot(objTM._m10_m11_m12, r1.xyz);
  r2.z = dot(objTM._m20_m21_m22, r1.xyz);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r1.xyz = r2.xyz * r0.xxx;
  o2.x = dot(r1.xyz, IR_World2View._m00_m10_m20);
  o2.y = dot(r1.xyz, IR_World2View._m01_m11_m21);
  o2.z = dot(r1.xyz, IR_World2View._m02_m12_m22);
  r0.x = Fog_dist.x * r0.z;
  r1.x = -1.442695022e+000 * r0.x;
  r1.x = exp2(r1.x);
  r1.x = 1.000000000e+000 + -r1.x;
  r0.x = r1.x / r0.x;
  r1.x = 9.999999776e-003 < abs(r0.z);
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = sqrt(r0.y);
  r0.y = Fog_dist.y * r0.y;
  r0.x = r1.x ? r0.x : 1.000000000e+000;
  r0.x = r0.x * r0.y + -Fog_dist.w;
  r0.x = exp2(-r0.x);
  r0.x = min(r0.x, 1.000000000e+000);
  o3.w = 1.000000000e+000 + -r0.x;
  o3.xyz = Object_instance_params.xyz * Diffuse_Color.xyz;
  return;
}