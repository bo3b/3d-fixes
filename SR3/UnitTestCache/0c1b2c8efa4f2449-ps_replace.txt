
cbuffer vc0 : register(b0)
{
  float Distortion_ScrollU : packoffset(c0);
  float Distortion_ScrollV : packoffset(c1);
  float Diffuse_ScrollV_1 : packoffset(c2);
  float4 Diffuse_Color : packoffset(c3);
  float Main_Opacity : packoffset(c4);
  float Diffuse_ScrollU_1 : packoffset(c5);
  float Distortion_Amount : packoffset(c6);
  float Fade_Distance : packoffset(c7);
  float Diffuse_Light_Amount : packoffset(c8);
  float Specular_Alpha : packoffset(c9);
}
SamplerState Diffuse_MapSampler_s : register(s0);
SamplerState Distortion_MapSampler_s : register(s1);
Texture2D<float4> Diffuse_MapSampler : register(t0);
Texture2D<float4> Distortion_MapSampler : register(t1);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.x = v2.z / v2.w;
  r0.y = 1.000000e+000 / Fade_Distance;
  r0.x = saturate(r0.x * r0.y);
  r0.y = r0.x * -2.000000000e+000 + 3.000000000e+000;
  r0.x = r0.x * r0.x;
  r0.x = r0.y * r0.x;
  r1.xyzw = Distortion_MapSampler.Sample(Distortion_MapSampler_s, v3.zw).xyzw;
  r0.yz = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.yz = r0.yz * Distortion_Amount + v3.xy;
  r1.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, r0.yz).xyzw;
  r0.y = Diffuse_Color.w * r1.w;
  r0.x = r0.y * r0.x;
  o0.w = saturate(Main_Opacity * r0.x);
  o0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  return;
}