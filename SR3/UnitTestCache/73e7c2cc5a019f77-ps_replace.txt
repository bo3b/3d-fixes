cbuffer cb4 : register(b4)
{
  float4 cb4[11];
}


cbuffer vc0 : register(b0)
{
  float4 Detail_Normal_Map_Tiling : packoffset(c0);
  float2 Detail_Normal_Map_Amount : packoffset(c1);
  float2 High_Detail_Cutoff_Dist : packoffset(c2);
  float Normal_Map_Refl_Offset : packoffset(c3);
  float Reflection_Plane_Height : packoffset(c4);
  float Base_Reflectivity : packoffset(c5);
  float3 TOD_Light_Direction : packoffset(c6);
  float3 TOD_Light_Color : packoffset(c7);
  float Specular_Power : packoffset(c8);
  float3 Specular_Color : packoffset(c9);
  float Specular_Alpha : packoffset(c10);
  float Min_Opacity : packoffset(c11);
  float Max_Fresnel : packoffset(c12);
  float3 Crest_Color : packoffset(c13);
  float Crest_Threshold : packoffset(c14);
  float4 Blend_Map_Extents : packoffset(c15);
  float4 Diffuse_Color2 : packoffset(c16);
  float Max_Fog_Depth2 : packoffset(c17);
  float2 Max_Fog_Depth : packoffset(c18);
  float4 Diffuse_Color : packoffset(c19);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Normal_MapSampler_s : register(s0);
SamplerState Reflection_MapSampler_s : register(s1);
SamplerState Blend_MapSampler_s : register(s2);
SamplerState Diffuse_MapSampler_s : register(s3);
SamplerState IR_GBuffer_DepthSampler_s : register(s14);
Texture2D<float4> Normal_MapSampler : register(t0);
Texture2D<float4> Reflection_MapSampler : register(t1);
Texture2D<float4> Blend_MapSampler : register(t2);
Texture2D<float4> Diffuse_MapSampler : register(t3);
Texture2D<float4> IR_GBuffer_DepthSampler : register(t14);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float3 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.x = Time.x + 2.500000000e+000;
  r0.x = 2.000000030e-001 * r0.x;
  r0.y = r0.x >= -r0.x;
  r0.x = frac(abs(r0.x));
  r0.x = r0.y ? r0.x : -r0.x;
  r0.x = -5.000000000e-001 + r0.x;
  r0.yz = float2(2.011000e+003,1.640000e+003) + v6.xz;
  r1.xy = saturate(float2(2.275313e-004,2.906977e-004) * r0.yz);
  r1.z = -r1.x;
  r1.xyzw = Blend_MapSampler.Sample(Blend_MapSampler_s, r1.zy).xyzw;
  r0.yz = r1.xy * float2(-1.000000e+000,1.000000e+000) + float2(5.000000e-001,-5.000000e-001);
  r0.xyz = r0.xyz + r0.xyz;
  r0.xw = r0.yz * r0.xx + v1.xy;
  r2.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s, r0.xw).xyzw;
  r2.yzw = r2.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = r2.y * r2.w;
  r3.xy = -r2.zx;
  r0.x = dot(r2.zx, r3.xy);
  r0.x = saturate(1.000000000e+000 + r0.x);
  r3.z = sqrt(r0.x);
  r0.x = Time.x * 2.000000030e-001;
  r0.w = r0.x >= -r0.x;
  r0.x = frac(abs(r0.x));
  r0.x = r0.w ? r0.x : -r0.x;
  r0.x = -5.000000000e-001 + r0.x;
  r0.x = r0.x + r0.x;
  r0.yz = r0.yz * r0.xx + v1.xy;
  r2.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s, r0.yz).xyzw;
  r2.yzw = r2.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = r2.y * r2.w;
  r4.xy = -r2.zx;
  r0.y = dot(r2.zx, r4.xy);
  r0.y = saturate(1.000000000e+000 + r0.y);
  r4.z = sqrt(r0.y);
  r0.yzw = -r4.xyz + r3.xyz;
  r0.xyz = abs(r0.xxx) * r0.yzw + r4.xyz;
  r2.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s, v1.zw).xyzw;
  r2.yzw = r2.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = r2.y * r2.w;
  r3.xy = -r2.zx;
  r0.w = dot(r2.zx, r3.xy);
  r0.w = saturate(1.000000000e+000 + r0.w);
  r3.z = sqrt(r0.w);
  r1.xyw = Detail_Normal_Map_Amount.yyy * r3.xyz;
  r0.w = dot(v8.xyz, v8.xyz);
  r2.x = sqrt(r0.w);
  r0.w = rsqrt(r0.w);
  r2.yzw = v8.xyz * r0.www;
  r0.w = -High_Detail_Cutoff_Dist.x + r2.x;
  r2.x = 1.000000000e+002 / r2.x;
  r2.x = min(r2.x, 1.000000000e+000);
  r0.w = saturate(High_Detail_Cutoff_Dist.y * r0.w);
  r0.w = 1.000000000e+000 + -r0.w;
  r3.x = Detail_Normal_Map_Amount.x * r0.w;
  r0.xyz = r0.xyz * r3.xxx + r1.xyw;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r0.xyz = r0.xyz * r1.xxx + float3(-0.000000e+000,-0.000000e+000,-1.000000e+000);
  r1.x = r0.w * 2.200000048e+000 + 8.000000119e-001;
  r0.xyz = r1.xxx * r0.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r3.xyz = r1.xxx * r0.xyz;
  r0.xy = r0.xy * r1.xx + float2(-5.000000e-001,-5.000000e-001);
  r0.z = dot(v4.xyz, v4.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyw = v4.xyz * r0.zzz;
  r1.xyw = r3.yyy * r1.xyw;
  r0.z = dot(v3.xyz, v3.xyz);
  r0.z = rsqrt(r0.z);
  r4.xyz = v3.xyz * r0.zzz;
  r1.xyw = r3.xxx * r4.xyz + r1.xyw;
  r0.z = dot(v2.xyz, v2.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyw = v2.xyz * r0.zzz;
  r1.xyw = r3.zzz * r3.xyw + r1.xyw;
  r0.z = dot(r1.xyw, r1.xyw);
  r0.z = rsqrt(r0.z);
  r1.xyw = r1.xyw * r0.zzz;
  r0.z = dot(r1.xyw, r1.xyw);
  r0.z = rsqrt(r0.z);
  r0.z = r1.w * r0.z;
  r0.z = r0.z >= Crest_Threshold;
  r0.z = r0.z ? 1.000000 : 0;
  r3.x = dot(r2.yzw, r1.xyw);
  r3.y = r3.x + r3.x;
  r3.x = saturate(r3.x);
  r3.x = 1.000000000e+000 + -r3.x;
  r2.yzw = r3.yyy * r1.xyw + -r2.yzw;
  r1.xy = Normal_Map_Refl_Offset * r1.xw;
  r1.w = saturate(dot(r2.yzw, TOD_Light_Direction.xyz));
  r1.w = log2(r1.w);
  r2.y = Specular_Power * 2.000000000e+001;
  r1.w = r2.y * r1.w;
  r1.w = exp2(r1.w);
  r1.w = 5.000000000e+001 * r1.w;
  r2.yzw = Specular_Color.xyz * TOD_Light_Color.xyz;
  r2.yzw = r2.yzw * r1.www;
  r2.yzw = Specular_Alpha * r2.yzw;
  r1.w = r3.x * r3.x;
  r1.w = r3.x * r1.w;
  r3.x = -Base_Reflectivity + 1.000000000e+000;
  r1.w = r1.w * r3.x + Base_Reflectivity;
  r3.xyz = r2.yzw * r1.www;
  r2.yzw = -r2.yzw * r1.www + Crest_Color.xyz;
  r2.yzw = r0.zzz * r2.yzw + r3.xyz;
  r3.xy = float2(1.000000e+000,1.000000e+000) / Target_dimensions.xy;
  r1.xy = r3.xy * r1.xy;
  r1.xy = r1.xy * r2.xx;
  r3.xyz = v7.xyz / v7.www;
  r4.xy = r3.xy * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.z = cb4[10].z * r3.z + cb4[10].w;
  r0.z = 1.000000e+000 / r0.z;
  r4.z = 1.000000000e+000 + -r4.y;
  r3.xyzw = IR_GBuffer_DepthSampler.Sample(IR_GBuffer_DepthSampler_s, r4.xz).xyzw;
  r2.x = cb4[10].z * r3.x + cb4[10].w;
  r2.x = 1.000000e+000 / r2.x;
  r0.z = r2.x + -r0.z;
  r2.x = -5.000000000e-001 >= r0.z;
  r2.x = r2.x ? 1.000000 : 0;
  r3.x = Max_Fog_Depth.x + -abs(-r0.z);
  r0.z = r2.x * r3.x + abs(r0.z);
  r0.z = saturate(abs(r0.z) / Max_Fog_Depth.x);
  r3.xy = v5.xy / v5.ww;
  r3.xy = r3.xy * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r3.z = 1.000000000e+000 + -r3.y;
  r1.xy = r1.xy * r0.zz + r3.xz;
  r3.w = max(r0.z, Min_Opacity);
  r4.xyzw = Reflection_MapSampler.Sample(Reflection_MapSampler_s, r1.xy).xyzw;
  r0.z = r4.w < 1.000000000e+000;
  r4.xyz = r4.xyz * r1.www;
  r1.x = min(r1.w, Max_Fresnel);
  r4.xyz = r4.xyz / cb4[1].xyz;
  r0.z = r0.z ? 1.000000 : 0;
  r5.xyz = -Diffuse_Color.xyz + Diffuse_Color2.xyz;
  r5.xyz = r1.zzz * r5.xyz + Diffuse_Color.xyz;
  r1.y = 3.000000119e-001 + -r1.z;
  r1.y = saturate(3.333333254e+000 * r1.y);
  r4.xyz = -r5.xyz + r4.xyz;
  r1.xzw = r1.xxx * r4.xyz + r5.xyz;
  r1.xzw = r0.zzz * r2.yzw + r1.xzw;
  r0.z = r1.y * -2.000000000e+000 + 3.000000000e+000;
  r1.y = r1.y * r1.y;
  r0.z = r1.y * r0.z;
  r2.xyzw = float4(1.000000e-003,1.000000e-003,4.000000e-002,4.000000e-002) * v6.xzxz;
  r0.xy = r0.xy * float2(1.700000e-002,1.700000e-002) + r2.zw;
  r2.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, r2.xy).xyzw;
  r4.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, r0.xy).xyzw;
  r2.xyz = r4.xyz * r2.zzz;
  r2.xyz = TOD_Light_Color.xyz * r2.xyz;
  r2.yzw = r2.xyz * r0.zzz + -r5.xyz;
  r0.x = r2.x * r0.z + -1.000000015e-001;
  r0.x = saturate(r0.x + r0.x);
  r0.y = r0.x * -2.000000000e+000 + 3.000000000e+000;
  r0.x = r0.x * r0.x;
  r0.x = r0.y * r0.x;
  r2.xyz = r0.xxx * r2.yzw + r5.xyz;
  r0.x = r0.x * r0.w;
  r0.yzw = r2.xyz + -r1.xzw;
  r0.xyz = r0.xxx * r0.yzw + r1.xzw;
  r0.w = 1.000000000e+000 + -v8.w;
  r0.xyz = r0.www * r0.xyz;
  r3.xyz = v8.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r3.xyzw;
  return;
}