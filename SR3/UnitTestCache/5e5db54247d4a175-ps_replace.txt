cbuffer cb4 : register(b4)
{
  float4 cb4[12];
}


cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float Alpha_Threshold : packoffset(c8);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 IR_Stipple_Pattern_Offset : packoffset(c11);
  float4 IR_Stipple_Repeat_Info : packoffset(c12);
}
SamplerState Diffuse_MapSampler_s : register(s0);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Diffuse_MapSampler : register(t0);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v3.xy).xyzw;
  r1.w = 1.000000000e+000;
  r2.x = r0.w * r1.w + -cb4[8].x;
  r2.x = r2.x < 0.000000000e+000;
  if (r2.x != 0) discard;
  r1.xyz = v2.xyz;
  r0.xyzw = r1.xyzw * r0.xyzw;
  r1.xyz = v1.xyz / v1.www;
  r1.xy = float2(1.000000e+000,1.000000e+000) + r1.xy;
  r1.z = cb4[10].z * r1.z + cb4[10].w;
  r1.z = 1.000000e+000 / r1.z;
  r1.z = saturate(3.051757813e-005 * r1.z);
  r2.x = 5.000000000e-001 * r1.x;
  r2.z = -r1.y * 5.000000000e-001 + 1.000000000e+000;
  r2.xyzw = cb4[9].xyxy * float4(9.000000e-001,9.000000e-001,9.000000e-001,9.000000e-001) + r2.xzxz;
  r1.xy = r2.zw * cb4[9].zw + float2(-5.000000e-001,-5.000000e-001);
  r1.x = floor(r1.x);
  r1.y = floor(r1.y);
  r3.xy = cb4[11].xy + r1.xy;
  r4.xyzw = float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + r1.xyxy;
  r4.xyzw = cb4[9].xyxy * r4.xyzw;
  r1.xy = float2(5.000000e-001,5.000000e-001) * r3.xy;
  r3.x = r1.x >= -r1.x;
  r3.y = r1.y >= -r1.y;
  r1.xy = frac(abs(r1.xy));
  r1.x = r3.x ? r1.x : -r1.x;
  r1.y = r3.y ? r1.y : -r1.y;
  r3.xyzw = r1.xxxx * float4(-6.000000e+000,4.000000e+000,6.000000e+000,0.000000e+000) + float4(2.000000e+000,-1.000000e+000,-2.000000e+000,1.000000e+000);
  r5.xyzw = r1.xxxx * float4(2.000000e+000,4.000000e+000,-2.000000e+000,4.000000e+000) + float4(0.000000e+000,-2.000000e+000,2.000000e+000,0.000000e+000);
  r3.xyzw = -r5.xyzw + r3.xyzw;
  r1.w = 2.000000000e+000 * r1.y;
  r3.xyzw = r1.wwww * r3.xyzw + r5.xyzw;
  r3.xyzw = r3.xyzw * cb4[9].xyxy + r4.xyzw;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xy).xzyw;
  r1.w = r5.x + -r1.z;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zw).xyzw;
  r5.w = r6.y;
  r4.x = r6.x + -r1.z;
  r4.x = abs(r4.x) >= cb4[10].y;
  r6.xyzw = r1.xxxx * float4(-2.000000e+000,0.000000e+000,2.000000e+000,-4.000000e+000) + float4(0.000000e+000,0.000000e+000,-2.000000e+000,0.000000e+000);
  r6.xyzw = r1.yyyy * float4(0.000000e+000,-2.000000e+000,4.000000e+000,2.000000e+000) + r6.xyzw;
  r6.xyzw = r6.xyzw * cb4[9].xyxy + r4.zwzw;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r6.xy).xyzw;
  r5.x = r7.y;
  r1.x = r7.x + -r1.z;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r6.zw).xyzw;
  r5.y = r7.y;
  r1.y = r7.x + -r1.z;
  r1.x = abs(r1.x) >= cb4[10].y;
  r1.y = abs(r1.y) >= cb4[10].y;
  r1.w = abs(r1.w) >= cb4[10].y;
  r5.xyzw = -v2.wwww + r5.xyzw;
  r5.x = 1.220722e-005 >= abs(r5.x);
  r5.y = 1.220722e-005 >= abs(r5.y);
  r5.z = 1.220722e-005 >= abs(r5.z);
  r5.w = 1.220722e-005 >= abs(r5.w);
  r5.x = r5.x ? 1 : 0;
  r5.y = r5.y ? 1 : 0;
  r5.z = r5.z ? 1 : 0;
  r5.w = r5.w ? 1 : 0;
  r1.x = r1.x ? 0 : r5.x;
  r1.y = r1.y ? 0 : r5.y;
  r1.w = r1.w ? 0 : r5.z;
  r1.z = r1.x + r1.y;
  r4.x = r4.x ? 0.000000000e+000 : r5.w;
  r1.z = r1.z + r1.w;
  r1.z = r1.z + r4.x;
  r1.z = min(r1.z, 1.000000000e+000);
  r1.z = 1.000000000e+000 + -r1.z;
  r1.xy = r1.xy + r1.zz;
  r1.xy = min(r1.xy, float2(1.000000e+000,1.000000e+000));
  r5.xyzw = r6.xyzw + -r2.xyzw;
  r2.xyzw = r3.xyzw + -r2.xyzw;
  r4.y = dot(r5.zw, r5.zw);
  r4.z = dot(r5.xy, r5.xy);
  r4.yz = sqrt(r4.yz);
  r4.yz = r4.yz / cb4[11].zz;
  r4.yz = saturate(float2(1.000000e+000,1.000000e+000) + -r4.yz);
  r1.y = r4.y * r1.y;
  r5.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r6.zw).xyzw;
  r6.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r6.xy).xyzw;
  r5.xyz = r5.xyz * r1.yyy;
  r4.y = r4.z * r1.x;
  r1.x = r4.z * r1.x + r1.y;
  r4.yzw = r6.xyz * r4.yyy + r5.xyz;
  r1.y = r1.w + r1.z;
  r1.z = r4.x + r1.z;
  r1.yz = min(r1.yz, float2(1.000000e+000,1.000000e+000));
  r1.w = dot(r2.xy, r2.xy);
  r2.x = dot(r2.zw, r2.zw);
  r2.x = sqrt(r2.x);
  r2.x = r2.x / cb4[11].z;
  r2.x = saturate(1.000000000e+000 + -r2.x);
  r1.w = sqrt(r1.w);
  r1.w = r1.w / cb4[11].z;
  r1.w = saturate(1.000000000e+000 + -r1.w);
  r2.y = r1.w * r1.y;
  r1.x = r1.w * r1.y + r1.x;
  r1.x = r2.x * r1.z + r1.x;
  r1.y = r2.x * r1.z;
  r5.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r3.xy).xyzw;
  r3.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r3.zw).xyzw;
  r2.xyz = r5.xyz * r2.yyy + r4.yzw;
  r1.yzw = r3.xyz * r1.yyy + r2.xyz;
  r1.xyz = r1.yzw / r1.xxx;
  r1.xyz = max(r1.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.xyz = r1.xyz * r0.xyz;
  r1.w = 1.000000000e+000 + -v3.z;
  r1.xyz = r1.www * r1.xyz;
  r0.xyz = v3.zzz * cb4[4].xyz + r1.xyz;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}