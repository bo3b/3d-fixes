cbuffer cb4 : register(b4)
{
  float4 cb4[12];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[3];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}


cbuffer vc0 : register(b0)
{
  float Normal_Map_Height : packoffset(c1);
  float Specular_Map_Amount : packoffset(c4);
  float4 Specular_Color : packoffset(c5);
  float4 Diffuse_Color : packoffset(c6);
  float Normal_map_refl_offset : packoffset(c7) = float(3.000000e+002);
  float Base_Reflectivity : packoffset(c8);
}

cbuffer vc1 : register(b1)
{
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 IR_Stipple_Pattern_Offset : packoffset(c11);
  float4 IR_Stipple_Repeat_Info : packoffset(c12);
}
SamplerState Normal_MapSampler_s : register(s0);
SamplerState Diffuse_MapSampler_s : register(s1);
SamplerState Specular_MapSampler_s : register(s2);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
SamplerState Planar_Reflection_MapSampler_s : register(s15);
Texture2D<float4> Normal_MapSampler : register(t0);
Texture2D<float4> Diffuse_MapSampler : register(t1);
Texture2D<float4> Specular_MapSampler : register(t2);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);
Texture2D<float4> Planar_Reflection_MapSampler : register(t15);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s, v1.xy).xyzw;
  r0.yzw = r0.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.x = r0.y * r0.w;
  r1.xy = -r0.zx;
  r0.x = dot(r0.zx, r1.xy);
  r0.x = saturate(1.000000000e+000 + r0.x);
  r1.z = sqrt(r0.x);
  r0.xyz = float3(-0.000000e+000,-0.000000e+000,-1.000000e+000) + r1.xyz;
  r0.xyz = cb0[1].xxx * r0.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v6.xyz, v6.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v6.xyz * r0.www;
  r1.xyz = r1.xyz * r0.yyy;
  r0.y = dot(v3.xyz, v3.xyz);
  r0.y = rsqrt(r0.y);
  r2.xyz = v3.xyz * r0.yyy;
  r0.xyw = r0.xxx * r2.xyz + r1.xyz;
  r1.x = dot(v2.xyz, v2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = v2.xyz * r1.xxx;
  r0.xyz = r0.zzz * r1.xyz + r0.xyw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v7.xyz, v7.xyz);
  r1.x = rsqrt(r0.w);
  r0.w = sqrt(r0.w);
  r0.w = 1.000000000e+002 / r0.w;
  r0.w = min(r0.w, 1.000000000e+000);
  r1.xyz = v7.xyz * r1.xxx;
  r0.y = saturate(dot(r1.xyz, r0.xyz));
  r0.y = 1.000000000e+000 + -r0.y;
  r1.x = r0.y * r0.y;
  r0.y = r1.x * r0.y;
  r1.x = -cb0[8].x + 1.000000000e+000;
  r0.y = r0.y * r1.x + cb0[8].x;
  r1.x = cb0[7].x * 1.000000015e-001;
  r0.xz = r1.xx * r0.xz;
  r1.xy = float2(1.000000e+000,1.000000e+000) / cb1[2].xy;
  r0.xz = r1.xy * r0.xz;
  r1.xy = v4.xy / v4.ww;
  r1.xy = r1.xy * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r1.z = 1.000000000e+000 + -r1.y;
  r0.xz = r0.xz * r0.ww + r1.xz;
  r1.xyzw = Planar_Reflection_MapSampler.Sample(Planar_Reflection_MapSampler_s, r0.xz).xyzw;
  r0.xyz = r1.xyz * r0.yyy;
  r0.w = 1.000000000e+000 + -r1.w;
  r0.xyz = r0.xyz / cb4[1].xyz;
  r1.xyz = v5.xyz / v5.www;
  r1.xy = float2(1.000000e+000,1.000000e+000) + r1.xy;
  r1.z = cb4[10].z * r1.z + cb4[10].w;
  r1.z = 1.000000e+000 / r1.z;
  r1.z = saturate(3.051757813e-005 * r1.z);
  r2.x = 5.000000000e-001 * r1.x;
  r2.z = -r1.y * 5.000000000e-001 + 1.000000000e+000;
  r2.xyzw = cb4[9].xyxy * float4(9.000000e-001,9.000000e-001,9.000000e-001,9.000000e-001) + r2.xzxz;
  r1.xy = r2.zw * cb4[9].zw + float2(-5.000000e-001,-5.000000e-001);
  r1.x = floor(r1.x);
  r1.y = floor(r1.y);
  r3.xy = cb4[11].xy + r1.xy;
  r4.xyzw = float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + r1.xyxy;
  r4.xyzw = cb4[9].xyxy * r4.xyzw;
  r1.xy = float2(5.000000e-001,5.000000e-001) * r3.xy;
  r3.x = r1.x >= -r1.x;
  r3.y = r1.y >= -r1.y;
  r1.xy = frac(abs(r1.xy));
  r1.x = r3.x ? r1.x : -r1.x;
  r1.y = r3.y ? r1.y : -r1.y;
  r3.xyzw = r1.xxxx * float4(-6.000000e+000,4.000000e+000,6.000000e+000,0.000000e+000) + float4(2.000000e+000,-1.000000e+000,-2.000000e+000,1.000000e+000);
  r5.xyzw = r1.xxxx * float4(2.000000e+000,4.000000e+000,-2.000000e+000,4.000000e+000) + float4(0.000000e+000,-2.000000e+000,2.000000e+000,0.000000e+000);
  r3.xyzw = -r5.xyzw + r3.xyzw;
  r1.w = 2.000000000e+000 * r1.y;
  r3.xyzw = r1.wwww * r3.xyzw + r5.xyzw;
  r3.xyzw = r3.xyzw * cb4[9].xyxy + r4.xyzw;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xy).xzyw;
  r1.w = r5.x + -r1.z;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zw).xyzw;
  r5.w = r6.y;
  r4.x = r6.x + -r1.z;
  r4.x = abs(r4.x) >= cb4[10].y;
  r6.xyzw = r1.xxxx * float4(-2.000000e+000,0.000000e+000,2.000000e+000,-4.000000e+000) + float4(0.000000e+000,0.000000e+000,-2.000000e+000,0.000000e+000);
  r6.xyzw = r1.yyyy * float4(0.000000e+000,-2.000000e+000,4.000000e+000,2.000000e+000) + r6.xyzw;
  r6.xyzw = r6.xyzw * cb4[9].xyxy + r4.zwzw;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r6.xy).xyzw;
  r5.x = r7.y;
  r1.x = r7.x + -r1.z;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r6.zw).xyzw;
  r5.y = r7.y;
  r1.y = r7.x + -r1.z;
  r1.x = abs(r1.x) >= cb4[10].y;
  r1.y = abs(r1.y) >= cb4[10].y;
  r1.w = abs(r1.w) >= cb4[10].y;
  r5.xyzw = -v6.wwww + r5.xyzw;
  r5.x = 1.220722e-005 >= abs(r5.x);
  r5.y = 1.220722e-005 >= abs(r5.y);
  r5.z = 1.220722e-005 >= abs(r5.z);
  r5.w = 1.220722e-005 >= abs(r5.w);
  r5.x = r5.x ? 1 : 0;
  r5.y = r5.y ? 1 : 0;
  r5.z = r5.z ? 1 : 0;
  r5.w = r5.w ? 1 : 0;
  r1.x = r1.x ? 0 : r5.x;
  r1.y = r1.y ? 0 : r5.y;
  r1.w = r1.w ? 0 : r5.z;
  r1.z = r1.x + r1.y;
  r4.x = r4.x ? 0.000000000e+000 : r5.w;
  r1.z = r1.z + r1.w;
  r1.z = r1.z + r4.x;
  r1.z = min(r1.z, 1.000000000e+000);
  r1.z = 1.000000000e+000 + -r1.z;
  r1.xy = r1.xy + r1.zz;
  r1.xy = min(r1.xy, float2(1.000000e+000,1.000000e+000));
  r5.xyzw = r6.xyzw + -r2.xyzw;
  r2.xyzw = r3.xyzw + -r2.xyzw;
  r4.y = dot(r5.zw, r5.zw);
  r4.z = dot(r5.xy, r5.xy);
  r4.yz = sqrt(r4.yz);
  r4.yz = r4.yz / cb4[11].zz;
  r4.yz = saturate(float2(1.000000e+000,1.000000e+000) + -r4.yz);
  r1.y = r4.y * r1.y;
  r5.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r6.zw).xyzw;
  r6.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r6.xy).xyzw;
  r5.xyzw = r5.xyzw * r1.yyyy;
  r4.y = r4.z * r1.x;
  r1.x = r4.z * r1.x + r1.y;
  r5.xyzw = r6.xyzw * r4.yyyy + r5.xyzw;
  r1.y = r1.w + r1.z;
  r1.z = r4.x + r1.z;
  r1.yz = min(r1.yz, float2(1.000000e+000,1.000000e+000));
  r1.w = dot(r2.xy, r2.xy);
  r2.x = dot(r2.zw, r2.zw);
  r2.x = sqrt(r2.x);
  r2.x = r2.x / cb4[11].z;
  r2.x = saturate(1.000000000e+000 + -r2.x);
  r1.w = sqrt(r1.w);
  r1.w = r1.w / cb4[11].z;
  r1.w = saturate(1.000000000e+000 + -r1.w);
  r2.y = r1.w * r1.y;
  r1.x = r1.w * r1.y + r1.x;
  r1.x = r2.x * r1.z + r1.x;
  r1.y = r2.x * r1.z;
  r4.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r3.xy).xyzw;
  r3.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r3.zw).xyzw;
  r2.xyzw = r4.xyzw * r2.yyyy + r5.xyzw;
  r2.xyzw = r3.xyzw * r1.yyyy + r2.xyzw;
  r1.xyzw = r2.xyzw / r1.xxxx;
  r1.xyzw = max(r1.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r2.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v1.xy).xyzw;
  r2.xyz = cb0[6].xyz * r2.xyz;
  r0.xyz = r2.xyz * r1.xyz + r0.xyz;
  r2.x = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r2.x = max(r2.x, 1.000000047e-003);
  r1.w = r1.w / r2.x;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz * r0.www;
  r2.xyzw = Specular_MapSampler.Sample(Specular_MapSampler_s, v1.xy).xyzw;
  r2.xyz = cb0[5].xyz * r2.xyz;
  r2.xyz = cb0[4].xxx * r2.xyz;
  r0.xyz = r1.xyz * r2.xyz + r0.xyz;
  r0.w = 1.000000000e+000 + -v7.w;
  r0.xyz = r0.www * r0.xyz;
  r0.xyz = v7.www * cb4[4].xyz + r0.xyz;
  r0.w = 1.000000000e+000;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}