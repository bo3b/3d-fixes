
cbuffer vc0 : register(b0)
{
  float Blur_scale : packoffset(c0);
  float Blur_clamp : packoffset(c3);
  float Depth_map_scale : packoffset(c4);
  float4x4 Curr_to_prev : packoffset(c5);
}
SamplerState base_samplerSampler_s : register(s0);
SamplerState depth_samplerSampler_s : register(s1);
Texture2D<float4> base_samplerSampler : register(t0);
Texture2D<float4> depth_samplerSampler : register(t1);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyzw = depth_samplerSampler.Sample(depth_samplerSampler_s, v1.xy).xyzw;
  r0.z = Depth_map_scale * r0.x;
  r0.xy = v1.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, Curr_to_prev._m00_m10_m20_m30);
  r0.x = dot(r0.xyzw, Curr_to_prev._m03_m13_m23_m33);
  r0.x = r1.x / r0.x;
  r0.y = v1.x * 2.000000000e+000 + -1.000000000e+000;
  r0.x = r0.y + -r0.x;
  r0.x = 5.000000000e-001 * r0.x;
  r0.x = max(r0.x, -Blur_clamp);
  r0.x = min(r0.x, Blur_clamp);
  r0.x = Blur_scale * r0.x;
  r0.yz = r0.xx * float2(2.500000e-001,2.500000e-001) + v1.xy;
  r0.xw = -r0.xx * float2(2.500000e-001,2.500000e-001) + v1.xy;
  r1.xyzw = base_samplerSampler.Sample(base_samplerSampler_s, r0.xw).xyzw;
  r0.xyzw = base_samplerSampler.Sample(base_samplerSampler_s, r0.yz).xyzw;
  r2.xyzw = base_samplerSampler.Sample(base_samplerSampler_s, v1.xy).xyzw;
  r0.xyz = r2.xyz + r0.xyz;
  r0.xyz = r0.xyz + r1.xyz;
  o0.xyz = float3(3.333333e-001,3.333333e-001,3.333333e-001) * r0.xyz;
  o0.w = 0.000000000e+000;
  return;
}