cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[9];
}


cbuffer vc0 : register(b0)
{
  float Normal_Map_Height : packoffset(c1);
  float Normal_Map_TilingU : packoffset(c2);
  float Normal_Map_TilingV : packoffset(c3);
  float4 Specular_Color : packoffset(c4);
  float Specular_Alpha : packoffset(c5);
  float Self_Illumination : packoffset(c6);
  float4 Diffuse_Color : packoffset(c7);
  float Spec_Reflect : packoffset(c8);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Normal_MapSampler_s : register(s0);
SamplerState Diffuse_MapSampler_s : register(s1);
SamplerState Reflection_MapSampler_s : register(s2);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Normal_MapSampler : register(t0);
Texture2D<float4> Diffuse_MapSampler : register(t1);
TextureCube<float4> Reflection_MapSampler : register(t2);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s, v5.zw).xyzw;
  r0.yzw = r0.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.x = r0.y * r0.w;
  r1.xy = -r0.zx;
  r0.x = dot(r0.zx, r1.xy);
  r0.x = saturate(1.000000000e+000 + r0.x);
  r1.z = sqrt(r0.x);
  r0.xyz = v3.xyz + r1.xyz;
  r0.xyz = float3(-5.000000e-001,-5.000000e-001,-1.000000e+000) + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www + -v3.xyz;
  r0.xyz = cb0[1].xxx * r0.xyz + v3.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v1.xyz, v1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v1.xyz * r0.www;
  r0.w = dot(-r1.xyz, r0.xyz);
  r0.w = r0.w + r0.w;
  r0.xyz = r0.xyz * -r0.www + -r1.xyz;
  r0.xyzw = Reflection_MapSampler.Sample(Reflection_MapSampler_s, r0.xyz).xyzw;
  r0.xyz = r0.xyz / cb4[1].xyz;
  r1.xyz = Time.www * r0.xyz;
  r0.xyz = r1.xyz * float3(-7.500000e-001,-7.500000e-001,-7.500000e-001) + r0.xyz;
  r0.xyz = cb0[8].xxx * r0.xyz;
  r1.xy = v2.xy / v2.ww;
  r1.xy = float2(1.000000e+000,1.000000e+000) + r1.xy;
  r0.w = cb4[9].z * r1.x;
  r1.x = -r1.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r1.x;
  r1.x = 5.000000000e-001 * r0.w;
  r1.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r1.z = floor(r1.x);
  r1.w = floor(r1.y);
  r1.xy = r1.xy + -r1.zw;
  r1.zw = float2(5.000000e-001,5.000000e-001) + r1.zw;
  r2.xy = r1.zw * cb4[9].xy + cb4[9].xy;
  r2.zw = cb4[9].xy * r1.zw;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xy).xzwy;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zw).xyzw;
  r3.x = r4.y;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xw).xyzw;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zy).xyzw;
  r3.z = r5.y;
  r3.y = r4.y;
  r4.xyzw = -v3.wwww + r3.xyzw;
  r3.x = 5.000000e-001 >= r3.x;
  r3.y = 5.000000e-001 >= r3.y;
  r3.z = 5.000000e-001 >= r3.z;
  r3.w = 5.000000e-001 >= r3.w;
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r4.x = 1.220722e-005 >= abs(r4.x);
  r4.y = 1.220722e-005 >= abs(r4.y);
  r4.z = 1.220722e-005 >= abs(r4.z);
  r4.w = 1.220722e-005 >= abs(r4.w);
  r4.x = r4.x ? 1 : 0;
  r4.y = r4.y ? 1 : 0;
  r4.z = r4.z ? 1 : 0;
  r4.w = r4.w ? 1 : 0;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r1.zw = r3.xy + r3.zw;
  r1.z = r1.z >= r1.w;
  r1.w = r1.w >= r1.z;
  r0.w = r1.w ? 1.000000 : 0;
  r1.z = r1.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.w = r1.z + r0.w;
  r1.z = r0.w == 0.000000;
  r2.x = saturate(r1.x + r0.w);
  r3.zw = max(r3.yw, r3.xz);
  r0.w = r3.y + -r3.x;
  r1.w = r3.w + -r3.z;
  r3.x = r1.w == 0.000000;
  r2.y = saturate(r1.y + r1.w);
  r1.x = saturate(r1.x + r0.w);
  r0.w = abs(r0.w) >= 1.000000000e+000;
  r1.z = r3.x ? r1.z : 0;
  r0.w = r0.w ? r1.z : 0;
  r1.y = 0.000000000e+000;
  r1.x = r0.w ? r1.x : r2.x;
  r1.y = r0.w ? r1.y : r2.y;
  r1.zw = cb4[9].xy;
  r1.xy = r1.xy * r1.zw + r2.zw;
  r1.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r1.xy).xyzw;
  r1.xyzw = max(r1.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r0.w = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.w = max(r0.w, 1.000000047e-003);
  r0.w = r1.w / r0.w;
  r2.xyz = r1.xyz * r0.www;
  r0.w = 1.000000e+000 / v2.z;
  r0.w = saturate(r0.w);
  r0.w = max(r0.w, 1.499999966e-002);
  r0.w = min(r0.w, 3.500000015e-002);
  r0.w = -1.499999966e-002 + r0.w;
  r0.xyzw = float4(1.000000e-002,1.000000e-002,1.000000e-002,5.000000e+001) * r0.xyzw;
  r3.xyz = cb0[4].xyz * r0.www;
  r2.xyz = r3.xyz * r2.xyz;
  r2.xyz = cb0[5].xxx * r2.xyz;
  r3.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v5.xy).xyzw;
  r4.xyz = v4.xyz;
  r4.w = 1.000000000e+000;
  r3.xyzw = r4.xyzw * r3.xyzw;
  r1.xyz = r3.xyz * r1.xyz + r2.xyz;
  r1.xyz = r3.xyz * cb0[6].xxx + r1.xyz;
  r0.xyz = r0.xyz * r0.www + r1.xyz;
  r0.w = 1.000000000e+000 + -v4.w;
  r0.xyz = r0.www * r0.xyz;
  r3.xyz = v4.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r3.xyzw;
  return;
}