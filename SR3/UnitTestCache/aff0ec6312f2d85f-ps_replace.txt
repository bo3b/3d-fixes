cbuffer cb0 : register(b0)
{
  float4 cb0[3];
}


cbuffer vc0 : register(b0)
{
  float4 pixel_steps : packoffset(c2);
}
Texture2D<float4> color_samplerTexture : register(t1);
Texture2D<float4> matrix_samplerTexture : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = cb0[2].zw * v1.xy;
  r0.yz = (int2)r0.xy;
  r0.y = (uint)r0.y << 1;
  r0.x = (int)r0.y + 1;
  r1.xy = (int2)r0.xx + int2(1,2);
  r1.xy = r1.xy;
  r1.x = cb0[2].x < r1.x;
  r1.y = cb0[2].x < r1.y;
  r0.w = 0.000000000e+000;
  r2.xyzw = color_samplerTexture.Load(r0.xzw, int3(0, 0, 0)).xyzw;
  r3.xyzw = color_samplerTexture.Load(r0.xzw, int3(-1, 0, 0)).xyzw;
  r2.x = r1.x ? r3.x : r2.x;
  r2.y = r1.x ? r3.y : r2.y;
  r2.z = r1.x ? r3.z : r2.z;
  r4.xyzw = color_samplerTexture.Load(r0.xzw, int3(1, 0, 0)).xyzw;
  r4.x = r1.y ? r2.x : r4.x;
  r4.y = r1.y ? r2.y : r4.y;
  r4.z = r1.y ? r2.z : r4.z;
  r5.xyzw = matrix_samplerTexture.Load(r0.xzw, int3(0, 0, 0)).xyzw;
  r6.xyzw = matrix_samplerTexture.Load(r0.xzw, int3(-1, 0, 0)).xyzw;
  r0.xyzw = matrix_samplerTexture.Load(r0.xzw, int3(1, 0, 0)).xyzw;
  r1.x = r1.x ? r6.x : r5.x;
  r1.z = r1.x ? r6.y : r5.y;
  r1.w = r1.x ? r6.z : r5.z;
  r0.x = r1.y ? r1.x : r0.x;
  r0.y = r1.y ? r1.z : r0.y;
  r0.z = r1.y ? r1.w : r0.z;
  r0.y = r1.w / r0.y;
  r4.xyz = r0.yyy * r4.xyz;
  r0.w = r1.x / r6.y;
  r1.xyw = r0.www * r3.xyz + r4.xyz;
  r1.xyw = r2.xyz + -r1.xyw;
  r0.x = r0.y * r0.x;
  o1.z = -r0.y * r0.z;
  r0.x = r0.w * r6.z + r0.x;
  o1.x = -r0.w * r6.x;
  r0.x = r1.z + -r0.x;
  r0.yzw = r1.xyw / r0.xxx;
  o1.y = r0.x;
  r0.x = cb0[2].z < 1.500000000e+000;
  o0.x = r0.x ? r0.y : r1.x;
  o0.y = r0.x ? r0.z : r1.y;
  o0.z = r0.x ? r0.w : r1.w;
  o0.w = 0.000000000e+000;
  o1.w = 0.000000000e+000;
  return;
}