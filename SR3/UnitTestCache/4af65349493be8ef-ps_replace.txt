cbuffer cb8 : register(b8)
{
  float4 cb8[2];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[12];
}


cbuffer vc0 : register(b0)
{
  float4 Diffuse_Color : packoffset(c0);
  float4 Lighting : packoffset(c1);
  float4 Specular_Color : packoffset(c2);
  float4 Ambient_Color : packoffset(c3);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 V_ambient_render : packoffset(c2);
  float4 Fog_color : packoffset(c4);
  float Alpha_Threshold : packoffset(c8);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 IR_Stipple_Pattern_Offset : packoffset(c11);
  float4 IR_Stipple_Repeat_Info : packoffset(c12);
}

cbuffer vc8 : register(b8)
{
  bool Alpha_test_use_dsf : packoffset(c1.z);
}
SamplerState Diffuse_mapSampler_s : register(s0);
SamplerState Specular_mapSampler_s : register(s1);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Diffuse_mapSampler : register(t0);
Texture2D<float4> Specular_mapSampler : register(t1);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xy = float2(1.000000e+002,1.000000e+002) * v2.xy;
  r0.x = r0.x * r0.y;
  r0.x = frac(r0.x);
  r1.xyzw = Diffuse_mapSampler.Sample(Diffuse_mapSampler_s, v2.xy).xyzw;
  r1.xyzw = Diffuse_Color.xyzw * r1.xyzw;
  r0.x = -v2.w * r0.x + r1.w;
  r0.w = v2.z * r0.x;
  r2.xyz = v1.xyz / v1.www;
  r2.xy = float2(1.000000e+000,1.000000e+000) + r2.xy;
  r1.w = cb4[10].z * r2.z + cb4[10].w;
  r1.w = 1.000000e+000 / r1.w;
  r1.w = saturate(3.051757813e-005 * r1.w);
  r2.x = 5.000000000e-001 * r2.x;
  r2.z = -r2.y * 5.000000000e-001 + 1.000000000e+000;
  r2.xyzw = cb4[9].xyxy * float4(9.000000e-001,9.000000e-001,9.000000e-001,9.000000e-001) + r2.xzxz;
  r3.xy = r2.zw * cb4[9].zw + float2(-5.000000e-001,-5.000000e-001);
  r3.x = floor(r3.x);
  r3.y = floor(r3.y);
  r3.zw = cb4[11].xy + r3.xy;
  r4.xyzw = float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + r3.xyxy;
  r4.xyzw = cb4[9].xyxy * r4.xyzw;
  r3.xy = float2(5.000000e-001,5.000000e-001) * r3.zw;
  r3.z = r3.x >= -r3.x;
  r3.w = r3.y >= -r3.y;
  r3.xy = frac(abs(r3.xy));
  r3.x = r3.z ? r3.x : -r3.x;
  r3.y = r3.w ? r3.y : -r3.y;
  r5.xyzw = r3.xxxx * float4(-6.000000e+000,4.000000e+000,6.000000e+000,0.000000e+000) + float4(2.000000e+000,-1.000000e+000,-2.000000e+000,1.000000e+000);
  r6.xyzw = r3.xxxx * float4(2.000000e+000,4.000000e+000,-2.000000e+000,4.000000e+000) + float4(0.000000e+000,-2.000000e+000,2.000000e+000,0.000000e+000);
  r5.xyzw = -r6.xyzw + r5.xyzw;
  r3.z = 2.000000000e+000 * r3.y;
  r5.xyzw = r3.zzzz * r5.xyzw + r6.xyzw;
  r5.xyzw = r5.xyzw * cb4[9].xyxy + r4.xyzw;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r5.xy).xzyw;
  r3.z = r6.x + -r1.w;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r5.zw).xyzw;
  r6.w = r7.y;
  r3.w = r7.x + -r1.w;
  r7.xyzw = r3.xxxx * float4(-2.000000e+000,0.000000e+000,2.000000e+000,-4.000000e+000) + float4(0.000000e+000,0.000000e+000,-2.000000e+000,0.000000e+000);
  r7.xyzw = r3.yyyy * float4(0.000000e+000,-2.000000e+000,4.000000e+000,2.000000e+000) + r7.xyzw;
  r4.xyzw = r7.xyzw * cb4[9].xyxy + r4.zwzw;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r4.xy).xyzw;
  r6.x = r7.y;
  r3.x = r7.x + -r1.w;
  r3.x = abs(r3.x) >= cb4[10].y;
  r3.z = abs(r3.z) >= cb4[10].y;
  r3.w = abs(r3.w) >= cb4[10].y;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r4.zw).xyzw;
  r6.y = r7.y;
  r1.w = r7.x + -r1.w;
  r1.w = abs(r1.w) >= cb4[10].y;
  r6.xyzw = -v3.xxxx + r6.xyzw;
  r6.x = 1.220722e-005 >= abs(r6.x);
  r6.y = 1.220722e-005 >= abs(r6.y);
  r6.z = 1.220722e-005 >= abs(r6.z);
  r6.w = 1.220722e-005 >= abs(r6.w);
  r6.x = r6.x ? 1 : 0;
  r6.y = r6.y ? 1 : 0;
  r6.z = r6.z ? 1 : 0;
  r6.w = r6.w ? 1 : 0;
  r3.y = dot(r6.xyzw, float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000));
  r3.y = min(r3.y, 1.000000000e+000);
  r3.y = cb8[1].z ? r3.y : 1.000000000e+000;
  r3.y = r0.w * r3.y + -cb4[8].x;
  r3.y = r3.y < 0.000000000e+000;
  if (r3.y != 0) discard;
  r3.x = r3.x ? 0 : r6.x;
  r3.z = r3.z ? 0 : r6.z;
  r3.w = r3.w ? 0 : r6.w;
  r1.w = r1.w ? 0.000000000e+000 : r6.y;
  r3.y = r3.x + r1.w;
  r3.y = r3.y + r3.z;
  r3.y = r3.y + r3.w;
  r3.y = min(r3.y, 1.000000000e+000);
  r3.y = 1.000000000e+000 + -r3.y;
  r1.w = r3.y + r1.w;
  r1.w = min(r1.w, 1.000000000e+000);
  r6.xyzw = r4.xyzw + -r2.xyzw;
  r2.xyzw = r5.xyzw + -r2.xyzw;
  r6.z = dot(r6.zw, r6.zw);
  r6.x = dot(r6.xy, r6.xy);
  r6.xy = sqrt(r6.xz);
  r6.xy = r6.xy / cb4[11].zz;
  r6.xy = saturate(float2(1.000000e+000,1.000000e+000) + -r6.xy);
  r1.w = r6.y * r1.w;
  r7.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r4.zw).xyzw;
  r4.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r4.xy).xyzw;
  r7.xyzw = r7.xyzw * r1.wwww;
  r3.x = r3.x + r3.y;
  r3.x = min(r3.x, 1.000000000e+000);
  r6.y = r6.x * r3.x;
  r1.w = r6.x * r3.x + r1.w;
  r4.xyzw = r4.xyzw * r6.yyyy + r7.xyzw;
  r3.x = r3.z + r3.y;
  r3.y = r3.w + r3.y;
  r3.xy = min(r3.xy, float2(1.000000e+000,1.000000e+000));
  r2.x = dot(r2.xy, r2.xy);
  r2.y = dot(r2.zw, r2.zw);
  r2.xy = sqrt(r2.xy);
  r2.xy = r2.xy / cb4[11].zz;
  r2.xy = saturate(float2(1.000000e+000,1.000000e+000) + -r2.xy);
  r2.z = r2.x * r3.x;
  r1.w = r2.x * r3.x + r1.w;
  r1.w = r2.y * r3.y + r1.w;
  r2.x = r2.y * r3.y;
  r3.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r5.xy).xyzw;
  r5.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r5.zw).xyzw;
  r3.xyzw = r3.xyzw * r2.zzzz + r4.xyzw;
  r2.xyzw = r5.xyzw * r2.xxxx + r3.xyzw;
  r2.xyzw = r2.xyzw / r1.wwww;
  r2.xyzw = max(r2.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.w = dot(r2.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.w = max(r1.w, 1.000000047e-003);
  r1.w = r2.w / r1.w;
  r3.xyz = r2.xyz * r1.www;
  r1.xyz = r2.xyz * r1.xyz;
  r2.xyzw = Specular_mapSampler.Sample(Specular_mapSampler_s, v2.xy).xyzw;
  r2.xyz = Specular_Color.xyz * r2.xyz;
  r2.xyz = r2.xyz * r3.xyz;
  r1.xyz = r1.xyz * v3.yyy + r2.xyz;
  r1.w = 1.000000000e+000 + -v3.z;
  r1.xyz = r1.www * r1.xyz;
  r0.xyz = v3.zzz * cb4[4].xyz + r1.xyz;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}