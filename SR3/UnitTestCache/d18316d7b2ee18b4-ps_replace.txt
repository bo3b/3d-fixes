cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c0);
  float4 Diffuse_Color_a : packoffset(c1);
  float4 Diffuse_Color_b : packoffset(c2);
  float4 Diffuse_Color_c : packoffset(c3);
  float Sphere_Map_Amount : packoffset(c4);
  float4 Specular_Color : packoffset(c5);
  float Specular_Alpha : packoffset(c6);
  float Illumination_Map_Scroll : packoffset(c7);
  float Illumination_Map_Amount : packoffset(c8);
  float Pulse_Rate : packoffset(c9);
  float Pulse_Base : packoffset(c10);
  float Pulse_Max : packoffset(c11);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Pattern_MapSampler_s : register(s0);
SamplerState Sphere_MapSampler_s : register(s1);
SamplerState Illumination_MapSampler_s : register(s2);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Pattern_MapSampler : register(t0);
Texture2D<float4> Sphere_MapSampler : register(t1);
Texture2D<float4> Illumination_MapSampler : register(t2);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.x = Time.x / Pulse_Rate;
  r0.y = round(r0.x);
  r0.x = r0.x + -r0.y;
  r0.x = 6.283185482e+000 * r0.x;
  r0.x = sin(r0.x);
  r0.x = 1.000000000e+000 + r0.x;
  r0.x = 5.000000000e-001 * r0.x;
  r0.y = Pulse_Max + -Pulse_Base;
  r0.x = r0.x * r0.y + Pulse_Base;
  r1.xyzw = Pattern_MapSampler.Sample(Pattern_MapSampler_s, v4.xy).xyzw;
  r0.y = r1.x + r1.y;
  r0.y = r0.y + r1.z;
  r2.xyz = -r0.yyy * float3(3.333333e-001,3.333333e-001,3.333333e-001) + r1.xyz;
  r0.z = abs(r2.x) + abs(r2.y);
  r0.z = r0.z + abs(r2.z);
  r0.z = r0.z * 1.650164948e+002 + 2.560000000e+002;
  r0.z = 3.921568859e-003 * r0.z;
  r0.y = r0.y >= r0.z;
  r0.z = r0.y ? 0.000000000e+000 : 1.000000000e+000;
  r0.y = (int)r0.y & 0x3f800000;
  r2.xyz = r1.xyz * r1.xyz;
  r1.xyz = float3(-3.725490e-001,-3.725490e-001,-3.725490e-001) + r1.xyz;
  r1.xyz = saturate(float3(1.593750e+000,1.593750e+000,1.593750e+000) * r1.xyz);
  r1.xyz = log2(r1.xyz);
  r1.xyz = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r3.xyz = Diffuse_Color_b.xyz * r2.yyy;
  r2.xyw = r2.xxx * Diffuse_Color_a.xyz + r3.xyz;
  r2.xyz = r2.zzz * Diffuse_Color_c.xyz + r2.xyw;
  r2.xyz = r2.xyz * r0.zzz;
  r0.z = r1.y * r0.z;
  r1.xyz = r0.yyy * r1.xyz + r2.xyz;
  r2.xyzw = Illumination_MapSampler.Sample(Illumination_MapSampler_s, v4.zw).xyzw;
  r0.y = Illumination_Map_Amount * r2.y;
  r0.y = r0.z * r0.y;
  r0.yzw = r1.xyz * r0.yyy;
  r0.xyz = r0.yzw * r0.xxx;
  r0.xyz = r1.xyz * Self_Illumination + r0.xyz;
  r2.xy = v2.xy / v2.ww;
  r2.xy = float2(1.000000e+000,1.000000e+000) + r2.xy;
  r0.w = cb4[9].z * r2.x;
  r1.w = -r2.y * 5.000000000e-001 + 1.000000000e+000;
  r2.y = cb4[9].w * r1.w;
  r2.x = 5.000000000e-001 * r0.w;
  r2.xy = float2(-5.000000e-001,-5.000000e-001) + r2.xy;
  r2.z = floor(r2.x);
  r2.w = floor(r2.y);
  r2.xy = r2.xy + -r2.zw;
  r2.zw = float2(5.000000e-001,5.000000e-001) + r2.zw;
  r3.xy = r2.zw * cb4[9].xy + cb4[9].xy;
  r3.zw = cb4[9].xy * r2.zw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xy).xzwy;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zw).xyzw;
  r4.x = r5.y;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xw).xyzw;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zy).xyzw;
  r4.z = r6.y;
  r4.y = r5.y;
  r5.xyzw = -v3.wwww + r4.xyzw;
  r4.x = 5.000000e-001 >= r4.x;
  r4.y = 5.000000e-001 >= r4.y;
  r4.z = 5.000000e-001 >= r4.z;
  r4.w = 5.000000e-001 >= r4.w;
  r4.x = r4.x ? 1 : 0;
  r4.y = r4.y ? 1 : 0;
  r4.z = r4.z ? 1 : 0;
  r4.w = r4.w ? 1 : 0;
  r5.x = 1.220722e-005 >= abs(r5.x);
  r5.y = 1.220722e-005 >= abs(r5.y);
  r5.z = 1.220722e-005 >= abs(r5.z);
  r5.w = 1.220722e-005 >= abs(r5.w);
  r5.x = r5.x ? 1 : 0;
  r5.y = r5.y ? 1 : 0;
  r5.z = r5.z ? 1 : 0;
  r5.w = r5.w ? 1 : 0;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r2.zw = r4.xy + r4.zw;
  r2.z = r2.z >= r2.w;
  r2.w = r2.w >= r2.z;
  r0.w = r2.w ? 1.000000 : 0;
  r1.w = r2.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.w = r1.w + r0.w;
  r1.w = r0.w == 0.000000;
  r3.x = saturate(r2.x + r0.w);
  r2.zw = max(r4.yw, r4.xz);
  r0.w = r4.y + -r4.x;
  r2.z = r2.w + -r2.z;
  r2.w = r2.z == 0.000000;
  r3.y = saturate(r2.y + r2.z);
  r2.x = saturate(r2.x + r0.w);
  r0.w = abs(r0.w) >= 1.000000000e+000;
  r1.w = r1.w ? r2.w : 0;
  r0.w = r0.w ? r1.w : 0;
  r2.y = 0.000000000e+000;
  r2.x = r0.w ? r2.x : r3.x;
  r2.y = r0.w ? r2.y : r3.y;
  r2.zw = cb4[9].xy;
  r2.xy = r2.xy * r2.zw + r3.zw;
  r2.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.xy).xyzw;
  r2.xyzw = max(r2.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r0.w = dot(r2.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.w = max(r0.w, 1.000000047e-003);
  r0.w = r2.w / r0.w;
  r3.xyz = r2.xyz * r0.www;
  r4.xy = v3.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r4.xyzw = Sphere_MapSampler.Sample(Sphere_MapSampler_s, r4.xy).xyzw;
  r4.xyz = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + r4.xyz;
  r4.xyz = Sphere_Map_Amount * r4.xyz + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r1.xyz = r4.xyz * r1.xyz;
  r1.xyz = r1.xyz * r2.xyz;
  r1.xyz = r1.xyz + r1.xyz;
  r2.xyz = Specular_Alpha * Specular_Color.xyz;
  r1.xyz = r2.xyz * r3.xyz + r1.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.xyz = min(r0.xyz, float3(8.000000e+000,8.000000e+000,8.000000e+000));
  r0.w = 1.000000000e+000 + -v1.x;
  r0.xyz = r0.www * r0.xyz;
  r0.xyz = v1.xxx * cb4[4].xyz + r0.xyz;
  o0.xyz = cb4[1].xyz * r0.xyz;
  o0.w = 0.000000000e+000;
  return;
}