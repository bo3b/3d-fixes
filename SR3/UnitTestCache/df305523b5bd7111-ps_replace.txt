cbuffer cb4 : register(b4)
{
  float4 cb4[15];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[7];
}


cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c3);
  float Reflection_Map_Opacity : packoffset(c4);
  float4 Diffuse_Color : packoffset(c5);
  float4 Wet_mask_levels : packoffset(c6);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 V_ambient_render : packoffset(c2);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 IR_Stipple_Pattern_Offset : packoffset(c11);
  float4 IR_Stipple_Repeat_Info : packoffset(c12);
  float4 TOD_window_tint : packoffset(c14);
}
SamplerState Diffuse_MapSampler_s : register(s1);
SamplerState Reflection_MaskSampler_s : register(s2);
SamplerState Night_Additive_MapSampler_s : register(s3);
SamplerState Glow_MapSampler_s : register(s4);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
SamplerState Single_Paraboloid_MapSampler_s : register(s13);
Texture2D<float4> Diffuse_MapSampler : register(t1);
Texture2D<float4> Reflection_MaskSampler : register(t2);
Texture2D<float4> Night_Additive_MapSampler : register(t3);
Texture2D<float4> Glow_MapSampler : register(t4);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);
Texture2D<float4> Single_Paraboloid_MapSampler : register(t13);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xyz = v2.xyz / v2.www;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.z = cb4[10].z * r0.z + cb4[10].w;
  r0.z = 1.000000e+000 / r0.z;
  r0.z = saturate(3.051757813e-005 * r0.z);
  r1.x = 5.000000000e-001 * r0.x;
  r1.z = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.xyzw = cb4[9].xyxy * float4(9.000000e-001,9.000000e-001,9.000000e-001,9.000000e-001) + r1.xzxz;
  r0.xy = r1.zw * cb4[9].zw + float2(-5.000000e-001,-5.000000e-001);
  r0.x = floor(r0.x);
  r0.y = floor(r0.y);
  r2.xy = cb4[11].xy + r0.xy;
  r3.xyzw = float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + r0.xyxy;
  r3.xyzw = cb4[9].xyxy * r3.xyzw;
  r0.xy = float2(5.000000e-001,5.000000e-001) * r2.xy;
  r2.x = r0.x >= -r0.x;
  r2.y = r0.y >= -r0.y;
  r0.xy = frac(abs(r0.xy));
  r0.x = r2.x ? r0.x : -r0.x;
  r0.y = r2.y ? r0.y : -r0.y;
  r2.xyzw = r0.xxxx * float4(-6.000000e+000,4.000000e+000,6.000000e+000,0.000000e+000) + float4(2.000000e+000,-1.000000e+000,-2.000000e+000,1.000000e+000);
  r4.xyzw = r0.xxxx * float4(2.000000e+000,4.000000e+000,-2.000000e+000,4.000000e+000) + float4(0.000000e+000,-2.000000e+000,2.000000e+000,0.000000e+000);
  r2.xyzw = -r4.xyzw + r2.xyzw;
  r0.w = 2.000000000e+000 * r0.y;
  r2.xyzw = r0.wwww * r2.xyzw + r4.xyzw;
  r2.xyzw = r2.xyzw * cb4[9].xyxy + r3.xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xy).xzyw;
  r0.w = r4.x + -r0.z;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zw).xyzw;
  r4.w = r5.y;
  r3.x = r5.x + -r0.z;
  r3.x = abs(r3.x) >= cb4[10].y;
  r5.xyzw = r0.xxxx * float4(-2.000000e+000,0.000000e+000,2.000000e+000,-4.000000e+000) + float4(0.000000e+000,0.000000e+000,-2.000000e+000,0.000000e+000);
  r5.xyzw = r0.yyyy * float4(0.000000e+000,-2.000000e+000,4.000000e+000,2.000000e+000) + r5.xyzw;
  r5.xyzw = r5.xyzw * cb4[9].xyxy + r3.zwzw;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r5.xy).xyzw;
  r4.x = r6.y;
  r0.x = r6.x + -r0.z;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r5.zw).xyzw;
  r4.y = r6.y;
  r0.y = r6.x + -r0.z;
  r0.x = abs(r0.x) >= cb4[10].y;
  r0.y = abs(r0.y) >= cb4[10].y;
  r0.w = abs(r0.w) >= cb4[10].y;
  r4.xyzw = -v3.wwww + r4.xyzw;
  r4.x = 1.220722e-005 >= abs(r4.x);
  r4.y = 1.220722e-005 >= abs(r4.y);
  r4.z = 1.220722e-005 >= abs(r4.z);
  r4.w = 1.220722e-005 >= abs(r4.w);
  r4.x = r4.x ? 1 : 0;
  r4.y = r4.y ? 1 : 0;
  r4.z = r4.z ? 1 : 0;
  r4.w = r4.w ? 1 : 0;
  r0.x = r0.x ? 0 : r4.x;
  r0.y = r0.y ? 0 : r4.y;
  r0.w = r0.w ? 0 : r4.z;
  r0.z = r0.x + r0.y;
  r3.x = r3.x ? 0.000000000e+000 : r4.w;
  r0.z = r0.z + r0.w;
  r0.z = r0.z + r3.x;
  r0.z = min(r0.z, 1.000000000e+000);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.xy = r0.xy + r0.zz;
  r0.xy = min(r0.xy, float2(1.000000e+000,1.000000e+000));
  r4.xyzw = r5.xyzw + -r1.xyzw;
  r1.xyzw = r2.xyzw + -r1.xyzw;
  r3.y = dot(r4.zw, r4.zw);
  r3.z = dot(r4.xy, r4.xy);
  r3.yz = sqrt(r3.yz);
  r3.yz = r3.yz / cb4[11].zz;
  r3.yz = saturate(float2(1.000000e+000,1.000000e+000) + -r3.yz);
  r0.y = r3.y * r0.y;
  r4.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r5.zw).xyzw;
  r5.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r5.xy).xyzw;
  r4.xyz = r4.xyz * r0.yyy;
  r3.y = r3.z * r0.x;
  r0.x = r3.z * r0.x + r0.y;
  r3.yzw = r5.xyz * r3.yyy + r4.xyz;
  r0.y = r0.w + r0.z;
  r0.z = r3.x + r0.z;
  r0.yz = min(r0.yz, float2(1.000000e+000,1.000000e+000));
  r0.w = dot(r1.xy, r1.xy);
  r1.x = dot(r1.zw, r1.zw);
  r1.x = sqrt(r1.x);
  r1.x = r1.x / cb4[11].z;
  r1.x = saturate(1.000000000e+000 + -r1.x);
  r0.w = sqrt(r0.w);
  r0.w = r0.w / cb4[11].z;
  r0.w = saturate(1.000000000e+000 + -r0.w);
  r1.y = r0.w * r0.y;
  r0.x = r0.w * r0.y + r0.x;
  r0.x = r1.x * r0.z + r0.x;
  r0.y = r1.x * r0.z;
  r4.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.xy).xyzw;
  r2.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.zw).xyzw;
  r1.xyz = r4.xyz * r1.yyy + r3.yzw;
  r0.yzw = r2.xyz * r0.yyy + r1.xyz;
  r0.xyz = r0.yzw / r0.xxx;
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r0.w = dot(-v4.xyz, v5.xyz);
  r0.w = r0.w + r0.w;
  r1.xyz = v5.xzy * -r0.www + -v4.xzy;
  r1.xyz = float3(1.000000e+000,-1.000000e+000,1.000000e+000) * r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r1.xyz * r0.www;
  r1.xy = r1.zz * r0.ww + float2(1.500000e+000,-2.000000e-002);
  r0.w = r2.z >= 1.999999955e-002;
  r0.w = r0.w ? 1.000000 : 0;
  r2.w = r0.w * r1.y + 1.999999955e-002;
  r1.x = saturate(r1.x);
  r0.w = max(r1.x, 1.000000015e-001);
  r1.x = dot(r2.xyw, r2.xyw);
  r1.x = rsqrt(r1.x);
  r1.y = r2.w * r1.x + 1.000000000e+000;
  r1.xz = r2.xy * r1.xx;
  r1.y = r1.y + r1.y;
  r1.xy = r1.xz / r1.yy;
  r1.xy = float2(5.000000e-001,5.000000e-001) + r1.xy;
  r1.z = 1.000000000e+000 + -r1.y;
  r1.xyzw = Single_Paraboloid_MapSampler.Sample(Single_Paraboloid_MapSampler_s, r1.xz).xyzw;
  r1.xyz = max(r1.xyz, cb0[6].xxx);
  r1.xyz = min(r1.xyz, cb0[6].yyy);
  r1.xyz = -cb0[6].xxx + r1.xyz;
  r1.xyz = cb0[6].yyy * r1.xyz;
  r1.xyz = r1.xyz * r0.www;
  r1.xyz = r1.xyz / cb4[1].xyz;
  r2.xyzw = Reflection_MaskSampler.Sample(Reflection_MaskSampler_s, v1.xy).xyzw;
  r1.xyz = r2.xyz * r1.xyz;
  r2.xyz = -r2.xyz * float3(7.500000e-001,7.500000e-001,7.500000e-001) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r0.w = Time.w * cb0[4].x;
  r0.w = r0.w * 1.023000000e+003 + cb0[4].x;
  r1.xyz = r1.xyz * r0.www;
  r3.xyz = cb4[2].xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r1.xyz = r3.xyz * r1.xyz;
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v4.xyz * r0.www;
  r0.w = dot(r3.xyz, v5.xyz);
  r0.w = saturate(1.000000000e+000 + -r0.w);
  r0.w = max(r0.w, 2.000000030e-001);
  r1.w = v4.w * -6.000000238e-001 + 1.500000000e+000;
  r0.w = r1.w * r0.w;
  r1.xyz = r1.xyz * r0.www;
  r3.xyz = v6.xyz;
  r3.w = 1.000000000e+000;
  r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + -r3.xyzw;
  r5.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v1.xy).xyzw;
  r3.xyzw = r5.wwww * r4.xyzw + r3.xyzw;
  r3.xyzw = r5.xyzw * r3.xyzw;
  r2.xyz = r3.xyz * r2.xyz + -r3.xyz;
  r2.xyz = Time.www * r2.xyz + r3.xyz;
  r1.xyz = max(r1.xyz, r2.xyz);
  r0.w = 1.000000e+000 / v2.z;
  r0.w = saturate(r0.w);
  r0.w = max(r0.w, 1.499999966e-002);
  r0.w = min(r0.w, 5.000000075e-002);
  r0.w = -1.499999966e-002 + r0.w;
  r0.w = 2.500000000e+001 * r0.w;
  r1.w = v3.x + -v3.z;
  r2.x = v5.w * r1.w + v3.z;
  r2.y = v3.y;
  r2.xy = float2(4.000000e-003,4.000000e-003) * r2.xy;
  r2.xyzw = Glow_MapSampler.Sample(Glow_MapSampler_s, r2.xy).xyzw;
  r1.w = r2.x + r2.y;
  r1.w = r1.w + r2.z;
  r4.xyz = r1.www * float3(3.333000e-001,3.333000e-001,3.333000e-001) + -r2.xyz;
  r2.xyz = r0.www * r4.xyz + r2.xyz;
  r4.xyzw = Night_Additive_MapSampler.Sample(Night_Additive_MapSampler_s, v1.xy).xyzw;
  r4.xyz = cb4[14].xyz * r4.xyz;
  r4.xyz = Time.www * r4.xyz;
  r4.xyz = cb4[14].www * r4.xyz;
  r2.xyz = r4.xyz * r2.xyz;
  r2.xyz = float3(4.000000e+000,4.000000e+000,4.000000e+000) * r2.xyz;
  r4.xyz = cb0[3].xxx * r3.xyz;
  r0.w = 4.000000060e-001 >= abs(v5.y);
  r0.w = r0.w ? 1.000000 : 0;
  r2.xyz = r0.www * r2.xyz + r4.xyz;
  r0.xyz = r1.xyz * r0.xyz + r2.xyz;
  r0.w = 1.000000000e+000 + -v6.w;
  r0.xyz = r0.www * r0.xyz;
  r3.xyz = v6.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r3.xyzw;
  return;
}