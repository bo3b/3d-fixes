cbuffer cb4 : register(b4)
{
  float4 cb4[15];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[6];
}


cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c2);
  float Reflection_Map_Opacity : packoffset(c3);
  float4 Diffuse_Color : packoffset(c4);
  float4 Wet_mask_levels : packoffset(c5);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 V_ambient_render : packoffset(c2);
  float4 Fog_color : packoffset(c4);
  float Alpha_Threshold : packoffset(c8);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 TOD_window_tint : packoffset(c14);
}
SamplerState Diffuse_MapSampler_s : register(s0);
SamplerState Reflection_MaskSampler_s : register(s1);
SamplerState Night_Additive_MapSampler_s : register(s2);
SamplerState Glow_MapSampler_s : register(s3);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
SamplerState Single_Paraboloid_MapSampler_s : register(s13);
Texture2D<float4> Diffuse_MapSampler : register(t0);
Texture2D<float4> Reflection_MaskSampler : register(t1);
Texture2D<float4> Night_Additive_MapSampler : register(t2);
Texture2D<float4> Glow_MapSampler : register(t3);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);
Texture2D<float4> Single_Paraboloid_MapSampler : register(t13);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v1.xy).xyzw;
  r1.w = 1.000000000e+000;
  r2.x = r0.w * r1.w + -cb4[8].x;
  r2.x = r2.x < 0.000000000e+000;
  if (r2.x != 0) discard;
  r2.x = dot(-v4.xyz, v5.xyz);
  r2.x = r2.x + r2.x;
  r2.xyz = v5.xzy * -r2.xxx + -v4.xzy;
  r2.xyz = float3(1.000000e+000,-1.000000e+000,1.000000e+000) * r2.xyz;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r2.xyz * r2.www;
  r2.xy = r2.zz * r2.ww + float2(1.500000e+000,-2.000000e-002);
  r2.z = r3.z >= 1.999999955e-002;
  r2.z = r2.z ? 1.000000 : 0;
  r3.w = r2.z * r2.y + 1.999999955e-002;
  r2.x = saturate(r2.x);
  r2.x = max(r2.x, 1.000000015e-001);
  r2.y = dot(r3.xyw, r3.xyw);
  r2.y = rsqrt(r2.y);
  r2.z = r3.w * r2.y + 1.000000000e+000;
  r2.yw = r3.xy * r2.yy;
  r2.z = r2.z + r2.z;
  r2.yz = r2.yw / r2.zz;
  r3.xy = float2(5.000000e-001,5.000000e-001) + r2.yz;
  r3.z = 1.000000000e+000 + -r3.y;
  r3.xyzw = Single_Paraboloid_MapSampler.Sample(Single_Paraboloid_MapSampler_s, r3.xz).xyzw;
  r2.yzw = max(r3.xyz, cb0[5].xxx);
  r2.yzw = min(r2.yzw, cb0[5].yyy);
  r2.yzw = -cb0[5].xxx + r2.yzw;
  r2.yzw = cb0[5].yyy * r2.yzw;
  r2.xyz = r2.yzw * r2.xxx;
  r2.xyz = r2.xyz / cb4[1].xyz;
  r3.xyzw = Reflection_MaskSampler.Sample(Reflection_MaskSampler_s, v1.xy).xyzw;
  r2.xyz = r3.xyz * r2.xyz;
  r3.xyz = -r3.xyz * float3(7.500000e-001,7.500000e-001,7.500000e-001) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r2.w = Time.w * cb0[3].x;
  r2.w = r2.w * 1.023000000e+003 + cb0[3].x;
  r2.xyz = r2.xyz * r2.www;
  r4.xyz = cb4[2].xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r2.xyz = r4.xyz * r2.xyz;
  r2.w = dot(v4.xyz, v4.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = v4.xyz * r2.www;
  r2.w = dot(r4.xyz, v5.xyz);
  r2.w = saturate(1.000000000e+000 + -r2.w);
  r2.w = max(r2.w, 2.000000030e-001);
  r3.w = v4.w * -6.000000238e-001 + 1.500000000e+000;
  r2.w = r3.w * r2.w;
  r2.xyz = r2.xyz * r2.www;
  r1.xyz = v6.xyz;
  r0.xyzw = r1.xyzw * r0.xyzw;
  r1.xyz = r0.xyz * r3.xyz + -r0.xyz;
  r1.xyz = Time.www * r1.xyz + r0.xyz;
  r1.xyz = max(r1.xyz, r2.xyz);
  r2.xy = v2.xy / v2.ww;
  r2.xy = float2(1.000000e+000,1.000000e+000) + r2.xy;
  r1.w = cb4[9].z * r2.x;
  r2.x = -r2.y * 5.000000000e-001 + 1.000000000e+000;
  r2.y = cb4[9].w * r2.x;
  r2.x = 5.000000000e-001 * r1.w;
  r2.xy = float2(-5.000000e-001,-5.000000e-001) + r2.xy;
  r2.z = floor(r2.x);
  r2.w = floor(r2.y);
  r2.xy = r2.xy + -r2.zw;
  r2.zw = float2(5.000000e-001,5.000000e-001) + r2.zw;
  r3.xy = r2.zw * cb4[9].xy + cb4[9].xy;
  r3.zw = cb4[9].xy * r2.zw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xy).xzwy;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zw).xyzw;
  r4.x = r5.y;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xw).xyzw;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zy).xyzw;
  r4.z = r6.y;
  r4.y = r5.y;
  r5.xyzw = -v3.wwww + r4.xyzw;
  r4.x = 5.000000e-001 >= r4.x;
  r4.y = 5.000000e-001 >= r4.y;
  r4.z = 5.000000e-001 >= r4.z;
  r4.w = 5.000000e-001 >= r4.w;
  r4.x = r4.x ? 1 : 0;
  r4.y = r4.y ? 1 : 0;
  r4.z = r4.z ? 1 : 0;
  r4.w = r4.w ? 1 : 0;
  r5.x = 1.220722e-005 >= abs(r5.x);
  r5.y = 1.220722e-005 >= abs(r5.y);
  r5.z = 1.220722e-005 >= abs(r5.z);
  r5.w = 1.220722e-005 >= abs(r5.w);
  r5.x = r5.x ? 1 : 0;
  r5.y = r5.y ? 1 : 0;
  r5.z = r5.z ? 1 : 0;
  r5.w = r5.w ? 1 : 0;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r2.zw = r4.xy + r4.zw;
  r2.z = r2.z >= r2.w;
  r2.w = r2.w >= r2.z;
  r1.w = r2.w ? 1.000000 : 0;
  r2.z = r2.z ? -1.000000000e+000 : -0.000000000e+000;
  r1.w = r2.z + r1.w;
  r2.z = r1.w == 0.000000;
  r3.x = saturate(r2.x + r1.w);
  r4.zw = max(r4.yw, r4.xz);
  r1.w = r4.y + -r4.x;
  r2.w = r4.w + -r4.z;
  r4.x = r2.w == 0.000000;
  r3.y = saturate(r2.y + r2.w);
  r2.x = saturate(r2.x + r1.w);
  r1.w = abs(r1.w) >= 1.000000000e+000;
  r2.z = r4.x ? r2.z : 0;
  r1.w = r1.w ? r2.z : 0;
  r2.y = 0.000000000e+000;
  r2.x = r1.w ? r2.x : r3.x;
  r2.y = r1.w ? r2.y : r3.y;
  r2.zw = cb4[9].xy;
  r2.xy = r2.xy * r2.zw + r3.zw;
  r2.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.xy).xyzw;
  r2.xyz = max(r2.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.w = v3.x + -v3.z;
  r3.x = v5.w * r1.w + v3.z;
  r3.y = v3.y;
  r3.xy = float2(4.000000e-003,4.000000e-003) * r3.xy;
  r3.xyzw = Glow_MapSampler.Sample(Glow_MapSampler_s, r3.xy).xyzw;
  r4.xyzw = Night_Additive_MapSampler.Sample(Night_Additive_MapSampler_s, v1.xy).xyzw;
  r4.xyz = cb4[14].xyz * r4.xyz;
  r4.xyz = Time.www * r4.xyz;
  r4.xyz = cb4[14].www * r4.xyz;
  r3.xyz = r4.xyz * r3.xyz;
  r3.xyz = float3(4.000000e+000,4.000000e+000,4.000000e+000) * r3.xyz;
  r1.w = 4.000000060e-001 >= abs(v5.y);
  r1.w = r1.w ? 1.000000 : 0;
  r3.xyz = r1.www * r3.xyz;
  r4.xyz = r0.xyz * cb0[2].xxx + r3.xyz;
  r1.w = dot(r3.xyz, float3(2.126000e-001,7.152000e-001,7.220000e-002));
  r1.w = -r1.w * 2.500000000e-001 + 1.000000000e+000;
  r1.xyz = r1.xyz * r2.xyz + r4.xyz;
  r2.x = -v6.w * r1.w + 1.000000000e+000;
  r1.w = v6.w * r1.w;
  r1.xyz = r2.xxx * r1.xyz;
  r0.xyz = r1.www * cb4[4].xyz + r1.xyz;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}