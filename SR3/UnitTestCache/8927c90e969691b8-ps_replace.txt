cbuffer cb8 : register(b8)
{
  float4 cb8[2];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[12];
}


cbuffer vc0 : register(b0)
{
  float4 Specular_Color : packoffset(c1);
  float3 Reflection_Cos_Min_Angles : packoffset(c2);
  float3 Reflection_Inv_Range_Cos_Angles : packoffset(c3);
  float Ambient_Reflection_Amount : packoffset(c4);
  float Specular_Alpha : packoffset(c5);
  float4 Glass_Color : packoffset(c6);
  float4 Decal_Clamp_UV_1 : packoffset(c7);
  float Grime_Tiling_U : packoffset(c8);
  float Grime_Tiling_V : packoffset(c9);
  float Grime_Amount : packoffset(c10);
  float4 Decal_Color : packoffset(c11);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}

cbuffer vc8 : register(b8)
{
  bool Cubic_reflection_enable : packoffset(c1.w);
}
SamplerState Decal_MapSampler_s : register(s0);
SamplerState Grime_MapSampler_s : register(s1);
SamplerState Dirt_Rust_MapSampler_s : register(s2);
SamplerState Cubic_Reflection_MapSampler_s : register(s8);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState Dual_Paraboloid_Map_FrontSampler_s : register(s10);
SamplerState Dual_Paraboloid_Map_BackSampler_s : register(s11);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Decal_MapSampler : register(t0);
Texture2D<float4> Grime_MapSampler : register(t1);
Texture2D<float4> Dirt_Rust_MapSampler : register(t2);
TextureCube<float4> Cubic_Reflection_MapSampler : register(t8);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> Dual_Paraboloid_Map_FrontSampler : register(t10);
Texture2D<float4> Dual_Paraboloid_Map_BackSampler : register(t11);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xy = v2.xy / v2.ww;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r0.z = floor(r0.x);
  r0.w = floor(r0.y);
  r0.xy = r0.xy + -r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.xy = r0.zw * cb4[9].xy + cb4[9].xy;
  r1.zw = cb4[9].xy * r0.zw;
  r2.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zw).xyzw;
  r2.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zy).xyzw;
  r2.z = r4.y;
  r2.y = r3.y;
  r3.xyzw = -v3.wwww + r2.xyzw;
  r2.x = 5.000000e-001 >= r2.x;
  r2.y = 5.000000e-001 >= r2.y;
  r2.z = 5.000000e-001 >= r2.z;
  r2.w = 5.000000e-001 >= r2.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.zw = r2.xy + r2.zw;
  r0.z = r0.z >= r0.w;
  r0.w = r0.w >= r0.z;
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.z = r0.w + r0.z;
  r0.w = r0.z == 0.000000;
  r1.x = saturate(r0.x + r0.z);
  r2.zw = max(r2.yw, r2.xz);
  r0.z = r2.y + -r2.x;
  r2.x = r2.w + -r2.z;
  r2.y = r2.x == 0.000000;
  r1.y = saturate(r2.x + r0.y);
  r3.x = saturate(r0.x + r0.z);
  r0.x = abs(r0.z) >= 1.000000000e+000;
  r0.y = r0.w ? r2.y : 0;
  r0.x = r0.x ? r0.y : 0;
  r3.yw = float2(0.000000e+000,0.000000e+000);
  r0.x = r0.x ? r3.x : r1.x;
  r0.y = r0.x ? r3.y : r1.y;
  r0.zw = cb4[9].xy;
  r0.xy = r0.xy * r0.zw + r1.zw;
  r0.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r0.xyzw = max(r0.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = max(r1.x, 1.000000047e-003);
  r0.w = r0.w / r1.x;
  r1.xyz = r0.xyz * r0.www;
  r2.xyz = cb0[5].xxx * cb0[1].xyz;
  r4.xyz = r2.xyz * r1.xyz;
  r0.w = saturate(v5.x);
  r0.w = -v5.x + r0.w;
  r3.z = cb0[7].x * r0.w;
  r3.xy = v5.xy + r3.zw;
  r3.xyzw = Decal_MapSampler.Sample(Decal_MapSampler_s, r3.xy).xyzw;
  r0.w = -4.499999881e-001 + r3.w;
  r0.w = saturate(1.000000000e+001 * r0.w);
  r1.w = r0.w * -2.000000000e+000 + 3.000000000e+000;
  r0.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r0.w = cb0[11].w * r0.w;
  r3.xyz = cb0[11].xyz;
  r3.w = 0.000000000e+000;
  r5.xyzw = cb0[11].xyzw + -r3.xyzw;
  r3.xyzw = r0.wwww * r5.xyzw + r3.xyzw;
  r3.xyz = r3.xyz * r0.xyz + r4.xyz;
  r4.xyz = cb0[6].xyz * r0.xyz + r4.xyz;
  r3.xyz = -r4.xyz * cb0[6].www + r3.xyz;
  r4.xyz = cb0[6].www * r4.xyz;
  r3.xyz = r3.www * r3.xyz + r4.xyz;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = v3.xyz * r0.www;
  r0.w = dot(-r4.xyz, v4.xyz);
  r0.w = r0.w + r0.w;
  r5.xyw = v4.xzy * -r0.www + -r4.xzy;
  r0.w = dot(r4.xyz, v4.xyz);
  r0.w = 1.000000000e+000 + -r0.w;
  r4.xy = saturate(r0.ww);
  r6.xyz = float3(1.000000e+000,-1.000000e+000,1.000000e+000) * r5.xyw;
  r0.w = dot(r6.xyz, r6.xyz);
  r0.w = rsqrt(r0.w);
  r1.w = r6.z * r0.w + 1.000000000e+000;
  r6.xyz = r6.xyz * r0.www;
  r0.w = r1.w + r1.w;
  r7.xy = r6.xy / r0.ww;
  r7.xy = float2(5.000000e-001,5.000000e-001) + r7.xy;
  r7.z = 1.000000000e+000 + -r7.y;
  r7.xyzw = Dual_Paraboloid_Map_FrontSampler.Sample(Dual_Paraboloid_Map_FrontSampler_s, r7.xz).xyzw;
  r0.w = r6.z * -1.000000000e+000 + 1.000000000e+000;
  r6.xy = float2(1.000000e+000,-1.000000e+000) * r6.xy;
  r0.w = r0.w + r0.w;
  r6.xy = r6.xy / r0.ww;
  r6.xy = float2(5.000000e-001,5.000000e-001) + r6.xy;
  r6.z = 1.000000000e+000 + -r6.y;
  r6.xyzw = Dual_Paraboloid_Map_BackSampler.Sample(Dual_Paraboloid_Map_BackSampler_s, r6.xz).xyzw;
  r6.xyz = max(r6.xyz, r7.xyz);
  r6.xyz = r6.xyz / cb4[1].xyz;
  r7.xyzw = Cubic_Reflection_MapSampler.Sample(Cubic_Reflection_MapSampler_s, r5.xwy).xyzw;
  r5.xyz = r7.xyz / cb4[1].xyz;
  r6.w = r5.w;
  r5.x = cb8[1].w ? r5.x : r6.x;
  r5.y = cb8[1].w ? r5.y : r6.y;
  r5.z = cb8[1].w ? r5.z : r6.z;
  r5.w = cb8[1].w ? r5.w : r6.w;
  r1.xyz = r2.xyz * r1.xyz + r5.xyz;
  r4.z = saturate(r5.w);
  r2.xyz = -cb0[2].xyz + r4.xyz;
  r2.xyz = cb0[3].xyz * r2.xyz;
  r2.xyz = max(r2.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.xyz = r1.xyz + -r3.xyz;
  r0.w = min(r2.z, 1.000000000e+000);
  r0.w = r2.y * r0.w + r2.x;
  r0.w = cb0[4].x + r0.w;
  r1.xyz = r0.www * r1.xyz + r3.xyz;
  r2.xyzw = Grime_MapSampler.Sample(Grime_MapSampler_s, v5.zw).xyzw;
  r2.xyz = r2.xyz * r0.xyz + -r1.xyz;
  r1.w = cb0[10].x * r2.w;
  r1.xyz = r1.www * r2.xyz + r1.xyz;
  r2.xyzw = Dirt_Rust_MapSampler.Sample(Dirt_Rust_MapSampler_s, v1.xy).xyzw;
  r0.xyz = r2.xyz * r0.xyz + -r1.xyz;
  r0.xyz = r2.www * r0.xyz + r1.xyz;
  r1.x = -cb0[6].w + 1.000000000e+000;
  r1.x = r3.w * r1.x + cb0[6].w;
  r1.y = 1.000000000e+000 + -r1.x;
  r0.w = r0.w * r1.y + r1.x;
  r1.x = 1.000000000e+000 + -r0.w;
  r0.w = r1.w * r1.x + r0.w;
  r1.x = 1.000000000e+000 + -r0.w;
  r0.w = r2.w * r1.x + r0.w;
  r1.w = max(r0.w, 9.999999975e-007);
  r0.xyz = r0.xyz / r1.www;
  r0.w = 1.000000000e+000 + -v4.w;
  r0.xyz = r0.www * r0.xyz;
  r1.xyz = v4.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r1.xyzw;
  return;
}