cbuffer cb8 : register(b8)
{
  float4 cb8[2];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[18];
}


cbuffer vc0 : register(b0)
{
  float4 Specular_Color : packoffset(c1);
  float Self_Illumination : packoffset(c2);
  float Decal_Map_TilingU : packoffset(c3);
  float Decal_Map_TilingV : packoffset(c4);
  float Decal_Map_TilingU_2 : packoffset(c5);
  float Decal_Map_TilingV_2 : packoffset(c6);
  float3 Base_Paint_Color : packoffset(c7);
  float3 Fresnel_Color : packoffset(c8);
  float Fresnel_Falloff_Contrast_Amount : packoffset(c9);
  float Fresnel_Falloff_Brightness_Amount : packoffset(c10);
  float Dirt_Reveal_Brightness_Amount : packoffset(c11);
  float Reflection_Falloff_Brightness_Amount : packoffset(c12);
  float Reflection_Falloff_Contrast_Amount : packoffset(c13);
  float ClampU1 : packoffset(c14);
  float ClampV1 : packoffset(c15);
  float ClampV2 : packoffset(c16);
  float ClampU2 : packoffset(c17);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}

cbuffer vc8 : register(b8)
{
  bool Cubic_reflection_enable : packoffset(c1.w);
}
SamplerState Damage_Normal_MapSampler_s : register(s0);
SamplerState Decal_MapSampler_s : register(s1);
SamplerState Decal_Map_2Sampler_s : register(s2);
SamplerState Dirt_MapSampler_s : register(s3);
SamplerState Dirt_Reveal_MapSampler_s : register(s4);
SamplerState Cubic_Reflection_MapSampler_s : register(s8);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState Dual_Paraboloid_Map_FrontSampler_s : register(s10);
SamplerState Dual_Paraboloid_Map_BackSampler_s : register(s11);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Damage_Normal_MapSampler : register(t0);
Texture2D<float4> Decal_MapSampler : register(t1);
Texture2D<float4> Decal_Map_2Sampler : register(t2);
Texture2D<float4> Dirt_MapSampler : register(t3);
Texture2D<float4> Dirt_Reveal_MapSampler : register(t4);
TextureCube<float4> Cubic_Reflection_MapSampler : register(t8);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> Dual_Paraboloid_Map_FrontSampler : register(t10);
Texture2D<float4> Dual_Paraboloid_Map_BackSampler : register(t11);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v4.xy / v4.ww;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r0.z = floor(r0.x);
  r0.w = floor(r0.y);
  r0.xy = r0.xy + -r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.xy = r0.zw * cb4[9].xy + cb4[9].xy;
  r1.zw = cb4[9].xy * r0.zw;
  r2.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zw).xyzw;
  r2.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zy).xyzw;
  r2.z = r4.y;
  r2.y = r3.y;
  r3.xyzw = -v5.wwww + r2.xyzw;
  r2.x = 5.000000e-001 >= r2.x;
  r2.y = 5.000000e-001 >= r2.y;
  r2.z = 5.000000e-001 >= r2.z;
  r2.w = 5.000000e-001 >= r2.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.zw = r2.xy + r2.zw;
  r0.z = r0.z >= r0.w;
  r0.w = r0.w >= r0.z;
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.z = r0.w + r0.z;
  r0.w = r0.z == 0.000000;
  r1.x = saturate(r0.x + r0.z);
  r2.zw = max(r2.yw, r2.xz);
  r0.z = r2.y + -r2.x;
  r2.x = r2.w + -r2.z;
  r2.y = r2.x == 0.000000;
  r1.y = saturate(r2.x + r0.y);
  r0.x = saturate(r0.x + r0.z);
  r0.z = abs(r0.z) >= 1.000000000e+000;
  r0.w = r0.w ? r2.y : 0;
  r0.z = r0.z ? r0.w : 0;
  r0.y = 0.000000000e+000;
  r0.x = r0.z ? r0.x : r1.x;
  r0.y = r0.z ? r0.y : r1.y;
  r0.zw = cb4[9].xy;
  r0.xy = r0.xy * r0.zw + r1.zw;
  r0.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r0.xyzw = max(r0.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = max(r1.x, 1.000000047e-003);
  r0.w = r0.w / r1.x;
  r1.xyz = v5.xyz + -v3.xyz;
  r1.w = dot(r1.xyz, v6.xyz);
  r1.w = r1.w + r1.w;
  r1.xyz = v6.xyz * -r1.www + r1.xyz;
  r2.xyz = float3(1.000000e+000,-1.000000e+000,1.000000e+000) * r1.xzy;
  r1.xyzw = Cubic_Reflection_MapSampler.Sample(Cubic_Reflection_MapSampler_s, r1.xyz).xyzw;
  r1.xyz = r1.xyz / cb4[1].xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.w = r2.z * r1.w + 1.000000000e+000;
  r2.xyz = r2.xyz * r1.www;
  r1.w = r2.w + r2.w;
  r3.xy = r2.xy / r1.ww;
  r3.xy = float2(5.000000e-001,5.000000e-001) + r3.xy;
  r3.z = 1.000000000e+000 + -r3.y;
  r3.xyzw = Dual_Paraboloid_Map_FrontSampler.Sample(Dual_Paraboloid_Map_FrontSampler_s, r3.xz).xyzw;
  r1.w = r2.z * -1.000000000e+000 + 1.000000000e+000;
  r2.xy = float2(1.000000e+000,-1.000000e+000) * r2.xy;
  r1.w = r1.w + r1.w;
  r2.xy = r2.xy / r1.ww;
  r2.xy = float2(5.000000e-001,5.000000e-001) + r2.xy;
  r2.z = 1.000000000e+000 + -r2.y;
  r2.xyzw = Dual_Paraboloid_Map_BackSampler.Sample(Dual_Paraboloid_Map_BackSampler_s, r2.xz).xyzw;
  r2.xyz = max(r2.xyz, r3.xyz);
  r2.xyz = r2.xyz / cb4[1].xyz;
  r1.x = cb8[1].w ? r1.x : r2.x;
  r1.y = cb8[1].w ? r1.y : r2.y;
  r1.z = cb8[1].w ? r1.z : r2.z;
  r2.xyzw = Damage_Normal_MapSampler.Sample(Damage_Normal_MapSampler_s, v9.xy).xyzw;
  r2.yzw = r2.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = r2.y * r2.w;
  r3.xy = -r2.zx;
  r1.w = dot(r2.zx, r3.xy);
  r1.w = saturate(1.000000000e+000 + r1.w);
  r3.z = sqrt(r1.w);
  r2.xyz = float3(-0.000000e+000,-0.000000e+000,-1.000000e+000) + r3.xyz;
  r2.xyz = v6.www * r2.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r1.w = dot(v2.xyz, v2.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = v2.xyz * r1.www;
  r1.w = dot(r3.xyz, r2.xyz);
  r1.w = saturate(1.000000000e+000 + -r1.w);
  r2.x = log2(r1.w);
  r1.w = -5.000000000e-001 + r1.w;
  r1.w = cb0[9].x * r1.w + 5.000000000e-001;
  r1.w = saturate(cb0[10].x * r1.w);
  r2.x = 2.799999952e+000 * r2.x;
  r2.x = exp2(r2.x);
  r2.y = cb0[13].x + -cb0[12].x;
  r2.x = r2.x * r2.y + cb0[12].x;
  r3.xyzw = Dirt_Reveal_MapSampler.Sample(Dirt_Reveal_MapSampler_s, v8.zw).xyzw;
  r2.y = -r3.x * cb0[11].x + 1.000000000e+000;
  r2.z = cb0[11].x * r3.x;
  r2.y = r2.y * 5.500000119e-001 + -5.000000000e-001;
  r2.y = saturate(r2.y * 1.000000000e+001 + 5.000000000e-001);
  r2.x = r2.x * r2.y;
  r3.xyz = cb0[1].xyz * r2.yyy;
  r1.xyz = r2.xxx * r1.xyz;
  r1.xyz = r0.xyz * r0.www + r1.xyz;
  r4.w = 0.000000000e+000;
  r5.w = 0.000000000e+000;
  r4.xyz = cb0[7].xyz;
  r5.xyz = cb0[8].xyz + -r4.xyz;
  r4.xyzw = r1.wwww * r5.xyzw + r4.xyzw;
  r0.w = -cb0[15].x + 1.000000000e+000;
  r1.w = 5.120000000e+002 * r0.w;
  r0.w = r0.w * 5.120000000e+002 + 1.000000000e+000;
  r1.w = max(-r1.w, v8.y);
  r0.w = min(r0.w, r1.w);
  r1.w = cb0[15].x != 0.000000;
  r2.y = r1.w ? r0.w : v8.y;
  r0.w = -cb0[14].x + 1.000000000e+000;
  r1.w = 5.120000000e+002 * r0.w;
  r0.w = r0.w * 5.120000000e+002 + 1.000000000e+000;
  r1.w = max(-r1.w, v8.x);
  r2.x = min(r0.w, r1.w);
  r5.xyzw = Decal_MapSampler.Sample(Decal_MapSampler_s, r2.xy).xyzw;
  r6.xyzw = r5.xyzw + -r4.xyzw;
  r4.xyzw = r5.wwww * r6.xyzw + r4.xyzw;
  r0.w = -cb0[16].x + 1.000000000e+000;
  r1.w = 5.120000000e+002 * r0.w;
  r0.w = r0.w * 5.120000000e+002 + 1.000000000e+000;
  r1.w = max(-r1.w, v9.w);
  r0.w = min(r0.w, r1.w);
  r1.w = cb0[16].x != 0.000000;
  r2.y = r1.w ? r0.w : v9.w;
  r0.w = -cb0[17].x + 1.000000000e+000;
  r1.w = 5.120000000e+002 * r0.w;
  r0.w = r0.w * 5.120000000e+002 + 1.000000000e+000;
  r1.w = max(-r1.w, v9.z);
  r2.x = min(r0.w, r1.w);
  r5.xyzw = Decal_Map_2Sampler.Sample(Decal_Map_2Sampler_s, r2.xy).xyzw;
  r6.xyzw = r5.xyzw + -r4.xyzw;
  r4.xyzw = r5.wwww * r6.xyzw + r4.xyzw;
  r5.xyzw = Dirt_MapSampler.Sample(Dirt_MapSampler_s, v9.xy).xyzw;
  r5.xyzw = r5.xyzw + -r4.xyzw;
  r2.xyzw = r2.zzzz * r5.xyzw + r4.xyzw;
  r4.xyz = cb0[2].xxx * r2.xyz;
  r0.xyz = r2.xyz * r0.xyz + r4.xyz;
  r0.xyz = r3.xyz * r1.xyz + r0.xyz;
  r0.w = 1.000000000e+000 + -v7.w;
  r0.xyz = r0.www * r0.xyz;
  r2.xyz = v7.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r2.xyzw;
  return;
}