cbuffer cb8 : register(b8)
{
  float4 cb8[2];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[12];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}


cbuffer vc0 : register(b0)
{
  float4 Specular_Color : packoffset(c1);
  float3 Base_Paint_Color : packoffset(c2);
  float3 Fresnel_Color : packoffset(c3);
  float Fresnel_Min_Cos_Angle : packoffset(c4);
  float Fresnel_Inverse_Cos_Angle_Range : packoffset(c5);
  float3 Reflection_Cos_Min_Angles : packoffset(c6);
  float3 Reflection_Inv_Range_Cos_Angles : packoffset(c7);
  float Ambient_Reflection_Amount : packoffset(c8);
  float4 Decal_Clamp_UV_1 : packoffset(c9);
  float Specular_Alpha : packoffset(c10);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 IR_Stipple_Pattern_Offset : packoffset(c11);
  float4 IR_Stipple_Repeat_Info : packoffset(c12);
}

cbuffer vc8 : register(b8)
{
  bool Cubic_reflection_enable : packoffset(c1.w);
}
SamplerState Damage_Normal_MapSampler_s : register(s0);
SamplerState Decal_MapSampler_s : register(s1);
SamplerState Cubic_Reflection_MapSampler_s : register(s8);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState Dual_Paraboloid_Map_FrontSampler_s : register(s10);
SamplerState Dual_Paraboloid_Map_BackSampler_s : register(s11);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Damage_Normal_MapSampler : register(t0);
Texture2D<float4> Decal_MapSampler : register(t1);
TextureCube<float4> Cubic_Reflection_MapSampler : register(t8);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> Dual_Paraboloid_Map_FrontSampler : register(t10);
Texture2D<float4> Dual_Paraboloid_Map_BackSampler : register(t11);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xyz = v2.xyz / v2.www;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r1.x = 5.000000000e-001 * r0.x;
  r1.z = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.xyzw = cb4[9].xyxy * float4(9.000000e-001,9.000000e-001,9.000000e-001,9.000000e-001) + r1.xzxz;
  r0.xy = r1.zw * cb4[9].zw + float2(-5.000000e-001,-5.000000e-001);
  r0.x = floor(r0.x);
  r0.y = floor(r0.y);
  r2.xyzw = float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + r0.xyxy;
  r2.xyzw = cb4[9].xyxy * r2.xyzw;
  r0.xy = cb4[11].xy + r0.xy;
  r0.xy = float2(5.000000e-001,5.000000e-001) * r0.xy;
  r3.x = r0.x >= -r0.x;
  r3.y = r0.y >= -r0.y;
  r0.xy = frac(abs(r0.xy));
  r0.x = r3.x ? r0.x : -r0.x;
  r0.y = r3.y ? r0.y : -r0.y;
  r3.xyzw = r0.xxxx * float4(-2.000000e+000,0.000000e+000,2.000000e+000,-4.000000e+000) + float4(0.000000e+000,0.000000e+000,-2.000000e+000,0.000000e+000);
  r0.w = 2.000000000e+000 * r0.y;
  r3.xyzw = r0.yyyy * float4(0.000000e+000,-2.000000e+000,4.000000e+000,2.000000e+000) + r3.xyzw;
  r4.xyzw = r0.xxxx * float4(2.000000e+000,4.000000e+000,-2.000000e+000,4.000000e+000) + float4(0.000000e+000,-2.000000e+000,2.000000e+000,0.000000e+000);
  r5.xyzw = r0.xxxx * float4(-6.000000e+000,4.000000e+000,6.000000e+000,0.000000e+000) + float4(2.000000e+000,-1.000000e+000,-2.000000e+000,1.000000e+000);
  r5.xyzw = r5.xyzw + -r4.xyzw;
  r4.xyzw = r0.wwww * r5.xyzw + r4.xyzw;
  r3.xyzw = r3.xyzw * cb4[9].xyxy + r2.zwzw;
  r2.xyzw = r4.xyzw * cb4[9].xyxy + r2.xyzw;
  r4.xyzw = r3.xyzw + -r1.xyzw;
  r0.x = dot(r4.xy, r4.xy);
  r0.x = sqrt(r0.x);
  r0.x = r0.x / cb4[11].z;
  r0.y = dot(r4.zw, r4.zw);
  r0.y = sqrt(r0.y);
  r0.y = r0.y / cb4[11].z;
  r1.xyzw = r2.xyzw + -r1.xyzw;
  r0.w = dot(r1.xy, r1.xy);
  r0.w = sqrt(r0.w);
  r0.w = r0.w / cb4[11].z;
  r0.xyw = saturate(float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r0.xyw);
  r1.x = dot(r1.zw, r1.zw);
  r1.x = sqrt(r1.x);
  r1.x = r1.x / cb4[11].z;
  r1.x = saturate(1.000000000e+000 + -r1.x);
  r0.z = cb4[10].z * r0.z + cb4[10].w;
  r0.z = 1.000000e+000 / r0.z;
  r0.z = saturate(3.051757813e-005 * r0.z);
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.xy).xyzw;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r3.zw).xyzw;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xy).xyzw;
  r7.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zw).xzwy;
  r1.y = r4.x + -r0.z;
  r1.z = r5.x + -r0.z;
  r1.w = r6.x + -r0.z;
  r1.y = abs(r1.y) >= cb4[10].y;
  r1.z = abs(r1.z) >= cb4[10].y;
  r1.w = abs(r1.w) >= cb4[10].y;
  r0.z = r7.x + -r0.z;
  r0.z = abs(r0.z) >= cb4[10].y;
  r7.x = r4.y;
  r7.y = r5.y;
  r7.z = r6.y;
  r4.xyzw = -v3.wwww + r7.xyzw;
  r4.x = 1.220722e-005 >= abs(r4.x);
  r4.y = 1.220722e-005 >= abs(r4.y);
  r4.z = 1.220722e-005 >= abs(r4.z);
  r4.w = 1.220722e-005 >= abs(r4.w);
  r4.x = r4.x ? 1 : 0;
  r4.y = r4.y ? 1 : 0;
  r4.z = r4.z ? 1 : 0;
  r4.w = r4.w ? 1 : 0;
  r1.y = r1.y ? 0 : r4.x;
  r1.z = r1.z ? 0 : r4.y;
  r1.w = r1.w ? 0 : r4.z;
  r0.z = r0.z ? 0.000000000e+000 : r4.w;
  r4.x = r1.y + r1.z;
  r4.x = r4.x + r1.w;
  r4.x = r4.x + r0.z;
  r4.x = min(r4.x, 1.000000000e+000);
  r4.x = 1.000000000e+000 + -r4.x;
  r1.yz = r4.xx + r1.yz;
  r1.yz = min(r1.yz, float2(1.000000e+000,1.000000e+000));
  r4.y = r1.y * r0.x;
  r0.y = r1.z * r0.y;
  r1.z = r4.x + r1.w;
  r1.z = min(r1.z, 1.000000000e+000);
  r1.w = r1.z * r0.w;
  r0.z = r4.x + r0.z;
  r0.z = min(r0.z, 1.000000000e+000);
  r4.x = r1.x * r0.z;
  r0.x = r0.x * r1.y + r0.y;
  r0.x = r0.w * r1.z + r0.x;
  r0.x = r1.x * r0.z + r0.x;
  r5.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r3.xy).xyzw;
  r3.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r3.zw).xyzw;
  r3.xyzw = r3.xyzw * r0.yyyy;
  r6.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.xy).xyzw;
  r2.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.zw).xyzw;
  r3.xyzw = r5.xyzw * r4.yyyy + r3.xyzw;
  r1.xyzw = r6.xyzw * r1.wwww + r3.xyzw;
  r1.xyzw = r2.xyzw * r4.xxxx + r1.xyzw;
  r0.xyzw = r1.xyzw / r0.xxxx;
  r0.xyzw = max(r0.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = max(r1.x, 1.000000047e-003);
  r0.w = r0.w / r1.x;
  r1.xyz = r0.xyz * r0.www;
  r0.w = 9.999999776e-003 < v4.w;
  if (r0.w != 0) {
  r2.xyzw = Damage_Normal_MapSampler.Sample(Damage_Normal_MapSampler_s, v6.zw).xyzw;
  r2.yzw = r2.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = r2.y * r2.w;
  r3.xy = -r2.zx;
  r0.w = dot(r2.zx, r3.xy);
  r0.w = saturate(1.000000000e+000 + r0.w);
  r3.z = sqrt(r0.w);
  r2.xyz = float3(-0.000000e+000,-0.000000e+000,-1.000000e+000) + r3.xyz;
  r2.xyz = v4.www * r2.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r3.xyz = v5.xyz * r2.yyy;
  r2.xyw = r2.xxx * v1.xyz + r3.xyz;
  r2.xyz = r2.zzz * v4.xyz + r2.xyw;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  } else {
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v4.xyz * r0.www;
  }
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v3.xyz * r0.www;
  r0.w = dot(r3.xyz, r2.xyz);
  r0.w = 1.000000000e+000 + -r0.w;
  r4.xy = saturate(r0.ww);
  r0.w = -cb0[4].x + r4.y;
  r0.w = saturate(cb0[5].x * r0.w);
  r5.xyz = cb0[3].xyz + -cb0[2].xyz;
  r5.xyz = r0.www * r5.xyz + cb0[2].xyz;
  r6.xy = saturate(v6.xy);
  r6.xy = -v6.xy + r6.xy;
  r6.xy = cb0[9].xy * r6.xy + v6.xy;
  r6.xyzw = Decal_MapSampler.Sample(Decal_MapSampler_s, r6.xy).xyzw;
  r6.xyz = r6.xyz + -r5.xyz;
  r5.xyz = r6.www * r6.xyz + r5.xyz;
  r0.w = dot(-r3.xyz, r2.xyz);
  r0.w = r0.w + r0.w;
  r2.xyw = r2.xzy * -r0.www + -r3.xzy;
  r3.xyz = float3(1.000000e+000,-1.000000e+000,1.000000e+000) * r2.xyw;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyw = r3.xyz * r0.www;
  r6.xy = float2(1.000000e+000,-1.000000e+000) * r3.xy;
  r0.w = r3.z * r0.w + 1.000000000e+000;
  r0.w = r0.w + r0.w;
  r3.xy = r3.xy / r0.ww;
  r3.xy = float2(5.000000e-001,5.000000e-001) + r3.xy;
  r0.w = r3.w * -1.000000000e+000 + 1.000000000e+000;
  r0.w = r0.w + r0.w;
  r6.xy = r6.xy / r0.ww;
  r6.xy = float2(5.000000e-001,5.000000e-001) + r6.xy;
  r3.z = 1.000000000e+000 + -r3.y;
  r3.xyzw = Dual_Paraboloid_Map_FrontSampler.Sample(Dual_Paraboloid_Map_FrontSampler_s, r3.xz).xyzw;
  r6.z = 1.000000000e+000 + -r6.y;
  r6.xyzw = Dual_Paraboloid_Map_BackSampler.Sample(Dual_Paraboloid_Map_BackSampler_s, r6.xz).xyzw;
  r3.xyz = max(r3.xyz, r6.xyz);
  r3.xyz = r3.xyz / cb4[1].xyz;
  r6.xyzw = Cubic_Reflection_MapSampler.Sample(Cubic_Reflection_MapSampler_s, r2.xwy).xyzw;
  r2.xyz = r6.xyz / cb4[1].xyz;
  r3.w = r2.w;
  r2.x = cb8[1].w ? r2.x : r3.x;
  r2.y = cb8[1].w ? r2.y : r3.y;
  r2.z = cb8[1].w ? r2.z : r3.z;
  r2.w = cb8[1].w ? r2.w : r3.w;
  r4.z = saturate(r2.w);
  r3.xyz = -cb0[6].xyz + r4.xyz;
  r3.xyz = cb0[7].xyz * r3.xyz;
  r3.xyz = max(r3.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r0.w = min(r3.z, 1.000000000e+000);
  r0.w = r3.y * r0.w + r3.x;
  r0.w = cb0[8].x + r0.w;
  r2.xyz = r2.xyz * r0.www;
  r0.xyz = r5.xyz * r0.xyz + r2.xyz;
  r2.xyz = cb0[10].xxx * cb0[1].xyz;
  r0.xyz = r2.xyz * r1.xyz + r0.xyz;
  r0.w = 1.000000000e+000 + -v5.w;
  r0.xyz = r0.www * r0.xyz;
  r0.xyz = v5.www * cb4[4].xyz + r0.xyz;
  r0.w = 1.000000000e+000;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}