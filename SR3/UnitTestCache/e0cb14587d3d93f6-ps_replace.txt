
cbuffer vc0 : register(b0)
{
  float4 Depth_sampling_offsets[9] : packoffset(c0);
  float4 Near_clip_params : packoffset(c9);
  float4 Focal_params : packoffset(c10);
  float Override_blur_percent : packoffset(c11);
  float Depth_map_scale : packoffset(c12);
}
SamplerState low_coc_samplerSampler_s : register(s0);
SamplerState base_samplerSampler_s : register(s1);
SamplerState depth_samplerSampler_s : register(s2);
Texture2D<float4> low_coc_samplerSampler : register(t0);
Texture2D<float4> base_samplerSampler : register(t1);
Texture2D<float4> depth_samplerSampler : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyzw = depth_samplerSampler.Sample(depth_samplerSampler_s, v1.xy).xyzw;
  r0.x = Depth_map_scale * r0.x;
  r0.y = Near_clip_params.y + -Near_clip_params.x;
  r0.x = -r0.y * r0.x + Near_clip_params.y;
  r0.y = Near_clip_params.y * Near_clip_params.x;
  r0.x = r0.y / r0.x;
  r0.yz = Focal_params.yw + -r0.xx;
  r1.xy = Focal_params.yw + -Focal_params.xz;
  r0.yz = r0.yz / r1.xy;
  r1.x = Focal_params.x < r0.x;
  r1.y = Focal_params.z < r0.x;
  r1.z = Focal_params.w < r0.x;
  r2.x = r0.x < Focal_params.y;
  r2.y = r0.x < Focal_params.w;
  r2.z = r0.x < Focal_params.x;
  r0.x = r1.x ? r2.x : 0;
  r0.w = r1.y ? r2.y : 0;
  r1.x = (int)r1.z | (int)r2.z;
  r0.x = (int)r0.y & (int)r0.x;
  r0.y = 1.000000000e+000 + -r0.z;
  r0.x = r0.w ? r0.y : r0.x;
  r0.x = r1.x ? 1.000000000e+000 : r0.x;
  r0.x = max(r0.x, Override_blur_percent);
  r1.xyzw = low_coc_samplerSampler.Sample(low_coc_samplerSampler_s, v1.xy).xyzw;
  r2.xyzw = base_samplerSampler.Sample(base_samplerSampler_s, v1.xy).xyzw;
  r0.yzw = -r2.xyz + r1.xyz;
  o0.xyz = r0.xxx * r0.yzw + r2.xyz;
  o0.w = r2.w;
  return;
}