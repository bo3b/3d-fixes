
cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c0);
  float3 Diffuse_Color_a : packoffset(c1);
  float3 Diffuse_Color_b : packoffset(c2);
  float3 Diffuse_Color_c : packoffset(c3);
  float Normal_Map_Height : packoffset(c4);
  float Sphere_Map_Amount : packoffset(c5);
  float Pattern_Map_TilingU : packoffset(c6);
  float Pattern_Map_TilingV : packoffset(c7);
  float Normal_TilingU : packoffset(c8);
  float Normal_TilingV : packoffset(c9);
  float4 Specular_Color : packoffset(c10);
  float Specular_Alpha : packoffset(c11);
  float ClampU1 : packoffset(c12);
  float ClampV1 : packoffset(c13);
  float4 Diffuse_Color : packoffset(c14);
}
SamplerState Diffuse_MapSampler_s : register(s3);
Texture2D<float4> Diffuse_MapSampler : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float2 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0;
  uint4 bitmask;
  r0.x = -ClampV1 + 1.000000000e+000;
  r0.y = 5.120000000e+002 * r0.x;
  r0.x = r0.x * 5.120000000e+002 + 1.000000000e+000;
  r0.y = max(-r0.y, v6.y);
  r0.x = min(r0.x, r0.y);
  r0.y = ClampV1 != 0.000000;
  r0.y = r0.y ? r0.x : v6.y;
  r0.z = -ClampU1 + 1.000000000e+000;
  r0.w = 5.120000000e+002 * r0.z;
  r0.z = r0.z * 5.120000000e+002 + 1.000000000e+000;
  r0.w = max(-r0.w, v6.x);
  r0.x = min(r0.z, r0.w);
  r0.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, r0.xy).xyzw;
  o0.w = r0.w;
  o0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  return;
}