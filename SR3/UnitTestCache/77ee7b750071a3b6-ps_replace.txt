cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[18];
}


cbuffer vc0 : register(b0)
{
  float Normal_Map_Height : packoffset(c1);
  float Specular_Map_Amount : packoffset(c4);
  float4 Specular_Color : packoffset(c5);
  float Specular_Alpha : packoffset(c6);
  float Self_Illumination : packoffset(c7);
  float Spec_Map_TilingU : packoffset(c8);
  float Spec_Map_TilingV : packoffset(c9);
  float4 Diffuse_Color : packoffset(c10);
  float4 Decal_Map_Color : packoffset(c11);
  float Decal_Map_TilingU : packoffset(c12);
  float Decal_Map_TilingV : packoffset(c13);
  float Specular_Map_Amount_2 : packoffset(c14);
  float Decal_Map_Opacity : packoffset(c15);
  float4 Diffuse_Color_2 : packoffset(c16);
  float Reflection_Amount : packoffset(c17);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Normal_MapSampler_s : register(s0);
SamplerState Diffuse_MapSampler_s : register(s1);
SamplerState Specular_MapSampler_s : register(s2);
SamplerState Decal_MapSampler_s : register(s3);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
SamplerState Single_Paraboloid_MapSampler_s : register(s13);
Texture2D<float4> Normal_MapSampler : register(t0);
Texture2D<float4> Diffuse_MapSampler : register(t1);
Texture2D<float4> Specular_MapSampler : register(t2);
Texture2D<float4> Decal_MapSampler : register(t3);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);
Texture2D<float4> Single_Paraboloid_MapSampler : register(t13);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s, v6.xy).xyzw;
  r0.yzw = r0.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.x = r0.y * r0.w;
  r1.xz = -r0.zx;
  r0.x = dot(r0.zx, r1.xz);
  r0.x = saturate(1.000000000e+000 + r0.x);
  r1.y = sqrt(r0.x);
  r0.xyz = float3(-0.000000e+000,-1.000000e+000,-0.000000e+000) + r1.xyz;
  r0.xyz = cb0[1].xxx * r0.xyz + float3(0.000000e+000,1.000000e+000,0.000000e+000);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www + float3(-5.000000e-001,-1.000000e+000,-5.000000e-001);
  r0.xyz = v4.xzy * r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(-v2.xzy, r0.xyz);
  r0.w = r0.w + r0.w;
  r0.xyz = r0.xyz * -r0.www + -v2.xzy;
  r0.xyz = float3(1.000000e+000,-1.000000e+000,1.000000e+000) * r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.z = r0.z * r0.w + 1.000000000e+000;
  r0.xy = r0.xy * r0.ww;
  r0.z = r0.z + r0.z;
  r0.zw = r0.xy / r0.zz;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = sqrt(r0.x);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.x = saturate(2.000000000e+002 * r0.x);
  r1.xy = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.z = 1.000000000e+000 + -r1.y;
  r1.xyzw = Single_Paraboloid_MapSampler.Sample(Single_Paraboloid_MapSampler_s, r1.xz).xyzw;
  r0.xyz = r1.xyz * r0.xxx;
  r0.xyz = cb0[16].xyz * r0.xyz;
  r0.w = cb0[17].x;
  r1.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v6.xy).xyzw;
  r2.xyz = v5.xyz;
  r2.w = 1.000000000e+000;
  r0.xyzw = -r1.xyzw * r2.xyzw + r0.xyzw;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r0.xyzw = cb0[17].xxxx * r0.xyzw + r1.xyzw;
  r1.xyzw = Decal_MapSampler.Sample(Decal_MapSampler_s, v6.zw).xyzw;
  r2.w = cb0[15].x * r1.w;
  r2.xyz = cb0[11].xyz * r1.xyz;
  r1.xyzw = r2.xyzw + -r0.xyzw;
  r0.xyzw = r2.wwww * r1.xyzw + r0.xyzw;
  r1.xyz = cb0[7].xxx * r0.xyz;
  r2.xy = v3.xy / v3.ww;
  r2.xy = float2(1.000000e+000,1.000000e+000) + r2.xy;
  r1.w = cb4[9].z * r2.x;
  r2.x = -r2.y * 5.000000000e-001 + 1.000000000e+000;
  r2.y = cb4[9].w * r2.x;
  r2.x = 5.000000000e-001 * r1.w;
  r2.xy = float2(-5.000000e-001,-5.000000e-001) + r2.xy;
  r3.x = floor(r2.x);
  r3.y = floor(r2.y);
  r2.xy = -r3.xy + r2.xy;
  r3.xy = float2(5.000000e-001,5.000000e-001) + r3.xy;
  r4.xy = r3.xy * cb4[9].xy + cb4[9].xy;
  r4.zw = cb4[9].xy * r3.xy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r4.xy).xzwy;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r4.zw).xyzw;
  r3.x = r5.y;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r4.xw).xyzw;
  r6.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r4.zy).xyzw;
  r3.z = r6.y;
  r3.y = r5.y;
  r5.xyzw = -v4.wwww + r3.xyzw;
  r3.x = 5.000000e-001 >= r3.x;
  r3.y = 5.000000e-001 >= r3.y;
  r3.z = 5.000000e-001 >= r3.z;
  r3.w = 5.000000e-001 >= r3.w;
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r5.x = 1.220722e-005 >= abs(r5.x);
  r5.y = 1.220722e-005 >= abs(r5.y);
  r5.z = 1.220722e-005 >= abs(r5.z);
  r5.w = 1.220722e-005 >= abs(r5.w);
  r5.x = r5.x ? 1 : 0;
  r5.y = r5.y ? 1 : 0;
  r5.z = r5.z ? 1 : 0;
  r5.w = r5.w ? 1 : 0;
  r3.xyzw = r5.xyzw + r3.xyzw;
  r4.xy = r3.xy + r3.zw;
  r4.x = r4.x >= r4.y;
  r4.y = r4.y >= r4.x;
  r1.w = r4.y ? 1.000000 : 0;
  r2.z = r4.x ? -1.000000000e+000 : -0.000000000e+000;
  r1.w = r2.z + r1.w;
  r2.z = r1.w == 0.000000;
  r4.x = saturate(r2.x + r1.w);
  r3.zw = max(r3.yw, r3.xz);
  r1.w = r3.y + -r3.x;
  r3.x = r3.w + -r3.z;
  r3.y = r3.x == 0.000000;
  r4.y = saturate(r3.x + r2.y);
  r2.x = saturate(r2.x + r1.w);
  r1.w = abs(r1.w) >= 1.000000000e+000;
  r2.z = r3.y ? r2.z : 0;
  r1.w = r1.w ? r2.z : 0;
  r2.y = 0.000000000e+000;
  r2.x = r1.w ? r2.x : r4.x;
  r2.y = r1.w ? r2.y : r4.y;
  r3.xy = cb4[9].xy;
  r2.xy = r2.xy * r3.xy + r4.zw;
  r3.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r2.xy).xyzw;
  r3.xyzw = max(r3.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.xyz = r0.xyz * r3.xyz + r1.xyz;
  r1.w = dot(r3.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.w = max(r1.w, 1.000000047e-003);
  r1.w = r3.w / r1.w;
  r2.xyz = r3.xyz * r1.www;
  r3.xyzw = Specular_MapSampler.Sample(Specular_MapSampler_s, v1.xy).xyzw;
  r3.xyz = cb0[5].xyz * r3.xyz;
  r3.xyz = cb0[4].xxx * r3.xyz;
  r4.xyz = r3.xyz * cb0[14].xxx + -r3.xyz;
  r3.xyz = r2.www * r4.xyz + r3.xyz;
  r2.xyz = r3.xyz * r2.xyz;
  r1.xyz = r2.xyz * cb0[6].xxx + r1.xyz;
  r1.w = 1.000000000e+000 + -v5.w;
  r1.xyz = r1.www * r1.xyz;
  r0.xyz = v5.www * cb4[4].xyz + r1.xyz;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}