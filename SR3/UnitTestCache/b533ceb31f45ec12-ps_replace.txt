cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}


cbuffer vc0 : register(b0)
{
  float Specular_Map_Amount : packoffset(c2);
  float4 Specular_Color : packoffset(c3);
  float Specular_Alpha : packoffset(c4);
  float Self_Illumination : packoffset(c5);
  float ClampU : packoffset(c6);
  float ClampV : packoffset(c7);
  float Room_Depth : packoffset(c8);
  float Decal_Map_Opacity : packoffset(c9);
  float Reflection_Map_Opacity : packoffset(c10);
  float4 Diffuse_Color : packoffset(c11);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 V_ambient_render : packoffset(c2);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Diffuse_MapSampler_s : register(s1);
SamplerState Specular_MapSampler_s : register(s2);
SamplerState Decal_MapSampler_s : register(s3);
SamplerState Reflection_MapSampler_s : register(s4);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Diffuse_MapSampler : register(t1);
Texture2D<float4> Specular_MapSampler : register(t2);
Texture2D<float4> Decal_MapSampler : register(t3);
TextureCube<float4> Reflection_MapSampler : register(t4);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v5.xy / v5.ww;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r0.z = floor(r0.x);
  r0.w = floor(r0.y);
  r0.xy = r0.xy + -r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.xy = r0.zw * cb4[9].xy + cb4[9].xy;
  r1.zw = cb4[9].xy * r0.zw;
  r2.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zw).xyzw;
  r2.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zy).xyzw;
  r2.z = r4.y;
  r2.y = r3.y;
  r3.xyzw = -v6.wwww + r2.xyzw;
  r2.x = 5.000000e-001 >= r2.x;
  r2.y = 5.000000e-001 >= r2.y;
  r2.z = 5.000000e-001 >= r2.z;
  r2.w = 5.000000e-001 >= r2.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.zw = r2.xy + r2.zw;
  r0.z = r0.z >= r0.w;
  r0.w = r0.w >= r0.z;
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.z = r0.w + r0.z;
  r0.w = r0.z == 0.000000;
  r1.x = saturate(r0.x + r0.z);
  r2.zw = max(r2.yw, r2.xz);
  r0.z = r2.y + -r2.x;
  r2.x = r2.w + -r2.z;
  r2.y = r2.x == 0.000000;
  r1.y = saturate(r2.x + r0.y);
  r0.x = saturate(r0.x + r0.z);
  r0.z = abs(r0.z) >= 1.000000000e+000;
  r0.w = r0.w ? r2.y : 0;
  r0.z = r0.z ? r0.w : 0;
  r0.y = 0.000000000e+000;
  r0.x = r0.z ? r0.x : r1.x;
  r0.y = r0.z ? r0.y : r1.y;
  r0.zw = cb4[9].xy;
  r0.xy = r0.xy * r0.zw + r1.zw;
  r0.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r0.xyzw = max(r0.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = max(r1.x, 1.000000047e-003);
  r0.w = r0.w / r1.x;
  r1.xyz = r0.xyz * r0.www;
  r2.xyzw = Specular_MapSampler.Sample(Specular_MapSampler_s, v8.zw).xyzw;
  r2.xyz = cb0[3].xyz * r2.xyz;
  r2.xyz = cb0[2].xxx * r2.xyz;
  r1.xyz = r2.xyz * r1.xyz;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v3.xyz * r0.www;
  r0.w = dot(v7.xyz, v7.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v7.xyz * r0.www;
  r0.w = dot(-r2.xyz, r3.xyz);
  r0.w = r0.w + r0.w;
  r4.xyz = r3.xyz * -r0.www + -r2.xyz;
  r0.w = dot(r2.xyz, r3.xyz);
  r0.w = saturate(1.000000000e+000 + -r0.w);
  r0.w = log2(r0.w);
  r0.w = 2.799999952e+000 * r0.w;
  r0.w = exp2(r0.w);
  r2.xyzw = Reflection_MapSampler.Sample(Reflection_MapSampler_s, r4.xyz).xyzw;
  r1.w = r0.w * r0.w;
  r1.w = rsqrt(r1.w);
  r0.w = r1.w * r0.w;
  r0.w = cb0[10].x * r0.w;
  r2.xyz = r2.xyz * r0.www;
  r2.xyz = r2.xyz * r0.xyz;
  r0.w = dot(v4.xz, v4.xz);
  r0.w = rsqrt(r0.w);
  r0.w = v4.x * r0.w;
  r0.w = cb0[8].x * r0.w;
  r0.w = max(r0.w, -cb0[6].x);
  r0.w = min(r0.w, cb0[6].x);
  r3.x = v8.x + r0.w;
  r0.w = dot(v4.yz, v4.yz);
  r0.w = rsqrt(r0.w);
  r0.w = v4.y * r0.w;
  r0.w = cb0[8].x * r0.w;
  r0.w = max(r0.w, -cb0[7].x);
  r0.w = min(r0.w, cb0[7].x);
  r3.y = v8.y + r0.w;
  r3.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, r3.xy).xyzw;
  r4.w = 1.000000000e+000;
  r4.xyz = v6.xyz;
  r5.xyzw = r4.xyzw * r3.xyzw;
  r6.xyzw = Decal_MapSampler.Sample(Decal_MapSampler_s, v8.zw).xyzw;
  r3.xyz = -r3.xyz * r4.xyz + r6.xyz;
  r0.w = cb0[9].x * r6.w;
  r3.xyz = r0.www * r3.xyz + r5.xyz;
  r2.xyz = r3.xyz * cb0[5].xxx + r2.xyz;
  r0.xyz = r3.xyz * r0.xyz + r2.xyz;
  r0.xyz = r1.xyz * cb0[4].xxx + r0.xyz;
  r0.w = 1.000000000e+000 + -v7.w;
  r0.xyz = r0.www * r0.xyz;
  r5.xyz = v7.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r5.xyzw;
  return;
}