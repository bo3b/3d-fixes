cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float Invert_Blend_Map : packoffset(c0);
  float Self_Illumination : packoffset(c5);
  float4 Diffuse_Color : packoffset(c6);
  float4 Diffuse_Color_2 : packoffset(c7);
  float Specular_Alpha : packoffset(c8);
  float Specular_Alpha_2 : packoffset(c9);
  float4 Specular_Color : packoffset(c10);
  float4 Specular_Color_2 : packoffset(c11);
  float Specular_Map_Amount : packoffset(c12);
  float Specular_Map_Amount_2 : packoffset(c13);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Blend_MapSampler_s : register(s0);
SamplerState Diffuse_MapSampler_s : register(s3);
SamplerState Diffuse_Map_2Sampler_s : register(s4);
SamplerState Specular_MapSampler_s : register(s5);
SamplerState Specular_Map_2Sampler_s : register(s6);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Blend_MapSampler : register(t0);
Texture2D<float4> Diffuse_MapSampler : register(t3);
Texture2D<float4> Diffuse_Map_2Sampler : register(t4);
Texture2D<float4> Specular_MapSampler : register(t5);
Texture2D<float4> Specular_Map_2Sampler : register(t6);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r0.z = floor(r0.x);
  r0.w = floor(r0.y);
  r0.xy = r0.xy + -r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.xy = r0.zw * cb4[9].xy + cb4[9].xy;
  r1.zw = cb4[9].xy * r0.zw;
  r2.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zw).xyzw;
  r2.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zy).xyzw;
  r2.z = r4.y;
  r2.y = r3.y;
  r3.xyzw = -v3.zzzz + r2.xyzw;
  r2.x = 5.000000e-001 >= r2.x;
  r2.y = 5.000000e-001 >= r2.y;
  r2.z = 5.000000e-001 >= r2.z;
  r2.w = 5.000000e-001 >= r2.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.zw = r2.xy + r2.zw;
  r0.z = r0.z >= r0.w;
  r0.w = r0.w >= r0.z;
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.z = r0.w + r0.z;
  r0.w = r0.z == 0.000000;
  r1.x = saturate(r0.x + r0.z);
  r2.zw = max(r2.yw, r2.xz);
  r0.z = r2.y + -r2.x;
  r2.x = r2.w + -r2.z;
  r2.y = r2.x == 0.000000;
  r1.y = saturate(r2.x + r0.y);
  r0.x = saturate(r0.x + r0.z);
  r0.z = abs(r0.z) >= 1.000000000e+000;
  r0.w = r0.w ? r2.y : 0;
  r0.z = r0.z ? r0.w : 0;
  r0.y = 0.000000000e+000;
  r0.x = r0.z ? r0.x : r1.x;
  r0.y = r0.z ? r0.y : r1.y;
  r0.zw = cb4[9].xy;
  r0.xy = r0.xy * r0.zw + r1.zw;
  r0.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r0.xyzw = max(r0.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = max(r1.x, 1.000000047e-003);
  r0.w = r0.w / r1.x;
  r1.xyz = r0.xyz * r0.www;
  r2.xyzw = Specular_Map_2Sampler.Sample(Specular_Map_2Sampler_s, v2.zw).xyzw;
  r2.xyz = Specular_Color_2.xyz * r2.xyz;
  r3.xyzw = Specular_MapSampler.Sample(Specular_MapSampler_s, v2.xy).xyzw;
  r3.xyz = Specular_Color.xyz * r3.xyz;
  r3.xyz = Specular_Map_Amount * r3.xyz;
  r2.xyz = r2.xyz * Specular_Map_Amount_2 + -r3.xyz;
  r0.w = Invert_Blend_Map >= 1.000000000e+000;
  r0.w = r0.w ? 1.000000 : 0;
  r1.w = 0.000000000e+000 >= Invert_Blend_Map;
  r1.w = r1.w ? 1.000000 : 0;
  r4.xyzw = Blend_MapSampler.Sample(Blend_MapSampler_s, v3.xy).xyzw;
  r1.w = r4.x * r1.w;
  r2.w = 1.000000000e+000 + -r4.x;
  r0.w = r2.w * r0.w + r1.w;
  r2.xyz = r0.www * r2.xyz + r3.xyz;
  r1.xyz = r2.xyz * r1.xyz;
  r1.w = Specular_Alpha_2 + -Specular_Alpha;
  r1.w = r0.w * r1.w + Specular_Alpha;
  r1.xyz = r1.xyz * r1.www;
  r2.xyzw = Diffuse_Map_2Sampler.Sample(Diffuse_Map_2Sampler_s, v2.zw).xyzw;
  r3.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v2.xy).xyzw;
  r3.xyzw = Diffuse_Color.xyzw * r3.xyzw;
  r2.xyzw = r2.xyzw * Diffuse_Color_2.xyzw + -r3.xyzw;
  r2.xyzw = r0.wwww * r2.xyzw + r3.xyzw;
  r0.xyz = saturate(r2.xyz * r0.xyz + r1.xyz);
  r0.xyz = Self_Illumination + r0.xyz;
  r0.w = 1.000000000e+000 + -v3.w;
  r0.xyz = r0.www * r0.xyz;
  r2.xyz = v3.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r2.xyzw;
  return;
}