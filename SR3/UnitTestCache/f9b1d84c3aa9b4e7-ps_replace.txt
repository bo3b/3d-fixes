cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float blur_falloff : packoffset(c0);
  float blur_sharpness : packoffset(c1);
}

cbuffer vc4 : register(b4)
{
  float4 IR_Pixel_Steps : packoffset(c9);
}
SamplerState ssao_samplerSampler_s : register(s0);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
Texture2D<float4> ssao_samplerSampler : register(t0);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, v1.xy).xyzw;
  r0.x = 3.276800000e+004 * r0.x;
  r0.yz = cb4[9].xy * float2(1.000000e+000,0.000000e+000);
  r1.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r0.w = 0.000000000e+000;
  r2.x = -3.000000000e+000;
  while (true) {
  r2.y = 3.000000000e+000 < r2.x;
  if (r2.y != 0) break;
  r2.yz = r2.xx * r0.yz + v1.xy;
  r3.xyzw = ssao_samplerSampler.Sample(ssao_samplerSampler_s, r2.yz).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.yz).xyzw;
  r2.y = r4.x * 3.276800000e+004 + -r0.x;
  r2.z = -r2.x * r2.x;
  r2.y = r2.y * r2.y;
  r2.y = blur_sharpness * r2.y;
  r2.y = r2.z * blur_falloff + -r2.y;
  r2.y = 1.442695022e+000 * r2.y;
  r2.y = exp2(r2.y);
  r0.w = r2.y + r0.w;
  r1.xyzw = r2.yyyy * r3.xyzw + r1.xyzw;
  r2.x = 1.000000000e+000 + r2.x;
  }
  o0.xyzw = r1.xyzw / r0.wwww;
  return;
}