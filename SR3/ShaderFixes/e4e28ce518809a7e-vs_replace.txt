
cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c0);
  float Reflection_Map_Opacity : packoffset(c1);
  float4 Diffuse_Color : packoffset(c2);
  float4 Diffuse_Color_2 : packoffset(c3);
}

cbuffer vc2 : register(b2)
{
  float4x4 projTM : packoffset(c0);
  float4 eyePos : packoffset(c4);
  float4 Fog_dist : packoffset(c10);
  float3 Render_offset : packoffset(c19);
  float3 Position_scale : packoffset(c20);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  int2 v1 : TEXCOORD0,
  float4 v2 : NORMAL0,
  float4 v3 : POSITION2,
  float4 v4 : POSITION3,
  float4 v5 : POSITION4,
  float4 v6 : COLOR1,
  float4 v7 : COLOR2,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.w = 1.000000000e+000;
  r1.xyz = v0.xyz;
  r1.w = 1.000000000e+000;
  r0.x = dot(v3.xyzw, r1.xyzw);
  r0.y = dot(v4.xyzw, r1.xyzw);
  r0.z = dot(v5.xyzw, r1.xyzw);
  r1.x = dot(r0.xyzw, projTM._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, projTM._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, projTM._m02_m12_m22_m32);
  r1.w = dot(r0.xyzw, projTM._m03_m13_m23_m33);
  o0.xyzw = r1.xyzw;
  // o3.xyzw = r1.xyzw;

// bo3b- Position is right, texture is misaligned.
float4 tex = r1;
float4 stereo = StereoParams.Load(0);
tex.x += stereo.x * (tex.w - stereo.y);
o3.xyzw = tex.xyzw;

  r1.xy = v1.xy;
  o1.xy = float2(9.765625e-004,9.765625e-004) * r1.xy;
  o2.xyz = r0.xyz;
  r1.xyzw = v2.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = dot(v3.xyz, r1.xyz);
  r2.y = dot(v4.xyz, r1.xyz);
  r2.z = dot(v5.xyz, r1.xyz);
  r0.w = r1.w * 5.000000000e-001 + 5.000000000e-001;
  r0.w = 2.550000000e+002 * r0.w;
  r0.w = v7.x * 3.264000000e+004 + r0.w;
  o5.w = 1.525902189e-005 * r0.w;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r2.xyz * r0.www;
  r0.w = 5.000000000e-001 >= abs(r1.x);
  o6.xyz = r1.xyz;
  o4.w = r0.w ? 0x3f800000 : 0;
  o4.xyz = eyePos.xyz;
  r1.xyz = eyePos.xyz + -r0.xyz;
  o5.xyz = r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r0.w = 3.000000000e+001 + -r0.w;
  o6.w = saturate(r0.w * 5.000000075e-002 + 1.000000000e+000);
  o7.xyz = Diffuse_Color.xyz * v6.xyz;
  o7.w = Fog_dist.z;
  r1.xyz = -eyePos.xyz + r0.xyz;
  o8.xyz = Render_offset.xyz + r0.xyz;
  r0.x = Fog_dist.x * r1.y;
  r0.y = -1.442695022e+000 * r0.x;
  r0.y = exp2(r0.y);
  r0.y = 1.000000000e+000 + -r0.y;
  r0.x = r0.y / r0.x;
  r0.y = 9.999999776e-003 < abs(r1.y);
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = sqrt(r0.z);
  r0.z = Fog_dist.y * r0.z;
  r0.x = r0.y ? r0.x : 1.000000000e+000;
  r0.x = r0.x * r0.z + -Fog_dist.w;
  r0.x = exp2(-r0.x);
  r0.x = min(r0.x, 1.000000000e+000);
  o8.w = 1.000000000e+000 + -r0.x;
  return;
}