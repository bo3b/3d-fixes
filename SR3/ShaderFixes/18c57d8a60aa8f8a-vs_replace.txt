
cbuffer vc0 : register(b0)
{
  float4 Diffuse_Color : packoffset(c0);
  float4 Lighting : packoffset(c1);
  float4 Specular_Color : packoffset(c2);
  float4 Ambient_Color : packoffset(c3);
}

cbuffer vc2 : register(b2)
{
  float4x4 projTM : packoffset(c0);
  float4 eyePos : packoffset(c4);
  float4 Object_instance_params_2 : packoffset(c5);
  float4 Fog_dist : packoffset(c10);
  row_major float3x4 Eye_orient : packoffset(c11);
  float4 Object_instance_params : packoffset(c15);
  row_major float3x4 objTM : packoffset(c16);
  float3 Tree_wind_dir : packoffset(c35);
  float4 Tree_wind_times : packoffset(c36);
  float4 Tree_wind_distances : packoffset(c37);
  float3 Tree_wind_leaves : packoffset(c38);
  float3 Tree_wind_gust : packoffset(c40);
  float4 Tree_wind_gust_hints : packoffset(c41);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : POSITION0,
  int4 v1 : TEXCOORD0,
  float4 v2 : NORMAL0,
  float4 v3 : TANGENT0,
  float4 v4 : POSITION1,
  float4 v5 : COLOR1,
  float4 v6 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.x = v4.x + -v4.y;
  r0.x = Object_instance_params.x * r0.x + v4.y;
  r0.xy = v4.zw * r0.xx;
  r0.yzw = Eye_orient._m00_m01_m02 * r0.yyy;
  r1.xyz = Eye_orient._m10_m11_m12 * r0.xxx;
  r0.x = dot(objTM._m00_m01_m02, objTM._m00_m01_m02);
  r0.x = sqrt(r0.x);
  r2.xyz = v0.xyz;
  r2.w = 1.000000000e+000;
  r3.x = dot(objTM._m00_m01_m02_m03, r2.xyzw);
  r3.y = dot(objTM._m10_m11_m12_m13, r2.xyzw);
  r3.z = dot(objTM._m20_m21_m22_m23, r2.xyzw);
  r0.yzw = r0.yzw * r0.xxx + r3.xyz;
  r0.yzw = r1.xyz * r0.xxx + r0.yzw;
  r1.xyz = v6.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.y = log2(r1.y);
  r1.xyz = float3(1.000000e+001,2.200000e+000,1.000000e-002) * r1.xyz;
  o3.y = exp2(r1.y);
  r0.x = r1.z * r0.x;
  r0.xyz = r0.xxx * Eye_orient._m20_m21_m22 + r0.yzw;
  r0.w = dot(r0.xz, r0.xz);
  r0.w = rsqrt(r0.w);
  r1.yz = r0.xz * r0.ww;
  r0.w = saturate(dot(-r1.yz, Tree_wind_dir.xz));
  r0.w = r0.w * 2.000000000e+000 + 5.000000000e-001;
  r0.w = Tree_wind_leaves.z * r0.w;
  r0.w = r0.w * Tree_wind_leaves.x + Tree_wind_leaves.x;
  r2.xyzw = v2.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.x = dot(objTM._m00_m01_m02, r2.xyz);
  r3.y = dot(objTM._m10_m11_m12, r2.xyz);
  r3.z = dot(objTM._m20_m21_m22, r2.xyz);
  r1.y = r2.w * 5.000000000e-001 + 5.000000000e-001;
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  r2.xyz = r3.xyz * r1.zzz;
  r1.z = r2.y * 1.000000000e+003 + Tree_wind_times.w;
  r1.z = sin(r1.z);
  r0.w = r1.z * r0.w;
  r2.xyz = r2.xyz * r0.www;
  r0.xyz = r2.xyz * r1.xxx + r0.xyz;
  r0.w = Tree_wind_times.x + objTM._m03;
  r1.xz = float2(3.000000e-001,9.500000e-001) * r0.ww;
  r0.w = sin(r1.x);
  r1.x = cos(r1.z);
  r0.w = Tree_wind_distances.x * r0.w;
  r0.w = r0.w * r1.x + Tree_wind_gust.y;
  r1.x = Tree_wind_distances.z * v0.y;
  r1.x = max(r1.x, 0.000000000e+000);
  r1.x = log2(r1.x);
  r1.x = Tree_wind_distances.w * r1.x;
  r1.x = exp2(r1.x);
  r0.w = r1.x * r0.w;
  r2.xz = Tree_wind_dir.xz * r0.ww + r0.xz;
  r2.y = -r0.w * Tree_wind_gust_hints.x + r0.y;
  r0.x = -Tree_wind_gust.x * Tree_wind_gust_hints.z + 1.000000000e+000;
  r3.xyzw = v5.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.yzw = v0.www * r3.xyz;
  r1.xzw = r0.xxx * r0.yzw;
  r0.x = dot(r0.yzw, r0.yzw);
  r0.x = sqrt(r0.x);
  r0.y = Tree_wind_times.y + objTM._m13;
  r0.y = r3.w * 3.141592503e+000 + r0.y;
  r0.yz = float2(3.000000e-001,9.500000e-001) * r0.yy;
  r0.y = sin(r0.y);
  r0.z = cos(r0.z);
  r0.w = r0.y * r0.z;
  r0.y = -r0.y * r0.z + 1.000000000e+000;
  r0.y = Tree_wind_gust_hints.z * r0.y + r0.w;
  r1.xzw = r1.xzw * r0.www;
  r1.xzw = r1.xzw * Tree_wind_distances.yyy + r2.xyz;
  r2.z = Tree_wind_gust_hints.y + Tree_wind_dir.z;
  r2.xy = Tree_wind_dir.xy;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r0.xzw = r2.xyz * r0.xxx;
  r2.x = Tree_wind_gust_hints.z * Tree_wind_gust.x;
  r0.xzw = r2.xxx * r0.xzw;
  r0.xyz = r0.xzw * r0.yyy;
  r0.xyz = Tree_wind_distances.yyy * r0.xyz;
  r0.xyz = r0.xyz * Tree_wind_gust.zzz + r1.xzw;
  r0.w = 1.000000000e+000;
  r2.x = dot(r0.xyzw, projTM._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, projTM._m01_m11_m21_m31);
  r2.z = dot(r0.xyzw, projTM._m02_m12_m22_m32);
  r2.w = dot(r0.xyzw, projTM._m03_m13_m23_m33);
  r0.xyz = -eyePos.xyz + r0.xyz;
  o0.xyzw = r2.xyzw;
  o1.xyzw = r2.xyzw;
  r1.xz = v1.xy;
  o2.xy = float2(9.765625e-004,9.765625e-004) * r1.xz;
  o2.z = Object_instance_params.z * Lighting.y;
  o2.w = -Object_instance_params.z + 1.000000000e+000;
  r0.w = Fog_dist.x * r0.y;
  r1.x = -1.442695022e+000 * r0.w;
  r1.x = exp2(r1.x);
  r1.x = 1.000000000e+000 + -r1.x;
  r0.w = r1.x / r0.w;
  r1.x = 9.999999776e-003 < abs(r0.y);
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = Fog_dist.y * r0.x;
  r0.y = r1.x ? r0.w : 1.000000000e+000;
  r0.x = r0.y * r0.x + -Fog_dist.w;
  r0.x = exp2(-r0.x);
  r0.x = min(r0.x, 1.000000000e+000);
  o3.z = 1.000000000e+000 + -r0.x;
  r0.x = Object_instance_params_2.x * 3.264000000e+004;
  r0.x = r1.y * 2.550000000e+002 + r0.x;
  r0.x = 3.276800000e+004 + r0.x;
  o3.x = 1.525902189e-005 * r0.x;

// Auto-fixed shader
float4 stereo = StereoParams.Load(0);
o1.x += stereo.x * (o1.w - stereo.y);
  return;
}