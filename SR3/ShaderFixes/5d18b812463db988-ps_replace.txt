// Motorcycle headlight

cbuffer cb4 : register(b4)
{
  float4 cb4[11];
}


cbuffer vc0 : register(b0)
{
  float4 IR_Light_Pos : packoffset(c0);
  float4 IR_Light_Dir : packoffset(c1);
  float4 Camera_pos : packoffset(c2);
  float4 Camera_rvec : packoffset(c3);
  float4 Camera_uvec : packoffset(c4);
  float4 Camera_fvec : packoffset(c5);
  float4 Link_categories : packoffset(c6);
  float4x4 Projection_texture_xform : packoffset(c7);
  float2 Scroll : packoffset(c11);
  float4 IR_light_back_color : packoffset(c12);
  float4 IR_Light_Color : packoffset(c13);
  float4 IR_Light_Info : packoffset(c14);
  float4 IR_Spot_Info : packoffset(c15);
}

cbuffer vc4 : register(b4)
{
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Projection_textureSampler_s : register(s0);
SamplerState IR_GBuffer_LightingSampler_s : register(s12);
SamplerState IR_GBuffer_NormalsSampler_s : register(s13);
SamplerState IR_GBuffer_DepthSampler_s : register(s14);
Texture2D<float4> Projection_textureSampler : register(t0);
Texture2D<float4> IR_GBuffer_LightingSampler : register(t12);
Texture2D<float4> IR_GBuffer_NormalsSampler : register(t13);
Texture2D<float4> IR_GBuffer_DepthSampler : register(t14);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
float  v3 : TEXCOORD2,							// input from VS as P11 variable.
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.xyzw = IR_GBuffer_DepthSampler.Sample(IR_GBuffer_DepthSampler_s, v1.xy).xyzw;
  r0.x = cb4[10].z * r0.x + cb4[10].w;
  r0.x = 1.000000e+000 / r0.x;
  
// bo3b: apply correction to the calculated inverse matrix, using Mike's technique.
float4 stereo = StereoParams.Load(0);
float4 shift;

shift.xyz = v2.xyz * r0.xxx;					//	<-- Set r21 to be the NEGATIVE of what is on the line with IR_Light_Pos
shift.x -=  stereo.x * (r0.x - stereo.y) * v3;	//0.62;	<-- This is a "-=" expression becasue we have "IR_Light_Pos"
// r0.y = shift.x;
// r0.z = shift.y;
// r0.w = shift.z;

r0.yzw = -shift.xyz + IR_Light_Pos.xyz;			// -v2.xyz * r0.xxx + IR_Light_Pos.xyz;
r1.xyz = shift.xyz; 							// v2.xyz * r0.xxx;

  r0.x = dot(r0.yzw, r0.yzw);
  r0.x = sqrt(r0.x);
  r1.w = -IR_Light_Info.y + r0.x;
  r0.xyz = r0.yzw / r0.xxx;
  r0.w = IR_Light_Info.z + -IR_Light_Info.y;
  r0.w = saturate(r1.w / r0.w);
  r0.w = 1.000000000e+000 + -r0.w;
  r1.w = dot(-r0.xyz, IR_Light_Dir.xyz);
  r1.w = -IR_Spot_Info.y + r1.w;
  r1.w = saturate(IR_Spot_Info.z * r1.w);
  r0.w = r1.w * r0.w;
  r0.w = log2(r0.w);
  r0.w = IR_Light_Info.x * r0.w;
  r0.w = exp2(r0.w);
  r2.xyzw = IR_GBuffer_NormalsSampler.Sample(IR_GBuffer_NormalsSampler_s, v1.xy).xyzw;
  r2.xy = r2.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r1.w = dot(r2.xy, r2.xy);
  r1.w = min(r1.w, 1.000000000e+000);
  r1.w = 1.000000000e+000 + -r1.w;
  r2.z = sqrt(r1.w);
  r1.w = r2.z + r2.z;
  r2.xyz = r1.www * r2.xyz;
  r2.w = -r2.z;
  r2.xyz = float3(0.000000e+000,0.000000e+000,1.000000e+000) + r2.xyw;
  r1.w = dot(r2.xyz, r0.xyz);
  r2.w = r1.w + r1.w;
  r0.xyz = r2.www * r2.xyz + -r0.xyz;
  r2.x = dot(r1.xyz, r1.xyz);
  r2.x = rsqrt(r2.x);
  r2.xyz = r2.xxx * r1.xyz;
  r0.x = saturate(dot(r0.xyz, -r2.xyz));
  r0.x = log2(r0.x);
  r2.xyzw = IR_GBuffer_LightingSampler.Sample(IR_GBuffer_LightingSampler_s, v1.xy).xyzw;
  r0.y = 5.120000000e+002 * r2.x;
  r0.y = 9.999999747e-005 + abs(r0.y);
  r0.x = r0.y * r0.x;
  r0.x = exp2(r0.x);
  r0.y = dot(IR_Light_Color.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.x = r0.x * r0.y;
  r0.y = saturate(r1.w);
  r2.xw = r1.ww * float2(-5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r2.xw = r2.xw * r2.xw;
  r2.xw = min(r2.xw, float2(1.000000e+000,1.000000e+000));
  r0.z = r2.z * 2.000000000e+000 + -1.000000000e+000;
  r2.yz = r2.zy + r2.zy;
  r0.z = saturate(1.000000000e+000 + -r0.z);
  r2.y = saturate(r2.y);
  r0.z = -r2.y + r0.z;
  r0.y = r0.y * r0.z + r2.y;
  r3.w = r0.x * r0.y;
  r0.xyz = IR_Light_Color.xyz * r2.www;
  r3.xyz = IR_light_back_color.xyz * r2.xxx + r0.xyz;
  r0.xyzw = r3.xyzw * r0.wwww;
  r1.w = r2.z >= -r2.z;
  r2.x = frac(abs(r2.z));
  r1.w = r1.w ? r2.x : -r2.x;
  r2.x = r1.w >= -1.666667e-001;
  r2.y = r1.w >= 1.666667e-001;
  r2.z = r1.w >= 5.000000e-001;
  r2.w = r1.w >= 8.333333e-001;
  r3.x = 1.666667e-001 >= r1.w;
  r3.y = 5.000000e-001 >= r1.w;
  r3.z = 8.333333e-001 >= r1.w;
  r3.w = 1.166667e+000 >= r1.w;
  r3.x = r3.x ? 1 : 0;
  r3.y = r3.y ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r3.w = r3.w ? 1 : 0;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r2.xyzw = min(r3.xyzw, r2.xyzw);
  r1.w = saturate(dot(Link_categories.xyzw, r2.xyzw));
  r0.xyzw = r1.wwww * r0.xyzw;
  r2.xyz = Camera_uvec.xyz * r1.yyy;
  r1.xyw = r1.xxx * Camera_rvec.xyz + r2.xyz;
  r1.xyz = r1.zzz * Camera_fvec.xyz + r1.xyw;
  r1.xyz = Camera_pos.xyz + r1.xyz;
  r1.w = 1.000000000e+000;
  r2.x = dot(r1.xyzw, Projection_texture_xform._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, Projection_texture_xform._m01_m11_m21_m31);
  r1.x = dot(r1.xyzw, Projection_texture_xform._m03_m13_m23_m33);
  r1.xy = r2.xy / r1.xx;
  r1.xy = Scroll.xy + r1.xy;
  r1.xyzw = Projection_textureSampler.Sample(Projection_textureSampler_s, r1.xy).xyzw;
  r2.xyzw = r0.xyzw * r1.xyzx + -r0.xyzw;
  o0.xyzw = r1.wwww * r2.xyzw + r0.xyzw;
  return;
}