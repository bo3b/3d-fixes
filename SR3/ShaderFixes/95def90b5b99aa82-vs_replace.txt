
cbuffer vc0 : register(b0)
{
  float3 Bbox_size : packoffset(c0);
  float4 Extrusion_info : packoffset(c1);
  float4 Near_clip_params : packoffset(c2);
  float4 Camera_pos : packoffset(c3);
  float4 Camera_rvec : packoffset(c4);
  float4 Camera_uvec : packoffset(c5);
  float4 Camera_fvec : packoffset(c6);
  float4x4 Shadow_map_projTM : packoffset(c7);
  float4 Shadow_fade_params : packoffset(c11);
  float2 Shadow_map_dimensions : packoffset(c12);
  float4 Shadow_percent_params : packoffset(c13);
}

cbuffer vc2 : register(b2)
{
  float4x4 projTM : packoffset(c0);
  row_major float3x4 objTM : packoffset(c16);
  float3 Position_scale : packoffset(c20);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.x = Extrusion_info.w + -1.000000000e+000;
  r0.x = v1.x * r0.x + 1.000000000e+000;
  r0.yzw = Bbox_size.xyz * v0.xyz;
  r1.xyz = Extrusion_info.xyz * v1.xxx;
  r0.xyz = r0.yzw * r0.xxx + r1.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(objTM._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(objTM._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(objTM._m20_m21_m22_m23, r0.xyzw);
  r1.w = 1.000000000e+000;
  r0.x = dot(r1.xyzw, projTM._m00_m10_m20_m30);
  r0.y = dot(r1.xyzw, projTM._m01_m11_m21_m31);
  r0.z = dot(r1.xyzw, projTM._m02_m12_m22_m32);
  r0.w = dot(r1.xyzw, projTM._m03_m13_m23_m33);
  o0.xyzw = r0.xyzw;
  o1.xyzw = r0.xyzw;

// Auto-fixed shader
float4 stereo = StereoParams.Load(0);
o1.x += stereo.x * (o1.w - stereo.y);
  return;
}