//Lighting
cbuffer cb4 : register(b4)
{
  float4 cb4[11];
}


cbuffer vc0 : register(b0)
{
  float4 IR_Light_Pos : packoffset(c0);
  float4 IR_Light_Dir : packoffset(c1);
  float4 Link_categories : packoffset(c2);
  float4 IR_light_back_color : packoffset(c3);
  float4 IR_Light_Color : packoffset(c4);
  float4 IR_Light_Info : packoffset(c5);
  float4 IR_Spot_Info : packoffset(c6);
}

cbuffer vc4 : register(b4)
{
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Light_rampsSampler_s : register(s0);
SamplerState IR_GBuffer_LightingSampler_s : register(s12);
SamplerState IR_GBuffer_NormalsSampler_s : register(s13);
SamplerState IR_GBuffer_DepthSampler_s : register(s14);
Texture2D<float4> Light_rampsSampler : register(t0);
Texture2D<float4> IR_GBuffer_LightingSampler : register(t12);
Texture2D<float4> IR_GBuffer_NormalsSampler : register(t13);
Texture2D<float4> IR_GBuffer_DepthSampler : register(t14);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  
//mike_ar69 
float4 stereoParams = StereoParams.Load(0);
float4 r21;

  r0.xyzw = IR_GBuffer_DepthSampler.Sample(IR_GBuffer_DepthSampler_s, v1.xy).xyzw;
  r0.x = cb4[10].z * r0.x + cb4[10].w;
  r0.x = 1.000000e+000 / r0.x;
  
r21.xyz = v2.xyz * r0.xxx;
r21.x +=  stereoParams.x * (-r0.x - stereoParams.y)*0.5;

  r0.xyz = -r21.xyz + IR_Light_Pos.xyz; //-v2.xyz * r0.xxx + IR_Light_Pos.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = sqrt(r0.w);
  r1.x = -IR_Light_Info.y + r0.w;
  r0.xyz = r0.xyz / r0.www;
  r0.w = IR_Light_Info.z + -IR_Light_Info.y;
  r0.w = saturate(r1.x / r0.w);
  r0.w = 1.000000000e+000 + -r0.w;
  r1.x = dot(-r0.xyz, IR_Light_Dir.xyz);
  r1.x = -IR_Spot_Info.y + r1.x;
  r1.x = saturate(IR_Spot_Info.z * r1.x);
  r0.w = r1.x * r0.w;
  r0.w = log2(r0.w);
  r0.w = IR_Light_Info.x * r0.w;
  r0.w = exp2(r0.w);
  r1.xyzw = IR_GBuffer_NormalsSampler.Sample(IR_GBuffer_NormalsSampler_s, v1.xy).xyzw;
  r1.xy = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r1.w = dot(r1.xy, r1.xy);
  r1.w = min(r1.w, 1.000000000e+000);
  r1.w = 1.000000000e+000 + -r1.w;
  r1.z = sqrt(r1.w);
  r1.w = r1.z + r1.z;
  r1.xyz = r1.www * r1.xyz;
  r1.w = -r1.z;
  r1.xyz = float3(0.000000e+000,0.000000e+000,1.000000e+000) + r1.xyw;
  r0.x = dot(r1.xyz, r0.xyz);
  r0.xy = r0.xx * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.y = r0.y * r0.y;
  r0.y = min(r0.y, 1.000000000e+000);
  r1.xyzw = IR_GBuffer_LightingSampler.Sample(IR_GBuffer_LightingSampler_s, v1.xy).xyzw;
  r0.z = r1.w;
  r1.x = r1.y + r1.y;
  r2.xyzw = Light_rampsSampler.Sample(Light_rampsSampler_s, r0.xz).xyzw;
  r1.yzw = IR_Light_Color.xyz * r2.xyz;
  r0.xyz = IR_light_back_color.xyz * r0.yyy + r1.yzw;
  r0.xyz = r0.xyz * r0.www;
  r0.w = r1.x >= -r1.x;
  r1.x = frac(abs(r1.x));
  r0.w = r0.w ? r1.x : -r1.x;
  r1.x = r0.w >= -1.666667e-001;
  r1.y = r0.w >= 1.666667e-001;
  r1.z = r0.w >= 5.000000e-001;
  r1.w = r0.w >= 8.333333e-001;
  r2.x = 1.666667e-001 >= r0.w;
  r2.y = 5.000000e-001 >= r0.w;
  r2.z = 8.333333e-001 >= r0.w;
  r2.w = 1.166667e+000 >= r0.w;
  r2.x = r2.x ? 1 : 1;
  r2.y = r2.y ? 1 : 1;
  r2.z = r2.z ? 1 : 1;
  r2.w = r2.w ? 1 : 1;
  r1.x = r1.x ? 1 : 1;
  r1.y = r1.y ? 1 : 1;
  r1.z = r1.z ? 1 : 1;
  r1.w = r1.w ? 1 : 1;
  r1.xyzw = min(r2.xyzw, r1.xyzw);
  r0.w = saturate(dot(Link_categories.xyzw, r1.xyzw));
  o0.xyz = r0.xyz * r0.www;
  o0.w = 0.000000000e+000;
  return;
}