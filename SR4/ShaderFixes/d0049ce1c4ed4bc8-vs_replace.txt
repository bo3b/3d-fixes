
cbuffer vc0 : register(b0)
{
  float Glow_ScrollU : packoffset(c0);
  float Glow_ScrollV : packoffset(c1);
  float Diffuse_ScrollU : packoffset(c2);
  float Diffuse_ScrollV : packoffset(c3);
  float4 Diffuse_Color : packoffset(c4);
  float Self_Illumination : packoffset(c5);
  float Diffuse_Distortion_Amount : packoffset(c6);
  float Distortion_ScrollU : packoffset(c7);
  float Distortion_ScrollV : packoffset(c8);
  float4 Glow_Color : packoffset(c9);
  float Glow_Falloff_Power : packoffset(c10);
  float Main_Opacity : packoffset(c11);
  float Glow_Falloff_Inversion : packoffset(c12);
  float Distortion_Amount : packoffset(c13);
  float Fade_Distance : packoffset(c14);
  float Angle_Power : packoffset(c15);
  float Soft_Fade_Alpha : packoffset(c16);
  float Alpha_Falloff_Amount : packoffset(c17) = float(0.000000e+000);
  float Alpha_Falloff_Power : packoffset(c18) = float(1.000000e+000);
  float Alpha_ScrollU : packoffset(c19);
  float Alpha_ScrollV : packoffset(c20);
  float Illum_Cycle : packoffset(c21);
  float Alpha_Invert : packoffset(c22) = float(0.000000e+000);
  float Depth_Threshold : packoffset(c23) = float(0.000000e+000);
  float Use_CTO : packoffset(c24) = float(0.000000e+000);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc2 : register(b2)
{
  float4x4 projTM : packoffset(c0);
  float4 eyePos : packoffset(c4);
  float4 Object_instance_params_2 : packoffset(c5);
  float4 Fog_dist : packoffset(c10);
  row_major float3x4 objTM : packoffset(c16);
  float3 Render_offset : packoffset(c19);
  float3 Position_scale : packoffset(c20);
}

cbuffer vc3 : register(b3)
{
  row_major float3x4 Bone_weights[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  int2 v1 : TEXCOORD0,
  float4 v2 : NORMAL0,
  float3 v3 : TANGENT0,
  int2 v4 : TEXCOORD1,
  int2 v5 : TEXCOORD2,
  int3 v6 : POSITION1,
  float3 v7 : COLOR0,
  float3 v8 : NORMAL1,
  uint4 v9 : BLENDINDICES0,
  out float4 o0 : SV_Position0,
  out float3 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.w = 1.000000000e+000;
  r1.xyzw = v6.xyzy;
  r1.xyzw = v7.xxxy * r1.xyzw;
  r2.xyz = r1.xyz * float3(1.220703e-004,1.220703e-004,1.220703e-004) + v0.xyz;
  r1.x = r1.w * 1.831054688e-004 + r2.y;
  r2.y = -v7.y * 1.600000024e+000 + r1.x;
  r2.w = 1.000000000e+000;
  r1.x = (int)v9.x * 3;
  r0.x = dot(Bone_weights[v9.x]._m00_m01_m02_m03, r2.xyzw);
  r0.y = dot(Bone_weights[v9.x]._m10_m11_m12_m13, r2.xyzw);
  r0.z = dot(Bone_weights[v9.x]._m20_m21_m22_m23, r2.xyzw);
  r2.x = dot(objTM._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(objTM._m10_m11_m12_m13, r0.xyzw);
  r2.z = dot(objTM._m20_m21_m22_m23, r0.xyzw);
  r2.w = 1.000000000e+000;
  r0.x = dot(r2.xyzw, projTM._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, projTM._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, projTM._m02_m12_m22_m32);
  r0.w = dot(r2.xyzw, projTM._m03_m13_m23_m33);


//Mike_ar69 - Stereo Shift
float4 r21;
float4 stereoParams = StereoParams.Load(0);
r21.xyzw = r0.xyzw;
r0.x += stereoParams.x * (r0.w - stereoParams.y);
o0.xyzw = r21.xyzw;


  o3.xyzw = r0.xyzw;
  r0.xyz = v2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.yzw = v8.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.xyz = v7.xxx * r1.yzw + r0.xyz;
  r3.x = dot(Bone_weights[v9.x]._m00_m01_m02, r0.xyz);
  r3.y = dot(Bone_weights[v9.x]._m10_m11_m12, r0.xyz);
  r3.z = dot(Bone_weights[v9.x]._m20_m21_m22, r0.xyz);
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  r3.x = dot(objTM._m00_m01_m02, r0.xyz);
  r3.y = dot(objTM._m10_m11_m12, r0.xyz);
  r3.z = dot(objTM._m20_m21_m22, r0.xyz);
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  o1.xyz = r0.xyz;
  r3.x = objTM._m03;
  r3.y = objTM._m13;
  r3.z = objTM._m23;
  o2.xyz = eyePos.xyz + -r3.xyz;
  o4.xyz = Render_offset.xyz + r2.xyz;
  r1.yzw = -eyePos.xyz + r2.xyz;
  o4.w = Time.w;
  r2.xyz = v3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.x = dot(Bone_weights[v9.x]._m00_m01_m02, r2.xyz);
  r3.y = dot(Bone_weights[v9.x]._m10_m11_m12, r2.xyz);
  r3.z = dot(Bone_weights[v9.x]._m20_m21_m22, r2.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  r3.x = dot(objTM._m00_m01_m02, r2.xyz);
  r3.y = dot(objTM._m10_m11_m12, r2.xyz);
  r3.z = dot(objTM._m20_m21_m22, r2.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  o5.x = dot(r1.yzw, r2.xyz);
  r0.w = Fog_dist.x * r1.z;
  r1.x = -1.442695022e+000 * r0.w;
  r1.x = exp2(r1.x);
  r1.x = 1.000000000e+000 + -r1.x;
  r0.w = r1.x / r0.w;
  r1.x = 5.000000075e-002 < abs(r1.z);
  r0.w = r1.x ? r0.w : 1.000000000e+000;
  r1.x = dot(r1.yzw, r1.yzw);
  o5.z = dot(r1.yzw, r0.xyz);
  r0.x = sqrt(r1.x);
  r0.x = Fog_dist.y * r0.x;
  r0.x = r0.w * r0.x + -Fog_dist.w;
  r0.x = exp2(-r0.x);
  r0.x = min(r0.x, 1.000000000e+000);
  o5.w = 1.000000000e+000 + -r0.x;
  o5.y = 0.000000000e+000;
  r0.xy = v1.xy;
  r0.xy = float2(9.765625e-004,9.765625e-004) * r0.xy;
  r0.z = Time.x * 1.000000047e-003;
  r0.z = frac(r0.z);
  r0.w = Diffuse_ScrollU * r0.z;
  o6.x = r0.w * 1.000000000e+001 + r0.x;
  r0.w = Diffuse_ScrollV * r0.z;
  o6.y = r0.w * 1.000000000e+001 + r0.y;
  r0.w = Distortion_ScrollU * r0.z;
  o6.z = r0.w * 1.000000000e+001 + r0.x;
  r0.x = Distortion_ScrollV * r0.z;
  o6.w = r0.x * 1.000000000e+001 + r0.y;
  r0.xy = v4.xy;
  r0.xy = float2(9.765625e-004,9.765625e-004) * r0.xy;
  r0.w = Alpha_ScrollU * r0.z;
  o7.x = r0.w * 1.000000000e+001 + r0.x;
  r0.x = Alpha_ScrollV * r0.z;
  o7.y = r0.x * 1.000000000e+001 + r0.y;
  r0.x = Glow_ScrollU * r0.z;
  r0.y = Glow_ScrollV * r0.z;
  r0.zw = v5.xy;
  r0.zw = float2(9.765625e-004,9.765625e-004) * r0.zw;
  o7.z = r0.x * 1.000000000e+001 + r0.z;
  o7.w = r0.y * 1.000000000e+001 + r0.w;
  return;
}
