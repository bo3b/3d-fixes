// Pieces of clothing.
// Manually fixed shader for 0x3f8000000 = 1.0

cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c0);
  float4 Diffuse_Color_a : packoffset(c1);
  float4 Diffuse_Color_b : packoffset(c2);
  float4 Diffuse_Color_c : packoffset(c3);
  float Normal_Map_Height : packoffset(c4);
  float Sphere_Map_Amount : packoffset(c5);
  float4 Specular_Color : packoffset(c6);
  float Specular_Alpha : packoffset(c7);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Pattern_MapSampler_s : register(s0);
SamplerState Normal_MapSampler_s : register(s1);
SamplerState Sphere_MapSampler_s : register(s2);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
Texture2D<float4> Pattern_MapSampler : register(t0);
Texture2D<float4> Normal_MapSampler : register(t1);
Texture2D<float4> Sphere_MapSampler : register(t2);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.xy = v3.xy / v3.ww;
  r0.xy = float2(1.000000e+000,1.000000e+000) + r0.xy;
  r0.x = cb4[9].z * r0.x;
  r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
  r1.y = cb4[9].w * r0.y;
  r1.x = 5.000000000e-001 * r0.x;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r0.z = floor(r0.x);
  r0.w = floor(r0.y);
  r0.xy = r0.xy + -r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) + r0.zw;
  r1.xy = r0.zw * cb4[9].xy + cb4[9].xy;
  r1.zw = cb4[9].xy * r0.zw;
  r2.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xy).xzwy;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zw).xyzw;
  r2.x = r3.y;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.xw).xyzw;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r1.zy).xyzw;
  r2.z = r4.y;
  r2.y = r3.y;
  r3.xyzw = -v4.wwww + r2.xyzw;
  r2.x = 5.000000e-001 >= r2.x;
  r2.y = 5.000000e-001 >= r2.y;
  r2.z = 5.000000e-001 >= r2.z;
  r2.w = 5.000000e-001 >= r2.w;
  r2.x = r2.x ? 0 : 0;
  r2.y = r2.y ? 0 : 0;
  r2.z = r2.z ? 0 : 0;
  r2.w = r2.w ? 0 : 0;
  r3.x = 1.220722e-005 >= abs(r3.x);
  r3.y = 1.220722e-005 >= abs(r3.y);
  r3.z = 1.220722e-005 >= abs(r3.z);
  r3.w = 1.220722e-005 >= abs(r3.w);
  r3.x = r3.x ? 0 : 0;
  r3.y = r3.y ? 0 : 0;
  r3.z = r3.z ? 0 : 0;
  r3.w = r3.w ? 0 : 0;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.zw = r2.xy + r2.zw;
  r0.z = r0.z >= r0.w;
  r0.w = r0.w >= r0.z;
  
  // r0.w = r0.w ? 0x3f800000 : 0;
r0.w = r0.w ? 1.0 : 0;
  r0.z = r0.z ? -1.000000000e+000 : -0.000000000e+000;
  r0.z = r0.w + r0.z;
  r0.w = r0.z == 0.000000;
  r1.x = saturate(r0.x + r0.z);
  r2.zw = max(r2.yw, r2.xz);
  r0.z = r2.y + -r2.x;
  r2.x = r2.w + -r2.z;
  r2.y = r2.x == 0.000000;
  r1.y = saturate(r2.x + r0.y);
  r0.x = saturate(r0.x + r0.z);
  r0.z = abs(r0.z) >= 1.000000000e+000;
  r0.w = r0.w ? r2.y : 0;
  r0.z = r0.z ? r0.w : 0;
  r0.y = 0.000000000e+000;
  r0.x = r0.z ? r0.x : r1.x;
  r0.y = r0.z ? r0.y : r1.y;
  r0.zw = cb4[9].xy;
  r0.xy = r0.xy * r0.zw + r1.zw;
  r0.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r0.xy).xyzw;
  r0.xyzw = max(r0.xyzw, float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000));
  r1.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = max(r1.x, 1.000000047e-003);
  r0.w = r0.w / r1.x;
  r1.xyz = r0.xyz * r0.www;
  r2.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s, v1.xy).xyzw;
  r2.yzw = r2.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = r2.y * r2.w;
  r3.xy = -r2.zx;
  r0.w = dot(r2.zx, r3.xy);
  r0.w = saturate(1.000000000e+000 + r0.w);
  r3.z = sqrt(r0.w);
  r2.xyz = float3(-0.000000e+000,-0.000000e+000,-1.000000e+000) + r3.xyz;
  r2.xyz = Normal_Map_Height * r2.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r2.yw = v2.xy * r2.yy;
  r2.xy = r2.xx * v5.xy + r2.yw;
  r2.xy = r2.zz * v4.xy + r2.xy;
  r2.xy = r2.xy * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r2.z = 1.000000000e+000 + -r2.y;
  r2.xyzw = Sphere_MapSampler.Sample(Sphere_MapSampler_s, r2.xz).xyzw;
  r2.xyz = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + r2.xyz;
  r2.xyz = Sphere_Map_Amount * r2.xyz + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r3.xyzw = Pattern_MapSampler.Sample(Pattern_MapSampler_s, v1.xy).xyzw;
  r0.w = r3.x + r3.y;
  r0.w = r0.w + r3.z;
  r4.xyz = -r0.www * float3(3.333333e-001,3.333333e-001,3.333333e-001) + r3.xyz;
  r1.w = abs(r4.x) + abs(r4.y);
  r1.w = r1.w + abs(r4.z);
  r1.w = r1.w * 1.650164948e+002 + 2.560000000e+002;
  r1.w = 3.921568859e-003 * r1.w;
  r0.w = r0.w >= r1.w;
  r1.w = r0.w ? 0.000000000e+000 : 1.000000000e+000;

  // r0.w = r0.w ? 0x3f800000 : 0;
r0.w = r0.w ? 1.0 : 0;
  r4.xyz = log2(r3.xyz);
  r3.xyz = float3(-3.725490e-001,-3.725490e-001,-3.725490e-001) + r3.xyz;
  r3.xyz = saturate(float3(1.593750e+000,1.593750e+000,1.593750e+000) * r3.xyz);
  r3.xyz = log2(r3.xyz);
  r3.xyz = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r4.xyz = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r4.xyz;
  r4.xyz = exp2(r4.xyz);
  r5.xyz = Diffuse_Color_b.xyz * r4.yyy;
  r4.xyw = r4.xxx * Diffuse_Color_a.xyz + r5.xyz;
  r4.xyz = r4.zzz * Diffuse_Color_c.xyz + r4.xyw;
  r4.xyz = r4.xyz * r1.www;
  r3.xyz = r0.www * r3.xyz + r4.xyz;
  r2.xyz = r3.xyz * r2.xyz;
  r0.xyz = r2.xyz * r0.xyz;
  r0.xyz = r0.xyz + r0.xyz;
  r2.xyz = Specular_Alpha * Specular_Color.xyz;
  r0.xyz = r2.xyz * r1.xyz + r0.xyz;
  r0.xyz = r3.xyz * Self_Illumination + r0.xyz;
  r0.w = 1.000000000e+000 + -v5.w;
  r0.xyz = r0.www * r0.xyz;
  r0.xyz = v5.www * cb4[4].xyz + r0.xyz;
  r0.w = 1.000000000e+000;
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}