cbuffer cb4 : register(b4)
{
  float4 cb4[11];
}


cbuffer vc0 : register(b0)
{
  float4 IR_Light_Pos : packoffset(c0);
  float4 Link_categories : packoffset(c1);
  float4 IR_light_back_color : packoffset(c2);
  float4x4 Projection_texture_xform : packoffset(c3);
  float3 Scroll : packoffset(c7);
  float4 IR_Light_Color : packoffset(c8);
  float4 IR_Light_Info : packoffset(c9);
  float ir_light_specular_intensity : packoffset(c10);
}

cbuffer vc4 : register(b4)
{
  float4 IR_Similarity_Data : packoffset(c10);
}
SamplerState Projection_textureSampler_s : register(s0);
SamplerState Light_rampsSampler_s : register(s1);
SamplerState IR_GBuffer_LightingSampler_s : register(s12);
SamplerState IR_GBuffer_NormalsSampler_s : register(s13);
SamplerState IR_GBuffer_DepthSampler_s : register(s14);
Texture2D<float4> Projection_textureSampler : register(t0);
Texture2D<float4> Light_rampsSampler : register(t1);
Texture2D<float4> IR_GBuffer_LightingSampler : register(t12);
Texture2D<float4> IR_GBuffer_NormalsSampler : register(t13);
Texture2D<float4> IR_GBuffer_DepthSampler : register(t14);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float  v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  
//mike_ar69 
float4 stereoParams = StereoParams.Load(0);
float4 r21;

  r0.xyzw = IR_GBuffer_NormalsSampler.Sample(IR_GBuffer_NormalsSampler_s, v1.xy).xyzw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = dot(r0.xy, r0.xy);
  r0.w = min(r0.w, 1.000000000e+000);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.z = sqrt(r0.w);
  r0.w = r0.z + r0.z;
  r0.xyz = r0.www * r0.xyz;
  r0.w = -r0.z;
  r0.xyz = float3(0.000000e+000,0.000000e+000,1.000000e+000) + r0.xyw;
  r1.xyzw = IR_GBuffer_DepthSampler.Sample(IR_GBuffer_DepthSampler_s, v1.xy).xyzw;
  r1.z = cb4[10].x * r1.x + cb4[10].y;
  r1.xy = v2.xy;
  
r21.xyz = r1.xyz;
r21.x -=  stereoParams.x * (r1.z - stereoParams.y)*v3; //0.62;

  r2.xyz = IR_Light_Pos.xyz + -r21.xyz; //-r1.xyz;
  
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = r2.xyz / r0.www;
  r0.w = -IR_Light_Info.y + r0.w;
  r1.w = dot(r0.xyz, r2.xyz);
  r2.w = r1.w + r1.w;
  r0.xyz = r2.www * r0.xyz + -r2.xyz;
  r2.x = dot(r21.xyz, r21.xyz); //dot(r1.xyz, r1.xyz);
  r2.x = rsqrt(r2.x);
  r2.xyz = r2.xxx * r21.xyz; //r1.xyz;
  r1.xyz = -IR_Light_Pos.xyz - r21.xyz; //r1.xyz;
  r0.x = saturate(dot(r0.xyz, -r2.xyz));
  r0.x = log2(r0.x);
  r2.xyzw = IR_GBuffer_LightingSampler.Sample(IR_GBuffer_LightingSampler_s, v1.xy).xyzw;
  r0.y = 5.120000000e+002 * r2.x;
  r0.y = 9.999999747e-005 + abs(r0.y);
  r0.x = r0.y * r0.x;
  r0.x = exp2(r0.x);
  r0.y = dot(IR_Light_Color.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.x = r0.x * r0.y;
  r0.y = saturate(r1.w);
  r3.xy = r1.ww * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.z = r2.z * 2.000000000e+000 + -1.000000000e+000;
  r0.z = saturate(1.000000000e+000 + -r0.z);
  r2.xy = r2.zy + r2.zy;
  r3.z = r2.w;
  r4.xyzw = Light_rampsSampler.Sample(Light_rampsSampler_s, r3.xz).xyzw;
  r1.w = r3.y * r3.y;
  r1.w = min(r1.w, 1.000000000e+000);
  r3.xyz = IR_Light_Color.xyz * r4.xyz;
  r3.xyz = IR_light_back_color.xyz * r1.www + r3.xyz;
  r2.x = saturate(r2.x);
  r0.z = -r2.x + r0.z;
  r0.y = r0.y * r0.z + r2.x;
  r3.w = r0.x * r0.y;
  r0.x = IR_Light_Info.z + -IR_Light_Info.y;
  r0.x = saturate(r0.w / r0.x);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.x = log2(r0.x);
  r0.x = IR_Light_Info.x * r0.x;
  r0.x = exp2(r0.x);
  r0.xyzw = r3.xyzw * r0.xxxx;
  r1.w = r2.y >= -r2.y;
  r2.x = frac(abs(r2.y));
  r1.w = r1.w ? r2.x : -r2.x;
  r2.x = r1.w >= -1.666667e-001;
  r2.y = r1.w >= 1.666667e-001;
  r2.z = r1.w >= 5.000000e-001;
  r2.w = r1.w >= 8.333333e-001;
  r3.x = 1.666667e-001 >= r1.w;
  r3.y = 5.000000e-001 >= r1.w;
  r3.z = 8.333333e-001 >= r1.w;
  r3.w = 1.166667e+000 >= r1.w;
  r3.x = r3.x ? 1 : 1;
  r3.y = r3.y ? 1 : 1;
  r3.z = r3.z ? 1 : 1;
  r3.w = r3.w ? 1 : 1;
  r2.x = r2.x ? 1 : 1;
  r2.y = r2.y ? 1 : 1;
  r2.z = r2.z ? 1 : 1;
  r2.w = r2.w ? 1 : 1;
  r2.xyzw = min(r3.xyzw, r2.xyzw);
  r1.w = saturate(dot(Link_categories.xyzw, r2.xyzw));
  r0.xyzw = r1.wwww * r0.xyzw;
  r2.y = dot(r1.xyz, Projection_texture_xform._m00_m10_m20);
  r2.x = dot(r1.xyz, Projection_texture_xform._m01_m11_m21);
  r2.z = dot(r1.xyz, Projection_texture_xform._m02_m12_m22);
  r1.x = dot(r2.xyz, r2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = r2.xyz * r1.xxx;
  r1.w = max(abs(r1.y), abs(r1.x));
  r1.w = 1.000000e+000 / r1.w;
  r2.x = min(abs(r1.y), abs(r1.x));
  r1.w = r2.x * r1.w;
  r2.x = r1.w * r1.w;
  r2.y = r2.x * 2.083509974e-002 + -8.513300121e-002;
  r2.y = r2.x * r2.y + 1.801410019e-001;
  r2.y = r2.x * r2.y + -3.302994967e-001;
  r2.x = r2.x * r2.y + 9.998660088e-001;
  r2.y = r2.x * r1.w;
  r2.y = r2.y * -2.000000000e+000 + 1.570796371e+000;
  r2.z = abs(r1.y) < abs(r1.x);
  r2.y = r2.z ? r2.y : 0;
  r1.w = r1.w * r2.x + r2.y;
  r2.x = r1.y < -r1.y;
  r2.y = r1.z < -r1.z;
  r2.x = r2.x ? 0xc0490fdb : 0;
  r1.w = r2.x + r1.w;
  r2.x = min(r1.y, r1.x);
  r2.x = r2.x < -r2.x;
  r1.x = max(r1.y, r1.x);
  r1.x = r1.x >= -r1.x;
  r1.x = r1.x ? r2.x : 0;
  r1.x = r1.x ? -r1.w : r1.w;
  r1.x = r1.x * 1.591550708e-001 + 5.000000000e-001;
  r1.x = 1.000000000e+000 + -r1.x;
  r1.x = r1.x * Scroll.z + Scroll.x;
  r1.w = abs(r1.z) * -1.872929931e-002 + 7.426100224e-002;
  r1.w = r1.w * abs(r1.z) + -2.121143937e-001;
  r1.w = r1.w * abs(r1.z) + 1.570728779e+000;
  r1.z = 1.000000000e+000 + -abs(-r1.z);
  r1.z = sqrt(r1.z);
  r2.x = r1.w * r1.z;
  r2.x = r2.x * -2.000000000e+000 + 3.141592741e+000;
  r2.x = (int)r2.y & (int)r2.x;
  r1.z = r1.w * r1.z + r2.x;
  r1.z = -r1.z * 3.183101416e-001 + Scroll.y;
  r1.y = 1.000000000e+000 + r1.z;
  r1.xyzw = Projection_textureSampler.Sample(Projection_textureSampler_s, r1.xy).xyzw;
  r2.xyzw = r0.xyzw * r1.xyzx + -r0.xyzw;
  r0.xyzw = r1.wwww * r2.xyzw + r0.xyzw;
  o0.w = ir_light_specular_intensity * r0.w;
  o0.xyz = r0.xyz;
  return;
}