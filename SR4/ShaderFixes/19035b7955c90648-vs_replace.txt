cbuffer cb0 : register(b0)
{
  float4 cb0[5];
}


cbuffer vc0 : register(b0)
{
  float4 Specular_Color : packoffset(c1);
  float3 Base_Paint_Color : packoffset(c2);
  float grime_tiling_u : packoffset(c3);
  float grime_tiling_v : packoffset(c4);
  float grime_amount : packoffset(c5);
  float3 Fresnel_Color : packoffset(c6);
  float Fresnel_Min_Cos_Angle : packoffset(c7);
  float Fresnel_Inverse_Cos_Angle_Range : packoffset(c8);
  float3 Reflection_Cos_Min_Angles : packoffset(c9);
  float3 Reflection_Inv_Range_Cos_Angles : packoffset(c10);
  float Ambient_Reflection_Amount : packoffset(c11);
  float4 Decal_Clamp_UV_1 : packoffset(c12);
  float4 Decal_Clamp_UV_2 : packoffset(c13);
  float Specular_Alpha : packoffset(c14);
  float grime_override : packoffset(c15);
}

cbuffer vc2 : register(b2)
{
  float4x4 projTM : packoffset(c0);
  float4 eyePos : packoffset(c4);
  float4 Object_instance_params_2 : packoffset(c5);
  float4 Fog_dist : packoffset(c10);
  row_major float3x4 objTM : packoffset(c16);
  float3 Position_scale : packoffset(c20);
}

cbuffer vc3 : register(b3)
{
  row_major float3x4 Bone_weights[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  int2 v1 : TEXCOORD0,
  float4 v2 : NORMAL0,
  float4 v3 : TANGENT0,
  int2 v4 : TEXCOORD1,
  int2 v5 : TEXCOORD2,
  int4 v6 : TEXCOORD3,
  uint4 v7 : BLENDWEIGHT0,
  uint4 v8 : BLENDINDICES0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float3 o8 : TEXCOORD7)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xyzw = v7.xyzw;
  r1.x = r0.x + r0.y;
  r1.x = r1.x + r0.z;
  r1.x = r1.x + r0.w;
  r1.x = 1.000000e+000 / r1.x;
  r2.xyz = v0.xyz;
  r2.w = 1.000000000e+000;
  r3.xyzw = (int4)v8.xyzw * int4(3,3,3,3);
  r4.xyzw = Bone_weights[v8.y]._m00_m01_m02_m03 * r0.yyyy;
  r4.xyzw = r0.xxxx * Bone_weights[v8.x]._m00_m01_m02_m03 + r4.xyzw;
  r4.xyzw = r0.zzzz * Bone_weights[v8.z]._m00_m01_m02_m03 + r4.xyzw;
  r4.xyzw = r0.wwww * Bone_weights[v8.w]._m00_m01_m02_m03 + r4.xyzw;
  r5.x = dot(r4.xyzw, r2.xyzw);
  r6.xyzw = Bone_weights[v8.y]._m10_m11_m12_m13 * r0.yyyy;
  r6.xyzw = r0.xxxx * Bone_weights[v8.x]._m10_m11_m12_m13 + r6.xyzw;
  r6.xyzw = r0.zzzz * Bone_weights[v8.z]._m10_m11_m12_m13 + r6.xyzw;
  r6.xyzw = r0.wwww * Bone_weights[v8.w]._m10_m11_m12_m13 + r6.xyzw;
  r5.y = dot(r6.xyzw, r2.xyzw);
  r7.xyzw = Bone_weights[v8.y]._m20_m21_m22_m23 * r0.yyyy;
  r7.xyzw = r0.xxxx * Bone_weights[v8.x]._m20_m21_m22_m23 + r7.xyzw;
  r7.xyzw = r0.zzzz * Bone_weights[v8.z]._m20_m21_m22_m23 + r7.xyzw;
  r0.xyzw = r0.wwww * Bone_weights[v8.w]._m20_m21_m22_m23 + r7.xyzw;
  r5.z = dot(r0.xyzw, r2.xyzw);
  r2.xyz = r5.xyz * r1.xxx;
  r2.w = 1.000000000e+000;
  r3.x = dot(objTM._m00_m01_m02_m03, r2.xyzw);
  r3.y = dot(objTM._m10_m11_m12_m13, r2.xyzw);
  r3.z = dot(objTM._m20_m21_m22_m23, r2.xyzw);
  r3.w = 1.000000000e+000;
  r2.x = dot(r3.xyzw, projTM._m00_m10_m20_m30);
  r2.y = dot(r3.xyzw, projTM._m01_m11_m21_m31);
  r2.z = dot(r3.xyzw, projTM._m02_m12_m22_m32);
  r2.w = dot(r3.xyzw, projTM._m03_m13_m23_m33);


//Mike_ar69 - Stereo Shift
float4 r21;
float4 stereoParams = StereoParams.Load(0);
r21.xyzw = r2.xyzw;
r2.x += stereoParams.x * (r2.w - stereoParams.y);
o0.xyzw = r21.xyzw;


  o2.xyzw = r2.xyzw;
  r1.yzw = v3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.x = dot(r4.xyz, r1.yzw);
  r2.y = dot(r6.xyz, r1.yzw);
  r2.z = dot(r0.xyz, r1.yzw);
  r1.yzw = r2.xyz * r1.xxx;
  r0.w = dot(r1.yzw, r1.yzw);
  r0.w = rsqrt(r0.w);
  r1.yzw = r1.yzw * r0.www;
  r2.x = dot(objTM._m00_m01_m02, r1.yzw);
  r2.y = dot(objTM._m10_m11_m12, r1.yzw);
  r2.z = dot(objTM._m20_m21_m22, r1.yzw);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.yzw = r2.xyz * r0.www;
  o1.xyz = r1.yzw;
  o1.w = v3.w * 2.000000000e+000 + -1.000000000e+000;
  o3.xyz = eyePos.xyz + -r3.xyz;
  r2.xyz = -eyePos.xyz + r3.xyz;
  r0.w = Object_instance_params_2.x * 3.264000000e+004;
  r3.xyzw = v2.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.w = r3.w * 5.000000000e-001 + 5.000000000e-001;
  r0.w = r2.w * 2.550000000e+002 + r0.w;
  r0.w = 3.276800000e+004 + r0.w;
  o3.w = 1.525902189e-005 * r0.w;
  r4.x = dot(r4.xyz, r3.xyz);
  r4.y = dot(r6.xyz, r3.xyz);
  r4.z = dot(r0.xyz, r3.xyz);
  r0.xyz = r4.xyz * r1.xxx;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r3.x = dot(objTM._m00_m01_m02, r0.xyz);
  r3.y = dot(objTM._m10_m11_m12, r0.xyz);
  r3.z = dot(objTM._m20_m21_m22, r0.xyz);
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r3.xyz * r0.xxx;
  o4.xyz = r0.xyz;
  o4.w = 0.000000000e+000;
  r3.xyz = r0.zxy * r1.zwy;
  r0.xyz = r0.yzx * r1.wyz + -r3.xyz;
  r0.w = saturate(v3.w);
  r1.x = r0.w >= 5.000000000e-001;
  r1.x = r1.x ? -5.019608e-001 : 0;
  r1.y = r1.x ? -1 : 1;
  o5.xyz = r1.yyy * r0.xyz;
  r0.x = r1.x + r0.w;
  o5.w = saturate(2.007874012e+000 * r0.x);
  r0.xy = v1.xy;
  r1.x = cb0[3].x * r0.x;
  r1.y = cb0[4].x * r0.y;
  o6.zw = float2(2.929688e-003,2.929688e-003) * r0.xy;
  o6.xy = float2(9.765625e-004,9.765625e-004) * r1.xy;
  r0.xy = v6.xy;
  o7.xy = float2(9.765625e-004,9.765625e-004) * r0.xy;
  r0.xy = v4.xy;
  o7.zw = float2(9.765625e-004,9.765625e-004) * r0.xy;
  r0.x = Fog_dist.x * r2.y;
  r0.y = -1.442695022e+000 * r0.x;
  r0.y = exp2(r0.y);
  r0.y = 1.000000000e+000 + -r0.y;
  r0.x = r0.y / r0.x;
  r0.y = 5.000000075e-002 < abs(r2.y);
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = sqrt(r0.z);
  r0.z = Fog_dist.y * r0.z;
  r0.x = r0.y ? r0.x : 1.000000000e+000;
  r0.x = r0.x * r0.z + -Fog_dist.w;
  r0.x = exp2(-r0.x);
  r0.x = min(r0.x, 1.000000000e+000);
  o8.z = 1.000000000e+000 + -r0.x;
  r0.xy = v5.xy;
  o8.xy = float2(9.765625e-004,9.765625e-004) * r0.xy;
  return;
}
