// Numerous buildings, or windows on them.
// Manually fixed shader for 0x3f8000000 = 1.0

cbuffer cb4 : register(b4)
{
  float4 cb4[10];
}


cbuffer vc0 : register(b0)
{
  float Self_Illumination : packoffset(c0);
  float Reflection_Map_Opacity : packoffset(c1);
  float4 Diffuse_Color : packoffset(c2);
  float4 Wet_mask_levels : packoffset(c3);
  float Night_Reflection_Map_Opacity : packoffset(c4);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

cbuffer vc4 : register(b4)
{
  float4 Tint_color : packoffset(c1);
  float4 Fog_color : packoffset(c4);
  float4 IR_Pixel_Steps : packoffset(c9);
  float4 IR_Similarity_Data : packoffset(c10);
  float4 TOD_window_tint : packoffset(c14);
}
SamplerState Diffuse_MapSampler_s : register(s0);
SamplerState Reflection_MaskSampler_s : register(s1);
SamplerState Night_Additive_MapSampler_s : register(s2);
SamplerState Glow_MapSampler_s : register(s3);
SamplerState CTO_control_mapSampler_s : register(s4);
SamplerState IR_GBuffer_DSF_DataSampler_s : register(s9);
SamplerState IR_LBufferSampler_s : register(s12);
SamplerState Single_Paraboloid_MapSampler_s : register(s13);
Texture2D<float4> Diffuse_MapSampler : register(t0);
Texture2D<float4> Reflection_MaskSampler : register(t1);
Texture2D<float4> Night_Additive_MapSampler : register(t2);
Texture2D<float4> Glow_MapSampler : register(t3);
Texture2D<float4> CTO_control_mapSampler : register(t4);
Texture2D<float4> IR_GBuffer_DSF_DataSampler : register(t9);
Texture2D<float4> IR_LBufferSampler : register(t12);
Texture2D<float4> Single_Paraboloid_MapSampler : register(t13);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.x = dot(-v4.xyz, v5.xyz);
  r0.x = r0.x + r0.x;
  r0.xyz = v5.xzy * -r0.xxx + -v4.xzy;
  r0.xyz = float3(1.000000e+000,-1.000000e+000,1.000000e+000) * r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r0.xyz * r0.www;
  r0.xy = r0.zz * r0.ww + float2(1.500000e+000,-2.000000e-002);
  r0.z = r1.z >= 1.999999955e-002;
  
  // r0.z = r0.z ? 0x3f800000 : 0;
r0.z = r0.z ? 1.0 : 0;
  r1.w = r0.z * r0.y + 1.999999955e-002;
  r0.x = saturate(r0.x);
  r0.x = max(r0.x, 1.000000015e-001);
  r0.y = dot(r1.xyw, r1.xyw);
  r0.y = rsqrt(r0.y);
  r0.z = r1.w * r0.y + 1.000000000e+000;
  r0.yw = r1.xy * r0.yy;
  r0.z = r0.z + r0.z;
  r0.yz = r0.yw / r0.zz;
  r1.xy = float2(5.000000e-001,5.000000e-001) + r0.yz;
  r1.z = 1.000000000e+000 + -r1.y;
  r1.xyzw = Single_Paraboloid_MapSampler.Sample(Single_Paraboloid_MapSampler_s, r1.xz).xyzw;
  r0.yzw = max(r1.xyz, Wet_mask_levels.xxx);
  r0.yzw = min(r0.yzw, Wet_mask_levels.yyy);
  r0.yzw = -Wet_mask_levels.xxx + r0.yzw;
  r0.yzw = Wet_mask_levels.yyy * r0.yzw;
  r0.xyz = r0.yzw * r0.xxx;
  r0.xyz = r0.xyz / cb4[1].xyz;
  r1.xyzw = Reflection_MaskSampler.Sample(Reflection_MaskSampler_s, v1.xy).xyzw;
  r0.xyz = r1.xyz * r0.xyz;
  r0.w = dot(r1.xyz, float3(3.000000e-001,6.000000e-001,1.000000e-001));
  r1.xy = v2.xy / v2.ww;
  r1.xy = float2(1.000000e+000,1.000000e+000) + r1.xy;
  r1.x = cb4[9].z * r1.x;
  r1.y = -r1.y * 5.000000000e-001 + 1.000000000e+000;
  r2.y = cb4[9].w * r1.y;
  r2.x = 5.000000000e-001 * r1.x;
  r1.xy = float2(-5.000000e-001,-5.000000e-001) + r2.xy;
  r1.z = floor(r1.x);
  r1.w = floor(r1.y);
  r1.xy = r1.xy + -r1.zw;
  r1.zw = float2(5.000000e-001,5.000000e-001) + r1.zw;
  r2.xy = r1.zw * cb4[9].xy + cb4[9].xy;
  r2.zw = cb4[9].xy * r1.zw;
  r3.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xy).xzwy;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zw).xyzw;
  r3.x = r4.y;
  r4.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.xw).xyzw;
  r5.xyzw = IR_GBuffer_DSF_DataSampler.Sample(IR_GBuffer_DSF_DataSampler_s, r2.zy).xyzw;
  r3.z = r5.y;
  r3.y = r4.y;
  r4.xyzw = -v3.wwww + r3.xyzw;
  r3.x = 5.000000e-001 >= r3.x;
  r3.y = 5.000000e-001 >= r3.y;
  r3.z = 5.000000e-001 >= r3.z;
  r3.w = 5.000000e-001 >= r3.w;
  r3.x = r3.x ? 0 : 0;
  r3.y = r3.y ? 0 : 0;
  r3.z = r3.z ? 0 : 0;
  r3.w = r3.w ? 0 : 0;
  r4.x = 1.220722e-005 >= abs(r4.x);
  r4.y = 1.220722e-005 >= abs(r4.y);
  r4.z = 1.220722e-005 >= abs(r4.z);
  r4.w = 1.220722e-005 >= abs(r4.w);
  r4.x = r4.x ? 0 : 0;
  r4.y = r4.y ? 0 : 0;
  r4.z = r4.z ? 0 : 0;
  r4.w = r4.w ? 0 : 0;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r1.zw = r3.xy + r3.zw;
  r1.z = r1.z >= r1.w;
  r1.w = r1.w >= r1.z;
  
  // r1.w = r1.w ? 0x3f800000 : 0;
r1.w = r1.w ? 1.0 : 0;
  r1.z = r1.z ? -1.000000000e+000 : -0.000000000e+000;
  r1.z = r1.w + r1.z;
  r1.w = r1.z == 0.000000;
  r2.x = saturate(r1.x + r1.z);
  r3.zw = max(r3.yw, r3.xz);
  r1.z = r3.y + -r3.x;
  r3.x = r3.w + -r3.z;
  r3.y = r3.x == 0.000000;
  r2.y = saturate(r3.x + r1.y);
  r1.x = saturate(r1.x + r1.z);
  r1.z = abs(r1.z) >= 1.000000000e+000;
  r1.w = r1.w ? r3.y : 0;
  r1.z = r1.z ? r1.w : 0;
  r1.y = 0.000000000e+000;
  r1.x = r1.z ? r1.x : r2.x;
  r1.y = r1.z ? r1.y : r2.y;
  r1.zw = cb4[9].xy;
  r1.xy = r1.xy * r1.zw + r2.zw;
  r1.xyzw = IR_LBufferSampler.Sample(IR_LBufferSampler_s, r1.xy).xyzw;
  r1.xyz = max(r1.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r2.xyz = v6.xyz;
  r2.w = 1.000000000e+000;
  r3.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + -r2.xyzw;
  r4.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s, v1.xy).xyzw;
  r2.xyzw = r4.wwww * r3.xyzw + r2.xyzw;
  r2.xyzw = r4.xyzw * r2.xyzw;
  r1.xyz = r2.xyz * r1.xyz;
  r1.w = Night_Reflection_Map_Opacity + -Reflection_Map_Opacity;
  r1.w = Time.w * r1.w + Reflection_Map_Opacity;
  r0.xyz = r0.xyz * r1.www + -r1.xyz;
  r1.w = dot(v4.xyz, v4.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = v4.xyz * r1.www;
  r1.w = dot(r3.xyz, v5.xyz);
  r1.w = saturate(1.000000000e+000 + -r1.w);
  r3.xy = Time.ww * float2(2.000000e-001,3.300000e-001) + float2(1.000000e-001,6.700000e-001);
  r1.w = max(r1.w, r3.x);
  r1.w = min(r1.w, r3.y);
  r3.x = r1.w * r0.w;
  r0.w = -r1.w * r0.w + 1.000000000e+000;
  r0.xyz = r3.xxx * r0.xyz + r1.xyz;
  r1.xy = float2(2.602000e+003,2.971000e+003) + v3.xz;
  r1.xy = float2(1.836210e-004,1.836210e-004) * r1.xy;
  r1.xyzw = CTO_control_mapSampler.Sample(CTO_control_mapSampler_s, r1.xy).xyzw;
  r3.xyzw = Night_Additive_MapSampler.Sample(Night_Additive_MapSampler_s, v1.xy).xyzw;
  r1.xyz = r3.xyz * r1.xyz;
  r1.xyz = Time.www * r1.xyz;
  r1.w = v3.x + -v3.z;
  r3.x = v5.w * r1.w + v3.z;
  r3.y = v3.y;
  r3.xy = float2(4.000000e-003,4.000000e-003) * r3.xy;
  r3.xyzw = Glow_MapSampler.Sample(Glow_MapSampler_s, r3.xy).xyzw;
  r1.xyz = r3.xyz * r1.xyz;
  r1.xyz = float3(4.000000e+000,4.000000e+000,4.000000e+000) * r1.xyz;
  r1.w = 4.000000060e-001 >= abs(v5.y);
  
  // r1.w = r1.w ? 0x3f800000 : 0;
r1.w = r1.w ? 1.0 : 0;
  r1.xyz = r1.www * r1.xyz;
  r3.xyz = Self_Illumination * r2.xyz;
  r1.xyz = r0.www * r1.xyz + r3.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = 1.000000000e+000 + -v6.w;
  r0.xyz = r0.www * r0.xyz;
  r2.xyz = v6.www * cb4[4].xyz + r0.xyz;
  o0.xyzw = cb4[1].xyzw * r2.xyzw;
  return;
}