
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float3 g_hemisphereDir : packoffset(c9);
  float3 g_topColor : packoffset(c10);
  float3 g_bottomColor : packoffset(c11);
  float4 g_keyColor : packoffset(c12);
  float2 g_lightAngularRadius : packoffset(c13);
  float4 g_keyTranslucencyParams : packoffset(c14);
  float4 g_subParams : packoffset(c15);
  float4 g_envmapParams : packoffset(c16);
  float g_skyEnvmap8BitTexInvScale : packoffset(c17);
  float4 g_exposureMultipliers : packoffset(c18);
  float4 g_envmapsMipmapCount : packoffset(c19);
  int g_drawReference : packoffset(c20);
  float g_skyEnvmapMipmapCount : packoffset(c20.y);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_diffuseOcclusionSampler_s : register(s2);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
Texture2D<float4> g_diffuseOcclusionTexture : register(t2);
Texture2DMS<float4,2> g_depthTexture : register(t3);
Texture2DMS<float4,2> g_gbufferTexture0 : register(t4);
Texture2DMS<float4,2> g_gbufferTexture1 : register(t5);
Texture2DMS<float4,2> g_gbufferTexture2 : register(t6);
Texture2DMS<float4,2> g_gbufferTexture3 : register(t7);
Texture2DMS<float4,2> g_gbufferTexture4 : register(t8);
Texture2DMS<float4> g_shadowAccumTexture : register(t9);
Texture2D<float> g_msaaClassifyTexture : register(t10);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  const float4 icb[] = { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_msaaClassifyTexture.Load(r1.xyw).x;
  r0.z = 0.000000000e+000 < r0.z;
  r0.zw = r0.zz ? float2(2.802597e-045,5.000000e-001) : float2(1.401298e-045,1.000000e+000);
  r2.xyz = -g_bottomColor.xyz + g_topColor.xyz;
  r2.w = 1.000000000e+000 + -g_envmapParams.w;
  r3.x = (int)g_envmapsMipmapCount.x;
  r3.y = round(g_envmapsMipmapCount.x);
  r3.x = (int)r3.x + -1;
  r3.x = r3.x;
  r4.w = 1.000000000e+000;
  r5.y = 0.000000000e+000;
  r6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r7.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r3.z = 0.000000000e+000;
  while (true) {
  r3.w = (int)r3.z >= (int)r0.z;
  if (r3.w != 0) break;
  r5.zw = icb[r3.z].xx * g_invScreenSize.xy + r0.xy;
  r8.xyzw = g_gbufferTexture0.Load(r1.xyw,r3.z).xyzw;
  r9.xyzw = g_gbufferTexture1.Load(r1.xyw,r3.z).xyzw;
  r3.w = g_gbufferTexture2.Load(r1.xyw,r3.z).w;
  r10.xyz = g_gbufferTexture3.Load(r1.xyw,r3.z).xyz;
  r4.z = g_depthTexture.Load(r1.xyw,r3.z).x;
  r3.w = 2.550000000e+002 * r3.w;
  r3.w = round(r3.w * 0.5) * 2;
  r3.w = (int)r3.w;
  r11.x = r3.w == 4;
  r11.y = r3.w == 2;
  if (r11.x != 0) {
  r12.xyzw = g_gbufferTexture4.Load(r1.xyw,r3.z).xyzw;
  r13.xyzw = r8.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + float4(-2.000000e+000,-2.000000e+000,-2.000000e+000,-2.000000e+000);
  r6.w = dot(r13.xy, r13.xy);
  r14.zw = -r6.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r6.w = max(r14.z, 0.000000000e+000);
  r6.w = sqrt(r6.w);
  r14.xy = r13.xy * r6.ww;
  r6.w = dot(r14.xyw, r14.xyw);
  r6.w = rsqrt(r6.w);
  r14.xyz = r14.xyw * r6.www;
  r6.w = dot(r13.zw, r13.zw);
  r15.zw = -r6.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r6.w = max(r15.z, 0.000000000e+000);
  r6.w = sqrt(r6.w);
  r15.xy = r13.zw * r6.ww;
  r6.w = dot(r15.xyw, r15.xyw);
  r6.w = rsqrt(r6.w);
  r13.xyz = r15.xyw * r6.www;
  r6.w = dot(r12.xy, float2(6.528000e+004,2.550000e+002));
  r6.w = round(r6.w * 0.5) * 2;
  r7.w = 3.125000000e-002 * r6.w;
  r7.w = round(r7.w);
  r15.z = r6.w * 3.125000000e-002 + -r7.w;
  r6.w = 1.562500000e-002 * r7.w;
  r15.x = round(r6.w);
  r15.y = r7.w * 1.562500000e-002 + -r15.x;
  r15.xyz = float3(3.225806e-002,1.015873e+000,1.032258e+000) * r15.xyz;
  r11.zw = float2(2.550000e+002,2.550000e+002) * r12.zw;
  r11.z = round(r11.z * 0.5) * 2;
  r11.w = round(r11.w * 0.5) * 2;
  r12.xy = float2(6.250000e-002,6.250000e-002) * r11.zw;
  r12.x = round(r12.x);
  r12.y = round(r12.y);
  r12.zw = r11.zw * float2(6.250000e-002,6.250000e-002) + -r12.xy;
  r16.xw = float2(6.666667e-002,1.066667e+000) * r12.yw;
  r11.zw = r12.xz * float2(8.000001e-001,1.280000e+001) + float2(1.000000e+000,1.000000e+000);
  r11.zw = exp2(r11.zw);
  r11.zw = r11.zw * float2(1.443000e+000,1.443000e+000) + float2(1.443000e+000,1.443000e+000);
  r12.xyzw = r9.xyzw * r9.xyzw;
  r17.xyz = r12.www;
  r6.w = 0.000000000e+000;
  } else {
  r8.xyz = r8.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r7.w = dot(r8.xyz, r8.xyz);
  r7.w = rsqrt(r7.w);
  r14.xyz = r8.xyz * r7.www;
  r9.xyzw = r9.xyzw * r9.xyzw;
  r7.w = r3.w == 5;
  if (r7.w != 0) {
  r12.xyz = r9.xyz * r9.www;
  r17.xyz = r9.xyz;
  } else {
  r7.w = r3.w == 1;
  if (r7.w != 0) {
  r17.xyz = r9.www * r9.xyz;
  } else {
  r17.xyz = r9.www;
  }
  r12.xyz = r9.xyz;
  }
  r7.w = 0.000000000e+000 < r17.x;
  r6.w = r7.w ? r8.w : 0;
  r7.w = r6.w * 1.200000000e+001 + 1.000000000e+000;
  r7.w = exp2(r7.w);
  r5.x = r7.w * 1.442999959e+000 + 1.442999959e+000;
  r16.xw = float2(0.000000e+000,0.000000e+000);
  r15.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r13.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r11.zw = r5.xy;
  }
  r5.xz = r5.zw * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r5.xz;
  r8.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r8.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r8.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r4.x = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r4.x = 1.000000e+000 / r4.x;


float4 r28, r26, r27;
r26.xyz = r8.xyz * r4.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r8.xyz = r26.xyz / r4.xxx;

  r5.xzw = r8.xzy * r4.xxx;


  r4.y = dot(r5.xzw, r5.xzw);
  r4.z = rsqrt(r4.y);
  r8.xzw = r5.xwz * r4.zzz;
  r7.w = g_shadowAccumTexture.Load(r1.xyz,r3.z).x;
  r4.x = r8.y * r4.x + g_cameraPos.y;
  r9.xy = g_lightDir.xz * r4.xx;
  r9.xy = r9.xy * g_cloudOffsetAndScale.ww + r5.xz;
  r9.xy = r9.xy * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
  r4.x = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r9.xy, 0.000000000e+000).x;
  r4.x = saturate(g_cloudCoverageExponentAndFade.x + r4.x);
  r4.x = log2(r4.x);
  r4.x = g_cloudCoverageExponentAndFade.y * r4.x;
  r4.x = exp2(r4.x);
  r4.y = sqrt(r4.y);
  r4.y = -g_cloudCoverageExponentAndFade.z + r4.y;
  r4.y = saturate(g_cloudCoverageExponentAndFade.w * r4.y);
  r4.y = r4.y * r4.y;
  r8.y = 1.000000000e+000 + -r4.x;
  r4.x = r4.y * r8.y + r4.x;
  r4.x = r7.w * r4.x;
  r4.y = dot(r14.xyz, g_lightDir.xyz);
  r7.w = saturate(r4.y);
  r9.xyz = g_keyColor.xyz * r7.www;
  r9.xyz = r9.xyz * r4.xxx;
  if (r11.x != 0) {
  r16.w = saturate(r16.w);
  r4.y = r16.w * 5.000000000e-001 + r4.y;
  r7.w = r16.w * 5.000000000e-001 + 1.000000000e+000;
  r4.y = saturate(r4.y / r7.w);
  r16.yzw = g_keyColor.xyz * r4.yyy;
  r16.yzw = r16.yzw * r4.xxx;
  r18.xyz = -r14.xyz * r16.xxx + r13.xyz;
  r4.y = dot(r18.xyz, r18.xyz);
  r4.y = rsqrt(r4.y);
  r18.xyz = r18.xyz * r4.yyy;
  r19.xyz = -r5.xwz * r4.zzz + g_lightDir.xyz;
  r4.y = dot(r19.xyz, r19.xyz);
  r4.y = rsqrt(r4.y);
  r19.xyz = r19.xyz * r4.yyy;
  r4.y = dot(r13.xyz, r19.xyz);
  r4.y = -r4.y * r4.y + 1.000000000e+000;
  r4.y = max(r4.y, 0.000000000e+000);
  r4.y = sqrt(r4.y);
  r4.y = log2(r4.y);
  r4.y = r11.z * r4.y;
  r4.y = exp2(r4.y);
  r7.w = dot(r18.xyz, r19.xyz);
  r7.w = -r7.w * r7.w + 1.000000000e+000;
  r7.w = max(r7.w, 0.000000000e+000);
  r7.w = sqrt(r7.w);
  r7.w = log2(r7.w);
  r7.w = r11.w * r7.w;
  r7.w = exp2(r7.w);
  r13.xyz = r7.www * r15.xyz;
  r13.xyz = r4.yyy * r17.xxx + r13.xyz;
  r13.xyz = float3(1.500000e-001,1.500000e-001,1.500000e-001) * r13.xyz;
  r13.xyz = r13.xyz * r9.xyz;
  r13.xyz = g_keyColor.www * r13.xyz;
  r9.xyz = r16.yzw;
  } else {
  r5.xzw = -r5.xwz * r4.zzz + g_lightDir.xyz;
  r4.y = dot(r5.xzw, r5.xzw);
  r4.y = rsqrt(r4.y);
  r5.xzw = r5.xzw * r4.yyy;
  r4.y = saturate(dot(r14.xyz, r5.xzw));
  r4.z = r11.z * 8.662509918e-002 + 8.750000000e-001;
  r4.y = r4.y * r11.z + -r11.z;
  r4.y = exp2(r4.y);
  r4.y = r4.z * r4.y;
  r5.xzw = r9.xyz * r4.yyy;
  r13.xyz = g_keyColor.www * r5.xzw;
  }
  r4.y = dot(r14.xyz, g_hemisphereDir.xyz);
  r4.y = r4.y * 5.000000000e-001 + 5.000000000e-001;
  r5.xzw = r4.yyy * r2.xyz + g_bottomColor.xyz;
  r5.xzw = r9.xyz + r5.xzw;
  r5.xzw = r10.xyz * g_exposureMultipliers.yyy + r5.xzw;
  r3.w = r3.w != 4;
  if (r3.w != 0) {
  r3.w = dot(r8.xzw, r14.xyz);
  r3.w = r3.w + r3.w;
  r8.xyz = r14.xyz * -r3.www + r8.xzw;
  r3.w = r4.x * r2.w + g_envmapParams.w;
  r4.x = -r6.w * 1.500000000e+001 + r3.y;
  r4.x = 5.000000000e+000 + r4.x;
  r4.x = max(r4.x, 0.000000000e+000);
  r4.x = min(r3.x, r4.x);
  r4.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r8.xyz, r4.x).xyz;
  r4.xyz = r4.xyz * r3.www;
  r13.xyz = r4.xyz * g_skyEnvmap8BitTexInvScale + r13.xyz;
  }
  if (r11.x == 0) {
  r13.xyz = r13.xyz * r17.xyz;
  }
  r3.w = r11.y ? 0.000000000e+000 : 1.000000000e+000;
  r4.xyz = r13.xyz * r3.www;
  r4.xyz = r5.xzw * r12.xyz + r4.xyz;
  r7.xyz = r7.xyz + r4.xyz;
  r6.xyz = r13.xyz + r6.xyz;
  r3.z = (int)r3.z + 1;
  }
  r1.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r1.y, r1.x);
  r0.x = min(r1.z, r0.x);
  o0.w = min(r1.w, r0.x);
  o0.xyz = r7.xyz * r0.www;
  o1.xyz = r6.xyz * r0.www;
  o1.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float3 g_hemisphereDir;            // Offset:  144 Size:    12
//   float3 g_topColor;                 // Offset:  160 Size:    12
//   float3 g_bottomColor;              // Offset:  176 Size:    12
//   float4 g_keyColor;                 // Offset:  192 Size:    16
//   float2 g_lightAngularRadius;       // Offset:  208 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  224 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  240 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  256 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  272 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  288 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  304 Size:    16
//   int g_drawReference;               // Offset:  320 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  324 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_diffuseOcclusionSampler         sampler      NA          NA    2        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_diffuseOcclusionTexture         texture  float4          2d    2        1
// g_depthTexture                    texture  float4       2dMS2    3        1
// g_gbufferTexture0                 texture  float4       2dMS2    4        1
// g_gbufferTexture1                 texture  float4       2dMS2    5        1
// g_gbufferTexture2                 texture  float4       2dMS2    6        1
// g_gbufferTexture3                 texture  float4       2dMS2    7        1
// g_gbufferTexture4                 texture  float4       2dMS2    8        1
// g_shadowAccumTexture              texture  float4        2dMS    9        1
// g_msaaClassifyTexture             texture   float          2d   10        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} }
dcl_constantbuffer cb0[20], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2dms(2) (float,float,float,float) t3
dcl_resource_texture2dms(2) (float,float,float,float) t4
dcl_resource_texture2dms(2) (float,float,float,float) t5
dcl_resource_texture2dms(2) (float,float,float,float) t6
dcl_resource_texture2dms(2) (float,float,float,float) t7
dcl_resource_texture2dms(2) (float,float,float,float) t8
dcl_resource_texture2dms(0) (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 20
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t10.yzxw
lt r0.z, l(0.000000), r0.z
movc r0.zw, r0.zzzz, l(0,0,2,0.500000), l(0,0,1,1.000000)
add r2.xyz, cb0[10].xyzx, -cb0[11].xyzx
add r2.w, -cb0[16].w, l(1.000000)
ftoi r3.x, cb0[19].x
round_z r3.y, cb0[19].x
iadd r3.x, r3.x, l(-1)
itof r3.x, r3.x
mov r4.w, l(1.000000)
mov r5.y, l(0)
mov r6.xyz, l(0,0,0,0)
mov r7.xyz, l(0,0,0,0)
mov r3.z, l(0)
loop 
  ige r3.w, r3.z, r0.z
  breakc_nz r3.w
  mad r5.zw, icb[r3.z + 0].xxxx, cb0[1].xxxy, r0.xxxy
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r1.xyww, t4.xyzw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyzw, r1.xyww, t5.xyzw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r3.w, r1.xyww, t6.xyzw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r10.xyz, r1.xyww, t7.xyzw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r4.z, r1.xyww, t3.yzxw, r3.z
  mul r3.w, r3.w, l(255.000000)
  round_ne r3.w, r3.w
  ftoi r3.w, r3.w
  ieq r11.xy, r3.wwww, l(4, 2, 0, 0)
  if_nz r11.x
    ldms_indexable(texture2dms)(float,float,float,float) r12.xyzw, r1.xyww, t8.xyzw, r3.z
    mad r13.xyzw, r8.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), l(-2.000000, -2.000000, -2.000000, -2.000000)
    dp2 r6.w, r13.xyxx, r13.xyxx
    mad r14.zw, -r6.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
    max r6.w, r14.z, l(0.000000)
    sqrt r6.w, r6.w
    mul r14.xy, r6.wwww, r13.xyxx
    dp3 r6.w, r14.xywx, r14.xywx
    rsq r6.w, r6.w
    mul r14.xyz, r6.wwww, r14.xywx
    dp2 r6.w, r13.zwzz, r13.zwzz
    mad r15.zw, -r6.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
    max r6.w, r15.z, l(0.000000)
    sqrt r6.w, r6.w
    mul r15.xy, r6.wwww, r13.zwzz
    dp3 r6.w, r15.xywx, r15.xywx
    rsq r6.w, r6.w
    mul r13.xyz, r6.wwww, r15.xywx
    dp2 r6.w, r12.xyxx, l(65280.000000, 255.000000, 0.000000, 0.000000)
    round_ne r6.w, r6.w
    mul r7.w, r6.w, l(0.031250)
    round_z r7.w, r7.w
    mad r15.z, r6.w, l(0.031250), -r7.w
    mul r6.w, r7.w, l(0.015625)
    round_z r15.x, r6.w
    mad r15.y, r7.w, l(0.015625), -r15.x
    mul r15.xyz, r15.xyzx, l(0.032258, 1.015873, 1.032258, 0.000000)
    mul r11.zw, r12.zzzw, l(0.000000, 0.000000, 255.000000, 255.000000)
    round_ne r11.zw, r11.zzzw
    mul r12.xy, r11.zwzz, l(0.062500, 0.062500, 0.000000, 0.000000)
    round_z r12.xy, r12.xyxx
    mad r12.zw, r11.zzzw, l(0.000000, 0.000000, 0.062500, 0.062500), -r12.xxxy
    mul r16.xw, r12.yyyw, l(0.066667, 0.000000, 0.000000, 1.066667)
    mad r11.zw, r12.xxxz, l(0.000000, 0.000000, 0.800000, 12.800001), l(0.000000, 0.000000, 1.000000, 1.000000)
    exp r11.zw, r11.zzzw
    mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 1.443000, 1.443000), l(0.000000, 0.000000, 1.443000, 1.443000)
    mul r12.xyzw, r9.xyzw, r9.xyzw
    mov r17.xyz, r12.wwww
    mov r6.w, l(0)
  else 
    mad r8.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r7.w, r8.xyzx, r8.xyzx
    rsq r7.w, r7.w
    mul r14.xyz, r7.wwww, r8.xyzx
    mul r9.xyzw, r9.xyzw, r9.xyzw
    ieq r7.w, r3.w, l(5)
    if_nz r7.w
      mul r12.xyz, r9.wwww, r9.xyzx
      mov r17.xyz, r9.xyzx
    else 
      ieq r7.w, r3.w, l(1)
      if_nz r7.w
        mul r17.xyz, r9.xyzx, r9.wwww
      else 
        mov r17.xyz, r9.wwww
      endif 
      mov r12.xyz, r9.xyzx
    endif 
    lt r7.w, l(0.000000), r17.x
    and r6.w, r8.w, r7.w
    mad r7.w, r6.w, l(12.000000), l(1.000000)
    exp r7.w, r7.w
    mad r5.x, r7.w, l(1.443000), l(1.443000)
    mov r16.xw, l(0,0,0,0)
    mov r15.xyz, l(0,0,0,0)
    mov r13.xyz, l(0,0,0,0)
    mov r11.zw, r5.xxxy
  endif 
  mad r5.xz, r5.zzwz, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
  mul r4.xy, r5.xzxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r8.x, r4.xyzw, cb0[2].xyzw
  dp4 r8.y, r4.xyzw, cb0[3].xyzw
  dp4 r8.z, r4.xyzw, cb0[4].xyzw
  dp4 r4.x, r4.xyzw, cb0[5].xyzw
  div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
  mul r5.xzw, r4.xxxx, r8.xxzy
  dp3 r4.y, r5.xzwx, r5.xzwx
  rsq r4.z, r4.y
  mul r8.xzw, r4.zzzz, r5.xxwz
  ldms_indexable(texture2dms)(float,float,float,float) r7.w, r1.xyzw, t9.yzwx, r3.z
  mad r4.x, r8.y, r4.x, cb0[0].y
  mul r9.xy, r4.xxxx, cb0[8].xzxx
  mad r9.xy, r9.xyxx, cb0[6].wwww, r5.xzxx
  mad r9.xy, r9.xyxx, cb0[6].zzzz, cb0[6].xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r4.x, r9.xyxx, t0.xyzw, s0, l(0.000000)
  add_sat r4.x, r4.x, cb0[7].x
  log r4.x, r4.x
  mul r4.x, r4.x, cb0[7].y
  exp r4.x, r4.x
  sqrt r4.y, r4.y
  add r4.y, r4.y, -cb0[7].z
  mul_sat r4.y, r4.y, cb0[7].w
  mul r4.y, r4.y, r4.y
  add r8.y, -r4.x, l(1.000000)
  mad r4.x, r4.y, r8.y, r4.x
  mul r4.x, r4.x, r7.w
  dp3 r4.y, r14.xyzx, cb0[8].xyzx
  mov_sat r7.w, r4.y
  mul r9.xyz, r7.wwww, cb0[12].xyzx
  mul r9.xyz, r4.xxxx, r9.xyzx
  if_nz r11.x
    mov_sat r16.w, r16.w
    mad r4.y, r16.w, l(0.500000), r4.y
    mad r7.w, r16.w, l(0.500000), l(1.000000)
    div_sat r4.y, r4.y, r7.w
    mul r16.yzw, r4.yyyy, cb0[12].xxyz
    mul r16.yzw, r4.xxxx, r16.yyzw
    mad r18.xyz, -r14.xyzx, r16.xxxx, r13.xyzx
    dp3 r4.y, r18.xyzx, r18.xyzx
    rsq r4.y, r4.y
    mul r18.xyz, r4.yyyy, r18.xyzx
    mad r19.xyz, -r5.xwzx, r4.zzzz, cb0[8].xyzx
    dp3 r4.y, r19.xyzx, r19.xyzx
    rsq r4.y, r4.y
    mul r19.xyz, r4.yyyy, r19.xyzx
    dp3 r4.y, r13.xyzx, r19.xyzx
    mad r4.y, -r4.y, r4.y, l(1.000000)
    max r4.y, r4.y, l(0.000000)
    sqrt r4.y, r4.y
    log r4.y, r4.y
    mul r4.y, r4.y, r11.z
    exp r4.y, r4.y
    dp3 r7.w, r18.xyzx, r19.xyzx
    mad r7.w, -r7.w, r7.w, l(1.000000)
    max r7.w, r7.w, l(0.000000)
    sqrt r7.w, r7.w
    log r7.w, r7.w
    mul r7.w, r7.w, r11.w
    exp r7.w, r7.w
    mul r13.xyz, r15.xyzx, r7.wwww
    mad r13.xyz, r4.yyyy, r17.xxxx, r13.xyzx
    mul r13.xyz, r13.xyzx, l(0.150000, 0.150000, 0.150000, 0.000000)
    mul r13.xyz, r9.xyzx, r13.xyzx
    mul r13.xyz, r13.xyzx, cb0[12].wwww
    mov r9.xyz, r16.yzwy
  else 
    mad r5.xzw, -r5.xxwz, r4.zzzz, cb0[8].xxyz
    dp3 r4.y, r5.xzwx, r5.xzwx
    rsq r4.y, r4.y
    mul r5.xzw, r4.yyyy, r5.xxzw
    dp3_sat r4.y, r14.xyzx, r5.xzwx
    mad r4.z, r11.z, l(0.086625), l(0.875000)
    mad r4.y, r4.y, r11.z, -r11.z
    exp r4.y, r4.y
    mul r4.y, r4.y, r4.z
    mul r5.xzw, r4.yyyy, r9.xxyz
    mul r13.xyz, r5.xzwx, cb0[12].wwww
  endif 
  dp3 r4.y, r14.xyzx, cb0[9].xyzx
  mad r4.y, r4.y, l(0.500000), l(0.500000)
  mad r5.xzw, r4.yyyy, r2.xxyz, cb0[11].xxyz
  add r5.xzw, r5.xxzw, r9.xxyz
  mad r5.xzw, r10.xxyz, cb0[18].yyyy, r5.xxzw
  ine r3.w, r3.w, l(4)
  if_nz r3.w
    dp3 r3.w, r8.xzwx, r14.xyzx
    add r3.w, r3.w, r3.w
    mad r8.xyz, r14.xyzx, -r3.wwww, r8.xzwx
    mad r3.w, r4.x, r2.w, cb0[16].w
    mad r4.x, -r6.w, l(15.000000), r3.y
    add r4.x, r4.x, l(5.000000)
    max r4.x, r4.x, l(0.000000)
    min r4.x, r3.x, r4.x
    sample_l_indexable(texturecube)(float,float,float,float) r4.xyz, r8.xyzx, t1.xyzw, s1, r4.x
    mul r4.xyz, r3.wwww, r4.xyzx
    mad r13.xyz, r4.xyzx, cb0[17].xxxx, r13.xyzx
  endif 
  if_z r11.x
    mul r13.xyz, r17.xyzx, r13.xyzx
  endif 
  movc r3.w, r11.y, l(0), l(1.000000)
  mul r4.xyz, r3.wwww, r13.xyzx
  mad r4.xyz, r5.xzwx, r12.xyzx, r4.xyzx
  add r7.xyz, r4.xyzx, r7.xyzx
  add r6.xyz, r6.xyzx, r13.xyzx
  iadd r3.z, r3.z, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s2.x
min r0.x, r1.y, r1.x
min r0.x, r1.z, r0.x
min o0.w, r1.w, r0.x
mul o0.xyz, r0.wwww, r7.xyzx
mul o1.xyz, r0.wwww, r6.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 216 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
