//Fire + ring decals
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
  float4 exposureMultipliers : packoffset(c23);
  float4 fogParams : packoffset(c24);
  float4 fogForwardScatteringParamsGradientScaleFogEnable : packoffset(c25);
  float4 fogForwardScatteringColorPresence : packoffset(c26);
  float4 fogCoefficients : packoffset(c27);
  float4 fogColorCoefficients : packoffset(c28);
  float4 fogColor : packoffset(c29);
  float4 fogStartDistance : packoffset(c30);
  float4 fogHeightFogCoefficients : packoffset(c31);
  float4 fogMiscParam : packoffset(c32);
  float2 fogEnabledMode : packoffset(c33);
  float2 vc_pad10_ : packoffset(c33.z);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  float4 v7 : TEXCOORD7,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7)
{
  float4 r0;
  uint4 bitmask;
  
//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;

//...Original Matrix
a1 = crViewProjMatrix._m00_m10_m20_m30;
a2 = crViewProjMatrix._m01_m11_m21_m31;
a3 = crViewProjMatrix._m02_m12_m22_m32;
a4 = crViewProjMatrix._m03_m13_m23_m33;

//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));

//...Inverse Matrix Elemets
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);

b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);

b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);

b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);

b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);

b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);

b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);

b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);

b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;

//End Inverse
  
  
  
  r0.xyz = -cameraPos.xyz + v0.xyz;
  r0.w = 1.000000000e+000;

float4 r10;
  
  r10.x = dot(r0.xyzw, crViewProjMatrix._m00_m10_m20_m30);
  r10.y = dot(r0.xyzw, crViewProjMatrix._m01_m11_m21_m31);
  r10.z = dot(r0.xyzw, crViewProjMatrix._m02_m12_m22_m32);
  r10.w = dot(r0.xyzw, crViewProjMatrix._m03_m13_m23_m33);

float4 r20;
r20.xyzw = r10.xyzw;

float4 stereo = StereoParams.Load(0);
r20.x += stereo.x * (r20.w - stereo.y);   

//BACKTRANSFORM to r11 (a shifted r0)
float4 r11;

  r11.x = dot(r20.xyzw, b1.xyzw);
  r11.y = dot(r20.xyzw, b2.xyzw);
  r11.z = dot(r20.xyzw, b3.xyzw);
  r11.w = dot(r20.xyzw, b4.xyzw);

float4 r25;
r25.xyz = r11.xyz + cameraPos.xyz;


o0.xyzw = r10.xyzw;	//unshifted

  o1.xyzw = v1.xyzw;
  o2.xyzw = v2.xyzw;
  o3.xyzw = v3.xyzw;
  o4.xyzw = v4.xyzw;
  o5.xyzw = v5.xyzw;
  o6.xyzw = v6.xyzw;
  o7.xyzw = v7.xyzw;
 
  o8.xyz = r25.xyz; //v0.xyz;   //SHifted
  o8.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer viewConstants
// {
//
//   float1 time;                       // Offset:    0 Size:     4 [unused]
//   float3 vc_pad0_;                   // Offset:    4 Size:    12 [unused]
//   float4 screenSize;                 // Offset:   16 Size:    16 [unused]
//   float3 debugNonFiniteColor;        // Offset:   32 Size:    12 [unused]
//   float1 vc_pad2_;                   // Offset:   44 Size:     4 [unused]
//   float4x4 viewMatrix;               // Offset:   48 Size:    64 [unused]
//   float4x4 projMatrix;               // Offset:  112 Size:    64 [unused]
//   float4x4 viewProjMatrix;           // Offset:  176 Size:    64 [unused]
//   float4x4 crViewProjMatrix;         // Offset:  240 Size:    64
//   float4 projectionKxKyKzKw;         // Offset:  304 Size:    16 [unused]
//   float3 cameraPos;                  // Offset:  320 Size:    12
//   float1 vc_pad8_;                   // Offset:  332 Size:     4 [unused]
//   float3 transparentStartAndSlopeAndClamp;// Offset:  336 Size:    12 [unused]
//   float1 vc_pad9_;                   // Offset:  348 Size:     4 [unused]
//   float4 transparentCurve;           // Offset:  352 Size:    16 [unused]
//   float4 exposureMultipliers;        // Offset:  368 Size:    16 [unused]
//   float4 fogParams;                  // Offset:  384 Size:    16 [unused]
//   float4 fogForwardScatteringParamsGradientScaleFogEnable;// Offset:  400 Size:    16 [unused]
//   float4 fogForwardScatteringColorPresence;// Offset:  416 Size:    16 [unused]
//   float4 fogCoefficients;            // Offset:  432 Size:    16 [unused]
//   float4 fogColorCoefficients;       // Offset:  448 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  464 Size:    16 [unused]
//   float4 fogStartDistance;           // Offset:  480 Size:    16 [unused]
//   float4 fogHeightFogCoefficients;   // Offset:  496 Size:    16 [unused]
//   float4 fogMiscParam;               // Offset:  512 Size:    16 [unused]
//   float2 fogEnabledMode;             // Offset:  528 Size:     8 [unused]
//   float2 vc_pad10_;                  // Offset:  536 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// viewConstants                     cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[21], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 1
add r0.xyz, v0.xyzx, -cb2[20].xyzx
mov r0.w, l(1.000000)
dp4 o0.x, r0.xyzw, cb2[15].xyzw
dp4 o0.y, r0.xyzw, cb2[16].xyzw
dp4 o0.z, r0.xyzw, cb2[17].xyzw
dp4 o0.w, r0.xyzw, cb2[18].xyzw
mov o1.xyzw, v1.xyzw
mov o2.xyzw, v2.xyzw
mov o3.xyzw, v3.xyzw
mov o4.xyzw, v4.xyzw
mov o5.xyzw, v5.xyzw
mov o6.xyzw, v6.xyzw
mov o7.xyzw, v7.xyzw
mov o8.xyz, v0.xyzx
mov o8.w, l(0)
ret 
// Approximately 16 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 