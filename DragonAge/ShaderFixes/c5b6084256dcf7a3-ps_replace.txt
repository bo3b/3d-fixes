//Decals
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
  float4 exposureMultipliers : packoffset(c23);
  float4 fogParams : packoffset(c24);
  float4 fogForwardScatteringParamsGradientScaleFogEnable : packoffset(c25);
  float4 fogForwardScatteringColorPresence : packoffset(c26);
  float4 fogCoefficients : packoffset(c27);
  float4 fogColorCoefficients : packoffset(c28);
  float4 fogColor : packoffset(c29);
  float4 fogStartDistance : packoffset(c30);
  float4 fogHeightFogCoefficients : packoffset(c31);
  float4 fogMiscParam : packoffset(c32);
  float2 fogEnabledMode : packoffset(c33);
  float2 vc_pad10_ : packoffset(c33.z);
}

cbuffer externalConstants : register(b1)
{
  float4 external_DistortionSpeed_Tile : packoffset(c0);
  float external_g_emitterTime : packoffset(c1);
  float3 vc_pad1 : packoffset(c1.y);
  float4 external_viewMatrix1 : packoffset(c2);
  float4 external_viewMatrix2 : packoffset(c3);
  float4 external_viewMatrix3 : packoffset(c4);
  float4 external_viewMatrix4 : packoffset(c5);
  float external_UVDistort_Power : packoffset(c6);
  float3 vc_pad6 : packoffset(c6.y);
  float4 external_TextureTile_Offset : packoffset(c7);
  float3 external_Diff_01_RGB_Switch : packoffset(c8);
  float1 vc_pad8 : packoffset(c8.w);
  float4 external_ADepthTB_AAngle : packoffset(c9);
  float3 external_Mask_RGB_Switch : packoffset(c10);
  float1 vc_pad10 : packoffset(c10.w);
}
SamplerState sampler0_s : register(s0);
SamplerState sampler1_s : register(s1);
SamplerState sampler2_s : register(s2);
Texture2D<float4> texture_depthBufferTexture : register(t1);
Texture2D<float4> texture_normalBufferTexture : register(t2);
Texture2D<float4> texture_Diff_01 : register(t3);
Texture2D<float4> texture_DistortionClouds : register(t4);
Texture2D<float4> texture_Mask : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.xyz = external_viewMatrix2.xyz * v8.yyy;
  r0.xyz = external_viewMatrix1.xyz * v8.xxx + r0.xyz;
  r0.xyz = external_viewMatrix3.xyz * v8.zzz + r0.xyz;
  r0.xyz = external_viewMatrix4.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz / -r0.zzz;
  r1.xy = screenSize.zw * v0.xy;
  r0.w = texture_depthBufferTexture.Sample(sampler0_s, r1.xy).x;
  r1.xyz = texture_normalBufferTexture.Sample(sampler0_s, r1.xy).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  
float4 r26;
r26.xyz = r0.xyz * r0.www;
r26.w = 1.0;

float4 stereo = StereoParams.Load(0);
r26.x -= stereo.x * (-r26.z - stereo.y)/projMatrix._m00; 

  r0.xyz = r26.xyz + -external_viewMatrix4.xyz; // r0.xyz = r0.xyz * r0.www + -external_viewMatrix4.xyz;
 
  r2.x = dot(external_viewMatrix1.xyz, r0.xyz);
  r2.y = dot(external_viewMatrix2.xyz, r0.xyz);
  r2.z = dot(external_viewMatrix3.xyz, r0.xyz);
  r2.w = 1.000000000e+000;
  r0.x = dot(r2.xyzw, v2.xyzw);
  r0.y = dot(r2.xyzw, v3.xyzw);
  r0.z = dot(r2.xyzw, v4.xyzw);
  r0.w = dot(r2.xyzw, v5.xyzw);
  r0.xyz = r0.xyz / r0.www;
  r2.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) + -abs(-r0.xyz);
  r0.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r0.xyz;
  r2.xyz = r2.xyz < float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r0.w = (int)r2.y | (int)r2.x;
  r0.w = (int)r2.z | (int)r0.w;
  if (r0.w != 0) discard;
  r2.xy = external_DistortionSpeed_Tile.zw * r0.xy;
  r2.xy = external_DistortionSpeed_Tile.xy * external_g_emitterTime + r2.xy;
  r2.xy = v1.xy + r2.xy;
  r2.xy = texture_DistortionClouds.Sample(sampler2_s, r2.xy).xy;
  r2.zw = r0.xy * external_TextureTile_Offset.xy + -external_TextureTile_Offset.zw;
  r2.xy = r2.xy * external_UVDistort_Power + r2.zw;
  r2.xyz = texture_Diff_01.Sample(sampler1_s, r2.xy).xyz;
  r0.w = saturate(dot(r2.xyz, external_Diff_01_RGB_Switch.xyz));
  r1.w = r0.w * v7.w + -v7.z;
  r2.xyz = v6.xyz * r0.www;
  r0.w = log2(r1.w);
  r0.w = v7.y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = v7.x * r0.w;
  r3.xyz = texture_Mask.Sample(sampler1_s, r0.xy).xyz;
  r0.x = saturate(dot(r3.xyz, external_Mask_RGB_Switch.xyz));
  r0.x = r0.x * r0.w;
  r0.y = 1.000000000e+000 + -r0.z;
  r0.z = log2(r0.z);
  r0.z = external_ADepthTB_AAngle.x * r0.z;
  r0.z = exp2(r0.z);
  r0.y = log2(r0.y);
  r0.y = external_ADepthTB_AAngle.y * r0.y;
  r0.y = exp2(r0.y);
  r0.y = r0.z + r0.y;
  r0.y = 1.000000000e+000 + -r0.y;
  r0.x = r0.y * r0.x;
  r0.yzw = r0.yyy * r2.xyz;
  r1.w = dot(v4.xyz, v4.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = v4.xyz * r1.www;
  r1.x = dot(r1.xyz, r2.xyz);
  r1.x = external_ADepthTB_AAngle.z + -abs(-r1.x);
  r1.y = external_ADepthTB_AAngle.w + -external_ADepthTB_AAngle.z;
  r1.x = r1.x / r1.y;
  r1.x = saturate(1.000000000e+000 + r1.x);
  r0.x = r1.x * r0.x;
  o0.xyz = r0.yzw * r0.xxx;
  o0.w = r0.x;
  return;
}