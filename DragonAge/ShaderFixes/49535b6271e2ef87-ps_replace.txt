//Magic decal
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
  float4 exposureMultipliers : packoffset(c23);
  float4 fogParams : packoffset(c24);
  float4 fogForwardScatteringParamsGradientScaleFogEnable : packoffset(c25);
  float4 fogForwardScatteringColorPresence : packoffset(c26);
  float4 fogCoefficients : packoffset(c27);
  float4 fogColorCoefficients : packoffset(c28);
  float4 fogColor : packoffset(c29);
  float4 fogStartDistance : packoffset(c30);
  float4 fogHeightFogCoefficients : packoffset(c31);
  float4 fogMiscParam : packoffset(c32);
  float2 fogEnabledMode : packoffset(c33);
  float2 vc_pad10_ : packoffset(c33.z);
}

cbuffer externalConstants : register(b1)
{
  float3 external_PerAxisAlpha_XYZ : packoffset(c0);
  float1 vc_pad0 : packoffset(c0.w);
  float4 external_viewMatrix1 : packoffset(c1);
  float4 external_viewMatrix2 : packoffset(c2);
  float4 external_viewMatrix3 : packoffset(c3);
  float4 external_viewMatrix4 : packoffset(c4);
  float3 external_Mask_RGB_Switch : packoffset(c5);
  float1 vc_pad5 : packoffset(c5.w);
  float4 external_UVDistortPower_Speed_Tile : packoffset(c6);
  float external_g_emitterTime : packoffset(c7);
  float3 vc_pad7 : packoffset(c7.y);
  float3 external_Diff_01_RGB_Switch : packoffset(c8);
  float1 vc_pad8 : packoffset(c8.w);
  float4 external_ADepthTB_AAngle : packoffset(c9);
}
SamplerState sampler0_s : register(s0);
SamplerState sampler1_s : register(s1);
SamplerState sampler2_s : register(s2);
Texture2D<float4> texture_depthBufferTexture : register(t1);
Texture2D<float4> texture_normalBufferTexture : register(t2);
Texture2D<float4> texture_Mask : register(t3);
Texture2D<float4> texture_Diff_01 : register(t4);
Texture2D<float4> texture_DistortionClouds : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xyz = external_viewMatrix2.xyz * v8.yyy;
  r0.xyz = external_viewMatrix1.xyz * v8.xxx + r0.xyz;
  r0.xyz = external_viewMatrix3.xyz * v8.zzz + r0.xyz;
  r0.xyz = external_viewMatrix4.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz / -r0.zzz;
  r1.xy = screenSize.zw * v0.xy;
  r0.w = texture_depthBufferTexture.Sample(sampler0_s, r1.xy).x;
  r1.xyz = texture_normalBufferTexture.Sample(sampler0_s, r1.xy).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  
float4 r26;
r26.xyz = r0.xyz * r0.www;
r26.w = 1.0;

float4 stereo = StereoParams.Load(0);
r26.x -= stereo.x * (-r26.z - stereo.y)/projMatrix._m00;
r0.xyz = r26.xyz + -external_viewMatrix4.xyz;
  
  // r0.xyz = r0.xyz * r0.www + -external_viewMatrix4.xyz;
  r2.x = dot(external_viewMatrix1.xyz, r0.xyz);
  r2.y = dot(external_viewMatrix2.xyz, r0.xyz);
  r2.z = dot(external_viewMatrix3.xyz, r0.xyz);
  r2.w = 1.000000000e+000;
  r0.z = dot(r2.xyzw, v1.xyzw);
  r0.y = dot(r2.xyzw, v2.xyzw);
  r0.x = dot(r2.xyzw, v3.xyzw);
  r0.w = dot(r2.xyzw, v4.xyzw);
  r0.xyz = r0.xyz / r0.www;
  r2.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) + -abs(-r0.zyx);
  r2.xyz = r2.xyz < float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r0.w = (int)r2.y | (int)r2.x;
  r0.w = (int)r2.z | (int)r0.w;
  if (r0.w != 0) discard;
  r2.xyz = max(abs(r0.yxy), abs(r0.zzx));
  r2.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) / r2.xyz;
  r3.xyz = min(abs(r0.yxy), abs(r0.zzx));
  r2.xyz = r3.xyz * r2.xyz;
  r3.xyz = r2.xyz * r2.xyz;
  r4.xyz = r3.xyz * float3(2.083510e-002,2.083510e-002,2.083510e-002) + float3(-8.513300e-002,-8.513300e-002,-8.513300e-002);
  r4.xyz = r3.xyz * r4.xyz + float3(1.801410e-001,1.801410e-001,1.801410e-001);
  r4.xyz = r3.xyz * r4.xyz + float3(-3.302995e-001,-3.302995e-001,-3.302995e-001);
  r3.xyz = r3.xyz * r4.xyz + float3(9.998660e-001,9.998660e-001,9.998660e-001);
  r4.xyz = r3.xyz * r2.xyz;
  r4.xyz = r4.xyz * float3(-2.000000e+000,-2.000000e+000,-2.000000e+000) + float3(1.570796e+000,1.570796e+000,1.570796e+000);
  r5.xyz = abs(r0.yxy) < abs(r0.zzx);
  r4.xyz = r5.xyz ? r4.xyz : 0;
  r2.xyz = r2.xyz * r3.xyz + r4.xyz;
  r3.xyz = r0.yxy < -r0.yxy;
  r3.xyz = r3.xyz ? float3(-3.141593e+000,-3.141593e+000,-3.141593e+000) : 0;
  r2.xyz = r3.xyz + r2.xyz;
  r3.xyz = min(r0.yxy, r0.zzx);
  r3.xyz = r3.xyz < -r3.xyz;
  r4.xyz = max(r0.yxy, r0.zzx);
  r4.xyz = r4.xyz >= -r4.xyz;
  r3.xyz = r3.xyz ? r4.xyz : 0;
  r2.xyz = r3.xyz ? -r2.xyz : r2.xyz;
  r2.yzw = external_UVDistortPower_Speed_Tile.www * r2.yxz;
  r0.w = dot(r0.yz, r0.yz);
  r0.w = sqrt(r0.w);
  r2.x = external_g_emitterTime * external_UVDistortPower_Speed_Tile.y + r0.w;
  r3.x = external_UVDistortPower_Speed_Tile.z;
  r3.y = 1.591549516e-001;
  r3.zw = r2.xz * r3.xy + v5.xy;
  r4.xyz = texture_DistortionClouds.Sample(sampler2_s, r3.zw).xyw;
  r4.x = r4.x * r4.z;
  r3.zw = r4.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r3.zw = r3.zw * r0.ww;
  r4.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r0.xyz;
  r3.zw = r3.zw * external_UVDistortPower_Speed_Tile.xx + r4.zy;
  r5.xyz = texture_Diff_01.Sample(sampler1_s, r3.zw).xyz;
  r0.w = saturate(dot(r5.xyz, external_Diff_01_RGB_Switch.xyz));
  r0.w = r0.w * v6.w + -v6.z;
  r0.w = log2(r0.w);
  r0.w = v6.y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = v6.x * r0.w;
  r5.xyz = texture_Mask.Sample(sampler1_s, r4.zy).xyz;
  r1.w = saturate(dot(r5.xyz, external_Mask_RGB_Switch.xyz));
  r0.w = r1.w * r0.w;
  r5.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyz;
  r5.xyz = log2(r5.xyz);
  r5.xyz = external_ADepthTB_AAngle.yyy * r5.xyz;
  r5.xyz = exp2(r5.xyz);
  r6.xyz = log2(r4.xyz);
  r6.xyz = external_ADepthTB_AAngle.xxx * r6.xyz;
  r6.xyz = exp2(r6.xyz);
  r5.xyz = r6.xyz + r5.xyz;
  r5.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r5.xyz;
  r1.w = dot(v3.xyz, v3.xyz);
  r1.w = rsqrt(r1.w);
  r6.xyz = v3.xyz * r1.www;
  r1.w = dot(r1.xyz, r6.xyz);
  r1.w = external_ADepthTB_AAngle.z + -abs(-r1.w);
  r3.z = external_ADepthTB_AAngle.w + -external_ADepthTB_AAngle.z;
  r1.w = r1.w / r3.z;
  r1.w = saturate(1.000000000e+000 + r1.w);
  r1.w = r5.x * r1.w;
  r0.w = r1.w * r0.w;
  r0.w = external_PerAxisAlpha_XYZ.z * r0.w;
  r0.z = dot(r0.xz, r0.xz);
  r0.x = dot(r0.xy, r0.xy);
  r0.xy = sqrt(r0.xz);
  r2.x = external_g_emitterTime * external_UVDistortPower_Speed_Tile.y + r0.y;
  r2.xy = r2.xy * r3.xy + v5.xy;
  r6.xyz = texture_DistortionClouds.Sample(sampler2_s, r2.xy).xyw;
  r6.x = r6.x * r6.z;
  r2.xy = r6.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.yz = r2.xy * r0.yy;
  r0.yz = r0.yz * external_UVDistortPower_Speed_Tile.xx + r4.zx;
  r6.xyz = texture_Diff_01.Sample(sampler1_s, r0.yz).xyz;
  r0.y = saturate(dot(r6.xyz, external_Diff_01_RGB_Switch.xyz));
  r0.y = r0.y * v6.w + -v6.z;
  r0.y = log2(r0.y);
  r0.y = v6.y * r0.y;
  r0.y = exp2(r0.y);
  r0.y = v6.x * r0.y;
  r6.xyz = texture_Mask.Sample(sampler1_s, r4.zx).xyz;
  r0.z = saturate(dot(r6.xyz, external_Mask_RGB_Switch.xyz));
  r0.y = r0.z * r0.y;
  r0.z = dot(v2.xyz, v2.xyz);
  r0.z = rsqrt(r0.z);
  r6.xyz = v2.xyz * r0.zzz;
  r0.z = dot(r1.xyz, r6.xyz);
  r0.z = external_ADepthTB_AAngle.z + -abs(-r0.z);
  r0.z = r0.z / r3.z;
  r0.z = saturate(1.000000000e+000 + r0.z);
  r0.z = r5.y * r0.z;
  r0.y = r0.y * r0.z;
  r0.y = r0.y * external_PerAxisAlpha_XYZ.y + r0.w;
  r2.z = external_g_emitterTime * external_UVDistortPower_Speed_Tile.y + r0.x;
  r0.zw = r2.zw * r3.xy + v5.xy;
  r2.xyz = texture_DistortionClouds.Sample(sampler2_s, r0.zw).xyw;
  r2.x = r2.x * r2.z;
  r0.zw = r2.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.xz = r0.xx * r0.zw;
  r0.xz = r0.xz * external_UVDistortPower_Speed_Tile.xx + r4.xy;
  r2.xyz = texture_Mask.Sample(sampler1_s, r4.xy).xyz;
  r0.w = saturate(dot(r2.xyz, external_Mask_RGB_Switch.xyz));
  r2.xyz = texture_Diff_01.Sample(sampler1_s, r0.xz).xyz;
  r0.x = saturate(dot(r2.xyz, external_Diff_01_RGB_Switch.xyz));
  r0.x = r0.x * v6.w + -v6.z;
  r0.x = log2(r0.x);
  r0.x = v6.y * r0.x;
  r0.x = exp2(r0.x);
  r0.x = v6.x * r0.x;
  r0.x = r0.w * r0.x;
  r0.z = dot(v1.xyz, v1.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = v1.xyz * r0.zzz;
  r0.z = dot(r1.xyz, r2.xyz);
  r0.z = external_ADepthTB_AAngle.z + -abs(-r0.z);
  r0.z = r0.z / r3.z;
  r0.z = saturate(1.000000000e+000 + r0.z);
  r0.z = r5.z * r0.z;
  r0.x = r0.x * r0.z;
  r0.x = saturate(r0.x * external_PerAxisAlpha_XYZ.x + r0.y);
  o0.xyz = v7.xyz * r0.xxx;
  o0.w = r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer viewConstants
// {
//
//   float1 time;                       // Offset:    0 Size:     4 [unused]
//   float3 vc_pad0_;                   // Offset:    4 Size:    12 [unused]
//   float4 screenSize;                 // Offset:   16 Size:    16
//   float3 debugNonFiniteColor;        // Offset:   32 Size:    12 [unused]
//   float1 vc_pad2_;                   // Offset:   44 Size:     4 [unused]
//   float4x4 viewMatrix;               // Offset:   48 Size:    64 [unused]
//   float4x4 projMatrix;               // Offset:  112 Size:    64 [unused]
//   float4x4 viewProjMatrix;           // Offset:  176 Size:    64 [unused]
//   float4x4 crViewProjMatrix;         // Offset:  240 Size:    64 [unused]
//   float4 projectionKxKyKzKw;         // Offset:  304 Size:    16 [unused]
//   float3 cameraPos;                  // Offset:  320 Size:    12 [unused]
//   float1 vc_pad8_;                   // Offset:  332 Size:     4 [unused]
//   float3 transparentStartAndSlopeAndClamp;// Offset:  336 Size:    12 [unused]
//   float1 vc_pad9_;                   // Offset:  348 Size:     4 [unused]
//   float4 transparentCurve;           // Offset:  352 Size:    16 [unused]
//   float4 exposureMultipliers;        // Offset:  368 Size:    16 [unused]
//   float4 fogParams;                  // Offset:  384 Size:    16 [unused]
//   float4 fogForwardScatteringParamsGradientScaleFogEnable;// Offset:  400 Size:    16 [unused]
//   float4 fogForwardScatteringColorPresence;// Offset:  416 Size:    16 [unused]
//   float4 fogCoefficients;            // Offset:  432 Size:    16 [unused]
//   float4 fogColorCoefficients;       // Offset:  448 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  464 Size:    16 [unused]
//   float4 fogStartDistance;           // Offset:  480 Size:    16 [unused]
//   float4 fogHeightFogCoefficients;   // Offset:  496 Size:    16 [unused]
//   float4 fogMiscParam;               // Offset:  512 Size:    16 [unused]
//   float2 fogEnabledMode;             // Offset:  528 Size:     8 [unused]
//   float2 vc_pad10_;                  // Offset:  536 Size:     8 [unused]
//
// }
//
// cbuffer externalConstants
// {
//
//   float3 external_PerAxisAlpha_XYZ;  // Offset:    0 Size:    12
//   float1 vc_pad0;                    // Offset:   12 Size:     4 [unused]
//   float4 external_viewMatrix1;       // Offset:   16 Size:    16
//   float4 external_viewMatrix2;       // Offset:   32 Size:    16
//   float4 external_viewMatrix3;       // Offset:   48 Size:    16
//   float4 external_viewMatrix4;       // Offset:   64 Size:    16
//   float3 external_Mask_RGB_Switch;   // Offset:   80 Size:    12
//   float1 vc_pad5;                    // Offset:   92 Size:     4 [unused]
//   float4 external_UVDistortPower_Speed_Tile;// Offset:   96 Size:    16
//   float external_g_emitterTime;      // Offset:  112 Size:     4
//   float3 vc_pad7;                    // Offset:  116 Size:    12 [unused]
//   float3 external_Diff_01_RGB_Switch;// Offset:  128 Size:    12
//   float1 vc_pad8;                    // Offset:  140 Size:     4 [unused]
//   float4 external_ADepthTB_AAngle;   // Offset:  144 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler0                          sampler      NA          NA    0        1
// sampler1                          sampler      NA          NA    1        1
// sampler2                          sampler      NA          NA    2        1
// texture_depthBufferTexture        texture  float4          2d    1        1
// texture_normalBufferTexture       texture  float4          2d    2        1
// texture_Mask                      texture  float4          2d    3        1
// texture_Diff_01                   texture  float4          2d    4        1
// texture_DistortionClouds          texture  float4          2d    5        1
// externalConstants                 cbuffer      NA          NA    1        1
// viewConstants                     cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyz 
// TEXCOORD                 7   xyzw        8     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_constantbuffer cb1[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_output o0.xyzw
dcl_temps 7
mul r0.xyz, v8.yyyy, cb1[2].xyzx
mad r0.xyz, cb1[1].xyzx, v8.xxxx, r0.xyzx
mad r0.xyz, cb1[3].xyzx, v8.zzzz, r0.xyzx
add r0.xyz, r0.xyzx, cb1[4].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
div r0.xyz, r0.xyzx, -r0.zzzz
mul r1.xy, v0.xyxx, cb2[1].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t1.yzwx, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t2.xyzw, s0
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r0.wwww, -cb1[4].xyzx
dp3 r2.x, cb1[1].xyzx, r0.xyzx
dp3 r2.y, cb1[2].xyzx, r0.xyzx
dp3 r2.z, cb1[3].xyzx, r0.xyzx
mov r2.w, l(1.000000)
dp4 r0.z, r2.xyzw, v1.xyzw
dp4 r0.y, r2.xyzw, v2.xyzw
dp4 r0.x, r2.xyzw, v3.xyzw
dp4 r0.w, r2.xyzw, v4.xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r2.xyz, -|r0.zyxz|, l(0.500000, 0.500000, 0.500000, 0.000000)
lt r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r2.y, r2.x
or r0.w, r2.z, r0.w
discard_nz r0.w
max r2.xyz, |r0.yxyy|, |r0.zzxz|
div r2.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), r2.xyzx
min r3.xyz, |r0.yxyy|, |r0.zzxz|
mul r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, r2.xyzx, r2.xyzx
mad r4.xyz, r3.xyzx, l(0.020835, 0.020835, 0.020835, 0.000000), l(-0.085133, -0.085133, -0.085133, 0.000000)
mad r4.xyz, r3.xyzx, r4.xyzx, l(0.180141, 0.180141, 0.180141, 0.000000)
mad r4.xyz, r3.xyzx, r4.xyzx, l(-0.330299, -0.330299, -0.330299, 0.000000)
mad r3.xyz, r3.xyzx, r4.xyzx, l(0.999866, 0.999866, 0.999866, 0.000000)
mul r4.xyz, r2.xyzx, r3.xyzx
mad r4.xyz, r4.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000), l(1.570796, 1.570796, 1.570796, 0.000000)
lt r5.xyz, |r0.yxyy|, |r0.zzxz|
and r4.xyz, r4.xyzx, r5.xyzx
mad r2.xyz, r2.xyzx, r3.xyzx, r4.xyzx
lt r3.xyz, r0.yxyy, -r0.yxyy
and r3.xyz, r3.xyzx, l(0xc0490fdb, 0xc0490fdb, 0xc0490fdb, 0)
add r2.xyz, r2.xyzx, r3.xyzx
min r3.xyz, r0.yxyy, r0.zzxz
lt r3.xyz, r3.xyzx, -r3.xyzx
max r4.xyz, r0.yxyy, r0.zzxz
ge r4.xyz, r4.xyzx, -r4.xyzx
and r3.xyz, r3.xyzx, r4.xyzx
movc r2.xyz, r3.xyzx, -r2.xyzx, r2.xyzx
mul r2.yzw, r2.yyxz, cb1[6].wwww
dp2 r0.w, r0.yzyy, r0.yzyy
sqrt r0.w, r0.w
mad r2.x, cb1[7].x, cb1[6].y, r0.w
mov r3.x, cb1[6].z
mov r3.y, l(0.159155)
mad r3.zw, r2.xxxz, r3.xxxy, v5.xxxy
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r3.zwzz, t5.xywz, s2
mul r4.x, r4.z, r4.x
mad r3.zw, r4.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r3.zw, r0.wwww, r3.zzzw
add r4.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mad r3.zw, r3.zzzw, cb1[6].xxxx, r4.zzzy
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r3.zwzz, t4.xyzw, s1
dp3_sat r0.w, r5.xyzx, cb1[8].xyzx
mad r0.w, r0.w, v6.w, -v6.z
log r0.w, r0.w
mul r0.w, r0.w, v6.y
exp r0.w, r0.w
mul r0.w, r0.w, v6.x
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r4.zyzz, t3.xyzw, s1
dp3_sat r1.w, r5.xyzx, cb1[5].xyzx
mul r0.w, r0.w, r1.w
add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
log r5.xyz, r5.xyzx
mul r5.xyz, r5.xyzx, cb1[9].yyyy
exp r5.xyz, r5.xyzx
log r6.xyz, r4.xyzx
mul r6.xyz, r6.xyzx, cb1[9].xxxx
exp r6.xyz, r6.xyzx
add r5.xyz, r5.xyzx, r6.xyzx
add r5.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
dp3 r1.w, v3.xyzx, v3.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, v3.xyzx
dp3 r1.w, r1.xyzx, r6.xyzx
add r1.w, -|r1.w|, cb1[9].z
add r3.z, -cb1[9].z, cb1[9].w
div r1.w, r1.w, r3.z
add_sat r1.w, r1.w, l(1.000000)
mul r1.w, r1.w, r5.x
mul r0.w, r0.w, r1.w
mul r0.w, r0.w, cb1[0].z
dp2 r0.z, r0.xzxx, r0.xzxx
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.xy, r0.xzxx
mad r2.x, cb1[7].x, cb1[6].y, r0.y
mad r2.xy, r2.xyxx, r3.xyxx, v5.xyxx
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r2.xyxx, t5.xywz, s2
mul r6.x, r6.z, r6.x
mad r2.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.yz, r0.yyyy, r2.xxyx
mad r0.yz, r0.yyzy, cb1[6].xxxx, r4.zzxz
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r0.yzyy, t4.xyzw, s1
dp3_sat r0.y, r6.xyzx, cb1[8].xyzx
mad r0.y, r0.y, v6.w, -v6.z
log r0.y, r0.y
mul r0.y, r0.y, v6.y
exp r0.y, r0.y
mul r0.y, r0.y, v6.x
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r4.zxzz, t3.xyzw, s1
dp3_sat r0.z, r6.xyzx, cb1[5].xyzx
mul r0.y, r0.y, r0.z
dp3 r0.z, v2.xyzx, v2.xyzx
rsq r0.z, r0.z
mul r6.xyz, r0.zzzz, v2.xyzx
dp3 r0.z, r1.xyzx, r6.xyzx
add r0.z, -|r0.z|, cb1[9].z
div r0.z, r0.z, r3.z
add_sat r0.z, r0.z, l(1.000000)
mul r0.z, r0.z, r5.y
mul r0.y, r0.z, r0.y
mad r0.y, r0.y, cb1[0].y, r0.w
mad r2.z, cb1[7].x, cb1[6].y, r0.x
mad r0.zw, r2.zzzw, r3.xxxy, v5.xxxy
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.zwzz, t5.xywz, s2
mul r2.x, r2.z, r2.x
mad r0.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r0.xz, r0.zzwz, r0.xxxx
mad r0.xz, r0.xxzx, cb1[6].xxxx, r4.xxyx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r4.xyxx, t3.xyzw, s1
dp3_sat r0.w, r2.xyzx, cb1[5].xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xzxx, t4.xyzw, s1
dp3_sat r0.x, r2.xyzx, cb1[8].xyzx
mad r0.x, r0.x, v6.w, -v6.z
log r0.x, r0.x
mul r0.x, r0.x, v6.y
exp r0.x, r0.x
mul r0.x, r0.x, v6.x
mul r0.x, r0.x, r0.w
dp3 r0.z, v1.xyzx, v1.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, v1.xyzx
dp3 r0.z, r1.xyzx, r2.xyzx
add r0.z, -|r0.z|, cb1[9].z
div r0.z, r0.z, r3.z
add_sat r0.z, r0.z, l(1.000000)
mul r0.z, r0.z, r5.z
mul r0.x, r0.z, r0.x
mad_sat r0.x, r0.x, cb1[0].x, r0.y
mul o0.xyz, r0.xxxx, v7.xyzx
mov o0.w, r0.x
ret 
// Approximately 153 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
