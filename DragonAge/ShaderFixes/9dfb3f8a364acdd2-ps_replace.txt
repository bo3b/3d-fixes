
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float4 g_keyColor : packoffset(c9);
  float2 g_lightAngularRadius : packoffset(c10);
  float4 g_keyTranslucencyParams : packoffset(c11);
  float4 g_subParams : packoffset(c12);
  float4 g_envmapParams : packoffset(c13);
  float g_skyEnvmap8BitTexInvScale : packoffset(c14);
  float4 g_exposureMultipliers : packoffset(c15);
  float4 g_envmapsMipmapCount : packoffset(c16);
  int g_drawReference : packoffset(c17);
  float g_skyEnvmapMipmapCount : packoffset(c17.y);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_customSampler_s : register(s2);
SamplerState g_diffuseOcclusionSampler_s : register(s3);
SamplerState g_dynamicEnvmapSampler_s : register(s4);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
TextureCube<float4> g_customEnvmap : register(t2);
Texture2D<float4> g_diffuseOcclusionTexture : register(t3);
TextureCube<float4> g_dynamicEnvmap : register(t4);
Texture2DMS<float4,2> g_depthTexture : register(t5);
Texture2DMS<float4,2> g_gbufferTexture0 : register(t6);
Texture2DMS<float4,2> g_gbufferTexture1 : register(t7);
Texture2DMS<float4,2> g_gbufferTexture2 : register(t8);
Texture2DMS<float4,2> g_gbufferTexture3 : register(t9);
Texture2DMS<float4,2> g_gbufferTexture4 : register(t10);
Texture2DMS<float4> g_shadowAccumTexture : register(t11);
Texture2D<float> g_msaaClassifyTexture : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_msaaClassifyTexture.Load(r1.xyw).x;
  r0.z = 0.000000000e+000 < r0.z;
  r0.zw = r0.zz ? float2(2.802597e-045,5.000000e-001) : float2(1.401298e-045,1.000000e+000);
  r2.x = 1.000000000e+000 + -g_envmapParams.w;
  r2.yzw = (int3)g_envmapsMipmapCount.zxy;
  r2.yzw = (int3)r2.yzw + int3(-1,-1,-1);
  r3.x = round(g_envmapsMipmapCount.z);
  r3.y = round(g_envmapsMipmapCount.x);
  r3.z = round(g_envmapsMipmapCount.y);
  r2.yzw = r2.yzw;
  r4.w = 1.000000000e+000;
  r5.y = 0.000000000e+000;
  r6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r3.w = 0.000000000e+000;
  while (true) {
  r5.z = (int)r3.w >= (int)r0.z;
  if (r5.z != 0) break;
  r5.zw = icb[r3.w].xx * g_invScreenSize.xy + r0.xy;
  r7.xyzw = g_gbufferTexture0.Load(r1.xyw,r3.w).xyzw;
  r8.xyzw = g_gbufferTexture1.Load(r1.xyw,r3.w).xyzw;
  r9.xyz = g_gbufferTexture2.Load(r1.xyw,r3.w).xzw;
  r10.xyz = g_gbufferTexture3.Load(r1.xyw,r3.w).xyz;
  r4.z = g_depthTexture.Load(r1.xyw,r3.w).x;
  r6.w = 2.550000000e+002 * r9.z;
  r6.w = round(r6.w * 0.5) * 2;
  r6.w = (int)r6.w;
  r11.x = r6.w == 4;
  r11.y = r6.w == 3;
  r11.z = r6.w == 2;
  if (r11.x != 0) {
  r12.xyzw = g_gbufferTexture4.Load(r1.xyw,r3.w).xyzw;
  r13.xyzw = r7.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + float4(-2.000000e+000,-2.000000e+000,-2.000000e+000,-2.000000e+000);
  r9.z = dot(r13.xy, r13.xy);
  r14.zw = -r9.zz * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r9.z = max(r14.z, 0.000000000e+000);
  r9.z = sqrt(r9.z);
  r14.xy = r13.xy * r9.zz;
  r9.z = dot(r14.xyw, r14.xyw);
  r9.z = rsqrt(r9.z);
  r14.xyz = r14.xyw * r9.zzz;
  r9.z = dot(r13.zw, r13.zw);
  r15.zw = -r9.zz * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r9.z = max(r15.z, 0.000000000e+000);
  r9.z = sqrt(r9.z);
  r15.xy = r13.zw * r9.zz;
  r9.z = dot(r15.xyw, r15.xyw);
  r9.z = rsqrt(r9.z);
  r13.xyz = r15.xyw * r9.zzz;
  r9.z = dot(r12.xy, float2(6.528000e+004,2.550000e+002));
  r9.z = round(r9.z * 0.5) * 2;
  r9.w = 3.125000000e-002 * r9.z;
  r9.w = round(r9.w);
  r15.z = r9.z * 3.125000000e-002 + -r9.w;
  r9.z = 1.562500000e-002 * r9.w;
  r15.x = round(r9.z);
  r15.y = r9.w * 1.562500000e-002 + -r15.x;
  r15.xyz = float3(3.225806e-002,1.015873e+000,1.032258e+000) * r15.xyz;
  r9.zw = float2(2.550000e+002,2.550000e+002) * r12.zw;
  r9.z = round(r9.z * 0.5) * 2;
  r9.w = round(r9.w * 0.5) * 2;
  r12.xy = float2(6.250000e-002,6.250000e-002) * r9.zw;
  r12.x = round(r12.x);
  r12.y = round(r12.y);
  r12.zw = r9.zw * float2(6.250000e-002,6.250000e-002) + -r12.xy;
  r16.xw = float2(6.666667e-002,1.066667e+000) * r12.yw;
  r9.zw = r12.xz * float2(8.000001e-001,1.280000e+001) + float2(1.000000e+000,1.000000e+000);
  r9.zw = exp2(r9.zw);
  r9.zw = r9.zw * float2(1.443000e+000,1.443000e+000) + float2(1.443000e+000,1.443000e+000);
  r12.xyzw = r8.xyzw * r8.xyzw;
  r17.xyz = r12.www;
  r10.w = 0.000000000e+000;
  } else {
  r7.xyz = r7.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r11.w = dot(r7.xyz, r7.xyz);
  r11.w = rsqrt(r11.w);
  r14.xyz = r11.www * r7.xyz;
  r8.xyzw = r8.xyzw * r8.xyzw;
  r7.x = r6.w == 5;
  if (r7.x != 0) {
  r12.xyz = r8.xyz * r8.www;
  r17.xyz = r8.xyz;
  } else {
  r7.x = r6.w == 1;
  if (r7.x != 0) {
  r17.xyz = r8.www * r8.xyz;
  } else {
  r17.xyz = r8.www;
  }
  r12.xyz = r8.xyz;
  }
  r7.x = 0.000000000e+000 < r17.x;
  r10.w = r7.w ? r7.x : 0;
  r7.x = r10.w * 1.200000000e+001 + 1.000000000e+000;
  r7.x = exp2(r7.x);
  r5.x = r7.x * 1.442999959e+000 + 1.442999959e+000;
  r9.zw = r5.xy;
  r15.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r13.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r16.xw = float2(0.000000e+000,0.000000e+000);
  }
  r5.xz = r5.zw * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r5.xz;
  r7.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r7.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r7.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r4.x = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r4.x = 1.000000e+000 / r4.x;


float4 r28, r26, r27;
r26.xyz = r7.xyz * r4.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r7.xyz = r26.xyz / r4.xxx;

  r5.xzw = r7.xzy * r4.xxx;


  r4.y = dot(r5.xzw, r5.xzw);
  r4.z = rsqrt(r4.y);
  r7.xzw = r5.xwz * r4.zzz;
  r8.x = g_shadowAccumTexture.Load(r1.xyz,r3.w).x;
  r4.x = r7.y * r4.x + g_cameraPos.y;
  r8.yz = g_lightDir.xz * r4.xx;
  r8.yz = r8.yz * g_cloudOffsetAndScale.ww + r5.xz;
  r8.yz = r8.yz * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
  r4.x = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r8.yz, 0.000000000e+000).x;
  r4.x = saturate(g_cloudCoverageExponentAndFade.x + r4.x);
  r4.x = log2(r4.x);
  r4.x = g_cloudCoverageExponentAndFade.y * r4.x;
  r4.x = exp2(r4.x);
  r4.y = sqrt(r4.y);
  r4.y = -g_cloudCoverageExponentAndFade.z + r4.y;
  r4.y = saturate(g_cloudCoverageExponentAndFade.w * r4.y);
  r4.y = r4.y * r4.y;
  r7.y = 1.000000000e+000 + -r4.x;
  r4.x = r4.y * r7.y + r4.x;
  r4.x = r8.x * r4.x;
  r4.y = dot(r14.xyz, g_lightDir.xyz);
  r7.y = saturate(r4.y);
  r8.xyz = g_keyColor.xyz * r7.yyy;
  r8.xyz = r8.xyz * r4.xxx;
  if (r11.x != 0) {
  r16.w = saturate(r16.w);
  r7.y = r16.w * 5.000000000e-001 + r4.y;
  r8.w = r16.w * 5.000000000e-001 + 1.000000000e+000;
  r7.y = saturate(r7.y / r8.w);
  r16.yzw = g_keyColor.xyz * r7.yyy;
  r16.yzw = r16.yzw * r4.xxx;
  r18.xyz = -r14.xyz * r16.xxx + r13.xyz;
  r7.y = dot(r18.xyz, r18.xyz);
  r7.y = rsqrt(r7.y);
  r18.xyz = r18.xyz * r7.yyy;
  r19.xyz = -r5.xwz * r4.zzz + g_lightDir.xyz;
  r7.y = dot(r19.xyz, r19.xyz);
  r7.y = rsqrt(r7.y);
  r19.xyz = r19.xyz * r7.yyy;
  r7.y = dot(r13.xyz, r19.xyz);
  r7.y = -r7.y * r7.y + 1.000000000e+000;
  r7.y = max(r7.y, 0.000000000e+000);
  r7.y = sqrt(r7.y);
  r7.y = log2(r7.y);
  r7.y = r9.z * r7.y;
  r7.y = exp2(r7.y);
  r8.w = dot(r18.xyz, r19.xyz);
  r8.w = -r8.w * r8.w + 1.000000000e+000;
  r8.w = max(r8.w, 0.000000000e+000);
  r8.w = sqrt(r8.w);
  r8.w = log2(r8.w);
  r8.w = r9.w * r8.w;
  r8.w = exp2(r8.w);
  r13.xyz = r8.www * r15.xyz;
  r13.xyz = r7.yyy * r17.xxx + r13.xyz;
  r13.xyz = float3(1.500000e-001,1.500000e-001,1.500000e-001) * r13.xyz;
  r13.xyz = r13.xyz * r8.xyz;
  r13.xyz = g_keyColor.www * r13.xyz;
  r8.xyz = r16.yzw;
  } else {
  r5.xzw = -r5.xwz * r4.zzz + g_lightDir.xyz;
  r4.z = dot(r5.xzw, r5.xzw);
  r4.z = rsqrt(r4.z);
  r5.xzw = r5.xzw * r4.zzz;
  r4.z = saturate(dot(r14.xyz, r5.xzw));
  r5.x = r9.z * 8.662509918e-002 + 8.750000000e-001;
  r4.z = r4.z * r9.z + -r9.z;
  r4.z = exp2(r4.z);
  r4.z = r5.x * r4.z;
  r5.xzw = r8.xyz * r4.zzz;
  r13.xyz = g_keyColor.www * r5.xzw;
  }
  r5.xzw = r10.xyz * g_exposureMultipliers.yyy + r8.xyz;
  r4.z = dot(r7.xzw, r14.xyz);
  r4.z = r4.z + r4.z;
  r7.xyz = r14.xyz * -r4.zzz + r7.xzw;
  if (r11.y != 0) {
  r4.z = -r10.w * 1.500000000e+001 + r3.x;
  r4.z = 5.000000000e+000 + r4.z;
  r4.z = max(r4.z, 0.000000000e+000);
  r4.z = min(r2.y, r4.z);
  r8.xyz = g_dynamicEnvmap.SampleLevel(g_dynamicEnvmapSampler_s, r7.xyz, r4.z).xyz;
  r8.xyz = r13.xyz + r8.xyz;
  } else {
  r4.z = log2(abs(r9.x));
  r4.z = g_envmapParams.z * r4.z;
  r4.z = exp2(r4.z);
  r6.w = r6.w != 4;
  if (r6.w != 0) {
  r9.x = r9.y == 0;
  r9.y = r9.y == 3.922000e-003;
  r9.z = r9.y == 7.843000e-003;
  r9.w = r9.y == 1.176500e-002;
  r9.x = r9.x ? g_envmapParams.x : 0;
  r9.y = r9.y ? g_envmapParams.x : 0;
  r9.z = r9.z ? g_envmapParams.x : 0;
  r9.w = r9.w ? g_envmapParams.x : 0;
  r6.w = r4.x * r2.x + g_envmapParams.w;
  r6.w = r6.w * r4.z;
  r11.yw = -r10.ww * float2(1.500000e+001,1.500000e+001) + r3.yz;
  r11.yw = float2(5.000000e+000,5.000000e+000) + r11.yw;
  r11.yw = max(r11.yw, float2(0.000000e+000,0.000000e+000));
  r11.yw = min(r2.zw, r11.yw);
  r14.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r7.xyz, r11.w).xyzw;
  r7.w = dot(r9.xyzw, r14.xyzw);
  r7.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r7.xyz, r11.y).xyz;
  r7.xyz = r7.xyz * r6.www;
  r13.xyz = r7.xyz * g_skyEnvmap8BitTexInvScale + r13.xyz;
  } else {
  r7.w = 0.000000000e+000;
  }
  r7.xyz = r10.xyz * g_exposureMultipliers.yyy + g_envmapParams.yyy;
  r7.xyz = r7.www * r7.xyz;
  r4.z = 1.000000000e+000 + -r4.z;
  r8.xyz = r7.xyz * r4.zzz + r13.xyz;
  }
  if (r11.z != 0) {
  r4.z = r4.y * 1.149889946e+000 + -2.145639896e+000;
  r4.z = r4.y * r4.z + 8.416090012e-001;
  r4.y = saturate(r4.y * r4.z + 1.541409940e-001);
  r7.xyz = g_subParams.xyz * r4.yyy;
  r5.xzw = r7.xyz * r4.xxx + r5.xzw;
  }
  if (r11.x == 0) {
  r8.xyz = r8.xyz * r17.xyz;
  }
  r4.xyz = r5.xzw * r12.xyz + r8.xyz;
  r6.xyz = r6.xyz + r4.xyz;
  r3.w = (int)r3.w + 1;
  }
  r1.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r1.y, r1.x);
  r0.x = min(r1.z, r0.x);
  o0.w = min(r1.w, r0.x);
  o0.xyz = r6.xyz * r0.www;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float4 g_keyColor;                 // Offset:  144 Size:    16
//   float2 g_lightAngularRadius;       // Offset:  160 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  176 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  192 Size:    16
//   float4 g_envmapParams;             // Offset:  208 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  224 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  240 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  256 Size:    16
//   int g_drawReference;               // Offset:  272 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  276 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_customSampler                   sampler      NA          NA    2        1
// g_diffuseOcclusionSampler         sampler      NA          NA    3        1
// g_dynamicEnvmapSampler            sampler      NA          NA    4        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_customEnvmap                    texture  float4        cube    2        1
// g_diffuseOcclusionTexture         texture  float4          2d    3        1
// g_dynamicEnvmap                   texture  float4        cube    4        1
// g_depthTexture                    texture  float4       2dMS2    5        1
// g_gbufferTexture0                 texture  float4       2dMS2    6        1
// g_gbufferTexture1                 texture  float4       2dMS2    7        1
// g_gbufferTexture2                 texture  float4       2dMS2    8        1
// g_gbufferTexture3                 texture  float4       2dMS2    9        1
// g_gbufferTexture4                 texture  float4       2dMS2   10        1
// g_shadowAccumTexture              texture  float4        2dMS   11        1
// g_msaaClassifyTexture             texture   float          2d   12        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} }
dcl_constantbuffer cb0[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture2dms(2) (float,float,float,float) t5
dcl_resource_texture2dms(2) (float,float,float,float) t6
dcl_resource_texture2dms(2) (float,float,float,float) t7
dcl_resource_texture2dms(2) (float,float,float,float) t8
dcl_resource_texture2dms(2) (float,float,float,float) t9
dcl_resource_texture2dms(2) (float,float,float,float) t10
dcl_resource_texture2dms(0) (float,float,float,float) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 20
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t12.yzxw
lt r0.z, l(0.000000), r0.z
movc r0.zw, r0.zzzz, l(0,0,2,0.500000), l(0,0,1,1.000000)
add r2.x, -cb0[13].w, l(1.000000)
ftoi r2.yzw, cb0[16].zzxy
iadd r2.yzw, r2.yyzw, l(0, -1, -1, -1)
round_z r3.xyz, cb0[16].zxyz
itof r2.yzw, r2.yyzw
mov r4.w, l(1.000000)
mov r5.y, l(0)
mov r6.xyz, l(0,0,0,0)
mov r3.w, l(0)
loop 
  ige r5.z, r3.w, r0.z
  breakc_nz r5.z
  mad r5.zw, icb[r3.w + 0].xxxx, cb0[1].xxxy, r0.xxxy
  ldms_indexable(texture2dms)(float,float,float,float) r7.xyzw, r1.xyww, t6.xyzw, r3.w
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r1.xyww, t7.xyzw, r3.w
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyz, r1.xyww, t8.xzwy, r3.w
  ldms_indexable(texture2dms)(float,float,float,float) r10.xyz, r1.xyww, t9.xyzw, r3.w
  ldms_indexable(texture2dms)(float,float,float,float) r4.z, r1.xyww, t5.yzxw, r3.w
  mul r6.w, r9.z, l(255.000000)
  round_ne r6.w, r6.w
  ftoi r6.w, r6.w
  ieq r11.xyz, r6.wwww, l(4, 3, 2, 0)
  if_nz r11.x
    ldms_indexable(texture2dms)(float,float,float,float) r12.xyzw, r1.xyww, t10.xyzw, r3.w
    mad r13.xyzw, r7.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), l(-2.000000, -2.000000, -2.000000, -2.000000)
    dp2 r9.z, r13.xyxx, r13.xyxx
    mad r14.zw, -r9.zzzz, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
    max r9.z, r14.z, l(0.000000)
    sqrt r9.z, r9.z
    mul r14.xy, r9.zzzz, r13.xyxx
    dp3 r9.z, r14.xywx, r14.xywx
    rsq r9.z, r9.z
    mul r14.xyz, r9.zzzz, r14.xywx
    dp2 r9.z, r13.zwzz, r13.zwzz
    mad r15.zw, -r9.zzzz, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
    max r9.z, r15.z, l(0.000000)
    sqrt r9.z, r9.z
    mul r15.xy, r9.zzzz, r13.zwzz
    dp3 r9.z, r15.xywx, r15.xywx
    rsq r9.z, r9.z
    mul r13.xyz, r9.zzzz, r15.xywx
    dp2 r9.z, r12.xyxx, l(65280.000000, 255.000000, 0.000000, 0.000000)
    round_ne r9.z, r9.z
    mul r9.w, r9.z, l(0.031250)
    round_z r9.w, r9.w
    mad r15.z, r9.z, l(0.031250), -r9.w
    mul r9.z, r9.w, l(0.015625)
    round_z r15.x, r9.z
    mad r15.y, r9.w, l(0.015625), -r15.x
    mul r15.xyz, r15.xyzx, l(0.032258, 1.015873, 1.032258, 0.000000)
    mul r9.zw, r12.zzzw, l(0.000000, 0.000000, 255.000000, 255.000000)
    round_ne r9.zw, r9.zzzw
    mul r12.xy, r9.zwzz, l(0.062500, 0.062500, 0.000000, 0.000000)
    round_z r12.xy, r12.xyxx
    mad r12.zw, r9.zzzw, l(0.000000, 0.000000, 0.062500, 0.062500), -r12.xxxy
    mul r16.xw, r12.yyyw, l(0.066667, 0.000000, 0.000000, 1.066667)
    mad r9.zw, r12.xxxz, l(0.000000, 0.000000, 0.800000, 12.800001), l(0.000000, 0.000000, 1.000000, 1.000000)
    exp r9.zw, r9.zzzw
    mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 1.443000, 1.443000), l(0.000000, 0.000000, 1.443000, 1.443000)
    mul r12.xyzw, r8.xyzw, r8.xyzw
    mov r17.xyz, r12.wwww
    mov r10.w, l(0)
  else 
    mad r7.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r11.w, r7.xyzx, r7.xyzx
    rsq r11.w, r11.w
    mul r14.xyz, r7.xyzx, r11.wwww
    mul r8.xyzw, r8.xyzw, r8.xyzw
    ieq r7.x, r6.w, l(5)
    if_nz r7.x
      mul r12.xyz, r8.wwww, r8.xyzx
      mov r17.xyz, r8.xyzx
    else 
      ieq r7.x, r6.w, l(1)
      if_nz r7.x
        mul r17.xyz, r8.xyzx, r8.wwww
      else 
        mov r17.xyz, r8.wwww
      endif 
      mov r12.xyz, r8.xyzx
    endif 
    lt r7.x, l(0.000000), r17.x
    and r10.w, r7.w, r7.x
    mad r7.x, r10.w, l(12.000000), l(1.000000)
    exp r7.x, r7.x
    mad r5.x, r7.x, l(1.443000), l(1.443000)
    mov r9.zw, r5.xxxy
    mov r15.xyz, l(0,0,0,0)
    mov r13.xyz, l(0,0,0,0)
    mov r16.xw, l(0,0,0,0)
  endif 
  mad r5.xz, r5.zzwz, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
  mul r4.xy, r5.xzxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r7.x, r4.xyzw, cb0[2].xyzw
  dp4 r7.y, r4.xyzw, cb0[3].xyzw
  dp4 r7.z, r4.xyzw, cb0[4].xyzw
  dp4 r4.x, r4.xyzw, cb0[5].xyzw
  div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
  mul r5.xzw, r4.xxxx, r7.xxzy
  dp3 r4.y, r5.xzwx, r5.xzwx
  rsq r4.z, r4.y
  mul r7.xzw, r4.zzzz, r5.xxwz
  ldms_indexable(texture2dms)(float,float,float,float) r8.x, r1.xyzw, t11.xyzw, r3.w
  mad r4.x, r7.y, r4.x, cb0[0].y
  mul r8.yz, r4.xxxx, cb0[8].xxzx
  mad r8.yz, r8.yyzy, cb0[6].wwww, r5.xxzx
  mad r8.yz, r8.yyzy, cb0[6].zzzz, cb0[6].xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r4.x, r8.yzyy, t0.xyzw, s0, l(0.000000)
  add_sat r4.x, r4.x, cb0[7].x
  log r4.x, r4.x
  mul r4.x, r4.x, cb0[7].y
  exp r4.x, r4.x
  sqrt r4.y, r4.y
  add r4.y, r4.y, -cb0[7].z
  mul_sat r4.y, r4.y, cb0[7].w
  mul r4.y, r4.y, r4.y
  add r7.y, -r4.x, l(1.000000)
  mad r4.x, r4.y, r7.y, r4.x
  mul r4.x, r4.x, r8.x
  dp3 r4.y, r14.xyzx, cb0[8].xyzx
  mov_sat r7.y, r4.y
  mul r8.xyz, r7.yyyy, cb0[9].xyzx
  mul r8.xyz, r4.xxxx, r8.xyzx
  if_nz r11.x
    mov_sat r16.w, r16.w
    mad r7.y, r16.w, l(0.500000), r4.y
    mad r8.w, r16.w, l(0.500000), l(1.000000)
    div_sat r7.y, r7.y, r8.w
    mul r16.yzw, r7.yyyy, cb0[9].xxyz
    mul r16.yzw, r4.xxxx, r16.yyzw
    mad r18.xyz, -r14.xyzx, r16.xxxx, r13.xyzx
    dp3 r7.y, r18.xyzx, r18.xyzx
    rsq r7.y, r7.y
    mul r18.xyz, r7.yyyy, r18.xyzx
    mad r19.xyz, -r5.xwzx, r4.zzzz, cb0[8].xyzx
    dp3 r7.y, r19.xyzx, r19.xyzx
    rsq r7.y, r7.y
    mul r19.xyz, r7.yyyy, r19.xyzx
    dp3 r7.y, r13.xyzx, r19.xyzx
    mad r7.y, -r7.y, r7.y, l(1.000000)
    max r7.y, r7.y, l(0.000000)
    sqrt r7.y, r7.y
    log r7.y, r7.y
    mul r7.y, r7.y, r9.z
    exp r7.y, r7.y
    dp3 r8.w, r18.xyzx, r19.xyzx
    mad r8.w, -r8.w, r8.w, l(1.000000)
    max r8.w, r8.w, l(0.000000)
    sqrt r8.w, r8.w
    log r8.w, r8.w
    mul r8.w, r8.w, r9.w
    exp r8.w, r8.w
    mul r13.xyz, r15.xyzx, r8.wwww
    mad r13.xyz, r7.yyyy, r17.xxxx, r13.xyzx
    mul r13.xyz, r13.xyzx, l(0.150000, 0.150000, 0.150000, 0.000000)
    mul r13.xyz, r8.xyzx, r13.xyzx
    mul r13.xyz, r13.xyzx, cb0[9].wwww
    mov r8.xyz, r16.yzwy
  else 
    mad r5.xzw, -r5.xxwz, r4.zzzz, cb0[8].xxyz
    dp3 r4.z, r5.xzwx, r5.xzwx
    rsq r4.z, r4.z
    mul r5.xzw, r4.zzzz, r5.xxzw
    dp3_sat r4.z, r14.xyzx, r5.xzwx
    mad r5.x, r9.z, l(0.086625), l(0.875000)
    mad r4.z, r4.z, r9.z, -r9.z
    exp r4.z, r4.z
    mul r4.z, r4.z, r5.x
    mul r5.xzw, r4.zzzz, r8.xxyz
    mul r13.xyz, r5.xzwx, cb0[9].wwww
  endif 
  mad r5.xzw, r10.xxyz, cb0[15].yyyy, r8.xxyz
  dp3 r4.z, r7.xzwx, r14.xyzx
  add r4.z, r4.z, r4.z
  mad r7.xyz, r14.xyzx, -r4.zzzz, r7.xzwx
  if_nz r11.y
    mad r4.z, -r10.w, l(15.000000), r3.x
    add r4.z, r4.z, l(5.000000)
    max r4.z, r4.z, l(0.000000)
    min r4.z, r2.y, r4.z
    sample_l_indexable(texturecube)(float,float,float,float) r8.xyz, r7.xyzx, t4.xyzw, s4, r4.z
    add r8.xyz, r8.xyzx, r13.xyzx
  else 
    log r4.z, |r9.x|
    mul r4.z, r4.z, cb0[13].z
    exp r4.z, r4.z
    ine r6.w, r6.w, l(4)
    if_nz r6.w
      eq r9.xyzw, r9.yyyy, l(0.000000, 0.003922, 0.007843, 0.011765)
      and r9.xyzw, r9.xyzw, cb0[13].xxxx
      mad r6.w, r4.x, r2.x, cb0[13].w
      mul r6.w, r4.z, r6.w
      mad r11.yw, -r10.wwww, l(0.000000, 15.000000, 0.000000, 15.000000), r3.yyyz
      add r11.yw, r11.yyyw, l(0.000000, 5.000000, 0.000000, 5.000000)
      max r11.yw, r11.yyyw, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r11.yw, r2.zzzw, r11.yyyw
      sample_l_indexable(texturecube)(float,float,float,float) r14.xyzw, r7.xyzx, t2.xyzw, s2, r11.w
      dp4 r7.w, r9.xyzw, r14.xyzw
      sample_l_indexable(texturecube)(float,float,float,float) r7.xyz, r7.xyzx, t1.xyzw, s1, r11.y
      mul r7.xyz, r6.wwww, r7.xyzx
      mad r13.xyz, r7.xyzx, cb0[14].xxxx, r13.xyzx
    else 
      mov r7.w, l(0)
    endif 
    mad r7.xyz, r10.xyzx, cb0[15].yyyy, cb0[13].yyyy
    mul r7.xyz, r7.xyzx, r7.wwww
    add r4.z, -r4.z, l(1.000000)
    mad r8.xyz, r7.xyzx, r4.zzzz, r13.xyzx
  endif 
  if_nz r11.z
    mad r4.z, r4.y, l(1.149890), l(-2.145640)
    mad r4.z, r4.y, r4.z, l(0.841609)
    mad_sat r4.y, r4.y, r4.z, l(0.154141)
    mul r7.xyz, r4.yyyy, cb0[12].xyzx
    mad r5.xzw, r7.xxyz, r4.xxxx, r5.xxzw
  endif 
  if_z r11.x
    mul r8.xyz, r17.xyzx, r8.xyzx
  endif 
  mad r4.xyz, r5.xzwx, r12.xyzx, r8.xyzx
  add r6.xyz, r4.xyzx, r6.xyzx
  iadd r3.w, r3.w, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t3.xyzw, s3.x
min r0.x, r1.y, r1.x
min r0.x, r1.z, r0.x
min o0.w, r1.w, r0.x
mul o0.xyz, r0.wwww, r6.xyzx
ret 
// Approximately 235 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
