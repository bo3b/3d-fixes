
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float3 g_lightDir : packoffset(c6);
  float4 g_keyColor : packoffset(c7);
  float2 g_lightAngularRadius : packoffset(c8);
  float4 g_keyTranslucencyParams : packoffset(c9);
  float4 g_subParams : packoffset(c10);
  float4 g_envmapParams : packoffset(c11);
  float g_skyEnvmap8BitTexInvScale : packoffset(c12);
  float4 g_exposureMultipliers : packoffset(c13);
  float4 g_envmapsMipmapCount : packoffset(c14);
  int g_drawReference : packoffset(c15);
  float g_skyEnvmapMipmapCount : packoffset(c15.y);
}
SamplerState g_skyEnvmapSampler_s : register(s0);
SamplerState g_customSampler_s : register(s1);
SamplerState g_diffuseOcclusionSampler_s : register(s2);
SamplerState g_dynamicEnvmapSampler_s : register(s3);
TextureCube<float4> g_skyEnvmap : register(t0);
TextureCube<float4> g_customEnvmap : register(t1);
Texture2D<float4> g_diffuseOcclusionTexture : register(t2);
TextureCube<float4> g_dynamicEnvmap : register(t3);
Texture2D<float4> g_depthTexture : register(t4);
Texture2D<float4> g_gbufferTexture0 : register(t5);
Texture2D<float4> g_gbufferTexture1 : register(t6);
Texture2D<float4> g_gbufferTexture2 : register(t7);
Texture2D<float4> g_gbufferTexture3 : register(t8);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_gbufferTexture0.Load(r1.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r4.xyz = g_gbufferTexture2.Load(r1.xyw).xzw;
  r5.xyz = g_gbufferTexture3.Load(r1.xyw).xyz;
  r1.z = g_depthTexture.Load(r1.xyz).x;
  r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r0.z = 2.550000000e+002 * r4.z;
  r0.z = round(r0.z * 0.5) * 2;
  r0.z = (int)r0.z;
  r3.xyzw = r3.xyzw * r3.xyzw;
  r6.x = r0.z == 5;
  r6.y = r0.z == 3;
  r6.z = r0.z == 2;
  if (r6.x != 0) {
  r7.xyz = r3.xyz * r3.www;
  r8.xyz = r3.xyz;
  } else {
  r0.z = r0.z == 1;
  if (r0.z != 0) {
  r8.xyz = r3.www * r3.xyz;
  } else {
  r8.xyz = r3.www;
  }
  r7.xyz = r3.xyz;
  }
  r0.z = 0.000000000e+000 < r8.x;
  r0.z = r0.z ? r2.w : 0;
  r3.xyz = g_exposureMultipliers.yyy * r5.xyz;
  r4.zw = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r1.xy = float2(1.000000e+000,-1.000000e+000) * r4.zw;
  r1.w = 1.000000000e+000;
  r9.x = dot(r1.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r9.y = dot(r1.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r9.z = dot(r1.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.w = dot(r1.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r0.w = 1.000000e+000 / r0.w;


float4 r28, r26, r27;
r26.xyz = r9.xyz * r0.www;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r9.xyz = r26.xyz / r0.www;

  r1.xyz = r9.xyz * r0.www;


  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r1.xyz, r2.xyz);
  r0.w = r0.w + r0.w;
  r1.xyz = r2.xyz * -r0.www + r1.xyz;
  if (r6.y != 0) {
  r0.w = (int)g_envmapsMipmapCount.z;
  r1.w = round(g_envmapsMipmapCount.z);
  r1.w = -r0.z * 1.500000000e+001 + r1.w;
  r1.w = 5.000000000e+000 + r1.w;
  r0.w = (int)r0.w + -1;
  r0.w = r0.w;
  r1.w = max(r1.w, 0.000000000e+000);
  r0.w = min(r0.w, r1.w);
  r2.xyz = g_dynamicEnvmap.SampleLevel(g_dynamicEnvmapSampler_s, r1.xyz, r0.w).xyz;
  } else {
  r0.w = log2(abs(r4.x));
  r0.w = g_envmapParams.z * r0.w;
  r0.w = exp2(r0.w);
  r4.x = r4.y == 0;
  r4.y = r4.y == 3.922000e-003;
  r4.z = r4.y == 7.843000e-003;
  r4.w = r4.y == 1.176500e-002;
  r4.x = r4.x ? g_envmapParams.x : 0;
  r4.y = r4.y ? g_envmapParams.x : 0;
  r4.z = r4.z ? g_envmapParams.x : 0;
  r4.w = r4.w ? g_envmapParams.x : 0;
  r6.xy = (int2)g_envmapsMipmapCount.xy;
  r9.x = round(g_envmapsMipmapCount.x);
  r9.y = round(g_envmapsMipmapCount.y);
  r9.xy = -r0.zz * float2(1.500000e+001,1.500000e+001) + r9.xy;
  r9.xy = float2(5.000000e+000,5.000000e+000) + r9.xy;
  r6.xy = (int2)r6.xy + int2(-1,-1);
  r6.xy = r6.xy;
  r9.xy = max(r9.xy, float2(0.000000e+000,0.000000e+000));
  r6.xy = min(r6.xy, r9.xy);
  r9.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r1.xyz, r6.y).xyzw;
  r0.z = dot(r4.xyzw, r9.xyzw);
  r1.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r1.xyz, r6.x).xyz;
  r1.xyz = r1.xyz * r0.www;
  r4.xyz = r5.xyz * g_exposureMultipliers.yyy + g_envmapParams.yyy;
  r4.xyz = r4.xyz * r0.zzz;
  r0.z = 1.000000000e+000 + -r0.w;
  r4.xyz = r4.xyz * r0.zzz;
  r2.xyz = r1.xyz * g_skyEnvmap8BitTexInvScale + r4.xyz;
  }
  r1.xyz = r2.xyz * r8.xyz;
  r0.z = r6.z ? 0.000000000e+000 : 1.000000000e+000;
  r2.xyz = r1.xyz * r0.zzz;
  o0.xyz = r3.xyz * r7.xyz + r2.xyz;
  r0.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r0.y, r0.x);
  r0.x = min(r0.z, r0.x);
  o0.w = min(r0.w, r0.x);
  o1.xyz = r1.xyz;
  o1.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float3 g_lightDir;                 // Offset:   96 Size:    12 [unused]
//   float4 g_keyColor;                 // Offset:  112 Size:    16 [unused]
//   float2 g_lightAngularRadius;       // Offset:  128 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  144 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  160 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  176 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  192 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  208 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  224 Size:    16
//   int g_drawReference;               // Offset:  240 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  244 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_skyEnvmapSampler                sampler      NA          NA    0        1
// g_customSampler                   sampler      NA          NA    1        1
// g_diffuseOcclusionSampler         sampler      NA          NA    2        1
// g_dynamicEnvmapSampler            sampler      NA          NA    3        1
// g_skyEnvmap                       texture  float4        cube    0        1
// g_customEnvmap                    texture  float4        cube    1        1
// g_diffuseOcclusionTexture         texture  float4          2d    2        1
// g_dynamicEnvmap                   texture  float4        cube    3        1
// g_depthTexture                    texture  float4          2d    4        1
// g_gbufferTexture0                 texture  float4          2d    5        1
// g_gbufferTexture1                 texture  float4          2d    6        1
// g_gbufferTexture2                 texture  float4          2d    7        1
// g_gbufferTexture3                 texture  float4          2d    8        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 10
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t5.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t6.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t7.xzwy
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t8.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.z, r1.xyzw, t4.yzxw
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
mul r0.z, r4.z, l(255.000000)
round_ne r0.z, r0.z
ftoi r0.z, r0.z
mul r3.xyzw, r3.xyzw, r3.xyzw
ieq r6.xyz, r0.zzzz, l(5, 3, 2, 0)
if_nz r6.x
  mul r7.xyz, r3.wwww, r3.xyzx
  mov r8.xyz, r3.xyzx
else 
  ieq r0.z, r0.z, l(1)
  if_nz r0.z
    mul r8.xyz, r3.xyzx, r3.wwww
  else 
    mov r8.xyz, r3.wwww
  endif 
  mov r7.xyz, r3.xyzx
endif 
lt r0.z, l(0.000000), r8.x
and r0.z, r2.w, r0.z
mul r3.xyz, r5.xyzx, cb0[13].yyyy
mad r4.zw, r0.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r1.xy, r4.zwzz, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r9.x, r1.xyzw, cb0[2].xyzw
dp4 r9.y, r1.xyzw, cb0[3].xyzw
dp4 r9.z, r1.xyzw, cb0[4].xyzw
dp4 r0.w, r1.xyzw, cb0[5].xyzw
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r1.xyz, r0.wwww, r9.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r1.xyzx, r2.xyzx
add r0.w, r0.w, r0.w
mad r1.xyz, r2.xyzx, -r0.wwww, r1.xyzx
if_nz r6.y
  ftoi r0.w, cb0[14].z
  round_z r1.w, cb0[14].z
  mad r1.w, -r0.z, l(15.000000), r1.w
  add r1.w, r1.w, l(5.000000)
  iadd r0.w, r0.w, l(-1)
  itof r0.w, r0.w
  max r1.w, r1.w, l(0.000000)
  min r0.w, r0.w, r1.w
  sample_l_indexable(texturecube)(float,float,float,float) r2.xyz, r1.xyzx, t3.xyzw, s3, r0.w
else 
  log r0.w, |r4.x|
  mul r0.w, r0.w, cb0[11].z
  exp r0.w, r0.w
  eq r4.xyzw, r4.yyyy, l(0.000000, 0.003922, 0.007843, 0.011765)
  and r4.xyzw, r4.xyzw, cb0[11].xxxx
  ftoi r6.xy, cb0[14].xyxx
  round_z r9.xy, cb0[14].xyxx
  mad r9.xy, -r0.zzzz, l(15.000000, 15.000000, 0.000000, 0.000000), r9.xyxx
  add r9.xy, r9.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
  iadd r6.xy, r6.xyxx, l(-1, -1, 0, 0)
  itof r6.xy, r6.xyxx
  max r9.xy, r9.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r6.xy, r6.xyxx, r9.xyxx
  sample_l_indexable(texturecube)(float,float,float,float) r9.xyzw, r1.xyzx, t1.xyzw, s1, r6.y
  dp4 r0.z, r4.xyzw, r9.xyzw
  sample_l_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t0.xyzw, s0, r6.x
  mul r1.xyz, r0.wwww, r1.xyzx
  mad r4.xyz, r5.xyzx, cb0[13].yyyy, cb0[11].yyyy
  mul r4.xyz, r0.zzzz, r4.xyzx
  add r0.z, -r0.w, l(1.000000)
  mul r4.xyz, r0.zzzz, r4.xyzx
  mad r2.xyz, r1.xyzx, cb0[12].xxxx, r4.xyzx
endif 
mul r1.xyz, r8.xyzx, r2.xyzx
movc r0.z, r6.z, l(0), l(1.000000)
mul r2.xyz, r0.zzzz, r1.xyzx
mad o0.xyz, r3.xyzx, r7.xyzx, r2.xyzx
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t2.xyzw, s2.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
mov o1.xyz, r1.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 92 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
