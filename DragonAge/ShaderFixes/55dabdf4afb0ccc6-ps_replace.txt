
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float4 g_exposureMultipliers : packoffset(c7);
  uint4 g_shadowmapDimensions : packoffset(c8);
}
SamplerState g_cookieSampler_s : register(s0);
SamplerComparisonState g_shadowmapSampler_s : register(s1);
Texture2D<float4> g_cookieTexture : register(t0);
Texture2D<float4> g_shadowmapTexture : register(t1);
Texture2D<float4> g_depthTexture : register(t2);
Texture2D<float4> g_gbufferTexture0 : register(t3);
Texture2D<float4> g_gbufferTexture1 : register(t4);
Texture2D<float4> g_gbufferTexture2 : register(t5);
Texture2D<float4> g_gbufferTexture4 : register(t6);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_gbufferTexture0.Load(r1.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r0.z = g_gbufferTexture2.Load(r1.xyw).w;
  r4.z = g_depthTexture.Load(r1.xyw).x;
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = round(r0.z);
  r0.z = (int)r0.z;
  r5.xy = r0.zz == float2(4.000000e+000,2.000000e+000);
  if (r5.x != 0) {
    r1.xyzw = g_gbufferTexture4.Load(r1.xyz).xyzw;
    r6.xyzw = r2.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + float4(-2.000000e+000,-2.000000e+000,-2.000000e+000,-2.000000e+000);
    r0.w = dot(r6.xy, r6.xy);
    r7.zw = -r0.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r0.w = max(r7.z, 0.000000000e+000);
    r0.w = sqrt(r0.w);
    r7.xy = r6.xy * r0.ww;
    r0.w = dot(r7.xyw, r7.xyw);
    r0.w = rsqrt(r0.w);
    r7.xyz = r7.xyw * r0.www;
    r0.w = dot(r6.zw, r6.zw);
    r8.zw = -r0.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r0.w = max(r8.z, 0.000000000e+000);
    r0.w = sqrt(r0.w);
    r8.xy = r6.zw * r0.ww;
    r0.w = dot(r8.xyw, r8.xyw);
    r0.w = rsqrt(r0.w);
    r6.xyz = r8.xyw * r0.www;
    r0.w = dot(r1.xy, float2(6.528000e+004,2.550000e+002));
    r0.w = round(r0.w);
    r1.x = 3.125000000e-002 * r0.w;
    r1.x = trunc(r1.x);
    r8.z = r0.w * 3.125000000e-002 + -r1.x;
    r0.w = 1.562500000e-002 * r1.x;
    r8.x = trunc(r0.w);
    r8.y = r1.x * 1.562500000e-002 + -r8.x;
    r8.xyz = float3(3.225806e-002,1.015873e+000,1.032258e+000) * r8.xyz;
    r1.xy = float2(2.550000e+002,2.550000e+002) * r1.zw;
    r1.xy = round(r1.xy);
    r1.zw = float2(6.250000e-002,6.250000e-002) * r1.xy;
    r9.xy = trunc(r1.zw);
    r9.zw = r1.xy * float2(6.250000e-002,6.250000e-002) + -r9.xy;
    r1.xw = float2(1.066667e+000,6.666667e-002) * r9.wy;
    r1.yz = r9.xz * float2(8.000001e-001,1.280000e+001) + float2(1.000000e+000,1.000000e+000);
    r1.yz = exp2(r1.yz);
    r1.yz = r1.yz * float2(1.443000e+000,1.443000e+000) + float2(1.443000e+000,1.443000e+000);
    r9.xyzw = r3.xyzw * r3.xyzw;
    r10.xyz = r9.www;
  } else {
    r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r0.w = dot(r2.xyz, r2.xyz);
    r0.w = rsqrt(r0.w);
    r7.xyz = r2.xyz * r0.www;
    r3.xyzw = r3.xyzw * r3.xyzw;
    r0.w = r0.z == 5;
    if (r0.w != 0) {
      r9.xyz = r3.xyz * r3.www;
      r10.xyz = r3.xyz;
    } else {
      r0.z = r0.z == 1;
      if (r0.z != 0) {
        r10.xyz = r3.www * r3.xyz;
      } else {
        r10.xyz = r3.www;
      }
      r9.xyz = r3.xyz;
    }
    r0.z = 0.000000000e+000 < r10.x;
    r0.z = r0.z ? r2.w : 0;
    r0.z = r0.z * 1.200000000e+001 + 1.000000000e+000;
    r0.z = exp2(r0.z);
    r1.y = r0.z * 1.442999959e+000 + 1.442999959e+000;
    r6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r1.xzw = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r8.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  }
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r0.xy;
  r4.w = 1.000000000e+000;
  r0.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r0.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r0.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.w = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r0.w = 1.000000e+000 / r0.w;


float4 r28, r26, r27;
r26.xyz = r0.xyz * r0.www;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r0.xyz = r26.xyz / r0.www;

  r2.xyz = r0.xyz * r0.www;


  r3.x = dot(r2.xyz, r2.xyz);
  r3.x = rsqrt(r3.x);
  r3.xyz = r3.xxx * r2.xyz;
  r0.xyz = -r0.xyz * r0.www + v1.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r3.w = rsqrt(r0.w);
  r4.xyz = r3.www * r0.xyz;
  r0.w = v3.w + r0.w;
  r0.w = 1.000000e+000 / r0.w;
  r0.w = v1.w + r0.w;
  r0.w = max(r0.w, 0.000000000e+000);
  r2.w = 1.000000000e+000;
  r11.x = dot(r2.xyzw, v7.xyzw);
  r11.y = dot(r2.xyzw, v8.xyzw);
  r4.w = dot(r2.xyzw, v9.xyzw);
  r2.x = dot(r2.xyzw, v10.xyzw);
  r2.x = 1.000000e+000 / r2.x;
  r2.yz = r11.xy * r2.xx;
  r2.x = r4.w * r2.x;
  r2.w = max(abs(r2.z), abs(r2.y));
  r2.w = 1.000000000e+000 + -r2.w;
  r2.w = min(r2.w, r4.w);
  r2.w = r2.w < 0.000000000e+000;
  if (r2.w != 0) discard;
  r11.xy = r2.yz * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r2.y = g_shadowmapDimensions.x;
  r2.z = 1.000000e+000 / r2.y;
  r2.yw = r2.yy * r11.xy + float2(5.000000e-001,5.000000e-001);
  r5.zw = floor(r2.yw);
  r2.yw = -r5.zw + r2.yw;
  r5.zw = r5.zw * r2.zz;
  r12.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(-2,-2)).xyzw;
  r13.xyzw = float4(1.000000e+000,2.000000e+000,3.000000e+000,5.000000e+000) + -r2.yyyy;
  r14.xyzw = r13.xyxy * r12.wzxy;
  r12.zw = r14.xz + r14.yw;
  r14.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(0,-2)).xyzw;
  r12.zw = r14.zy * float2(2.000000e+000,2.000000e+000) + r12.zw;
  r12.zw = r14.wx * float2(2.000000e+000,2.000000e+000) + r12.zw;
  r15.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(2,-2)).xyzw;
  r16.xyzw = float4(1.000000e+000,4.000000e+000,3.000000e+000,2.000000e+000) + r2.yyyy;
  r2.z = r15.y * r2.y;
  r12.zw = r15.zy * r2.yy + r12.zw;
  r12.zw = r15.wx * r16.xx + r12.zw;
  r17.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(-2,0)).xyzw;
  r4.w = -r2.y * 2.000000000e+000 + 2.000000000e+000;
  r14.zw = r17.wx * r4.ww;
  r6.w = r2.y * -2.000000000e+000 + 4.000000000e+000;
  r14.zw = r17.zy * r6.ww + r14.zw;
  r6.w = r12.y * r13.z + r14.z;
  r6.w = r12.x * r4.w + r6.w;
  r7.w = r17.z * r13.z + r14.w;
  r7.w = r17.w * r4.w + r7.w;
  r18.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(0,0)).xyzw;
  r6.w = r18.z * r16.y + r6.w;
  r6.w = r18.w * r13.w + r6.w;
  r7.w = r18.y * r16.y + r7.w;
  r7.w = r18.x * r13.w + r7.w;
  r12.xy = float2(4.000000e+000,1.000000e+000) + -r2.yw;
  r6.w = r14.y * r16.z + r6.w;
  r6.w = r14.x * r12.x + r6.w;
  r7.w = r18.z * r16.z + r7.w;
  r7.w = r18.w * r12.x + r7.w;
  r14.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(2,0)).xyzw;
  r8.w = r2.y * 2.000000000e+000 + 2.000000000e+000;
  r9.w = dot(r14.zz, r2.yy);
  r6.w = r9.w + r6.w;
  r6.w = r14.w * r8.w + r6.w;
  r10.w = dot(r14.yy, r2.yy);
  r7.w = r10.w + r7.w;
  r7.w = r14.x * r8.w + r7.w;
  r2.z = r2.z * 2.000000000e+000 + r6.w;
  r15.x = r15.x * r16.w + r2.z;
  r2.z = r9.w + r7.w;
  r15.y = r14.w * r16.w + r2.z;
  r12.zw = r15.xy + r12.zw;
  r15.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(-2,2)).xyzw;
  r19.xyzw = r15.wzxy * r13.xyxy;
  r13.xy = r19.xz + r19.yw;
  r2.z = r17.y * r13.z + r13.x;
  r2.z = r17.x * r4.w + r2.z;
  r6.w = r15.z * r13.z + r13.y;
  r4.w = r15.w * r4.w + r6.w;
  r13.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(0,2)).xyzw;
  r2.z = r13.z * 2.000000000e+000 + r2.z;
  r2.z = r13.w * 2.000000000e+000 + r2.z;
  r4.w = r13.y * 2.000000000e+000 + r4.w;
  r4.w = r13.x * 2.000000000e+000 + r4.w;
  r2.z = r18.y * r16.z + r2.z;
  r2.z = r18.x * r12.x + r2.z;
  r4.w = r13.z * r16.z + r4.w;
  r4.w = r13.w * r12.x + r4.w;
  r13.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(2,2)).xyzw;
  r2.x = r13.z * r2.y;
  r2.z = r13.z * r2.y + r2.z;
  r2.z = r13.w * r16.x + r2.z;
  r2.y = r13.y * r2.y + r4.w;
  r2.y = r13.x * r16.x + r2.y;
  r2.z = r10.w + r2.z;
  r13.x = r14.x * r16.w + r2.z;
  r2.x = r2.x * 2.000000000e+000 + r2.y;
  r13.y = r13.w * r16.w + r2.x;
  r2.xy = r13.xy + r12.zw;
  r2.y = r2.y * r2.w;
  r2.x = r2.x * r12.y + r2.y;
  r2.x = 1.694915257e-002 * r2.x;
  r0.w = r2.x * r0.w;
  r2.x = dot(r7.xyz, r4.xyz);
  r2.y = saturate(r2.x);
  r2.yzw = v2.xyz * r2.yyy;
  r2.yzw = r2.yzw * r0.www;
  if (r5.x != 0) {
    r1.x = saturate(r1.x);
    r2.x = r1.x * 5.000000000e-001 + r2.x;
    r1.x = r1.x * 5.000000000e-001 + 1.000000000e+000;
    r1.x = saturate(r2.x / r1.x);
    r4.xyz = v2.xyz * r1.xxx;
    r4.xyz = r4.xyz * r0.www;
    r12.xyz = -r7.xyz * r1.www + r6.xyz;
    r0.w = dot(r12.xyz, r12.xyz);
    r0.w = rsqrt(r0.w);
    r12.xyz = r12.xyz * r0.www;
    r13.xyz = r0.xyz * r3.www + -r3.xyz;
    r0.w = dot(r13.xyz, r13.xyz);
    r0.w = rsqrt(r0.w);
    r13.xyz = r13.xyz * r0.www;
    r0.w = dot(r6.xyz, r13.xyz);
    r0.w = -r0.w * r0.w + 1.000000000e+000;
    r0.w = max(r0.w, 0.000000000e+000);
    r0.w = sqrt(r0.w);
    r0.w = log2(r0.w);
    r0.w = r1.y * r0.w;
    r0.w = exp2(r0.w);
    r1.x = dot(r12.xyz, r13.xyz);
    r1.x = -r1.x * r1.x + 1.000000000e+000;
    r1.x = max(r1.x, 0.000000000e+000);
    r1.x = sqrt(r1.x);
    r1.x = log2(r1.x);
    r1.x = r1.z * r1.x;
    r1.x = exp2(r1.x);
    r1.xzw = r1.xxx * r8.xyz;
    r1.xzw = r0.www * r10.xxx + r1.xzw;
    r1.xzw = r2.yzw * r1.xzw;
    r1.xzw = v2.www * r1.xzw;
    r1.xzw = float3(1.500000e-001,1.500000e-001,1.500000e-001) * r1.xzw;
    r2.yzw = r4.xyz;
  } else {
    r0.xyz = r0.xyz * r3.www + -r3.xyz;
    r0.w = dot(r0.xyz, r0.xyz);
    r0.w = rsqrt(r0.w);
    r0.xyz = r0.xyz * r0.www;
    r0.x = saturate(dot(r7.xyz, r0.xyz));
    r0.y = r1.y * 8.662509918e-002 + 8.750000000e-001;
    r0.x = r0.x * r1.y + -r1.y;
    r0.x = exp2(r0.x);
    r0.x = r0.y * r0.x;
    r0.xyz = r2.yzw * r0.xxx;
    r1.xzw = v2.www * r0.xyz;
  }
  r11.z = 1.000000000e+000 + -r11.y;
  r0.xyz = g_cookieTexture.SampleLevel(g_cookieSampler_s, r11.xz, 0.000000000e+000).xyz;
  r2.xyz = r2.yzw * r0.xyz;
  r0.xyz = r1.xzw * r0.xyz;
  if (r5.x == 0) {
    r0.xyz = r0.xyz * r10.xyz;
  }
  r0.w = r5.y ? 0.000000000e+000 : 1.000000000e+000;
  r1.xyz = r0.xyz * r0.www;
  o0.xyz = r2.xyz * r9.xyz + r1.xyz;
  o1.xyz = r0.xyz;
  o1.w = 0.000000000e+000;
  o0.w = 0.000000000e+000;
  return;
}
