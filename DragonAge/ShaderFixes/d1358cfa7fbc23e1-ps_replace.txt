
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float4 g_keyColor : packoffset(c9);
  float2 g_lightAngularRadius : packoffset(c10);
  float4 g_keyTranslucencyParams : packoffset(c11);
  float4 g_subParams : packoffset(c12);
  float4 g_envmapParams : packoffset(c13);
  float g_skyEnvmap8BitTexInvScale : packoffset(c14);
  float4 g_exposureMultipliers : packoffset(c15);
  float4 g_envmapsMipmapCount : packoffset(c16);
  int g_drawReference : packoffset(c17);
  float g_skyEnvmapMipmapCount : packoffset(c17.y);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_customSampler_s : register(s2);
SamplerState g_diffuseOcclusionSampler_s : register(s3);
SamplerState g_dynamicEnvmapSampler_s : register(s4);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
TextureCube<float4> g_customEnvmap : register(t2);
Texture2D<float4> g_diffuseOcclusionTexture : register(t3);
TextureCube<float4> g_dynamicEnvmap : register(t4);
Texture2D<float4> g_depthTexture : register(t5);
Texture2D<float4> g_gbufferTexture0 : register(t6);
Texture2D<float4> g_gbufferTexture1 : register(t7);
Texture2D<float4> g_gbufferTexture2 : register(t8);
Texture2D<float4> g_gbufferTexture3 : register(t9);
Texture2D<float4> g_shadowAccumTexture : register(t10);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_gbufferTexture0.Load(r1.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r4.xyzw = g_gbufferTexture2.Load(r1.xyw).yxzw;
  r5.xyz = g_gbufferTexture3.Load(r1.xyw).xyz;
  r6.z = g_depthTexture.Load(r1.xyw).x;
  r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r0.z = 2.550000000e+002 * r4.w;
  r0.z = round(r0.z * 0.5) * 2;
  r0.z = (int)r0.z;
  r3.xyzw = r3.xyzw * r3.xyzw;
  r7.x = r0.z == 5;
  r7.y = r0.z == 3;
  r7.z = r0.z == 2;
  if (r7.x != 0) {
  r8.xyz = r3.xyz * r3.www;
  r9.xyz = r3.xyz;
  } else {
  r0.w = r0.z == 1;
  if (r0.w != 0) {
  r9.xyz = r3.www * r3.xyz;
  } else {
  r9.xyz = r3.www;
  }
  r8.xyz = r3.xyz;
  }
  r0.w = 0.000000000e+000 < r9.x;
  r0.w = r0.w ? r2.w : 0;
  r2.w = r0.w * 1.200000000e+001 + 1.000000000e+000;
  r2.w = exp2(r2.w);
  r2.w = r2.w * 1.442999959e+000 + 1.442999959e+000;
  r3.xyz = g_exposureMultipliers.yyy * r5.xyz;
  r7.xw = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r6.xy = float2(1.000000e+000,-1.000000e+000) * r7.xw;
  r6.w = 1.000000000e+000;
  r10.x = dot(r6.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r10.y = dot(r6.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r10.z = dot(r6.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r3.w = dot(r6.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r3.w = 1.000000e+000 / r3.w;


float4 r28, r26, r27;
r26.xyz = r10.xyz * r3.www;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r10.xyz = r26.xyz / r3.www;

  r6.xyz = r10.xzy * r3.www;


  r5.w = dot(r6.xyz, r6.xyz);
  r6.w = rsqrt(r5.w);
  r10.xzw = r6.xzy * r6.www;
  r1.x = g_shadowAccumTexture.Load(r1.xyz).x;
  r1.y = r10.y * r3.w + g_cameraPos.y;
  r1.yz = g_lightDir.xz * r1.yy;
  r1.yz = r1.yz * g_cloudOffsetAndScale.ww + r6.xy;
  r1.yz = r1.yz * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
  r1.y = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r1.yz, 0.000000000e+000).x;
  r1.y = saturate(g_cloudCoverageExponentAndFade.x + r1.y);
  r1.y = log2(r1.y);
  r1.y = g_cloudCoverageExponentAndFade.y * r1.y;
  r1.y = exp2(r1.y);
  r1.z = sqrt(r5.w);
  r1.z = -g_cloudCoverageExponentAndFade.z + r1.z;
  r1.z = saturate(g_cloudCoverageExponentAndFade.w * r1.z);
  r1.z = r1.z * r1.z;
  r1.w = 1.000000000e+000 + -r1.y;
  r1.y = r1.z * r1.w + r1.y;
  r1.x = r1.x * r1.y;
  r1.y = saturate(dot(r2.xyz, g_lightDir.xyz));
  r1.yzw = g_keyColor.xyz * r1.yyy;
  r11.xyz = r1.yzw * r1.xxx;
  r6.xyz = -r6.xzy * r6.www + g_lightDir.xyz;
  r3.w = dot(r6.xyz, r6.xyz);
  r3.w = rsqrt(r3.w);
  r6.xyz = r6.xyz * r3.www;
  r3.w = saturate(dot(r2.xyz, r6.xyz));
  r5.w = r2.w * 8.662509918e-002 + 8.750000000e-001;
  r2.w = r3.w * r2.w + -r2.w;
  r2.w = exp2(r2.w);
  r2.w = r5.w * r2.w;
  r6.xyz = r11.xyz * r2.www;
  r11.xyz = g_keyColor.www * r6.xyz;
  r1.yzw = r1.yzw * r1.xxx + r3.xyz;
  r2.w = dot(r10.xzw, r2.xyz);
  r2.w = r2.w + r2.w;
  r3.xyz = r2.xyz * -r2.www + r10.xzw;
  if (r7.y != 0) {
  r2.w = (int)g_envmapsMipmapCount.z;
  r3.w = round(g_envmapsMipmapCount.z);
  r3.w = -r0.w * 1.500000000e+001 + r3.w;
  r3.w = 5.000000000e+000 + r3.w;
  r2.w = (int)r2.w + -1;
  r2.w = r2.w;
  r3.w = max(r3.w, 0.000000000e+000);
  r2.w = min(r2.w, r3.w);
  r7.xyw = g_dynamicEnvmap.SampleLevel(g_dynamicEnvmapSampler_s, r3.xyz, r2.w).xyz;
  r6.xyz = r6.xyz * g_keyColor.www + r7.xyw;
  } else {
  r2.w = log2(abs(r4.y));
  r2.w = g_envmapParams.z * r2.w;
  r2.w = exp2(r2.w);
  r12.x = r4.z == 0;
  r12.y = r4.z == 3.922000e-003;
  r12.z = r4.z == 7.843000e-003;
  r12.w = r4.z == 1.176500e-002;
  r12.x = r12.x ? g_envmapParams.x : 0;
  r12.y = r12.y ? g_envmapParams.x : 0;
  r12.z = r12.z ? g_envmapParams.x : 0;
  r12.w = r12.w ? g_envmapParams.x : 0;
  r3.w = 1.000000000e+000 + -g_envmapParams.w;
  r3.w = r1.x * r3.w + g_envmapParams.w;
  r3.w = r3.w * r2.w;
  r4.yz = (int2)g_envmapsMipmapCount.xy;
  r7.x = round(g_envmapsMipmapCount.x);
  r7.y = round(g_envmapsMipmapCount.y);
  r7.xy = -r0.ww * float2(1.500000e+001,1.500000e+001) + r7.xy;
  r7.xy = float2(5.000000e+000,5.000000e+000) + r7.xy;
  r4.yz = (int2)r4.yz + int2(-1,-1);
  r4.yz = r4.yz;
  r7.xy = max(r7.xy, float2(0.000000e+000,0.000000e+000));
  r4.yz = min(r4.yz, r7.xy);
  r13.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r3.xyz, r4.z).xyzw;
  r0.w = dot(r12.xyzw, r13.xyzw);
  r3.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r3.xyz, r4.y).xyz;
  r3.xyz = r3.xyz * r3.www;
  r3.xyz = r3.xyz * g_skyEnvmap8BitTexInvScale + r11.xyz;
  r5.xyz = r5.xyz * g_exposureMultipliers.yyy + g_envmapParams.yyy;
  r5.xyz = r5.xyz * r0.www;
  r0.w = 1.000000000e+000 + -r2.w;
  r6.xyz = r5.xyz * r0.www + r3.xyz;
  }
  r0.z = (int)r0.z >= (int)6;
  if (r0.z != 0) {
  r0.z = saturate(-2.352941222e-002 + r4.w);
  r3.y = 1.000000000e+000 + -r0.z;
  r4.x = saturate(r4.x);
  r3.x = 1.000000000e+000 + -r4.x;
  r2.xyz = r2.xyz * g_keyTranslucencyParams.www + g_lightDir.xyz;
  r0.z = saturate(dot(-r10.xzw, -r2.xyz));
  r2.xy = g_keyTranslucencyParams.yy * r3.xy;
  r2.xy = float2(-1.442695e+000,-1.442695e+000) * r2.xy;
  r2.xy = exp2(r2.xy);
  r0.z = r0.z * g_keyTranslucencyParams.z + g_keyTranslucencyParams.x;
  r0.z = dot(r0.zz, r2.xy);
  r0.z = r0.z * r1.x;
  r1.yzw = r0.zzz * g_keyColor.xyz + r1.yzw;
  }
  r2.xyz = r6.xyz * r9.xyz;
  r0.z = r7.z ? 0.000000000e+000 : 1.000000000e+000;
  r3.xyz = r2.xyz * r0.zzz;
  o0.xyz = r1.yzw * r8.xyz + r3.xyz;
  r0.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r0.y, r0.x);
  r0.x = min(r0.z, r0.x);
  o0.w = min(r0.w, r0.x);
  o1.xyz = r2.xyz;
  o1.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float4 g_keyColor;                 // Offset:  144 Size:    16
//   float2 g_lightAngularRadius;       // Offset:  160 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  176 Size:    16
//   float4 g_subParams;                // Offset:  192 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  208 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  224 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  240 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  256 Size:    16
//   int g_drawReference;               // Offset:  272 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  276 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_customSampler                   sampler      NA          NA    2        1
// g_diffuseOcclusionSampler         sampler      NA          NA    3        1
// g_dynamicEnvmapSampler            sampler      NA          NA    4        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_customEnvmap                    texture  float4        cube    2        1
// g_diffuseOcclusionTexture         texture  float4          2d    3        1
// g_dynamicEnvmap                   texture  float4        cube    4        1
// g_depthTexture                    texture  float4          2d    5        1
// g_gbufferTexture0                 texture  float4          2d    6        1
// g_gbufferTexture1                 texture  float4          2d    7        1
// g_gbufferTexture2                 texture  float4          2d    8        1
// g_gbufferTexture3                 texture  float4          2d    9        1
// g_shadowAccumTexture              texture  float4          2d   10        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 14
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t6.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t7.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t8.yxzw
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t9.xyzw
ld_indexable(texture2d)(float,float,float,float) r6.z, r1.xyww, t5.yzxw
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
mul r0.z, r4.w, l(255.000000)
round_ne r0.z, r0.z
ftoi r0.z, r0.z
mul r3.xyzw, r3.xyzw, r3.xyzw
ieq r7.xyz, r0.zzzz, l(5, 3, 2, 0)
if_nz r7.x
  mul r8.xyz, r3.wwww, r3.xyzx
  mov r9.xyz, r3.xyzx
else 
  ieq r0.w, r0.z, l(1)
  if_nz r0.w
    mul r9.xyz, r3.xyzx, r3.wwww
  else 
    mov r9.xyz, r3.wwww
  endif 
  mov r8.xyz, r3.xyzx
endif 
lt r0.w, l(0.000000), r9.x
and r0.w, r2.w, r0.w
mad r2.w, r0.w, l(12.000000), l(1.000000)
exp r2.w, r2.w
mad r2.w, r2.w, l(1.443000), l(1.443000)
mul r3.xyz, r5.xyzx, cb0[15].yyyy
mad r7.xw, r0.xxxy, l(2.000000, 0.000000, 0.000000, 2.000000), l(-1.000000, 0.000000, 0.000000, -1.000000)
mul r6.xy, r7.xwxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r6.w, l(1.000000)
dp4 r10.x, r6.xyzw, cb0[2].xyzw
dp4 r10.y, r6.xyzw, cb0[3].xyzw
dp4 r10.z, r6.xyzw, cb0[4].xyzw
dp4 r3.w, r6.xyzw, cb0[5].xyzw
div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
mul r6.xyz, r3.wwww, r10.xzyx
dp3 r5.w, r6.xyzx, r6.xyzx
rsq r6.w, r5.w
mul r10.xzw, r6.wwww, r6.xxzy
ld_indexable(texture2d)(float,float,float,float) r1.x, r1.xyzw, t10.xyzw
mad r1.y, r10.y, r3.w, cb0[0].y
mul r1.yz, r1.yyyy, cb0[8].xxzx
mad r1.yz, r1.yyzy, cb0[6].wwww, r6.xxyx
mad r1.yz, r1.yyzy, cb0[6].zzzz, cb0[6].xxyx
sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t0.yxzw, s0, l(0.000000)
add_sat r1.y, r1.y, cb0[7].x
log r1.y, r1.y
mul r1.y, r1.y, cb0[7].y
exp r1.y, r1.y
sqrt r1.z, r5.w
add r1.z, r1.z, -cb0[7].z
mul_sat r1.z, r1.z, cb0[7].w
mul r1.z, r1.z, r1.z
add r1.w, -r1.y, l(1.000000)
mad r1.y, r1.z, r1.w, r1.y
mul r1.x, r1.y, r1.x
dp3_sat r1.y, r2.xyzx, cb0[8].xyzx
mul r1.yzw, r1.yyyy, cb0[9].xxyz
mul r11.xyz, r1.xxxx, r1.yzwy
mad r6.xyz, -r6.xzyx, r6.wwww, cb0[8].xyzx
dp3 r3.w, r6.xyzx, r6.xyzx
rsq r3.w, r3.w
mul r6.xyz, r3.wwww, r6.xyzx
dp3_sat r3.w, r2.xyzx, r6.xyzx
mad r5.w, r2.w, l(0.086625), l(0.875000)
mad r2.w, r3.w, r2.w, -r2.w
exp r2.w, r2.w
mul r2.w, r2.w, r5.w
mul r6.xyz, r2.wwww, r11.xyzx
mul r11.xyz, r6.xyzx, cb0[9].wwww
mad r1.yzw, r1.yyzw, r1.xxxx, r3.xxyz
dp3 r2.w, r10.xzwx, r2.xyzx
add r2.w, r2.w, r2.w
mad r3.xyz, r2.xyzx, -r2.wwww, r10.xzwx
if_nz r7.y
  ftoi r2.w, cb0[16].z
  round_z r3.w, cb0[16].z
  mad r3.w, -r0.w, l(15.000000), r3.w
  add r3.w, r3.w, l(5.000000)
  iadd r2.w, r2.w, l(-1)
  itof r2.w, r2.w
  max r3.w, r3.w, l(0.000000)
  min r2.w, r2.w, r3.w
  sample_l_indexable(texturecube)(float,float,float,float) r7.xyw, r3.xyzx, t4.xywz, s4, r2.w
  mad r6.xyz, r6.xyzx, cb0[9].wwww, r7.xywx
else 
  log r2.w, |r4.y|
  mul r2.w, r2.w, cb0[13].z
  exp r2.w, r2.w
  eq r12.xyzw, r4.zzzz, l(0.000000, 0.003922, 0.007843, 0.011765)
  and r12.xyzw, r12.xyzw, cb0[13].xxxx
  add r3.w, -cb0[13].w, l(1.000000)
  mad r3.w, r1.x, r3.w, cb0[13].w
  mul r3.w, r2.w, r3.w
  ftoi r4.yz, cb0[16].xxyx
  round_z r7.xy, cb0[16].xyxx
  mad r7.xy, -r0.wwww, l(15.000000, 15.000000, 0.000000, 0.000000), r7.xyxx
  add r7.xy, r7.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
  iadd r4.yz, r4.yyzy, l(0, -1, -1, 0)
  itof r4.yz, r4.yyzy
  max r7.xy, r7.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r4.yz, r4.yyzy, r7.xxyx
  sample_l_indexable(texturecube)(float,float,float,float) r13.xyzw, r3.xyzx, t2.xyzw, s2, r4.z
  dp4 r0.w, r12.xyzw, r13.xyzw
  sample_l_indexable(texturecube)(float,float,float,float) r3.xyz, r3.xyzx, t1.xyzw, s1, r4.y
  mul r3.xyz, r3.wwww, r3.xyzx
  mad r3.xyz, r3.xyzx, cb0[14].xxxx, r11.xyzx
  mad r5.xyz, r5.xyzx, cb0[15].yyyy, cb0[13].yyyy
  mul r5.xyz, r0.wwww, r5.xyzx
  add r0.w, -r2.w, l(1.000000)
  mad r6.xyz, r5.xyzx, r0.wwww, r3.xyzx
endif 
ige r0.z, r0.z, l(6)
if_nz r0.z
  add_sat r0.z, r4.w, l(-0.023529)
  add r3.y, -r0.z, l(1.000000)
  mov_sat r4.x, r4.x
  add r3.x, -r4.x, l(1.000000)
  mad r2.xyz, r2.xyzx, cb0[11].wwww, cb0[8].xyzx
  dp3_sat r0.z, -r10.xzwx, -r2.xyzx
  mul r2.xy, r3.xyxx, cb0[11].yyyy
  mul r2.xy, r2.xyxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
  exp r2.xy, r2.xyxx
  mad r0.z, r0.z, cb0[11].z, cb0[11].x
  dp2 r0.z, r0.zzzz, r2.xyxx
  mul r0.z, r1.x, r0.z
  mad r1.yzw, r0.zzzz, cb0[9].xxyz, r1.yyzw
endif 
mul r2.xyz, r9.xyzx, r6.xyzx
movc r0.z, r7.z, l(0), l(1.000000)
mul r3.xyz, r0.zzzz, r2.xyzx
mad o0.xyz, r1.yzwy, r8.xyzx, r3.xyzx
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t3.xyzw, s3.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
mov o1.xyz, r2.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 147 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
