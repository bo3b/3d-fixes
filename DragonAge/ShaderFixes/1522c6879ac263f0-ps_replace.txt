
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4x4 g_viewToShadowMatrix : packoffset(c6);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c10);
  float4 g_shadowmapPoissonScale : packoffset(c11);
  float4 g_shadowmapNoiseTilingFactor : packoffset(c12);
  float g_shadowPenumbraSize : packoffset(c13);
  float4 g_pcssFilterParameters0 : packoffset(c14);
  float4 g_pcssFilterParameters1 : packoffset(c15);
  float4x4 g_shadowmapViewMatrix : packoffset(c16);
  float4 g_shadowmapScales : packoffset(c20);
  float3 g_shadowBoxSize : packoffset(c21);
  float3 g_shadowBoxHalfSize : packoffset(c22);
  float4 g_shadowFadeOffsetAndSlope : packoffset(c23);
  float3 g_lightDir : packoffset(c24);
  float4x4 g_shadowmapTransform : packoffset(c25);
  uint4 g_shadowmapDimensions : packoffset(c29);
}
SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2D<float4> g_depthTexture : register(t1);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = (int2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_depthTexture.Load(r0.xyz).x;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.xy = float2(1.000000e+000,-1.000000e+000) * r1.xy;
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r1.x = 1.000000e+000 / r1.x;
  r2.x = dot(r0.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r2.z = dot(r0.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);


float4 r28, r26, r27;
r26.xyz = r2.xyz * r1.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r2.xyz = r26.xyz / r1.xxx;

  r0.xyz = r2.xyz * r1.xxx;


  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, g_shadowmapTransform._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_shadowmapTransform._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, g_shadowmapTransform._m02_m12_m22_m32);
  r0.x = g_shadowmapDimensions.x;
  r0.yz = r0.xx * r1.xy + float2(5.000000e-001,5.000000e-001);
  r1.xyw = r1.xyz * g_shadowBoxSize.xyz + g_shadowBoxHalfSize.xyz;
  r1.xyw = saturate(abs(r1.xyw) * g_shadowFadeOffsetAndSlope.www + g_shadowFadeOffsetAndSlope.xyz);
  r0.x = 1.000000e+000 / r0.x;
  r2.xy = floor(r0.yz);
  r0.yz = -r2.xy + r0.yz;
  r0.xw = r2.xy * r0.xx;
  r2.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(2,0)).xyzw;
  r3.x = r0.y * 2.000000000e+000 + 2.000000000e+000;
  r3.yz = float2(4.000000e+000,1.000000e+000) + -r0.yz;
  r4.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(0,0)).xyzw;
  r5.xyzw = float4(1.000000e+000,4.000000e+000,3.000000e+000,2.000000e+000) + r0.yyyy;
  r6.xyzw = float4(1.000000e+000,2.000000e+000,3.000000e+000,5.000000e+000) + -r0.yyyy;
  r3.w = -r0.y * 2.000000000e+000 + 2.000000000e+000;
  r7.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(-2,0)).xyzw;
  r8.x = r0.y * -2.000000000e+000 + 4.000000000e+000;
  r8.yz = r7.wx * r3.ww;
  r8.xy = r7.zy * r8.xx + r8.yz;
  r7.z = r7.z * r6.z + r8.y;
  r7.z = r7.w * r3.w + r7.z;
  r7.z = r4.y * r5.y + r7.z;
  r7.z = r4.x * r6.w + r7.z;
  r7.z = r4.z * r5.z + r7.z;
  r7.z = r4.w * r3.y + r7.z;
  r2.y = dot(r2.yy, r0.yy);
  r7.z = r2.y + r7.z;
  r7.z = r2.x * r3.x + r7.z;
  r2.z = dot(r2.zz, r0.yy);
  r7.z = r2.z + r7.z;
  r9.y = r2.w * r5.w + r7.z;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(0,-2)).xyzw;
  r11.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(-2,-2)).xyzw;
  r7.z = r11.y * r6.z + r8.x;
  r7.z = r11.x * r3.w + r7.z;
  r8.xyzw = r11.wzxy * r6.xyxy;
  r8.xy = r8.xz + r8.yw;
  r8.xy = r10.zy * float2(2.000000e+000,2.000000e+000) + r8.xy;
  r8.xy = r10.wx * float2(2.000000e+000,2.000000e+000) + r8.xy;
  r4.z = r4.z * r5.y + r7.z;
  r4.z = r4.w * r6.w + r4.z;
  r4.z = r10.y * r5.z + r4.z;
  r4.z = r10.x * r3.y + r4.z;
  r2.z = r4.z + r2.z;
  r2.z = r2.w * r3.x + r2.z;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(2,-2)).xyzw;
  r2.w = r10.y * r0.y;
  r2.z = r2.w * 2.000000000e+000 + r2.z;
  r9.x = r10.x * r5.w + r2.z;
  r2.zw = r10.zy * r0.yy + r8.xy;
  r2.zw = r10.wx * r5.xx + r2.zw;
  r2.zw = r2.zw + r9.xy;
  r8.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(-2,2)).xyzw;
  r9.xyzw = r8.wzxy * r6.xyxy;
  r4.zw = r9.xz + r9.yw;
  r3.x = r8.z * r6.z + r4.w;
  r3.x = r8.w * r3.w + r3.x;
  r4.z = r7.y * r6.z + r4.z;
  r3.w = r7.x * r3.w + r4.z;
  r6.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(0,2)).xyzw;
  r7.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(2,2)).xyzw;
  r0.x = r6.y * 2.000000000e+000 + r3.x;
  r0.x = r6.x * 2.000000000e+000 + r0.x;
  r0.x = r6.z * r5.z + r0.x;
  r0.x = r6.w * r3.y + r0.x;
  r0.x = r7.y * r0.y + r0.x;
  r0.x = r7.x * r5.x + r0.x;
  r0.w = r7.z * r0.y;
  r0.x = r0.w * 2.000000000e+000 + r0.x;
  r6.y = r7.w * r5.w + r0.x;
  r0.x = r6.z * 2.000000000e+000 + r3.w;
  r0.x = r6.w * 2.000000000e+000 + r0.x;
  r0.x = r4.y * r5.z + r0.x;
  r0.x = r4.x * r3.y + r0.x;
  r0.x = r7.z * r0.y + r0.x;
  r0.x = r7.w * r5.x + r0.x;
  r0.x = r2.y + r0.x;
  r6.x = r2.x * r5.w + r0.x;
  r0.xy = r6.xy + r2.zw;
  r0.y = r0.y * r0.z;
  r0.x = r0.x * r3.z + r0.y;
  o0.xyz = float3(1.694915e-002,1.694915e-002,1.694915e-002) * r0.xxx;
  r0.x = min(r1.y, r1.x);
  o0.w = min(r1.w, r0.x);
  return;
}
