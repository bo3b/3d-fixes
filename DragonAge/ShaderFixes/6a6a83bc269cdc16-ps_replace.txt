
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float4 g_exposureMultipliers : packoffset(c7);
  uint4 g_shadowmapDimensions : packoffset(c8);
}
SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2D<float4> g_depthTexture : register(t1);
Texture2D<float4> g_gbufferTexture0 : register(t2);
Texture2D<float4> g_gbufferTexture1 : register(t3);
Texture2D<float4> g_gbufferTexture2 : register(t4);
Texture2D<float4> g_gbufferTexture4 : register(t5);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyz = g_gbufferTexture0.Load(r1.xyw).xyz;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r0.z = g_gbufferTexture2.Load(r1.xyw).w;
  r4.z = g_depthTexture.Load(r1.xyw).x;
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = round(r0.z);
  r0.z = (int)r0.z;
  r0.w = r0.z == 4;
  if (r0.w != 0) {
    r1.x = g_gbufferTexture4.Load(r1.xyz).w;
    r1.yz = r2.xy * float2(4.000000e+000,4.000000e+000) + float2(-2.000000e+000,-2.000000e+000);
    r1.w = dot(r1.yz, r1.yz);
    r5.zw = -r1.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r1.w = max(r5.z, 0.000000000e+000);
    r1.w = sqrt(r1.w);
    r5.xy = r1.yz * r1.ww;
    r1.y = dot(r5.xyw, r5.xyw);
    r1.y = rsqrt(r1.y);
    r1.yzw = r5.xyw * r1.yyy;
    r1.x = 2.550000000e+002 * r1.x;
    r1.x = round(r1.x);
    r2.w = 6.250000000e-002 * r1.x;
    r2.w = trunc(r2.w);
    r1.x = r1.x * 6.250000000e-002 + -r2.w;
    r1.x = 1.066666722e+000 * r1.x;
    r5.xyz = r3.xyz * r3.xyz;
  } else {
    r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r2.w = dot(r2.xyz, r2.xyz);
    r2.w = rsqrt(r2.w);
    r1.yzw = r2.xyz * r2.www;
    r5.xyzw = r3.xyzw * r3.xyzw;
    r0.z = r0.z == 5;
    if (r0.z != 0) {
      r5.xyz = r5.xyz * r5.www;
    }
    r1.x = 0.000000000e+000;
  }
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r0.xy;
  r4.w = 1.000000000e+000;
  r0.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r0.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r0.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r2.x = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r2.x = 1.000000e+000 / r2.x;


float4 r28, r26, r27;
r26.xyz = r0.xyz * r2.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r0.xyz = r26.xyz / r2.xxx;

  r3.xyz = r2.xxx * r0.xyz;


  r0.xyz = -r0.xyz * r2.xxx + v1.xyz;
  r2.x = dot(r0.xyz, r0.xyz);
  r2.y = rsqrt(r2.x);
  r0.xyz = r2.yyy * r0.xyz;
  r2.x = v3.w + r2.x;
  r2.x = 1.000000e+000 / r2.x;
  r2.x = v1.w + r2.x;
  r2.x = max(r2.x, 0.000000000e+000);
  r2.y = dot(v6.xyz, r0.xyz);
  r2.y = saturate(r2.y * v5.x + v5.y);
  r2.y = 1.000000000e+000 + -r2.y;
  r2.x = r2.x * r2.y;
  r3.w = 1.000000000e+000;
  r4.x = dot(r3.xyzw, v7.xyzw);
  r4.y = dot(r3.xyzw, v8.xyzw);
  r2.y = dot(r3.xyzw, v9.xyzw);
  r2.z = dot(r3.xyzw, v10.xyzw);
  r2.z = 1.000000e+000 / r2.z;
  r3.xy = r4.xy * r2.zz;
  r2.z = r2.y * r2.z;
  r2.w = max(abs(r3.y), abs(r3.x));
  r2.w = 1.000000000e+000 + -r2.w;
  r2.y = min(r2.w, r2.y);
  r2.y = r2.y < 0.000000000e+000;
  if (r2.y != 0) discard;
  r2.yw = r3.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r3.x = g_shadowmapDimensions.x;
  r3.y = 1.000000e+000 / r3.x;
  r2.yw = r3.xx * r2.yw + float2(5.000000e-001,5.000000e-001);
  r3.xz = floor(r2.yw);
  r2.yw = -r3.xz + r2.yw;
  r3.xy = r3.xz * r3.yy;
  r4.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(-2,-2)).xyzw;
  r6.xyzw = float4(1.000000e+000,2.000000e+000,3.000000e+000,5.000000e+000) + -r2.yyyy;
  r7.xyzw = r6.xyxy * r4.wzxy;
  r3.zw = r7.xz + r7.yw;
  r7.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(0,-2)).xyzw;
  r3.zw = r7.zy * float2(2.000000e+000,2.000000e+000) + r3.zw;
  r3.zw = r7.wx * float2(2.000000e+000,2.000000e+000) + r3.zw;
  r8.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(2,-2)).xyzw;
  r9.xyzw = float4(1.000000e+000,4.000000e+000,3.000000e+000,2.000000e+000) + r2.yyyy;
  r4.z = r8.y * r2.y;
  r3.zw = r8.zy * r2.yy + r3.zw;
  r3.zw = r8.wx * r9.xx + r3.zw;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(-2,0)).xyzw;
  r4.w = -r2.y * 2.000000000e+000 + 2.000000000e+000;
  r7.zw = r10.wx * r4.ww;
  r5.w = r2.y * -2.000000000e+000 + 4.000000000e+000;
  r7.zw = r10.zy * r5.ww + r7.zw;
  r4.y = r4.y * r6.z + r7.z;
  r4.x = r4.x * r4.w + r4.y;
  r4.y = r10.z * r6.z + r7.w;
  r4.y = r10.w * r4.w + r4.y;
  r11.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(0,0)).xyzw;
  r4.x = r11.z * r9.y + r4.x;
  r4.x = r11.w * r6.w + r4.x;
  r4.y = r11.y * r9.y + r4.y;
  r4.y = r11.x * r6.w + r4.y;
  r7.zw = float2(4.000000e+000,1.000000e+000) + -r2.yw;
  r4.x = r7.y * r9.z + r4.x;
  r4.x = r7.x * r7.z + r4.x;
  r4.y = r11.z * r9.z + r4.y;
  r4.y = r11.w * r7.z + r4.y;
  r12.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(2,0)).xyzw;
  r5.w = r2.y * 2.000000000e+000 + 2.000000000e+000;
  r6.w = dot(r12.zz, r2.yy);
  r4.x = r6.w + r4.x;
  r4.x = r12.w * r5.w + r4.x;
  r7.x = dot(r12.yy, r2.yy);
  r4.y = r7.x + r4.y;
  r4.y = r12.x * r5.w + r4.y;
  r4.x = r4.z * 2.000000000e+000 + r4.x;
  r8.x = r8.x * r9.w + r4.x;
  r4.x = r6.w + r4.y;
  r8.y = r12.w * r9.w + r4.x;
  r3.zw = r8.xy + r3.zw;
  r8.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(-2,2)).xyzw;
  r13.xyzw = r8.wzxy * r6.xyxy;
  r4.xy = r13.xz + r13.yw;
  r4.x = r10.y * r6.z + r4.x;
  r4.x = r10.x * r4.w + r4.x;
  r4.y = r8.z * r6.z + r4.y;
  r4.y = r8.w * r4.w + r4.y;
  r6.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(0,2)).xyzw;
  r4.x = r6.z * 2.000000000e+000 + r4.x;
  r4.x = r6.w * 2.000000000e+000 + r4.x;
  r4.y = r6.y * 2.000000000e+000 + r4.y;
  r4.y = r6.x * 2.000000000e+000 + r4.y;
  r4.x = r11.y * r9.z + r4.x;
  r4.x = r11.x * r7.z + r4.x;
  r4.y = r6.z * r9.z + r4.y;
  r4.y = r6.w * r7.z + r4.y;
  r6.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r2.z, int2(2,2)).xyzw;
  r2.z = r6.z * r2.y;
  r3.x = r6.z * r2.y + r4.x;
  r3.x = r6.w * r9.x + r3.x;
  r2.y = r6.y * r2.y + r4.y;
  r2.y = r6.x * r9.x + r2.y;
  r3.x = r7.x + r3.x;
  r3.x = r12.x * r9.w + r3.x;
  r2.y = r2.z * 2.000000000e+000 + r2.y;
  r3.y = r6.w * r9.w + r2.y;
  r2.yz = r3.zw + r3.xy;
  r2.z = r2.z * r2.w;
  r2.y = r2.y * r7.w + r2.z;
  r2.y = 1.694915257e-002 * r2.y;
  r2.x = r2.x * r2.y;
  r0.x = dot(r1.yzw, r0.xyz);
  if (r0.w != 0) {
    r1.x = saturate(r1.x);
    r0.y = r1.x * 5.000000000e-001 + r0.x;
    r0.z = r1.x * 5.000000000e-001 + 1.000000000e+000;
    r0.y = saturate(r0.y / r0.z);
    r0.yzw = v2.xyz * r0.yyy;
    r0.yzw = r0.yzw * r2.xxx;
  } else {
    r0.x = saturate(r0.x);
    r1.xyz = v2.xyz * r0.xxx;
    r0.yzw = r1.xyz * r2.xxx;
  }
  o0.xyz = r0.yzw * r5.xyz;
  o1.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  o0.w = 0.000000000e+000;
  return;
}
