
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float3 g_hemisphereDir : packoffset(c9);
  float3 g_topColor : packoffset(c10);
  float3 g_bottomColor : packoffset(c11);
  float4 g_keyColor : packoffset(c12);
  float2 g_lightAngularRadius : packoffset(c13);
  float4 g_keyTranslucencyParams : packoffset(c14);
  float4 g_subParams : packoffset(c15);
  float4 g_envmapParams : packoffset(c16);
  float g_skyEnvmap8BitTexInvScale : packoffset(c17);
  float4 g_exposureMultipliers : packoffset(c18);
  float4 g_envmapsMipmapCount : packoffset(c19);
  int g_drawReference : packoffset(c20);
  float g_skyEnvmapMipmapCount : packoffset(c20.y);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_diffuseOcclusionSampler_s : register(s2);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
Texture2D<float4> g_diffuseOcclusionTexture : register(t2);
Texture2DMS<float4,2> g_depthTexture : register(t3);
Texture2DMS<float4,2> g_gbufferTexture0 : register(t4);
Texture2DMS<float4,2> g_gbufferTexture1 : register(t5);
Texture2DMS<float4,2> g_gbufferTexture2 : register(t6);
Texture2DMS<float4,2> g_gbufferTexture3 : register(t7);
Texture2DMS<float4> g_shadowAccumTexture : register(t8);
Texture2D<float> g_msaaClassifyTexture : register(t9);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  const float4 icb[] = { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_msaaClassifyTexture.Load(r1.xyw).x;
  r0.z = 0.000000000e+000 < r0.z;
  r0.zw = r0.zz ? float2(2.802597e-045,5.000000e-001) : float2(1.401298e-045,1.000000e+000);
  r2.xyz = -g_bottomColor.xyz + g_topColor.xyz;
  r2.w = 1.000000000e+000 + -g_envmapParams.w;
  r3.x = (int)g_envmapsMipmapCount.x;
  r3.y = round(g_envmapsMipmapCount.x);
  r3.x = (int)r3.x + -1;
  r3.x = r3.x;
  r4.w = 1.000000000e+000;
  r5.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r3.z = 0.000000000e+000;
  while (true) {
  r3.w = (int)r3.z >= (int)r0.z;
  if (r3.w != 0) break;
  r7.xy = icb[r3.z].xx * g_invScreenSize.xy + r0.xy;
  r8.xyzw = g_gbufferTexture0.Load(r1.xyw,r3.z).xyzw;
  r9.xyzw = g_gbufferTexture1.Load(r1.xyw,r3.z).xyzw;
  r7.zw = g_gbufferTexture2.Load(r1.xyw,r3.z).yw;
  r10.xyz = g_gbufferTexture3.Load(r1.xyw,r3.z).xyz;
  r4.z = g_depthTexture.Load(r1.xyw,r3.z).x;
  r8.xyz = r8.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.w = dot(r8.xyz, r8.xyz);
  r3.w = rsqrt(r3.w);
  r8.xyz = r8.xyz * r3.www;
  r3.w = 2.550000000e+002 * r7.w;
  r3.w = round(r3.w * 0.5) * 2;
  r3.w = (int)r3.w;
  r9.xyzw = r9.xyzw * r9.xyzw;
  r11.x = r3.w == 5;
  r11.y = r3.w == 2;
  if (r11.x != 0) {
  r11.xzw = r9.xyz * r9.www;
  r12.xyz = r9.xyz;
  } else {
  r5.w = r3.w == 1;
  if (r5.w != 0) {
  r12.xyz = r9.www * r9.xyz;
  } else {
  r12.xyz = r9.www;
  }
  r11.xzw = r9.xyz;
  }
  r5.w = 0.000000000e+000 < r12.x;
  r5.w = r5.w ? r8.w : 0;
  r6.w = r5.w * 1.200000000e+001 + 1.000000000e+000;
  r6.w = exp2(r6.w);
  r6.w = r6.w * 1.442999959e+000 + 1.442999959e+000;
  r7.xy = r7.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r7.xy;
  r9.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r9.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r9.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r4.x = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r4.x = 1.000000e+000 / r4.x;


float4 r28, r26, r27;
r26.xyz = r9.xyz * r4.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r9.xyz = r26.xyz / r4.xxx;

  r9.xzw = r9.xzy * r4.xxx;


  r4.y = dot(r9.xzw, r9.xzw);
  r4.z = rsqrt(r4.y);
  r13.xyz = r9.xwz * r4.zzz;
  r7.x = g_shadowAccumTexture.Load(r1.xyz,r3.z).x;
  r4.x = r9.y * r4.x + g_cameraPos.y;
  r14.xy = g_lightDir.xz * r4.xx;
  r14.xy = r14.xy * g_cloudOffsetAndScale.ww + r9.xz;
  r14.xy = r14.xy * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
  r4.x = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r14.xy, 0.000000000e+000).x;
  r4.x = saturate(g_cloudCoverageExponentAndFade.x + r4.x);
  r4.x = log2(r4.x);
  r4.x = g_cloudCoverageExponentAndFade.y * r4.x;
  r4.x = exp2(r4.x);
  r4.y = sqrt(r4.y);
  r4.y = -g_cloudCoverageExponentAndFade.z + r4.y;
  r4.y = saturate(g_cloudCoverageExponentAndFade.w * r4.y);
  r4.y = r4.y * r4.y;
  r7.y = 1.000000000e+000 + -r4.x;
  r4.x = r4.y * r7.y + r4.x;
  r4.x = r7.x * r4.x;
  r4.y = saturate(dot(r8.xyz, g_lightDir.xyz));
  r14.xyz = g_keyColor.xyz * r4.yyy;
  r15.xyz = r14.xyz * r4.xxx;
  r9.xyz = -r9.xwz * r4.zzz + g_lightDir.xyz;
  r4.y = dot(r9.xyz, r9.xyz);
  r4.y = rsqrt(r4.y);
  r9.xyz = r9.xyz * r4.yyy;
  r4.y = saturate(dot(r8.xyz, r9.xyz));
  r4.z = r6.w * 8.662509918e-002 + 8.750000000e-001;
  r4.y = r4.y * r6.w + -r6.w;
  r4.y = exp2(r4.y);
  r4.y = r4.z * r4.y;
  r9.xyz = r15.xyz * r4.yyy;
  r4.y = dot(r8.xyz, g_hemisphereDir.xyz);
  r4.y = r4.y * 5.000000000e-001 + 5.000000000e-001;
  r15.xyz = r4.yyy * r2.xyz + g_bottomColor.xyz;
  r14.xyz = r14.xyz * r4.xxx + r15.xyz;
  r10.xyz = r10.xyz * g_exposureMultipliers.yyy + r14.xyz;
  r4.y = dot(r13.xyz, r8.xyz);
  r4.y = r4.y + r4.y;
  r14.xyz = r8.xyz * -r4.yyy + r13.xyz;
  r4.y = r4.x * r2.w + g_envmapParams.w;
  r4.z = -r5.w * 1.500000000e+001 + r3.y;
  r4.z = 5.000000000e+000 + r4.z;
  r4.z = max(r4.z, 0.000000000e+000);
  r4.z = min(r3.x, r4.z);
  r14.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r14.xyz, r4.z).xyz;
  r14.xyz = r14.xyz * r4.yyy;
  r14.xyz = g_skyEnvmap8BitTexInvScale * r14.xyz;
  r9.xyz = r9.xyz * g_keyColor.www + r14.xyz;
  r3.w = (int)r3.w >= (int)6;
  if (r3.w != 0) {
  r3.w = saturate(-2.352941222e-002 + r7.w);
  r7.y = 1.000000000e+000 + -r3.w;
  r7.z = saturate(r7.z);
  r7.x = 1.000000000e+000 + -r7.z;
  r8.xyz = r8.xyz * g_keyTranslucencyParams.www + g_lightDir.xyz;
  r3.w = saturate(dot(-r13.xyz, -r8.xyz));
  r4.yz = g_keyTranslucencyParams.yy * r7.xy;
  r4.yz = float2(-1.442695e+000,-1.442695e+000) * r4.yz;
  r4.yz = exp2(r4.yz);
  r3.w = r3.w * g_keyTranslucencyParams.z + g_keyTranslucencyParams.x;
  r3.w = dot(r3.ww, r4.yz);
  r3.w = r3.w * r4.x;
  r10.xyz = r3.www * g_keyColor.xyz + r10.xyz;
  }
  r4.xyz = r9.xyz * r12.xyz;
  r3.w = r11.y ? 0.000000000e+000 : 1.000000000e+000;
  r4.xyz = r4.xyz * r3.www;
  r4.xyz = r10.xyz * r11.xzw + r4.xyz;
  r6.xyz = r6.xyz + r4.xyz;
  r5.xyz = r9.xyz * r12.xyz + r5.xyz;
  r3.z = (int)r3.z + 1;
  }
  r1.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r1.y, r1.x);
  r0.x = min(r1.z, r0.x);
  o0.w = min(r1.w, r0.x);
  o0.xyz = r6.xyz * r0.www;
  o1.xyz = r5.xyz * r0.www;
  o1.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float3 g_hemisphereDir;            // Offset:  144 Size:    12
//   float3 g_topColor;                 // Offset:  160 Size:    12
//   float3 g_bottomColor;              // Offset:  176 Size:    12
//   float4 g_keyColor;                 // Offset:  192 Size:    16
//   float2 g_lightAngularRadius;       // Offset:  208 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  224 Size:    16
//   float4 g_subParams;                // Offset:  240 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  256 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  272 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  288 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  304 Size:    16
//   int g_drawReference;               // Offset:  320 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  324 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_diffuseOcclusionSampler         sampler      NA          NA    2        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_diffuseOcclusionTexture         texture  float4          2d    2        1
// g_depthTexture                    texture  float4       2dMS2    3        1
// g_gbufferTexture0                 texture  float4       2dMS2    4        1
// g_gbufferTexture1                 texture  float4       2dMS2    5        1
// g_gbufferTexture2                 texture  float4       2dMS2    6        1
// g_gbufferTexture3                 texture  float4       2dMS2    7        1
// g_shadowAccumTexture              texture  float4        2dMS    8        1
// g_msaaClassifyTexture             texture   float          2d    9        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} }
dcl_constantbuffer cb0[20], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2dms(2) (float,float,float,float) t3
dcl_resource_texture2dms(2) (float,float,float,float) t4
dcl_resource_texture2dms(2) (float,float,float,float) t5
dcl_resource_texture2dms(2) (float,float,float,float) t6
dcl_resource_texture2dms(2) (float,float,float,float) t7
dcl_resource_texture2dms(0) (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 16
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t9.yzxw
lt r0.z, l(0.000000), r0.z
movc r0.zw, r0.zzzz, l(0,0,2,0.500000), l(0,0,1,1.000000)
add r2.xyz, cb0[10].xyzx, -cb0[11].xyzx
add r2.w, -cb0[16].w, l(1.000000)
ftoi r3.x, cb0[19].x
round_z r3.y, cb0[19].x
iadd r3.x, r3.x, l(-1)
itof r3.x, r3.x
mov r4.w, l(1.000000)
mov r5.xyz, l(0,0,0,0)
mov r6.xyz, l(0,0,0,0)
mov r3.z, l(0)
loop 
  ige r3.w, r3.z, r0.z
  breakc_nz r3.w
  mad r7.xy, icb[r3.z + 0].xxxx, cb0[1].xyxx, r0.xyxx
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r1.xyww, t4.xyzw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyzw, r1.xyww, t5.xyzw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r7.zw, r1.xyww, t6.xzyw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r10.xyz, r1.xyww, t7.xyzw, r3.z
  ldms_indexable(texture2dms)(float,float,float,float) r4.z, r1.xyww, t3.yzxw, r3.z
  mad r8.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r3.w, r8.xyzx, r8.xyzx
  rsq r3.w, r3.w
  mul r8.xyz, r3.wwww, r8.xyzx
  mul r3.w, r7.w, l(255.000000)
  round_ne r3.w, r3.w
  ftoi r3.w, r3.w
  mul r9.xyzw, r9.xyzw, r9.xyzw
  ieq r11.xy, r3.wwww, l(5, 2, 0, 0)
  if_nz r11.x
    mul r11.xzw, r9.wwww, r9.xxyz
    mov r12.xyz, r9.xyzx
  else 
    ieq r5.w, r3.w, l(1)
    if_nz r5.w
      mul r12.xyz, r9.xyzx, r9.wwww
    else 
      mov r12.xyz, r9.wwww
    endif 
    mov r11.xzw, r9.xxyz
  endif 
  lt r5.w, l(0.000000), r12.x
  and r5.w, r8.w, r5.w
  mad r6.w, r5.w, l(12.000000), l(1.000000)
  exp r6.w, r6.w
  mad r6.w, r6.w, l(1.443000), l(1.443000)
  mad r7.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r4.xy, r7.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r9.x, r4.xyzw, cb0[2].xyzw
  dp4 r9.y, r4.xyzw, cb0[3].xyzw
  dp4 r9.z, r4.xyzw, cb0[4].xyzw
  dp4 r4.x, r4.xyzw, cb0[5].xyzw
  div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
  mul r9.xzw, r4.xxxx, r9.xxzy
  dp3 r4.y, r9.xzwx, r9.xzwx
  rsq r4.z, r4.y
  mul r13.xyz, r4.zzzz, r9.xwzx
  ldms_indexable(texture2dms)(float,float,float,float) r7.x, r1.xyzw, t8.xyzw, r3.z
  mad r4.x, r9.y, r4.x, cb0[0].y
  mul r14.xy, r4.xxxx, cb0[8].xzxx
  mad r14.xy, r14.xyxx, cb0[6].wwww, r9.xzxx
  mad r14.xy, r14.xyxx, cb0[6].zzzz, cb0[6].xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r4.x, r14.xyxx, t0.xyzw, s0, l(0.000000)
  add_sat r4.x, r4.x, cb0[7].x
  log r4.x, r4.x
  mul r4.x, r4.x, cb0[7].y
  exp r4.x, r4.x
  sqrt r4.y, r4.y
  add r4.y, r4.y, -cb0[7].z
  mul_sat r4.y, r4.y, cb0[7].w
  mul r4.y, r4.y, r4.y
  add r7.y, -r4.x, l(1.000000)
  mad r4.x, r4.y, r7.y, r4.x
  mul r4.x, r4.x, r7.x
  dp3_sat r4.y, r8.xyzx, cb0[8].xyzx
  mul r14.xyz, r4.yyyy, cb0[12].xyzx
  mul r15.xyz, r4.xxxx, r14.xyzx
  mad r9.xyz, -r9.xwzx, r4.zzzz, cb0[8].xyzx
  dp3 r4.y, r9.xyzx, r9.xyzx
  rsq r4.y, r4.y
  mul r9.xyz, r4.yyyy, r9.xyzx
  dp3_sat r4.y, r8.xyzx, r9.xyzx
  mad r4.z, r6.w, l(0.086625), l(0.875000)
  mad r4.y, r4.y, r6.w, -r6.w
  exp r4.y, r4.y
  mul r4.y, r4.y, r4.z
  mul r9.xyz, r4.yyyy, r15.xyzx
  dp3 r4.y, r8.xyzx, cb0[9].xyzx
  mad r4.y, r4.y, l(0.500000), l(0.500000)
  mad r15.xyz, r4.yyyy, r2.xyzx, cb0[11].xyzx
  mad r14.xyz, r14.xyzx, r4.xxxx, r15.xyzx
  mad r10.xyz, r10.xyzx, cb0[18].yyyy, r14.xyzx
  dp3 r4.y, r13.xyzx, r8.xyzx
  add r4.y, r4.y, r4.y
  mad r14.xyz, r8.xyzx, -r4.yyyy, r13.xyzx
  mad r4.y, r4.x, r2.w, cb0[16].w
  mad r4.z, -r5.w, l(15.000000), r3.y
  add r4.z, r4.z, l(5.000000)
  max r4.z, r4.z, l(0.000000)
  min r4.z, r3.x, r4.z
  sample_l_indexable(texturecube)(float,float,float,float) r14.xyz, r14.xyzx, t1.xyzw, s1, r4.z
  mul r14.xyz, r4.yyyy, r14.xyzx
  mul r14.xyz, r14.xyzx, cb0[17].xxxx
  mad r9.xyz, r9.xyzx, cb0[12].wwww, r14.xyzx
  ige r3.w, r3.w, l(6)
  if_nz r3.w
    add_sat r3.w, r7.w, l(-0.023529)
    add r7.y, -r3.w, l(1.000000)
    mov_sat r7.z, r7.z
    add r7.x, -r7.z, l(1.000000)
    mad r8.xyz, r8.xyzx, cb0[14].wwww, cb0[8].xyzx
    dp3_sat r3.w, -r13.xyzx, -r8.xyzx
    mul r4.yz, r7.xxyx, cb0[14].yyyy
    mul r4.yz, r4.yyzy, l(0.000000, -1.442695, -1.442695, 0.000000)
    exp r4.yz, r4.yyzy
    mad r3.w, r3.w, cb0[14].z, cb0[14].x
    dp2 r3.w, r3.wwww, r4.yzyy
    mul r3.w, r4.x, r3.w
    mad r10.xyz, r3.wwww, cb0[12].xyzx, r10.xyzx
  endif 
  mul r4.xyz, r12.xyzx, r9.xyzx
  movc r3.w, r11.y, l(0), l(1.000000)
  mul r4.xyz, r3.wwww, r4.xyzx
  mad r4.xyz, r10.xyzx, r11.xzwx, r4.xyzx
  add r6.xyz, r4.xyzx, r6.xyzx
  mad r5.xyz, r9.xyzx, r12.xyzx, r5.xyzx
  iadd r3.z, r3.z, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s2.x
min r0.x, r1.y, r1.x
min r0.x, r1.z, r0.x
min o0.w, r1.w, r0.x
mul o0.xyz, r0.wwww, r6.xyzx
mul o1.xyz, r0.wwww, r5.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 141 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
