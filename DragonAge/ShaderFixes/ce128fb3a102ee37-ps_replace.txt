//Shadows/Lights
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float4 g_exposureMultipliers : packoffset(c7);
  uint4 g_shadowmapDimensions : packoffset(c8);
}

//Added by Mike
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
  float4 exposureMultipliers : packoffset(c23);
  float4 fogParams : packoffset(c24);
  float4 fogForwardScatteringParamsGradientScaleFogEnable : packoffset(c25);
  float4 fogForwardScatteringColorPresence : packoffset(c26);
  float4 fogCoefficients : packoffset(c27);
  float4 fogColorCoefficients : packoffset(c28);
  float4 fogColor : packoffset(c29);
  float4 fogStartDistance : packoffset(c30);
  float4 fogHeightFogCoefficients : packoffset(c31);
  float4 fogMiscParam : packoffset(c32);
  float2 fogEnabledMode : packoffset(c33);
  float2 vc_pad10_ : packoffset(c33.z);
}


SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2D<float4> g_depthTexture : register(t1);
Texture2D<float4> g_gbufferTexture0 : register(t2);
Texture2D<float4> g_gbufferTexture1 : register(t3);
Texture2D<float4> g_gbufferTexture2 : register(t4);
Texture2D<float4> g_gbufferTexture4 : register(t5);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;
  uint4 bitmask;
  
//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;

//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;

//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));

//...Inverse Matrix Elemets
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);

b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);

b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);

b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);

b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);

b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);

b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);

b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);

b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;

//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_gbufferTexture0.Load(r1.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r0.z = g_gbufferTexture2.Load(r1.xyw).w;
  r4.z = g_depthTexture.Load(r1.xyw).x;
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = round(r0.z);
  r0.z = (int)r0.z;
  r5.xy = r0.zz == float2(4.000000e+000,2.000000e+000);
  if (r5.x != 0) {
    r1.xyzw = g_gbufferTexture4.Load(r1.xyz).xyzw;
    r6.xyzw = r2.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + float4(-2.000000e+000,-2.000000e+000,-2.000000e+000,-2.000000e+000);
    r0.w = dot(r6.xy, r6.xy);
    r7.zw = -r0.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r0.w = max(r7.z, 0.000000000e+000);
    r0.w = sqrt(r0.w);
    r7.xy = r6.xy * r0.ww;
    r0.w = dot(r7.xyw, r7.xyw);
    r0.w = rsqrt(r0.w);
    r7.xyz = r7.xyw * r0.www;
    r0.w = dot(r6.zw, r6.zw);
    r8.zw = -r0.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r0.w = max(r8.z, 0.000000000e+000);
    r0.w = sqrt(r0.w);
    r8.xy = r6.zw * r0.ww;
    r0.w = dot(r8.xyw, r8.xyw);
    r0.w = rsqrt(r0.w);
    r6.xyz = r8.xyw * r0.www;
    r0.w = dot(r1.xy, float2(6.528000e+004,2.550000e+002));
    r0.w = round(r0.w);
    r1.x = 3.125000000e-002 * r0.w;
    r1.x = trunc(r1.x);
    r8.z = r0.w * 3.125000000e-002 + -r1.x;
    r0.w = 1.562500000e-002 * r1.x;
    r8.x = trunc(r0.w);
    r8.y = r1.x * 1.562500000e-002 + -r8.x;
    r8.xyz = float3(3.225806e-002,1.015873e+000,1.032258e+000) * r8.xyz;
    r1.xy = float2(2.550000e+002,2.550000e+002) * r1.zw;
    r1.xy = round(r1.xy);
    r1.zw = float2(6.250000e-002,6.250000e-002) * r1.xy;
    r9.xy = trunc(r1.zw);
    r9.zw = r1.xy * float2(6.250000e-002,6.250000e-002) + -r9.xy;
    r1.xw = float2(1.066667e+000,6.666667e-002) * r9.wy;
    r1.yz = r9.xz * float2(8.000001e-001,1.280000e+001) + float2(1.000000e+000,1.000000e+000);
    r1.yz = exp2(r1.yz);
    r1.yz = r1.yz * float2(1.443000e+000,1.443000e+000) + float2(1.443000e+000,1.443000e+000);
    r9.xyzw = r3.xyzw * r3.xyzw;
    r10.xyz = r9.www;
  } else {
    r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r0.w = dot(r2.xyz, r2.xyz);
    r0.w = rsqrt(r0.w);
    r7.xyz = r2.xyz * r0.www;
    r3.xyzw = r3.xyzw * r3.xyzw;
    r0.w = r0.z == 5;
    if (r0.w != 0) {
      r9.xyz = r3.xyz * r3.www;
      r10.xyz = r3.xyz;
    } else {
      r0.z = r0.z == 1;
      if (r0.z != 0) {
        r10.xyz = r3.www * r3.xyz;
      } else {
        r10.xyz = r3.www;
      }
      r9.xyz = r3.xyz;
    }
    r0.z = 0.000000000e+000 < r10.x;
    r0.z = r0.z ? r2.w : 0;
    r0.z = r0.z * 1.200000000e+001 + 1.000000000e+000;
    r0.z = exp2(r0.z);
    r1.y = r0.z * 1.442999959e+000 + 1.442999959e+000;
    r6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r1.xzw = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r8.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  }
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r0.xy;
  r4.w = 1.000000000e+000;

  r0.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r0.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r0.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.w = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r0.w = 1.000000e+000 / r0.w;
  r2.xyz = r0.xyz * r0.www;
  
float4 r25, r23;
r23.xyzw = r2.xyzw;
r23.w=1;

r25.x = dot(r23.xyzw, b1.xyzw);
r25.y = dot(r23.xyzw, b2.xyzw);
r25.z = dot(r23.xyzw, b3.xyzw);
r25.w = dot(r23.xyzw, b4.xyzw);

float4 stereo = StereoParams.Load(0);
r25.x -= stereo.x * (r25.w - stereo.y); 

r23.x = dot(r25.xyzw, a1.xyzw);
r23.y = dot(r25.xyzw, a2.xyzw);
r23.z = dot(r25.xyzw, a3.xyzw);
r23.w = dot(r25.xyzw, a4.xyzw); 
  
  r3.x = dot(r23.xyz, r23.xyz);
  r3.x = rsqrt(r3.x);
  r3.xyz = r3.xxx * r23.xyz;
  
  r0.xyz = -r23.xyz + v1.xyz;
  // r0.xyz = -r0.xyz * r0.www + v1.xyz;
  
  r0.w = dot(r0.xyz, r0.xyz);
  r3.w = rsqrt(r0.w);
  r4.xyz = r3.www * r0.xyz;
  r0.w = v3.w + r0.w;
  r0.w = 1.000000e+000 / r0.w;
  r0.w = v1.w + r0.w;
  r0.w = max(r0.w, 0.000000000e+000);
  r4.w = dot(v6.xyz, r4.xyz);
  r4.w = saturate(r4.w * v5.x + v5.y);
  r4.w = 1.000000000e+000 + -r4.w;
  r0.w = r4.w * r0.w;
  r2.w = 1.000000000e+000;
  r11.x = dot(r23.xyzw, v7.xyzw);   //********************MUST be r23
  r11.y = dot(r23.xyzw, v8.xyzw);
  r4.w = dot(r23.xyzw, v9.xyzw);
  r2.x = dot(r23.xyzw, v10.xyzw);
  r2.x = 1.000000e+000 / r2.x;
  r2.yz = r11.xy * r2.xx;
  r2.x = r4.w * r2.x;
  r2.w = max(abs(r2.z), abs(r2.y));
  r2.w = 1.000000000e+000 + -r2.w;
  r2.w = min(r2.w, r4.w);
  r2.w = r2.w < 0.000000000e+000;
  if (r2.w != 0) discard;
  r2.yz = r2.yz * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r2.w = g_shadowmapDimensions.x;
  r4.w = 1.000000e+000 / r2.w;
  r2.yz = r2.ww * r2.yz + float2(5.000000e-001,5.000000e-001);
  r5.zw = floor(r2.yz);
  r2.yz = -r5.zw + r2.yz;
  r5.zw = r5.zw * r4.ww;
  r11.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(-2,-2)).xyzw;
  r12.xyzw = float4(1.000000e+000,2.000000e+000,3.000000e+000,5.000000e+000) + -r2.yyyy;
  r13.xyzw = r12.xyxy * r11.wzxy;
  r11.zw = r13.xz + r13.yw;
  r13.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(0,-2)).xyzw;
  r11.zw = r13.zy * float2(2.000000e+000,2.000000e+000) + r11.zw;
  r11.zw = r13.wx * float2(2.000000e+000,2.000000e+000) + r11.zw;
  r14.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(2,-2)).xyzw;
  r15.xyzw = float4(1.000000e+000,4.000000e+000,3.000000e+000,2.000000e+000) + r2.yyyy;
  r2.w = r14.y * r2.y;
  r11.zw = r14.zy * r2.yy + r11.zw;
  r11.zw = r14.wx * r15.xx + r11.zw;
  r16.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(-2,0)).xyzw;
  r4.w = -r2.y * 2.000000000e+000 + 2.000000000e+000;
  r13.zw = r16.wx * r4.ww;
  r6.w = r2.y * -2.000000000e+000 + 4.000000000e+000;
  r13.zw = r16.zy * r6.ww + r13.zw;
  r6.w = r11.y * r12.z + r13.z;
  r6.w = r11.x * r4.w + r6.w;
  r7.w = r16.z * r12.z + r13.w;
  r7.w = r16.w * r4.w + r7.w;
  r17.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(0,0)).xyzw;
  r6.w = r17.z * r15.y + r6.w;
  r6.w = r17.w * r12.w + r6.w;
  r7.w = r17.y * r15.y + r7.w;
  r7.w = r17.x * r12.w + r7.w;
  r11.xy = float2(4.000000e+000,1.000000e+000) + -r2.yz;
  r6.w = r13.y * r15.z + r6.w;
  r6.w = r13.x * r11.x + r6.w;
  r7.w = r17.z * r15.z + r7.w;
  r7.w = r17.w * r11.x + r7.w;
  r13.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(2,0)).xyzw;
  r8.w = r2.y * 2.000000000e+000 + 2.000000000e+000;
  r9.w = dot(r13.zz, r2.yy);
  r6.w = r9.w + r6.w;
  r6.w = r13.w * r8.w + r6.w;
  r10.w = dot(r13.yy, r2.yy);
  r7.w = r10.w + r7.w;
  r7.w = r13.x * r8.w + r7.w;
  r2.w = r2.w * 2.000000000e+000 + r6.w;
  r14.x = r14.x * r15.w + r2.w;
  r2.w = r9.w + r7.w;
  r14.y = r13.w * r15.w + r2.w;
  r11.zw = r14.xy + r11.zw;
  r14.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(-2,2)).xyzw;
  r18.xyzw = r14.wzxy * r12.xyxy;
  r12.xy = r18.xz + r18.yw;
  r2.w = r16.y * r12.z + r12.x;
  r2.w = r16.x * r4.w + r2.w;
  r6.w = r14.z * r12.z + r12.y;
  r4.w = r14.w * r4.w + r6.w;
  r12.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(0,2)).xyzw;
  r2.w = r12.z * 2.000000000e+000 + r2.w;
  r2.w = r12.w * 2.000000000e+000 + r2.w;
  r4.w = r12.y * 2.000000000e+000 + r4.w;
  r4.w = r12.x * 2.000000000e+000 + r4.w;
  r2.w = r17.y * r15.z + r2.w;
  r2.w = r17.x * r11.x + r2.w;
  r4.w = r12.z * r15.z + r4.w;
  r4.w = r12.w * r11.x + r4.w;
  r12.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.zw, r2.x, int2(2,2)).xyzw;
  r2.x = r12.z * r2.y;
  r2.w = r12.z * r2.y + r2.w;
  r2.w = r12.w * r15.x + r2.w;
  r2.y = r12.y * r2.y + r4.w;
  r2.y = r12.x * r15.x + r2.y;
  r2.w = r10.w + r2.w;
  r12.x = r13.x * r15.w + r2.w;
  r2.x = r2.x * 2.000000000e+000 + r2.y;
  r12.y = r12.w * r15.w + r2.x;
  r2.xy = r12.xy + r11.zw;
  r2.y = r2.y * r2.z;
  r2.x = r2.x * r11.y + r2.y;
  r2.x = 1.694915257e-002 * r2.x;
  r0.w = r2.x * r0.w;
  r2.x = dot(r7.xyz, r4.xyz);
  r2.y = saturate(r2.x);
  r2.yzw = v2.xyz * r2.yyy;
  r2.yzw = r2.yzw * r0.www;
  if (r5.x != 0) {
    r1.x = saturate(r1.x);
    r2.x = r1.x * 5.000000000e-001 + r2.x;
    r1.x = r1.x * 5.000000000e-001 + 1.000000000e+000;
    r1.x = saturate(r2.x / r1.x);
    r4.xyz = v2.xyz * r1.xxx;
    r4.xyz = r4.xyz * r0.www;
    r11.xyz = -r7.xyz * r1.www + r6.xyz;
    r0.w = dot(r11.xyz, r11.xyz);
    r0.w = rsqrt(r0.w);
    r11.xyz = r11.xyz * r0.www;
    r12.xyz = r0.xyz * r3.www + -r3.xyz;
    r0.w = dot(r12.xyz, r12.xyz);
    r0.w = rsqrt(r0.w);
    r12.xyz = r12.xyz * r0.www;
    r0.w = dot(r6.xyz, r12.xyz);
    r0.w = -r0.w * r0.w + 1.000000000e+000;
    r0.w = max(r0.w, 0.000000000e+000);
    r0.w = sqrt(r0.w);
    r0.w = log2(r0.w);
    r0.w = r1.y * r0.w;
    r0.w = exp2(r0.w);
    r1.x = dot(r11.xyz, r12.xyz);
    r1.x = -r1.x * r1.x + 1.000000000e+000;
    r1.x = max(r1.x, 0.000000000e+000);
    r1.x = sqrt(r1.x);
    r1.x = log2(r1.x);
    r1.x = r1.z * r1.x;
    r1.x = exp2(r1.x);
    r1.xzw = r1.xxx * r8.xyz;
    r1.xzw = r0.www * r10.xxx + r1.xzw;
    r1.xzw = r2.yzw * r1.xzw;
    r1.xzw = v2.www * r1.xzw;
    r1.xzw = float3(1.500000e-001,1.500000e-001,1.500000e-001) * r1.xzw;
    r2.yzw = r4.xyz;
  } else {
    r0.xyz = r0.xyz * r3.www + -r3.xyz;
    r0.w = dot(r0.xyz, r0.xyz);
    r0.w = rsqrt(r0.w);
    r0.xyz = r0.xyz * r0.www;
    r0.x = saturate(dot(r7.xyz, r0.xyz));
    r0.y = r1.y * 8.662509918e-002 + 8.750000000e-001;
    r0.x = r0.x * r1.y + -r1.y;
    r0.x = exp2(r0.x);
    r0.x = r0.y * r0.x;
    r0.xyz = r2.yzw * r0.xxx;
    r1.xzw = v2.www * r0.xyz;
  }
  if (r5.x == 0) {
    r1.xzw = r1.xzw * r10.xyz;
  }
  r0.x = r5.y ? 0.000000000e+000 : 1.000000000e+000;
  r0.xyz = r1.xzw * r0.xxx;
  o0.xyz = r2.yzw * r9.xyz + r0.xyz;
  o1.xyz = r1.xzw;
  o1.w = 0.000000000e+000;
  o0.w = 0.000000000e+000;
  
  // o0.xyzw = 0.0;
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 g_invScreenSize;            // Offset:    0 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   16 Size:    64
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:   80 Size:    16 [unused]
//   float g_subRolloff;                // Offset:   96 Size:     4 [unused]
//   float4 g_exposureMultipliers;      // Offset:  112 Size:    16 [unused]
//   uint4 g_shadowmapDimensions;       // Offset:  128 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_shadowmapSampler              sampler_c      NA          NA    0        1
// g_shadowmapTexture                texture  float4          2d    0        1
// g_depthTexture                    texture  float4          2d    1        1
// g_gbufferTexture0                 texture  float4          2d    2        1
// g_gbufferTexture1                 texture  float4          2d    3        1
// g_gbufferTexture2                 texture  float4          2d    4        1
// g_gbufferTexture4                 texture  float4          2d    5        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float      w
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_sampler s0, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.w
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_input_ps linear v10.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 19
mul r0.xy, v0.xyxx, cb0[0].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t2.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t3.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t4.xywz
ld_indexable(texture2d)(float,float,float,float) r4.z, r1.xyww, t1.yzxw
mul r0.z, r0.z, l(255.000000)
round_ne r0.z, r0.z
ftoi r0.z, r0.z
ieq r5.xy, r0.zzzz, l(4, 2, 0, 0)
if_nz r5.x
  ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyzw, t5.xyzw
  mad r6.xyzw, r2.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), l(-2.000000, -2.000000, -2.000000, -2.000000)
  dp2 r0.w, r6.xyxx, r6.xyxx
  mad r7.zw, -r0.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
  max r0.w, r7.z, l(0.000000)
  sqrt r0.w, r0.w
  mul r7.xy, r0.wwww, r6.xyxx
  dp3 r0.w, r7.xywx, r7.xywx
  rsq r0.w, r0.w
  mul r7.xyz, r0.wwww, r7.xywx
  dp2 r0.w, r6.zwzz, r6.zwzz
  mad r8.zw, -r0.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
  max r0.w, r8.z, l(0.000000)
  sqrt r0.w, r0.w
  mul r8.xy, r0.wwww, r6.zwzz
  dp3 r0.w, r8.xywx, r8.xywx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r8.xywx
  dp2 r0.w, r1.xyxx, l(65280.000000, 255.000000, 0.000000, 0.000000)
  round_ne r0.w, r0.w
  mul r1.x, r0.w, l(0.031250)
  round_z r1.x, r1.x
  mad r8.z, r0.w, l(0.031250), -r1.x
  mul r0.w, r1.x, l(0.015625)
  round_z r8.x, r0.w
  mad r8.y, r1.x, l(0.015625), -r8.x
  mul r8.xyz, r8.xyzx, l(0.032258, 1.015873, 1.032258, 0.000000)
  mul r1.xy, r1.zwzz, l(255.000000, 255.000000, 0.000000, 0.000000)
  round_ne r1.xy, r1.xyxx
  mul r1.zw, r1.xxxy, l(0.000000, 0.000000, 0.062500, 0.062500)
  round_z r9.xy, r1.zwzz
  mad r9.zw, r1.xxxy, l(0.000000, 0.000000, 0.062500, 0.062500), -r9.xxxy
  mul r1.xw, r9.wwwy, l(1.066667, 0.000000, 0.000000, 0.066667)
  mad r1.yz, r9.xxzx, l(0.000000, 0.800000, 12.800001, 0.000000), l(0.000000, 1.000000, 1.000000, 0.000000)
  exp r1.yz, r1.yyzy
  mad r1.yz, r1.yyzy, l(0.000000, 1.443000, 1.443000, 0.000000), l(0.000000, 1.443000, 1.443000, 0.000000)
  mul r9.xyzw, r3.xyzw, r3.xyzw
  mov r10.xyz, r9.wwww
else 
  mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r0.w, r2.xyzx, r2.xyzx
  rsq r0.w, r0.w
  mul r7.xyz, r0.wwww, r2.xyzx
  mul r3.xyzw, r3.xyzw, r3.xyzw
  ieq r0.w, r0.z, l(5)
  if_nz r0.w
    mul r9.xyz, r3.wwww, r3.xyzx
    mov r10.xyz, r3.xyzx
  else 
    ieq r0.z, r0.z, l(1)
    if_nz r0.z
      mul r10.xyz, r3.xyzx, r3.wwww
    else 
      mov r10.xyz, r3.wwww
    endif 
    mov r9.xyz, r3.xyzx
  endif 
  lt r0.z, l(0.000000), r10.x
  and r0.z, r2.w, r0.z
  mad r0.z, r0.z, l(12.000000), l(1.000000)
  exp r0.z, r0.z
  mad r1.y, r0.z, l(1.443000), l(1.443000)
  mov r6.xyz, l(0,0,0,0)
  mov r1.xzw, l(0,0,0,0)
  mov r8.xyz, l(0,0,0,0)
endif 
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r4.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r4.w, l(1.000000)
dp4 r0.x, r4.xyzw, cb0[1].xyzw
dp4 r0.y, r4.xyzw, cb0[2].xyzw
dp4 r0.z, r4.xyzw, cb0[3].xyzw
dp4 r0.w, r4.xyzw, cb0[4].xyzw
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r2.xyz, r0.wwww, r0.xyzx
dp3 r3.x, r2.xyzx, r2.xyzx
rsq r3.x, r3.x
mul r3.xyz, r2.xyzx, r3.xxxx
mad r0.xyz, -r0.xyzx, r0.wwww, v1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r3.w, r0.w
mul r4.xyz, r0.xyzx, r3.wwww
add r0.w, r0.w, v3.w
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r0.w, r0.w, v1.w
max r0.w, r0.w, l(0.000000)
dp3 r4.w, v6.xyzx, r4.xyzx
mad_sat r4.w, r4.w, v5.x, v5.y
add r4.w, -r4.w, l(1.000000)
mul r0.w, r0.w, r4.w
mov r2.w, l(1.000000)
dp4 r11.x, r2.xyzw, v7.xyzw
dp4 r11.y, r2.xyzw, v8.xyzw
dp4 r4.w, r2.xyzw, v9.xyzw
dp4 r2.x, r2.xyzw, v10.xyzw
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul r2.yz, r2.xxxx, r11.xxyx
mul r2.x, r2.x, r4.w
max r2.w, |r2.z|, |r2.y|
add r2.w, -r2.w, l(1.000000)
min r2.w, r2.w, r4.w
lt r2.w, r2.w, l(0.000000)
discard_nz r2.w
mad r2.yz, r2.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
utof r2.w, cb0[8].x
div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mad r2.yz, r2.wwww, r2.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
round_ni r5.zw, r2.yyyz
add r2.yz, r2.yyzy, -r5.zzwz
mul r5.zw, r4.wwww, r5.zzzw
gather4_c_aoffimmi_indexable(-2,-2,0)(texture2d)(float,float,float,float) r11.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
add r12.xyzw, -r2.yyyy, l(1.000000, 2.000000, 3.000000, 5.000000)
mul r13.xyzw, r11.wzxy, r12.xyxy
add r11.zw, r13.yyyw, r13.xxxz
gather4_c_aoffimmi_indexable(0,-2,0)(texture2d)(float,float,float,float) r13.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
mad r11.zw, r13.zzzy, l(0.000000, 0.000000, 2.000000, 2.000000), r11.zzzw
mad r11.zw, r13.wwwx, l(0.000000, 0.000000, 2.000000, 2.000000), r11.zzzw
gather4_c_aoffimmi_indexable(2,-2,0)(texture2d)(float,float,float,float) r14.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
add r15.xyzw, r2.yyyy, l(1.000000, 4.000000, 3.000000, 2.000000)
mul r2.w, r2.y, r14.y
mad r11.zw, r14.zzzy, r2.yyyy, r11.zzzw
mad r11.zw, r14.wwwx, r15.xxxx, r11.zzzw
gather4_c_aoffimmi_indexable(-2,0,0)(texture2d)(float,float,float,float) r16.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
mad r4.w, -r2.y, l(2.000000), l(2.000000)
mul r13.zw, r4.wwww, r16.wwwx
mad r6.w, r2.y, l(-2.000000), l(4.000000)
mad r13.zw, r16.zzzy, r6.wwww, r13.zzzw
mad r6.w, r11.y, r12.z, r13.z
mad r6.w, r11.x, r4.w, r6.w
mad r7.w, r16.z, r12.z, r13.w
mad r7.w, r16.w, r4.w, r7.w
gather4_c_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r17.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
mad r6.w, r17.z, r15.y, r6.w
mad r6.w, r17.w, r12.w, r6.w
mad r7.w, r17.y, r15.y, r7.w
mad r7.w, r17.x, r12.w, r7.w
add r11.xy, -r2.yzyy, l(4.000000, 1.000000, 0.000000, 0.000000)
mad r6.w, r13.y, r15.z, r6.w
mad r6.w, r13.x, r11.x, r6.w
mad r7.w, r17.z, r15.z, r7.w
mad r7.w, r17.w, r11.x, r7.w
gather4_c_aoffimmi_indexable(2,0,0)(texture2d)(float,float,float,float) r13.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
mad r8.w, r2.y, l(2.000000), l(2.000000)
dp2 r9.w, r13.zzzz, r2.yyyy
add r6.w, r6.w, r9.w
mad r6.w, r13.w, r8.w, r6.w
dp2 r10.w, r13.yyyy, r2.yyyy
add r7.w, r7.w, r10.w
mad r7.w, r13.x, r8.w, r7.w
mad r2.w, r2.w, l(2.000000), r6.w
mad r14.x, r14.x, r15.w, r2.w
add r2.w, r7.w, r9.w
mad r14.y, r13.w, r15.w, r2.w
add r11.zw, r11.zzzw, r14.xxxy
gather4_c_aoffimmi_indexable(-2,2,0)(texture2d)(float,float,float,float) r14.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
mul r18.xyzw, r12.xyxy, r14.wzxy
add r12.xy, r18.ywyy, r18.xzxx
mad r2.w, r16.y, r12.z, r12.x
mad r2.w, r16.x, r4.w, r2.w
mad r6.w, r14.z, r12.z, r12.y
mad r4.w, r14.w, r4.w, r6.w
gather4_c_aoffimmi_indexable(0,2,0)(texture2d)(float,float,float,float) r12.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
mad r2.w, r12.z, l(2.000000), r2.w
mad r2.w, r12.w, l(2.000000), r2.w
mad r4.w, r12.y, l(2.000000), r4.w
mad r4.w, r12.x, l(2.000000), r4.w
mad r2.w, r17.y, r15.z, r2.w
mad r2.w, r17.x, r11.x, r2.w
mad r4.w, r12.z, r15.z, r4.w
mad r4.w, r12.w, r11.x, r4.w
gather4_c_aoffimmi_indexable(2,2,0)(texture2d)(float,float,float,float) r12.xyzw, r5.zwzz, t0.xyzw, s0.x, r2.x
mul r2.x, r2.y, r12.z
mad r2.w, r12.z, r2.y, r2.w
mad r2.w, r12.w, r15.x, r2.w
mad r2.y, r12.y, r2.y, r4.w
mad r2.y, r12.x, r15.x, r2.y
add r2.w, r2.w, r10.w
mad r12.x, r13.x, r15.w, r2.w
mad r2.x, r2.x, l(2.000000), r2.y
mad r12.y, r12.w, r15.w, r2.x
add r2.xy, r11.zwzz, r12.xyxx
mul r2.y, r2.z, r2.y
mad r2.x, r2.x, r11.y, r2.y
mul r2.x, r2.x, l(0.016949)
mul r0.w, r0.w, r2.x
dp3 r2.x, r7.xyzx, r4.xyzx
mov_sat r2.y, r2.x
mul r2.yzw, r2.yyyy, v2.xxyz
mul r2.yzw, r0.wwww, r2.yyzw
if_nz r5.x
  mov_sat r1.x, r1.x
  mad r2.x, r1.x, l(0.500000), r2.x
  mad r1.x, r1.x, l(0.500000), l(1.000000)
  div_sat r1.x, r2.x, r1.x
  mul r4.xyz, r1.xxxx, v2.xyzx
  mul r4.xyz, r0.wwww, r4.xyzx
  mad r11.xyz, -r7.xyzx, r1.wwww, r6.xyzx
  dp3 r0.w, r11.xyzx, r11.xyzx
  rsq r0.w, r0.w
  mul r11.xyz, r0.wwww, r11.xyzx
  mad r12.xyz, r0.xyzx, r3.wwww, -r3.xyzx
  dp3 r0.w, r12.xyzx, r12.xyzx
  rsq r0.w, r0.w
  mul r12.xyz, r0.wwww, r12.xyzx
  dp3 r0.w, r6.xyzx, r12.xyzx
  mad r0.w, -r0.w, r0.w, l(1.000000)
  max r0.w, r0.w, l(0.000000)
  sqrt r0.w, r0.w
  log r0.w, r0.w
  mul r0.w, r0.w, r1.y
  exp r0.w, r0.w
  dp3 r1.x, r11.xyzx, r12.xyzx
  mad r1.x, -r1.x, r1.x, l(1.000000)
  max r1.x, r1.x, l(0.000000)
  sqrt r1.x, r1.x
  log r1.x, r1.x
  mul r1.x, r1.x, r1.z
  exp r1.x, r1.x
  mul r1.xzw, r8.xxyz, r1.xxxx
  mad r1.xzw, r0.wwww, r10.xxxx, r1.xxzw
  mul r1.xzw, r1.xxzw, r2.yyzw
  mul r1.xzw, r1.xxzw, v2.wwww
  mul r1.xzw, r1.xxzw, l(0.150000, 0.000000, 0.150000, 0.150000)
  mov r2.yzw, r4.xxyz
else 
  mad r0.xyz, r0.xyzx, r3.wwww, -r3.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx
  dp3_sat r0.x, r7.xyzx, r0.xyzx
  mad r0.y, r1.y, l(0.086625), l(0.875000)
  mad r0.x, r0.x, r1.y, -r1.y
  exp r0.x, r0.x
  mul r0.x, r0.x, r0.y
  mul r0.xyz, r0.xxxx, r2.yzwy
  mul r1.xzw, r0.xxyz, v2.wwww
endif 
if_z r5.x
  mul r1.xzw, r10.xxyz, r1.xxzw
endif 
movc r0.x, r5.y, l(0), l(1.000000)
mul r0.xyz, r0.xxxx, r1.xzwx
mad o0.xyz, r2.yzwy, r9.xyzx, r0.xyzx
mov o1.xyz, r1.xzwx
mov o1.w, l(0)
mov o0.w, l(0)
ret 
// Approximately 259 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
       