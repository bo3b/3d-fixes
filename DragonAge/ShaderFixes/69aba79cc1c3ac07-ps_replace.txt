
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float4 g_exposureMultipliers : packoffset(c7);
  uint4 g_shadowmapDimensions : packoffset(c8);
}
SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2DMS<float4,4> g_depthTexture : register(t1);
Texture2DMS<float4,4> g_gbufferTexture0 : register(t2);
Texture2DMS<float4,4> g_gbufferTexture1 : register(t3);
Texture2DMS<float4,4> g_gbufferTexture2 : register(t4);
Texture2D<float> g_msaaClassifyTexture : register(t5);
Texture2DMS<float4,4> g_gbufferTexture4 : register(t6);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = (int2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = g_msaaClassifyTexture.Load(r0.xyw).x;
  r1.x = 0.000000000e+000 < r1.x;
  r1.xy = r1.xx ? float2(4.000000e+000,2.500000e-001) : float2(1.000000e+000,1.000000e+000);
  r1.z = g_shadowmapDimensions.x;
  r1.w = 1.000000e+000 / r1.z;
  r2.w = 1.000000000e+000;
  r3.w = 1.000000000e+000;
  r4.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  while (true) {
    r5.x = (int)r4.w >= (int)r1.x;
    if (r5.x != 0) break;
    r5.xy = icb[r4.w].xy * g_invScreenSize.xy;
    r5.xy = v0.xy * g_invScreenSize.xy + r5.xy;
    r6.xyz = g_gbufferTexture0.Load(r0.xyw,r4.w).xyz;
    r7.xyzw = g_gbufferTexture1.Load(r0.xyw,r4.w).xyzw;
    r5.z = g_gbufferTexture2.Load(r0.xyw,r4.w).w;
    r2.z = g_depthTexture.Load(r0.xyw,r4.w).x;
    r5.z = 2.550000000e+002 * r5.z;
    r5.z = round(r5.z);
    r5.z = (int)r5.z;
    r5.w = r5.z == 4;
    if (r5.w != 0) {
      r6.w = g_gbufferTexture4.Load(r0.xyz,r4.w).w;
      r8.xy = r6.xy * float2(4.000000e+000,4.000000e+000) + float2(-2.000000e+000,-2.000000e+000);
      r8.z = dot(r8.xy, r8.xy);
      r9.zw = -r8.zz * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
      r8.z = max(r9.z, 0.000000000e+000);
      r8.z = sqrt(r8.z);
      r9.xy = r8.xy * r8.zz;
      r8.x = dot(r9.xyw, r9.xyw);
      r8.x = rsqrt(r8.x);
      r8.xyz = r9.xyw * r8.xxx;
      r6.w = 2.550000000e+002 * r6.w;
      r6.w = round(r6.w);
      r8.w = 6.250000000e-002 * r6.w;
      r8.w = trunc(r8.w);
      r6.w = r6.w * 6.250000000e-002 + -r8.w;
      r6.w = 1.066666722e+000 * r6.w;
      r9.xyz = r7.xyz * r7.xyz;
    } else {
      r6.xyz = r6.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
      r8.w = dot(r6.xyz, r6.xyz);
      r8.w = rsqrt(r8.w);
      r8.xyz = r8.www * r6.xyz;
      r9.xyzw = r7.xyzw * r7.xyzw;
      r5.z = r5.z == 5;
      if (r5.z != 0) {
        r9.xyz = r9.xyz * r9.www;
      }
      r6.w = 0.000000000e+000;
    }
    r5.xy = r5.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
    r2.xy = float2(1.000000e+000,-1.000000e+000) * r5.xy;
    r5.x = dot(r2.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
    r5.y = dot(r2.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
    r5.z = dot(r2.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
    r2.x = dot(r2.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
    r2.x = 1.000000e+000 / r2.x;


float4 r28, r26, r27;
r26.xyz = r5.xyz * r2.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r5.xyz = r26.xyz / r2.xxx;

    r3.xyz = r5.xyz * r2.xxx;


    r2.xyz = -r5.xyz * r2.xxx + v1.xyz;
    r5.x = dot(r2.xyz, r2.xyz);
    r5.y = rsqrt(r5.x);
    r2.xyz = r5.yyy * r2.xyz;
    r5.x = v3.w + r5.x;
    r5.x = 1.000000e+000 / r5.x;
    r5.x = v1.w + r5.x;
    r5.x = max(r5.x, 0.000000000e+000);
    r5.y = dot(v6.xyz, r2.xyz);
    r5.y = saturate(r5.y * v5.x + v5.y);
    r5.y = 1.000000000e+000 + -r5.y;
    r5.x = r5.x * r5.y;
    r6.x = dot(r3.xyzw, v7.xyzw);
    r6.y = dot(r3.xyzw, v8.xyzw);
    r5.y = dot(r3.xyzw, v9.xyzw);
    r3.x = dot(r3.xyzw, v10.xyzw);
    r3.x = 1.000000e+000 / r3.x;
    r3.yz = r6.xy * r3.xx;
    r3.x = r5.y * r3.x;
    r5.z = max(abs(r3.z), abs(r3.y));
    r5.z = 1.000000000e+000 + -r5.z;
    r5.y = min(r5.z, r5.y);
    r5.y = r5.y < 0.000000000e+000;
    if (r5.y != 0) discard;
    r3.yz = r3.yz * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
    r3.yz = r1.zz * r3.yz + float2(5.000000e-001,5.000000e-001);
    r5.yz = floor(r3.yz);
    r3.yz = -r5.yz + r3.yz;
    r5.yz = r5.yz * r1.ww;
    r7.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(-2,-2)).xyzw;
    r10.xyzw = float4(1.000000e+000,2.000000e+000,3.000000e+000,5.000000e+000) + -r3.yyyy;
    r11.xyzw = r10.xyxy * r7.wzxy;
    r6.xy = r11.xz + r11.yw;
    r11.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(0,-2)).xyzw;
    r6.xy = r11.zy * float2(2.000000e+000,2.000000e+000) + r6.xy;
    r6.xy = r11.wx * float2(2.000000e+000,2.000000e+000) + r6.xy;
    r12.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(2,-2)).xyzw;
    r13.xyzw = float4(1.000000e+000,4.000000e+000,3.000000e+000,2.000000e+000) + r3.yyyy;
    r6.z = r12.y * r3.y;
    r6.xy = r12.zy * r3.yy + r6.xy;
    r6.xy = r12.wx * r13.xx + r6.xy;
    r14.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(-2,0)).xyzw;
    r7.z = -r3.y * 2.000000000e+000 + 2.000000000e+000;
    r11.zw = r14.wx * r7.zz;
    r7.w = r3.y * -2.000000000e+000 + 4.000000000e+000;
    r11.zw = r14.zy * r7.ww + r11.zw;
    r7.y = r7.y * r10.z + r11.z;
    r7.x = r7.x * r7.z + r7.y;
    r7.y = r14.z * r10.z + r11.w;
    r7.y = r14.w * r7.z + r7.y;
    r15.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(0,0)).xyzw;
    r7.x = r15.z * r13.y + r7.x;
    r7.x = r15.w * r10.w + r7.x;
    r7.y = r15.y * r13.y + r7.y;
    r7.y = r15.x * r10.w + r7.y;
    r11.zw = float2(4.000000e+000,1.000000e+000) + -r3.yz;
    r7.x = r11.y * r13.z + r7.x;
    r7.x = r11.x * r11.z + r7.x;
    r7.y = r15.z * r13.z + r7.y;
    r7.y = r15.w * r11.z + r7.y;
    r16.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(2,0)).xyzw;
    r7.w = r3.y * 2.000000000e+000 + 2.000000000e+000;
    r8.w = dot(r16.zz, r3.yy);
    r7.x = r8.w + r7.x;
    r7.x = r16.w * r7.w + r7.x;
    r9.w = dot(r16.yy, r3.yy);
    r7.y = r9.w + r7.y;
    r7.y = r16.x * r7.w + r7.y;
    r6.z = r6.z * 2.000000000e+000 + r7.x;
    r11.x = r12.x * r13.w + r6.z;
    r6.z = r8.w + r7.y;
    r11.y = r16.w * r13.w + r6.z;
    r6.xy = r11.xy + r6.xy;
    r12.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(-2,2)).xyzw;
    r17.xyzw = r12.wzxy * r10.xyxy;
    r7.xy = r17.xz + r17.yw;
    r6.z = r14.y * r10.z + r7.x;
    r6.z = r14.x * r7.z + r6.z;
    r7.x = r12.z * r10.z + r7.y;
    r7.x = r12.w * r7.z + r7.x;
    r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(0,2)).xyzw;
    r6.z = r10.z * 2.000000000e+000 + r6.z;
    r6.z = r10.w * 2.000000000e+000 + r6.z;
    r7.x = r10.y * 2.000000000e+000 + r7.x;
    r7.x = r10.x * 2.000000000e+000 + r7.x;
    r6.z = r15.y * r13.z + r6.z;
    r6.z = r15.x * r11.z + r6.z;
    r7.x = r10.z * r13.z + r7.x;
    r7.x = r10.w * r11.z + r7.x;
    r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r5.yz, r3.x, int2(2,2)).xyzw;
    r3.x = r10.z * r3.y;
    r5.y = r10.z * r3.y + r6.z;
    r5.y = r10.w * r13.x + r5.y;
    r3.y = r10.y * r3.y + r7.x;
    r3.y = r10.x * r13.x + r3.y;
    r5.y = r9.w + r5.y;
    r7.x = r16.x * r13.w + r5.y;
    r3.x = r3.x * 2.000000000e+000 + r3.y;
    r7.y = r10.w * r13.w + r3.x;
    r3.xy = r7.xy + r6.xy;
    r3.y = r3.y * r3.z;
    r3.x = r3.x * r11.w + r3.y;
    r3.x = 1.694915257e-002 * r3.x;
    r3.x = r5.x * r3.x;
    r2.x = dot(r8.xyz, r2.xyz);
    if (r5.w != 0) {
      r6.w = saturate(r6.w);
      r2.y = r6.w * 5.000000000e-001 + r2.x;
      r2.z = r6.w * 5.000000000e-001 + 1.000000000e+000;
      r2.y = saturate(r2.y / r2.z);
      r5.xyz = v2.xyz * r2.yyy;
      r5.xyz = r5.xyz * r3.xxx;
    } else {
      r2.x = saturate(r2.x);
      r2.xyz = v2.xyz * r2.xxx;
      r5.xyz = r2.xyz * r3.xxx;
    }
    r4.xyz = r5.xyz * r9.xyz + r4.xyz;
    r4.w = (int)r4.w + 1;
  }
  o0.xyz = r4.xyz * r1.yyy;
  o0.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(57,14-48): warning X3206: 'Load': implicit truncation of vector type
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(58,15-49): warning X3206: 'Load': implicit truncation of vector type
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(59,12-46): warning X3206: 'Load': implicit truncation of vector type
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(60,12-43): warning X3206: 'Load': implicit truncation of vector type
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(66,14-48): warning X3206: 'Load': implicit truncation of vector type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
