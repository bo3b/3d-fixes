//Wall Decal
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
  float4 exposureMultipliers : packoffset(c23);
  float4 fogParams : packoffset(c24);
  float4 fogForwardScatteringParamsGradientScaleFogEnable : packoffset(c25);
  float4 fogForwardScatteringColorPresence : packoffset(c26);
  float4 fogCoefficients : packoffset(c27);
  float4 fogColorCoefficients : packoffset(c28);
  float4 fogColor : packoffset(c29);
  float4 fogStartDistance : packoffset(c30);
  float4 fogHeightFogCoefficients : packoffset(c31);
  float4 fogMiscParam : packoffset(c32);
  float2 fogEnabledMode : packoffset(c33);
  float2 vc_pad10_ : packoffset(c33.z);
}

cbuffer externalConstants : register(b1)
{
  float2 external_Atlas_RowsColumns : packoffset(c0);
  float2 vc_pad0 : packoffset(c0.z);
  float4 external_viewMatrix1 : packoffset(c1);
  float4 external_viewMatrix2 : packoffset(c2);
  float4 external_viewMatrix3 : packoffset(c3);
  float4 external_viewMatrix4 : packoffset(c4);
}
SamplerState sampler0_s : register(s0);
SamplerState sampler1_s : register(s1);
Texture2D<float4> texture_depthBufferTexture : register(t1);
Texture2D<float4> texture_Diffuse : register(t2);
Texture2D<float4> texture_Normal : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyz = external_viewMatrix2.xyz * v6.yyy;
  r0.xyz = external_viewMatrix1.xyz * v6.xxx + r0.xyz;
  r0.xyz = external_viewMatrix3.xyz * v6.zzz + r0.xyz;
  r0.xyz = external_viewMatrix4.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz / -r0.zzz;
  r1.xy = screenSize.zw * v0.xy;
  r0.w = texture_depthBufferTexture.Sample(sampler0_s, r1.xy).x;
  
float4 r26;
r26.xyz = r0.xyz * r0.www;
r26.w = 1.0;

float4 stereo = StereoParams.Load(0);
r26.x -= stereo.x * (-r26.z - stereo.y)/projMatrix._m00;
r0.xyz = r26.xyz + -external_viewMatrix4.xyz;

  // r0.xyz = r0.xyz * r0.www + -external_viewMatrix4.xyz;
  r1.x = dot(external_viewMatrix1.xyz, r0.xyz);
  r1.y = dot(external_viewMatrix2.xyz, r0.xyz);
  r1.z = dot(external_viewMatrix3.xyz, r0.xyz);
  r1.w = 1.000000000e+000;
  r0.x = dot(r1.xyzw, v2.xyzw);
  r0.y = dot(r1.xyzw, v3.xyzw);
  r0.z = dot(r1.xyzw, v4.xyzw);
  r0.w = dot(r1.xyzw, v5.xyzw);
  r0.xyz = r0.xyz / r0.www;
  r1.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) + -abs(-r0.xyz);
  r0.xy = float2(5.000000e-001,5.000000e-001) + r0.xz;
  r0.xy = v1.zy + r0.xy;
  r0.xy = r0.xy / external_Atlas_RowsColumns.yx;
  r1.xyz = r1.xyz < float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r0.z = (int)r1.y | (int)r1.x;
  r0.z = (int)r1.z | (int)r0.z;
  if (r0.z != 0) discard;
  r1.xyz = texture_Normal.Sample(sampler1_s, r0.xy).xyw;
  r0.xyzw = texture_Diffuse.Sample(sampler1_s, r0.xy).xyzw;
  r1.x = r1.x * r1.z;
  r1.xy = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.xyz = v4.xyz * r1.yyy;
  r2.xyz = v2.xyz * r1.xxx + r2.xyz;
  r1.x = dot(r1.xy, r1.xy);
  r1.x = 1.000000000e+000 + -r1.x;
  r1.x = max(r1.x, 0.000000000e+000);
  r1.x = sqrt(r1.x);
  r1.xyz = v3.xyz * r1.xxx + r2.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o0.xyz = r1.xyz * r0.www;
  o0.w = r0.w;
  o1.w = r0.w;
  r0.xyz = sqrt(r0.xyz);
  o1.xyz = r0.xyz * r0.www;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer viewConstants
// {
//
//   float1 time;                       // Offset:    0 Size:     4 [unused]
//   float3 vc_pad0_;                   // Offset:    4 Size:    12 [unused]
//   float4 screenSize;                 // Offset:   16 Size:    16
//   float3 debugNonFiniteColor;        // Offset:   32 Size:    12 [unused]
//   float1 vc_pad2_;                   // Offset:   44 Size:     4 [unused]
//   float4x4 viewMatrix;               // Offset:   48 Size:    64 [unused]
//   float4x4 projMatrix;               // Offset:  112 Size:    64 [unused]
//   float4x4 viewProjMatrix;           // Offset:  176 Size:    64 [unused]
//   float4x4 crViewProjMatrix;         // Offset:  240 Size:    64 [unused]
//   float4 projectionKxKyKzKw;         // Offset:  304 Size:    16 [unused]
//   float3 cameraPos;                  // Offset:  320 Size:    12 [unused]
//   float1 vc_pad8_;                   // Offset:  332 Size:     4 [unused]
//   float3 transparentStartAndSlopeAndClamp;// Offset:  336 Size:    12 [unused]
//   float1 vc_pad9_;                   // Offset:  348 Size:     4 [unused]
//   float4 transparentCurve;           // Offset:  352 Size:    16 [unused]
//   float4 exposureMultipliers;        // Offset:  368 Size:    16 [unused]
//   float4 fogParams;                  // Offset:  384 Size:    16 [unused]
//   float4 fogForwardScatteringParamsGradientScaleFogEnable;// Offset:  400 Size:    16 [unused]
//   float4 fogForwardScatteringColorPresence;// Offset:  416 Size:    16 [unused]
//   float4 fogCoefficients;            // Offset:  432 Size:    16 [unused]
//   float4 fogColorCoefficients;       // Offset:  448 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  464 Size:    16 [unused]
//   float4 fogStartDistance;           // Offset:  480 Size:    16 [unused]
//   float4 fogHeightFogCoefficients;   // Offset:  496 Size:    16 [unused]
//   float4 fogMiscParam;               // Offset:  512 Size:    16 [unused]
//   float2 fogEnabledMode;             // Offset:  528 Size:     8 [unused]
//   float2 vc_pad10_;                  // Offset:  536 Size:     8 [unused]
//
// }
//
// cbuffer externalConstants
// {
//
//   float2 external_Atlas_RowsColumns; // Offset:    0 Size:     8
//   float2 vc_pad0;                    // Offset:    8 Size:     8 [unused]
//   float4 external_viewMatrix1;       // Offset:   16 Size:    16
//   float4 external_viewMatrix2;       // Offset:   32 Size:    16
//   float4 external_viewMatrix3;       // Offset:   48 Size:    16
//   float4 external_viewMatrix4;       // Offset:   64 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler0                          sampler      NA          NA    0        1
// sampler1                          sampler      NA          NA    1        1
// texture_depthBufferTexture        texture  float4          2d    1        1
// texture_Diffuse                   texture  float4          2d    2        1
// texture_Normal                    texture  float4          2d    3        1
// externalConstants                 cbuffer      NA          NA    1        1
// viewConstants                     cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float    yz 
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.yz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 3
mul r0.xyz, v6.yyyy, cb1[2].xyzx
mad r0.xyz, cb1[1].xyzx, v6.xxxx, r0.xyzx
mad r0.xyz, cb1[3].xyzx, v6.zzzz, r0.xyzx
add r0.xyz, r0.xyzx, cb1[4].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
div r0.xyz, r0.xyzx, -r0.zzzz
mul r1.xy, v0.xyxx, cb2[1].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t1.yzwx, s0
mad r0.xyz, r0.xyzx, r0.wwww, -cb1[4].xyzx
dp3 r1.x, cb1[1].xyzx, r0.xyzx
dp3 r1.y, cb1[2].xyzx, r0.xyzx
dp3 r1.z, cb1[3].xyzx, r0.xyzx
mov r1.w, l(1.000000)
dp4 r0.x, r1.xyzw, v2.xyzw
dp4 r0.y, r1.xyzw, v3.xyzw
dp4 r0.z, r1.xyzw, v4.xyzw
dp4 r0.w, r1.xyzw, v5.xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, -|r0.xyzx|, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, v1.zyzz
div r0.xy, r0.xyxx, cb1[0].yxyy
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.z, r1.y, r1.x
or r0.z, r1.z, r0.z
discard_nz r0.z
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t3.xywz, s1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t2.xyzw, s1
mul r1.x, r1.z, r1.x
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyz, r1.yyyy, v4.xyzx
mad r2.xyz, v2.xyzx, r1.xxxx, r2.xyzx
dp2 r1.x, r1.xyxx, r1.xyxx
add r1.x, -r1.x, l(1.000000)
max r1.x, r1.x, l(0.000000)
sqrt r1.x, r1.x
mad r1.xyz, v3.xyzx, r1.xxxx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mul o0.xyz, r0.wwww, r1.xyzx
mov o0.w, r0.w
mov o1.w, r0.w
sqrt r0.xyz, r0.xyzx
mul o1.xyz, r0.wwww, r0.xyzx
ret 
// Approximately 49 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
