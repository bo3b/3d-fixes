
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float4 g_exposureMultipliers : packoffset(c7);
  uint4 g_shadowmapDimensions : packoffset(c8);
}
SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2D<float4> g_depthTexture : register(t1);
Texture2D<float4> g_gbufferTexture0 : register(t2);
Texture2D<float4> g_gbufferTexture1 : register(t3);
Texture2D<float4> g_gbufferTexture2 : register(t4);
Texture2D<float4> g_gbufferTexture4 : register(t5);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_gbufferTexture0.Load(r1.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r0.z = g_gbufferTexture2.Load(r1.xyw).w;
  r4.z = g_depthTexture.Load(r1.xyw).x;
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = round(r0.z);
  r0.z = (int)r0.z;
  r0.w = r0.z == 4;
  if (r0.w != 0) {
    r1.xyzw = g_gbufferTexture4.Load(r1.xyz).xyzw;
    r5.xyzw = r2.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + float4(-2.000000e+000,-2.000000e+000,-2.000000e+000,-2.000000e+000);
    r6.x = dot(r5.xy, r5.xy);
    r6.zw = -r6.xx * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r6.z = max(r6.z, 0.000000000e+000);
    r6.z = sqrt(r6.z);
    r6.xy = r6.zz * r5.xy;
    r5.x = dot(r6.xyw, r6.xyw);
    r5.x = rsqrt(r5.x);
    r6.xyz = r6.xyw * r5.xxx;
    r5.x = dot(r5.zw, r5.zw);
    r7.zw = -r5.xx * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r5.x = max(r7.z, 0.000000000e+000);
    r5.x = sqrt(r5.x);
    r7.xy = r5.zw * r5.xx;
    r5.x = dot(r7.xyw, r7.xyw);
    r5.x = rsqrt(r5.x);
    r5.xyz = r7.xyw * r5.xxx;
    r1.x = dot(r1.xy, float2(6.528000e+004,2.550000e+002));
    r1.x = round(r1.x);
    r1.y = 3.125000000e-002 * r1.x;
    r1.y = trunc(r1.y);
    r7.z = r1.x * 3.125000000e-002 + -r1.y;
    r1.x = 1.562500000e-002 * r1.y;
    r7.x = trunc(r1.x);
    r7.y = r1.y * 1.562500000e-002 + -r7.x;
    r7.xyz = float3(3.225806e-002,1.015873e+000,1.032258e+000) * r7.xyz;
    r1.xy = float2(2.550000e+002,2.550000e+002) * r1.zw;
    r1.xy = round(r1.xy);
    r1.zw = float2(6.250000e-002,6.250000e-002) * r1.xy;
    r8.xy = trunc(r1.zw);
    r8.zw = r1.xy * float2(6.250000e-002,6.250000e-002) + -r8.xy;
    r1.xw = float2(1.066667e+000,6.666667e-002) * r8.wy;
    r1.yz = r8.xz * float2(8.000001e-001,1.280000e+001) + float2(1.000000e+000,1.000000e+000);
    r1.yz = exp2(r1.yz);
    r1.yz = r1.yz * float2(1.443000e+000,1.443000e+000) + float2(1.443000e+000,1.443000e+000);
    r8.xyzw = r3.xyzw * r3.xyzw;
    r9.xyz = r8.www;
  } else {
    r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r5.w = dot(r2.xyz, r2.xyz);
    r5.w = rsqrt(r5.w);
    r6.xyz = r5.www * r2.xyz;
    r3.xyzw = r3.xyzw * r3.xyzw;
    r2.x = r0.z == 5;
    if (r2.x != 0) {
      r8.xyz = r3.xyz * r3.www;
      r9.xyz = r3.xyz;
    } else {
      r0.z = r0.z == 1;
      if (r0.z != 0) {
        r9.xyz = r3.www * r3.xyz;
      } else {
        r9.xyz = r3.www;
      }
      r8.xyz = r3.xyz;
    }
    r0.z = 0.000000000e+000 < r9.x;
    r0.z = r0.z ? r2.w : 0;
    r0.z = r0.z * 1.200000000e+001 + 1.000000000e+000;
    r0.z = exp2(r0.z);
    r1.y = r0.z * 1.442999959e+000 + 1.442999959e+000;
    r5.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r1.xzw = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r7.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  }
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r0.xy;
  r4.w = 1.000000000e+000;
  r0.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r0.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r0.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r2.x = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r2.x = 1.000000e+000 / r2.x;


float4 r28, r26, r27;
r26.xyz = r0.xyz * r2.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r0.xyz = r26.xyz / r2.xxx;

  r3.xyz = r2.xxx * r0.xyz;


  r2.y = dot(r3.xyz, r3.xyz);
  r2.y = rsqrt(r2.y);
  r2.yzw = r3.xyz * r2.yyy;
  r0.xyz = -r0.xyz * r2.xxx + v1.xyz;
  r2.x = dot(r0.xyz, r0.xyz);
  r4.x = rsqrt(r2.x);
  r4.yzw = r4.xxx * r0.xyz;
  r2.x = v3.w + r2.x;
  r2.x = 1.000000e+000 / r2.x;
  r2.x = v1.w + r2.x;
  r2.x = max(r2.x, 0.000000000e+000);
  r5.w = dot(v6.xyz, r4.yzw);
  r5.w = saturate(r5.w * v5.x + v5.y);
  r5.w = 1.000000000e+000 + -r5.w;
  r2.x = r5.w * r2.x;
  r3.w = 1.000000000e+000;
  r10.x = dot(r3.xyzw, v7.xyzw);
  r10.y = dot(r3.xyzw, v8.xyzw);
  r5.w = dot(r3.xyzw, v9.xyzw);
  r3.x = dot(r3.xyzw, v10.xyzw);
  r3.x = 1.000000e+000 / r3.x;
  r3.yz = r10.xy * r3.xx;
  r3.x = r5.w * r3.x;
  r3.w = max(abs(r3.z), abs(r3.y));
  r3.w = 1.000000000e+000 + -r3.w;
  r3.w = min(r3.w, r5.w);
  r3.w = r3.w < 0.000000000e+000;
  if (r3.w != 0) discard;
  r3.yz = r3.yz * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r3.x = g_shadowmapTexture.SampleCmpLevelZero(g_shadowmapSampler_s, r3.yz, r3.x).x;
  r2.x = r3.x * r2.x;
  r3.x = dot(r6.xyz, r4.yzw);
  r3.y = saturate(r3.x);
  r3.yzw = v2.xyz * r3.yyy;
  r3.yzw = r3.yzw * r2.xxx;
  if (r0.w != 0) {
    r1.x = saturate(r1.x);
    r3.x = r1.x * 5.000000000e-001 + r3.x;
    r1.x = r1.x * 5.000000000e-001 + 1.000000000e+000;
    r1.x = saturate(r3.x / r1.x);
    r4.yzw = v2.xyz * r1.xxx;
    r4.yzw = r4.yzw * r2.xxx;
    r10.xyz = -r6.xyz * r1.www + r5.xyz;
    r1.x = dot(r10.xyz, r10.xyz);
    r1.x = rsqrt(r1.x);
    r10.xyz = r10.xyz * r1.xxx;
    r11.xyz = r0.xyz * r4.xxx + -r2.yzw;
    r1.x = dot(r11.xyz, r11.xyz);
    r1.x = rsqrt(r1.x);
    r11.xyz = r11.xyz * r1.xxx;
    r1.x = dot(r5.xyz, r11.xyz);
    r1.x = -r1.x * r1.x + 1.000000000e+000;
    r1.x = max(r1.x, 0.000000000e+000);
    r1.x = sqrt(r1.x);
    r1.x = log2(r1.x);
    r1.x = r1.y * r1.x;
    r1.x = exp2(r1.x);
    r1.w = dot(r10.xyz, r11.xyz);
    r1.w = -r1.w * r1.w + 1.000000000e+000;
    r1.w = max(r1.w, 0.000000000e+000);
    r1.w = sqrt(r1.w);
    r1.w = log2(r1.w);
    r1.z = r1.z * r1.w;
    r1.z = exp2(r1.z);
    r5.xyz = r1.zzz * r7.xyz;
    r1.xzw = r1.xxx * r9.xxx + r5.xyz;
    r1.xzw = r3.yzw * r1.xzw;
    r1.xzw = v2.www * r1.xzw;
    r1.xzw = float3(1.500000e-001,1.500000e-001,1.500000e-001) * r1.xzw;
    r3.yzw = r4.yzw;
  } else {
    r0.xyz = r0.xyz * r4.xxx + -r2.yzw;
    r2.x = dot(r0.xyz, r0.xyz);
    r2.x = rsqrt(r2.x);
    r0.xyz = r2.xxx * r0.xyz;
    r0.x = saturate(dot(r6.xyz, r0.xyz));
    r0.y = r1.y * 8.662509918e-002 + 8.750000000e-001;
    r0.x = r0.x * r1.y + -r1.y;
    r0.x = exp2(r0.x);
    r0.x = r0.y * r0.x;
    r0.xyz = r3.yzw * r0.xxx;
    r1.xzw = v2.www * r0.xyz;
  }
  if (r0.w == 0) {
    r1.xzw = r1.xzw * r9.xyz;
  }
  o0.xyz = r3.yzw * r8.xyz + r1.xzw;
  o0.w = 0.000000000e+000;
  return;
}
