// manually fixed shader
// Compiles to same ASM

  struct StoredBokeh
  {
      float2 position;               // Offset:    0
      float2 radius;                 // Offset:    8
      float4 colorAndWeight;         // Offset:   16
  };                        // Offset:    0 Size:    32

StructuredBuffer<StoredBokeh> g_BokehBuffer : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  uint v0 : SV_VertexID0,
  uint v1 : SV_InstanceID0,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0)
{
  float4 r0,r1;
  uint4 bitmask;
  bitmask.x = ((~(-1 << 1)) << 1) & 0xffffffff;
  r0.x = (((uint)v0.x << 1) & bitmask.x) | ((uint)0 & ~bitmask.x);
  r0.z = (int)v0.x & 2;
  r0.xy = r0.xz;
  r0.zw = r0.xy * float2(1.000000e+000,-1.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  o2.xy = float2(5.000000e-001,5.000000e-001) * r0.xy;
// ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r1.xyzw, v1.x, l(0), t3.xyzw
r1.x = g_BokehBuffer[v1.x].position.x;
r1.y = g_BokehBuffer[v1.x].position.y;
r1.z = g_BokehBuffer[v1.x].radius.x;
r1.w = g_BokehBuffer[v1.x].radius.y;
  r0.xy = r1.zw + r1.zw;
  o0.xy = r0.zw * r0.xy + r1.xy;
  o0.zw = float2(0.000000e+000,1.000000e+000);
// ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) o1.xyzw, v1.x, l(16), t3.xyzw
o1.x = g_BokehBuffer[v1.x].colorAndWeight.x;
o1.y = g_BokehBuffer[v1.x].colorAndWeight.y;
o1.z = g_BokehBuffer[v1.x].colorAndWeight.z;
o1.w = g_BokehBuffer[v1.x].colorAndWeight.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(1,18-30): error X3000: syntax error: unexpected token 'g_BokehBuffer'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
