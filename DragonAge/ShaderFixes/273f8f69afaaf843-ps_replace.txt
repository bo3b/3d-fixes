
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float3 g_lightDir : packoffset(c6);
  float4 g_keyColor : packoffset(c7);
  float2 g_lightAngularRadius : packoffset(c8);
  float4 g_keyTranslucencyParams : packoffset(c9);
  float4 g_subParams : packoffset(c10);
  float4 g_envmapParams : packoffset(c11);
  float g_skyEnvmap8BitTexInvScale : packoffset(c12);
  float4 g_exposureMultipliers : packoffset(c13);
  float4 g_envmapsMipmapCount : packoffset(c14);
  int g_drawReference : packoffset(c15);
  float g_skyEnvmapMipmapCount : packoffset(c15.y);
}
SamplerState g_skyEnvmapSampler_s : register(s0);
SamplerState g_customSampler_s : register(s1);
SamplerState g_diffuseOcclusionSampler_s : register(s2);
SamplerState g_dynamicEnvmapSampler_s : register(s3);
TextureCube<float4> g_skyEnvmap : register(t0);
TextureCube<float4> g_customEnvmap : register(t1);
Texture2D<float4> g_diffuseOcclusionTexture : register(t2);
TextureCube<float4> g_dynamicEnvmap : register(t3);
Texture2DMS<float4,2> g_depthTexture : register(t4);
Texture2DMS<float4,2> g_gbufferTexture0 : register(t5);
Texture2DMS<float4,2> g_gbufferTexture1 : register(t6);
Texture2DMS<float4,2> g_gbufferTexture2 : register(t7);
Texture2DMS<float4,2> g_gbufferTexture3 : register(t8);
Texture2D<float> g_msaaClassifyTexture : register(t9);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  const float4 icb[] = { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_msaaClassifyTexture.Load(r1.xyw).x;
  r0.z = 0.000000000e+000 < r0.z;
  r0.zw = r0.zz ? float2(2.802597e-045,5.000000e-001) : float2(1.401298e-045,1.000000e+000);
  r2.xyz = (int3)g_envmapsMipmapCount.zxy;
  r2.xyz = (int3)r2.xyz + int3(-1,-1,-1);
  r3.x = round(g_envmapsMipmapCount.z);
  r3.y = round(g_envmapsMipmapCount.x);
  r3.z = round(g_envmapsMipmapCount.y);
  r2.xyz = r2.xyz;
  r4.w = 1.000000000e+000;
  r5.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r2.w = 0.000000000e+000;
  while (true) {
  r3.w = (int)r2.w >= (int)r0.z;
  if (r3.w != 0) break;
  r7.xy = icb[r2.w].xx * g_invScreenSize.xy + r0.xy;
  r8.xyzw = g_gbufferTexture0.Load(r1.xyw,r2.w).xyzw;
  r9.xyzw = g_gbufferTexture1.Load(r1.xyw,r2.w).xyzw;
  r10.xyz = g_gbufferTexture2.Load(r1.xyw,r2.w).xzw;
  r11.xyz = g_gbufferTexture3.Load(r1.xyw,r2.w).xyz;
  r4.z = g_depthTexture.Load(r1.xyz,r2.w).x;
  r8.xyz = r8.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.w = dot(r8.xyz, r8.xyz);
  r3.w = rsqrt(r3.w);
  r8.xyz = r8.xyz * r3.www;
  r3.w = 2.550000000e+002 * r10.z;
  r3.w = round(r3.w * 0.5) * 2;
  r3.w = (int)r3.w;
  r9.xyzw = r9.xyzw * r9.xyzw;
  r12.x = r3.w == 5;
  r12.y = r3.w == 3;
  r12.z = r3.w == 2;
  if (r12.x != 0) {
  r13.xyz = r9.xyz * r9.www;
  r14.xyz = r9.xyz;
  } else {
  r3.w = r3.w == 1;
  if (r3.w != 0) {
  r14.xyz = r9.www * r9.xyz;
  } else {
  r14.xyz = r9.www;
  }
  r13.xyz = r9.xyz;
  }
  r3.w = 0.000000000e+000 < r14.x;
  r3.w = r3.w ? r8.w : 0;
  r9.xyz = g_exposureMultipliers.yyy * r11.xyz;
  r7.xy = r7.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r7.xy;
  r7.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r7.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r7.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r4.x = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r4.x = 1.000000e+000 / r4.x;


float4 r28, r26, r27;
r26.xyz = r7.xyz * r4.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r7.xyz = r26.xyz / r4.xxx;

  r4.xyz = r7.xyz * r4.xxx;


  r5.w = dot(r4.xyz, r4.xyz);
  r5.w = rsqrt(r5.w);
  r4.xyz = r5.www * r4.xyz;
  r5.w = dot(r4.xyz, r8.xyz);
  r5.w = r5.w + r5.w;
  r4.xyz = r8.xyz * -r5.www + r4.xyz;
  if (r12.y != 0) {
  r5.w = -r3.w * 1.500000000e+001 + r3.x;
  r5.w = 5.000000000e+000 + r5.w;
  r5.w = max(r5.w, 0.000000000e+000);
  r5.w = min(r2.x, r5.w);
  r7.xyz = g_dynamicEnvmap.SampleLevel(g_dynamicEnvmapSampler_s, r4.xyz, r5.w).xyz;
  } else {
  r5.w = log2(abs(r10.x));
  r5.w = g_envmapParams.z * r5.w;
  r5.w = exp2(r5.w);
  r8.x = r10.y == 0;
  r8.y = r10.y == 3.922000e-003;
  r8.z = r10.y == 7.843000e-003;
  r8.w = r10.y == 1.176500e-002;
  r8.x = r8.x ? g_envmapParams.x : 0;
  r8.y = r8.y ? g_envmapParams.x : 0;
  r8.z = r8.z ? g_envmapParams.x : 0;
  r8.w = r8.w ? g_envmapParams.x : 0;
  r10.xy = -r3.ww * float2(1.500000e+001,1.500000e+001) + r3.yz;
  r10.xy = float2(5.000000e+000,5.000000e+000) + r10.xy;
  r10.xy = max(r10.xy, float2(0.000000e+000,0.000000e+000));
  r10.xy = min(r2.yz, r10.xy);
  r15.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r4.xyz, r10.y).xyzw;
  r3.w = dot(r8.xyzw, r15.xyzw);
  r4.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r4.xyz, r10.x).xyz;
  r4.xyz = r4.xyz * r5.www;
  r8.xyz = r11.xyz * g_exposureMultipliers.yyy + g_envmapParams.yyy;
  r8.xyz = r8.xyz * r3.www;
  r3.w = 1.000000000e+000 + -r5.w;
  r8.xyz = r8.xyz * r3.www;
  r7.xyz = r4.xyz * g_skyEnvmap8BitTexInvScale + r8.xyz;
  }
  r4.xyz = r7.xyz * r14.xyz;
  r3.w = r12.z ? 0.000000000e+000 : 1.000000000e+000;
  r4.xyz = r4.xyz * r3.www;
  r4.xyz = r9.xyz * r13.xyz + r4.xyz;
  r6.xyz = r6.xyz + r4.xyz;
  r5.xyz = r7.xyz * r14.xyz + r5.xyz;
  r2.w = (int)r2.w + 1;
  }
  r1.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r1.y, r1.x);
  r0.x = min(r1.z, r0.x);
  o0.w = min(r1.w, r0.x);
  o0.xyz = r6.xyz * r0.www;
  o1.xyz = r5.xyz * r0.www;
  o1.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float3 g_lightDir;                 // Offset:   96 Size:    12 [unused]
//   float4 g_keyColor;                 // Offset:  112 Size:    16 [unused]
//   float2 g_lightAngularRadius;       // Offset:  128 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  144 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  160 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  176 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  192 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  208 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  224 Size:    16
//   int g_drawReference;               // Offset:  240 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  244 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_skyEnvmapSampler                sampler      NA          NA    0        1
// g_customSampler                   sampler      NA          NA    1        1
// g_diffuseOcclusionSampler         sampler      NA          NA    2        1
// g_dynamicEnvmapSampler            sampler      NA          NA    3        1
// g_skyEnvmap                       texture  float4        cube    0        1
// g_customEnvmap                    texture  float4        cube    1        1
// g_diffuseOcclusionTexture         texture  float4          2d    2        1
// g_dynamicEnvmap                   texture  float4        cube    3        1
// g_depthTexture                    texture  float4       2dMS2    4        1
// g_gbufferTexture0                 texture  float4       2dMS2    5        1
// g_gbufferTexture1                 texture  float4       2dMS2    6        1
// g_gbufferTexture2                 texture  float4       2dMS2    7        1
// g_gbufferTexture3                 texture  float4       2dMS2    8        1
// g_msaaClassifyTexture             texture   float          2d    9        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} }
dcl_constantbuffer cb0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture2dms(2) (float,float,float,float) t4
dcl_resource_texture2dms(2) (float,float,float,float) t5
dcl_resource_texture2dms(2) (float,float,float,float) t6
dcl_resource_texture2dms(2) (float,float,float,float) t7
dcl_resource_texture2dms(2) (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 16
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t9.yzxw
lt r0.z, l(0.000000), r0.z
movc r0.zw, r0.zzzz, l(0,0,2,0.500000), l(0,0,1,1.000000)
ftoi r2.xyz, cb0[14].zxyz
iadd r2.xyz, r2.xyzx, l(-1, -1, -1, 0)
round_z r3.xyz, cb0[14].zxyz
itof r2.xyz, r2.xyzx
mov r4.w, l(1.000000)
mov r5.xyz, l(0,0,0,0)
mov r6.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r3.w, r2.w, r0.z
  breakc_nz r3.w
  mad r7.xy, icb[r2.w + 0].xxxx, cb0[1].xyxx, r0.xyxx
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r1.xyww, t5.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyzw, r1.xyww, t6.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r10.xyz, r1.xyww, t7.xzwy, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r11.xyz, r1.xyww, t8.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r4.z, r1.xyzw, t4.yzxw, r2.w
  mad r8.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r3.w, r8.xyzx, r8.xyzx
  rsq r3.w, r3.w
  mul r8.xyz, r3.wwww, r8.xyzx
  mul r3.w, r10.z, l(255.000000)
  round_ne r3.w, r3.w
  ftoi r3.w, r3.w
  mul r9.xyzw, r9.xyzw, r9.xyzw
  ieq r12.xyz, r3.wwww, l(5, 3, 2, 0)
  if_nz r12.x
    mul r13.xyz, r9.wwww, r9.xyzx
    mov r14.xyz, r9.xyzx
  else 
    ieq r3.w, r3.w, l(1)
    if_nz r3.w
      mul r14.xyz, r9.xyzx, r9.wwww
    else 
      mov r14.xyz, r9.wwww
    endif 
    mov r13.xyz, r9.xyzx
  endif 
  lt r3.w, l(0.000000), r14.x
  and r3.w, r8.w, r3.w
  mul r9.xyz, r11.xyzx, cb0[13].yyyy
  mad r7.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r4.xy, r7.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r7.x, r4.xyzw, cb0[2].xyzw
  dp4 r7.y, r4.xyzw, cb0[3].xyzw
  dp4 r7.z, r4.xyzw, cb0[4].xyzw
  dp4 r4.x, r4.xyzw, cb0[5].xyzw
  div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
  mul r4.xyz, r4.xxxx, r7.xyzx
  dp3 r5.w, r4.xyzx, r4.xyzx
  rsq r5.w, r5.w
  mul r4.xyz, r4.xyzx, r5.wwww
  dp3 r5.w, r4.xyzx, r8.xyzx
  add r5.w, r5.w, r5.w
  mad r4.xyz, r8.xyzx, -r5.wwww, r4.xyzx
  if_nz r12.y
    mad r5.w, -r3.w, l(15.000000), r3.x
    add r5.w, r5.w, l(5.000000)
    max r5.w, r5.w, l(0.000000)
    min r5.w, r2.x, r5.w
    sample_l_indexable(texturecube)(float,float,float,float) r7.xyz, r4.xyzx, t3.xyzw, s3, r5.w
  else 
    log r5.w, |r10.x|
    mul r5.w, r5.w, cb0[11].z
    exp r5.w, r5.w
    eq r8.xyzw, r10.yyyy, l(0.000000, 0.003922, 0.007843, 0.011765)
    and r8.xyzw, r8.xyzw, cb0[11].xxxx
    mad r10.xy, -r3.wwww, l(15.000000, 15.000000, 0.000000, 0.000000), r3.yzyy
    add r10.xy, r10.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
    max r10.xy, r10.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r10.xy, r2.yzyy, r10.xyxx
    sample_l_indexable(texturecube)(float,float,float,float) r15.xyzw, r4.xyzx, t1.xyzw, s1, r10.y
    dp4 r3.w, r8.xyzw, r15.xyzw
    sample_l_indexable(texturecube)(float,float,float,float) r4.xyz, r4.xyzx, t0.xyzw, s0, r10.x
    mul r4.xyz, r5.wwww, r4.xyzx
    mad r8.xyz, r11.xyzx, cb0[13].yyyy, cb0[11].yyyy
    mul r8.xyz, r3.wwww, r8.xyzx
    add r3.w, -r5.w, l(1.000000)
    mul r8.xyz, r3.wwww, r8.xyzx
    mad r7.xyz, r4.xyzx, cb0[12].xxxx, r8.xyzx
  endif 
  mul r4.xyz, r14.xyzx, r7.xyzx
  movc r3.w, r12.z, l(0), l(1.000000)
  mul r4.xyz, r3.wwww, r4.xyzx
  mad r4.xyz, r9.xyzx, r13.xyzx, r4.xyzx
  add r6.xyz, r4.xyzx, r6.xyzx
  mad r5.xyz, r7.xyzx, r14.xyzx, r5.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s2.x
min r0.x, r1.y, r1.x
min r0.x, r1.z, r0.x
min o0.w, r1.w, r0.x
mul o0.xyz, r0.wwww, r6.xyzx
mul o1.xyz, r0.wwww, r5.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 103 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
