
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float4 g_keyColor : packoffset(c9);
  float2 g_lightAngularRadius : packoffset(c10);
  float4 g_keyTranslucencyParams : packoffset(c11);
  float4 g_subParams : packoffset(c12);
  float4 g_envmapParams : packoffset(c13);
  float g_skyEnvmap8BitTexInvScale : packoffset(c14);
  float4 g_exposureMultipliers : packoffset(c15);
  float4 g_envmapsMipmapCount : packoffset(c16);
  int g_drawReference : packoffset(c17);
  float g_skyEnvmapMipmapCount : packoffset(c17.y);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_customSampler_s : register(s2);
SamplerState g_diffuseOcclusionSampler_s : register(s3);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
TextureCube<float4> g_customEnvmap : register(t2);
Texture2D<float4> g_diffuseOcclusionTexture : register(t3);
Texture2DMS<float4,2> g_depthTexture : register(t4);
Texture2DMS<float4,2> g_gbufferTexture0 : register(t5);
Texture2DMS<float4,2> g_gbufferTexture1 : register(t6);
Texture2DMS<float4,2> g_gbufferTexture2 : register(t7);
Texture2DMS<float4,2> g_gbufferTexture3 : register(t8);
Texture2DMS<float4,2> g_gbufferTexture4 : register(t9);
Texture2DMS<float4> g_shadowAccumTexture : register(t10);
Texture2D<float> g_msaaClassifyTexture : register(t11);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_msaaClassifyTexture.Load(r1.xyw).x;
  r0.z = 0.000000000e+000 < r0.z;
  r0.zw = r0.zz ? float2(2.802597e-045,5.000000e-001) : float2(1.401298e-045,1.000000e+000);
  r2.x = 1.000000000e+000 + -g_envmapParams.w;
  r2.yz = (int2)g_envmapsMipmapCount.xy;
  r2.yz = (int2)r2.yz + int2(-1,-1);
  r3.x = round(g_envmapsMipmapCount.x);
  r3.y = round(g_envmapsMipmapCount.y);
  r2.yz = r2.yz;
  r4.w = 1.000000000e+000;
  r5.y = 0.000000000e+000;
  r6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r2.w = 0.000000000e+000;
  while (true) {
  r3.z = (int)r2.w >= (int)r0.z;
  if (r3.z != 0) break;
  r3.zw = icb[r2.w].xx * g_invScreenSize.xy + r0.xy;
  r7.xyzw = g_gbufferTexture0.Load(r1.xyw,r2.w).xyzw;
  r8.xyzw = g_gbufferTexture1.Load(r1.xyw,r2.w).xyzw;
  r9.xyz = g_gbufferTexture2.Load(r1.xyw,r2.w).xzw;
  r10.xyz = g_gbufferTexture3.Load(r1.xyw,r2.w).xyz;
  r4.z = g_depthTexture.Load(r1.xyw,r2.w).x;
  r5.z = 2.550000000e+002 * r9.z;
  r5.z = round(r5.z * 0.5) * 2;
  r5.z = (int)r5.z;
  r9.z = r5.z == 4;
  r9.w = r5.z == 2;
  if (r9.z != 0) {
  r11.xyzw = g_gbufferTexture4.Load(r1.xyw,r2.w).xyzw;
  r12.xyzw = r7.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + float4(-2.000000e+000,-2.000000e+000,-2.000000e+000,-2.000000e+000);
  r5.w = dot(r12.xy, r12.xy);
  r13.zw = -r5.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r5.w = max(r13.z, 0.000000000e+000);
  r5.w = sqrt(r5.w);
  r13.xy = r12.xy * r5.ww;
  r5.w = dot(r13.xyw, r13.xyw);
  r5.w = rsqrt(r5.w);
  r13.xyz = r13.xyw * r5.www;
  r5.w = dot(r12.zw, r12.zw);
  r14.zw = -r5.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r5.w = max(r14.z, 0.000000000e+000);
  r5.w = sqrt(r5.w);
  r14.xy = r12.zw * r5.ww;
  r5.w = dot(r14.xyw, r14.xyw);
  r5.w = rsqrt(r5.w);
  r12.xyz = r14.xyw * r5.www;
  r5.w = dot(r11.xy, float2(6.528000e+004,2.550000e+002));
  r5.w = round(r5.w * 0.5) * 2;
  r6.w = 3.125000000e-002 * r5.w;
  r6.w = round(r6.w);
  r14.z = r5.w * 3.125000000e-002 + -r6.w;
  r5.w = 1.562500000e-002 * r6.w;
  r14.x = round(r5.w);
  r14.y = r6.w * 1.562500000e-002 + -r14.x;
  r14.xyz = float3(3.225806e-002,1.015873e+000,1.032258e+000) * r14.xyz;
  r11.xy = float2(2.550000e+002,2.550000e+002) * r11.zw;
  r11.x = round(r11.x * 0.5) * 2;
  r11.y = round(r11.y * 0.5) * 2;
  r11.zw = float2(6.250000e-002,6.250000e-002) * r11.xy;
  r15.x = round(r11.z);
  r15.y = round(r11.w);
  r15.zw = r11.xy * float2(6.250000e-002,6.250000e-002) + -r15.xy;
  r11.xw = float2(6.666667e-002,1.066667e+000) * r15.yw;
  r11.yz = r15.xz * float2(8.000001e-001,1.280000e+001) + float2(1.000000e+000,1.000000e+000);
  r11.yz = exp2(r11.yz);
  r11.yz = r11.yz * float2(1.443000e+000,1.443000e+000) + float2(1.443000e+000,1.443000e+000);
  r15.xyzw = r8.xyzw * r8.xyzw;
  r16.xyz = r15.www;
  r5.w = 0.000000000e+000;
  } else {
  r7.xyz = r7.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r6.w = dot(r7.xyz, r7.xyz);
  r6.w = rsqrt(r6.w);
  r13.xyz = r7.xyz * r6.www;
  r8.xyzw = r8.xyzw * r8.xyzw;
  r6.w = r5.z == 5;
  if (r6.w != 0) {
  r15.xyz = r8.xyz * r8.www;
  r16.xyz = r8.xyz;
  } else {
  r6.w = r5.z == 1;
  if (r6.w != 0) {
  r16.xyz = r8.www * r8.xyz;
  } else {
  r16.xyz = r8.www;
  }
  r15.xyz = r8.xyz;
  }
  r6.w = 0.000000000e+000 < r16.x;
  r5.w = r6.w ? r7.w : 0;
  r6.w = r5.w * 1.200000000e+001 + 1.000000000e+000;
  r6.w = exp2(r6.w);
  r5.x = r6.w * 1.442999959e+000 + 1.442999959e+000;
  r11.yz = r5.xy;
  r14.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r12.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r11.xw = float2(0.000000e+000,0.000000e+000);
  }
  r3.zw = r3.zw * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r3.zw;
  r7.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r7.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r7.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r3.z = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r3.z = 1.000000e+000 / r3.z;


float4 r28, r26, r27;
r26.xyz = r7.xyz * r3.zzz;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r7.xyz = r26.xyz / r3.zzz;

  r4.xyz = r7.xzy * r3.zzz;


  r3.w = dot(r4.xyz, r4.xyz);
  r5.x = rsqrt(r3.w);
  r7.xzw = r5.xxx * r4.xzy;
  r6.w = log2(abs(r9.x));
  r6.w = g_envmapParams.z * r6.w;
  r6.w = exp2(r6.w);
  r8.x = g_shadowAccumTexture.Load(r1.xyz,r2.w).x;
  r3.z = r7.y * r3.z + g_cameraPos.y;
  r8.yz = g_lightDir.xz * r3.zz;
  r8.yz = r8.yz * g_cloudOffsetAndScale.ww + r4.xy;
  r8.yz = r8.yz * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
  r3.z = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r8.yz, 0.000000000e+000).x;
  r3.z = saturate(g_cloudCoverageExponentAndFade.x + r3.z);
  r3.z = log2(r3.z);
  r3.z = g_cloudCoverageExponentAndFade.y * r3.z;
  r3.z = exp2(r3.z);
  r3.w = sqrt(r3.w);
  r3.w = -g_cloudCoverageExponentAndFade.z + r3.w;
  r3.w = saturate(g_cloudCoverageExponentAndFade.w * r3.w);
  r3.w = r3.w * r3.w;
  r7.y = 1.000000000e+000 + -r3.z;
  r3.z = r3.w * r7.y + r3.z;
  r3.z = r8.x * r3.z;
  r3.w = dot(r13.xyz, g_lightDir.xyz);
  r7.y = saturate(r3.w);
  r8.xyz = g_keyColor.xyz * r7.yyy;
  r8.xyz = r8.xyz * r3.zzz;
  if (r9.z != 0) {
  r11.w = saturate(r11.w);
  r7.y = r11.w * 5.000000000e-001 + r3.w;
  r8.w = r11.w * 5.000000000e-001 + 1.000000000e+000;
  r7.y = saturate(r7.y / r8.w);
  r17.xyz = g_keyColor.xyz * r7.yyy;
  r17.xyz = r17.xyz * r3.zzz;
  r18.xyz = -r13.xyz * r11.xxx + r12.xyz;
  r7.y = dot(r18.xyz, r18.xyz);
  r7.y = rsqrt(r7.y);
  r18.xyz = r18.xyz * r7.yyy;
  r19.xyz = -r4.xzy * r5.xxx + g_lightDir.xyz;
  r7.y = dot(r19.xyz, r19.xyz);
  r7.y = rsqrt(r7.y);
  r19.xyz = r19.xyz * r7.yyy;
  r7.y = dot(r12.xyz, r19.xyz);
  r7.y = -r7.y * r7.y + 1.000000000e+000;
  r7.y = max(r7.y, 0.000000000e+000);
  r7.y = sqrt(r7.y);
  r7.y = log2(r7.y);
  r7.y = r11.y * r7.y;
  r7.y = exp2(r7.y);
  r8.w = dot(r18.xyz, r19.xyz);
  r8.w = -r8.w * r8.w + 1.000000000e+000;
  r8.w = max(r8.w, 0.000000000e+000);
  r8.w = sqrt(r8.w);
  r8.w = log2(r8.w);
  r8.w = r11.z * r8.w;
  r8.w = exp2(r8.w);
  r11.xzw = r8.www * r14.xyz;
  r11.xzw = r7.yyy * r16.xxx + r11.xzw;
  r11.xzw = float3(1.500000e-001,1.500000e-001,1.500000e-001) * r11.xzw;
  r11.xzw = r11.xzw * r8.xyz;
  r11.xzw = g_keyColor.www * r11.xzw;
  r8.xyz = r17.xyz;
  } else {
  r4.xyz = -r4.xzy * r5.xxx + g_lightDir.xyz;
  r5.x = dot(r4.xyz, r4.xyz);
  r5.x = rsqrt(r5.x);
  r4.xyz = r5.xxx * r4.xyz;
  r4.x = saturate(dot(r13.xyz, r4.xyz));
  r4.y = r11.y * 8.662509918e-002 + 8.750000000e-001;
  r4.x = r4.x * r11.y + -r11.y;
  r4.x = exp2(r4.x);
  r4.x = r4.y * r4.x;
  r4.xyz = r8.xyz * r4.xxx;
  r11.xzw = g_keyColor.www * r4.xyz;
  }
  r4.xyz = r10.xyz * g_exposureMultipliers.yyy + r8.xyz;
  r5.x = r5.z != 4;
  if (r5.x != 0) {
  r5.x = dot(r7.xzw, r13.xyz);
  r5.x = r5.x + r5.x;
  r7.xyz = r13.xyz * -r5.xxx + r7.xzw;
  r8.x = r9.y == 0;
  r8.y = r9.y == 3.922000e-003;
  r8.z = r9.y == 7.843000e-003;
  r8.w = r9.y == 1.176500e-002;
  r8.x = r8.x ? g_envmapParams.x : 0;
  r8.y = r8.y ? g_envmapParams.x : 0;
  r8.z = r8.z ? g_envmapParams.x : 0;
  r8.w = r8.w ? g_envmapParams.x : 0;
  r5.x = r3.z * r2.x + g_envmapParams.w;
  r5.x = r5.x * r6.w;
  r5.zw = -r5.ww * float2(1.500000e+001,1.500000e+001) + r3.xy;
  r5.zw = float2(5.000000e+000,5.000000e+000) + r5.zw;
  r5.zw = max(r5.zw, float2(0.000000e+000,0.000000e+000));
  r5.zw = min(r2.yz, r5.zw);
  r12.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r7.xyz, r5.w).xyzw;
  r5.w = dot(r8.xyzw, r12.xyzw);
  r7.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r7.xyz, r5.z).xyz;
  r7.xyz = r7.xyz * r5.xxx;
  r11.xzw = r7.xyz * g_skyEnvmap8BitTexInvScale + r11.xzw;
  } else {
  r5.w = 0.000000000e+000;
  }
  r7.xyz = r10.xyz * g_exposureMultipliers.yyy + g_envmapParams.yyy;
  r5.xzw = r7.xyz * r5.www;
  r6.w = 1.000000000e+000 + -r6.w;
  r5.xzw = r5.xzw * r6.www + r11.xzw;
  if (r9.w != 0) {
  r6.w = r3.w * 1.149889946e+000 + -2.145639896e+000;
  r6.w = r3.w * r6.w + 8.416090012e-001;
  r3.w = saturate(r3.w * r6.w + 1.541409940e-001);
  r7.xyz = g_subParams.xyz * r3.www;
  r4.xyz = r7.xyz * r3.zzz + r4.xyz;
  }
  if (r9.z == 0) {
  r5.xzw = r5.xzw * r16.xyz;
  }
  r4.xyz = r4.xyz * r15.xyz + r5.xzw;
  r6.xyz = r6.xyz + r4.xyz;
  r2.w = (int)r2.w + 1;
  }
  r1.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r1.y, r1.x);
  r0.x = min(r1.z, r0.x);
  o0.w = min(r1.w, r0.x);
  o0.xyz = r6.xyz * r0.www;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float4 g_keyColor;                 // Offset:  144 Size:    16
//   float2 g_lightAngularRadius;       // Offset:  160 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  176 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  192 Size:    16
//   float4 g_envmapParams;             // Offset:  208 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  224 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  240 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  256 Size:    16
//   int g_drawReference;               // Offset:  272 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  276 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_customSampler                   sampler      NA          NA    2        1
// g_diffuseOcclusionSampler         sampler      NA          NA    3        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_customEnvmap                    texture  float4        cube    2        1
// g_diffuseOcclusionTexture         texture  float4          2d    3        1
// g_depthTexture                    texture  float4       2dMS2    4        1
// g_gbufferTexture0                 texture  float4       2dMS2    5        1
// g_gbufferTexture1                 texture  float4       2dMS2    6        1
// g_gbufferTexture2                 texture  float4       2dMS2    7        1
// g_gbufferTexture3                 texture  float4       2dMS2    8        1
// g_gbufferTexture4                 texture  float4       2dMS2    9        1
// g_shadowAccumTexture              texture  float4        2dMS   10        1
// g_msaaClassifyTexture             texture   float          2d   11        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} }
dcl_constantbuffer cb0[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2dms(2) (float,float,float,float) t4
dcl_resource_texture2dms(2) (float,float,float,float) t5
dcl_resource_texture2dms(2) (float,float,float,float) t6
dcl_resource_texture2dms(2) (float,float,float,float) t7
dcl_resource_texture2dms(2) (float,float,float,float) t8
dcl_resource_texture2dms(2) (float,float,float,float) t9
dcl_resource_texture2dms(0) (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 20
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t11.yzxw
lt r0.z, l(0.000000), r0.z
movc r0.zw, r0.zzzz, l(0,0,2,0.500000), l(0,0,1,1.000000)
add r2.x, -cb0[13].w, l(1.000000)
ftoi r2.yz, cb0[16].xxyx
iadd r2.yz, r2.yyzy, l(0, -1, -1, 0)
round_z r3.xy, cb0[16].xyxx
itof r2.yz, r2.yyzy
mov r4.w, l(1.000000)
mov r5.y, l(0)
mov r6.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r3.z, r2.w, r0.z
  breakc_nz r3.z
  mad r3.zw, icb[r2.w + 0].xxxx, cb0[1].xxxy, r0.xxxy
  ldms_indexable(texture2dms)(float,float,float,float) r7.xyzw, r1.xyww, t5.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r1.xyww, t6.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyz, r1.xyww, t7.xzwy, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r10.xyz, r1.xyww, t8.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r4.z, r1.xyww, t4.yzxw, r2.w
  mul r5.z, r9.z, l(255.000000)
  round_ne r5.z, r5.z
  ftoi r5.z, r5.z
  ieq r9.zw, r5.zzzz, l(0, 0, 4, 2)
  if_nz r9.z
    ldms_indexable(texture2dms)(float,float,float,float) r11.xyzw, r1.xyww, t9.xyzw, r2.w
    mad r12.xyzw, r7.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), l(-2.000000, -2.000000, -2.000000, -2.000000)
    dp2 r5.w, r12.xyxx, r12.xyxx
    mad r13.zw, -r5.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
    max r5.w, r13.z, l(0.000000)
    sqrt r5.w, r5.w
    mul r13.xy, r5.wwww, r12.xyxx
    dp3 r5.w, r13.xywx, r13.xywx
    rsq r5.w, r5.w
    mul r13.xyz, r5.wwww, r13.xywx
    dp2 r5.w, r12.zwzz, r12.zwzz
    mad r14.zw, -r5.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
    max r5.w, r14.z, l(0.000000)
    sqrt r5.w, r5.w
    mul r14.xy, r5.wwww, r12.zwzz
    dp3 r5.w, r14.xywx, r14.xywx
    rsq r5.w, r5.w
    mul r12.xyz, r5.wwww, r14.xywx
    dp2 r5.w, r11.xyxx, l(65280.000000, 255.000000, 0.000000, 0.000000)
    round_ne r5.w, r5.w
    mul r6.w, r5.w, l(0.031250)
    round_z r6.w, r6.w
    mad r14.z, r5.w, l(0.031250), -r6.w
    mul r5.w, r6.w, l(0.015625)
    round_z r14.x, r5.w
    mad r14.y, r6.w, l(0.015625), -r14.x
    mul r14.xyz, r14.xyzx, l(0.032258, 1.015873, 1.032258, 0.000000)
    mul r11.xy, r11.zwzz, l(255.000000, 255.000000, 0.000000, 0.000000)
    round_ne r11.xy, r11.xyxx
    mul r11.zw, r11.xxxy, l(0.000000, 0.000000, 0.062500, 0.062500)
    round_z r15.xy, r11.zwzz
    mad r15.zw, r11.xxxy, l(0.000000, 0.000000, 0.062500, 0.062500), -r15.xxxy
    mul r11.xw, r15.yyyw, l(0.066667, 0.000000, 0.000000, 1.066667)
    mad r11.yz, r15.xxzx, l(0.000000, 0.800000, 12.800001, 0.000000), l(0.000000, 1.000000, 1.000000, 0.000000)
    exp r11.yz, r11.yyzy
    mad r11.yz, r11.yyzy, l(0.000000, 1.443000, 1.443000, 0.000000), l(0.000000, 1.443000, 1.443000, 0.000000)
    mul r15.xyzw, r8.xyzw, r8.xyzw
    mov r16.xyz, r15.wwww
    mov r5.w, l(0)
  else 
    mad r7.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r6.w, r7.xyzx, r7.xyzx
    rsq r6.w, r6.w
    mul r13.xyz, r6.wwww, r7.xyzx
    mul r8.xyzw, r8.xyzw, r8.xyzw
    ieq r6.w, r5.z, l(5)
    if_nz r6.w
      mul r15.xyz, r8.wwww, r8.xyzx
      mov r16.xyz, r8.xyzx
    else 
      ieq r6.w, r5.z, l(1)
      if_nz r6.w
        mul r16.xyz, r8.xyzx, r8.wwww
      else 
        mov r16.xyz, r8.wwww
      endif 
      mov r15.xyz, r8.xyzx
    endif 
    lt r6.w, l(0.000000), r16.x
    and r5.w, r7.w, r6.w
    mad r6.w, r5.w, l(12.000000), l(1.000000)
    exp r6.w, r6.w
    mad r5.x, r6.w, l(1.443000), l(1.443000)
    mov r11.yz, r5.xxyx
    mov r14.xyz, l(0,0,0,0)
    mov r12.xyz, l(0,0,0,0)
    mov r11.xw, l(0,0,0,0)
  endif 
  mad r3.zw, r3.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  mul r4.xy, r3.zwzz, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r7.x, r4.xyzw, cb0[2].xyzw
  dp4 r7.y, r4.xyzw, cb0[3].xyzw
  dp4 r7.z, r4.xyzw, cb0[4].xyzw
  dp4 r3.z, r4.xyzw, cb0[5].xyzw
  div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r3.z
  mul r4.xyz, r3.zzzz, r7.xzyx
  dp3 r3.w, r4.xyzx, r4.xyzx
  rsq r5.x, r3.w
  mul r7.xzw, r4.xxzy, r5.xxxx
  log r6.w, |r9.x|
  mul r6.w, r6.w, cb0[13].z
  exp r6.w, r6.w
  ldms_indexable(texture2dms)(float,float,float,float) r8.x, r1.xyzw, t10.xyzw, r2.w
  mad r3.z, r7.y, r3.z, cb0[0].y
  mul r8.yz, r3.zzzz, cb0[8].xxzx
  mad r8.yz, r8.yyzy, cb0[6].wwww, r4.xxyx
  mad r8.yz, r8.yyzy, cb0[6].zzzz, cb0[6].xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r3.z, r8.yzyy, t0.yzxw, s0, l(0.000000)
  add_sat r3.z, r3.z, cb0[7].x
  log r3.z, r3.z
  mul r3.z, r3.z, cb0[7].y
  exp r3.z, r3.z
  sqrt r3.w, r3.w
  add r3.w, r3.w, -cb0[7].z
  mul_sat r3.w, r3.w, cb0[7].w
  mul r3.w, r3.w, r3.w
  add r7.y, -r3.z, l(1.000000)
  mad r3.z, r3.w, r7.y, r3.z
  mul r3.z, r3.z, r8.x
  dp3 r3.w, r13.xyzx, cb0[8].xyzx
  mov_sat r7.y, r3.w
  mul r8.xyz, r7.yyyy, cb0[9].xyzx
  mul r8.xyz, r3.zzzz, r8.xyzx
  if_nz r9.z
    mov_sat r11.w, r11.w
    mad r7.y, r11.w, l(0.500000), r3.w
    mad r8.w, r11.w, l(0.500000), l(1.000000)
    div_sat r7.y, r7.y, r8.w
    mul r17.xyz, r7.yyyy, cb0[9].xyzx
    mul r17.xyz, r3.zzzz, r17.xyzx
    mad r18.xyz, -r13.xyzx, r11.xxxx, r12.xyzx
    dp3 r7.y, r18.xyzx, r18.xyzx
    rsq r7.y, r7.y
    mul r18.xyz, r7.yyyy, r18.xyzx
    mad r19.xyz, -r4.xzyx, r5.xxxx, cb0[8].xyzx
    dp3 r7.y, r19.xyzx, r19.xyzx
    rsq r7.y, r7.y
    mul r19.xyz, r7.yyyy, r19.xyzx
    dp3 r7.y, r12.xyzx, r19.xyzx
    mad r7.y, -r7.y, r7.y, l(1.000000)
    max r7.y, r7.y, l(0.000000)
    sqrt r7.y, r7.y
    log r7.y, r7.y
    mul r7.y, r7.y, r11.y
    exp r7.y, r7.y
    dp3 r8.w, r18.xyzx, r19.xyzx
    mad r8.w, -r8.w, r8.w, l(1.000000)
    max r8.w, r8.w, l(0.000000)
    sqrt r8.w, r8.w
    log r8.w, r8.w
    mul r8.w, r8.w, r11.z
    exp r8.w, r8.w
    mul r11.xzw, r14.xxyz, r8.wwww
    mad r11.xzw, r7.yyyy, r16.xxxx, r11.xxzw
    mul r11.xzw, r11.xxzw, l(0.150000, 0.000000, 0.150000, 0.150000)
    mul r11.xzw, r8.xxyz, r11.xxzw
    mul r11.xzw, r11.xxzw, cb0[9].wwww
    mov r8.xyz, r17.xyzx
  else 
    mad r4.xyz, -r4.xzyx, r5.xxxx, cb0[8].xyzx
    dp3 r5.x, r4.xyzx, r4.xyzx
    rsq r5.x, r5.x
    mul r4.xyz, r4.xyzx, r5.xxxx
    dp3_sat r4.x, r13.xyzx, r4.xyzx
    mad r4.y, r11.y, l(0.086625), l(0.875000)
    mad r4.x, r4.x, r11.y, -r11.y
    exp r4.x, r4.x
    mul r4.x, r4.x, r4.y
    mul r4.xyz, r4.xxxx, r8.xyzx
    mul r11.xzw, r4.xxyz, cb0[9].wwww
  endif 
  mad r4.xyz, r10.xyzx, cb0[15].yyyy, r8.xyzx
  ine r5.x, r5.z, l(4)
  if_nz r5.x
    dp3 r5.x, r7.xzwx, r13.xyzx
    add r5.x, r5.x, r5.x
    mad r7.xyz, r13.xyzx, -r5.xxxx, r7.xzwx
    eq r8.xyzw, r9.yyyy, l(0.000000, 0.003922, 0.007843, 0.011765)
    and r8.xyzw, r8.xyzw, cb0[13].xxxx
    mad r5.x, r3.z, r2.x, cb0[13].w
    mul r5.x, r6.w, r5.x
    mad r5.zw, -r5.wwww, l(0.000000, 0.000000, 15.000000, 15.000000), r3.xxxy
    add r5.zw, r5.zzzw, l(0.000000, 0.000000, 5.000000, 5.000000)
    max r5.zw, r5.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r5.zw, r2.yyyz, r5.zzzw
    sample_l_indexable(texturecube)(float,float,float,float) r12.xyzw, r7.xyzx, t2.xyzw, s2, r5.w
    dp4 r5.w, r8.xyzw, r12.xyzw
    sample_l_indexable(texturecube)(float,float,float,float) r7.xyz, r7.xyzx, t1.xyzw, s1, r5.z
    mul r7.xyz, r5.xxxx, r7.xyzx
    mad r11.xzw, r7.xxyz, cb0[14].xxxx, r11.xxzw
  else 
    mov r5.w, l(0)
  endif 
  mad r7.xyz, r10.xyzx, cb0[15].yyyy, cb0[13].yyyy
  mul r5.xzw, r5.wwww, r7.xxyz
  add r6.w, -r6.w, l(1.000000)
  mad r5.xzw, r5.xxzw, r6.wwww, r11.xxzw
  if_nz r9.w
    mad r6.w, r3.w, l(1.149890), l(-2.145640)
    mad r6.w, r3.w, r6.w, l(0.841609)
    mad_sat r3.w, r3.w, r6.w, l(0.154141)
    mul r7.xyz, r3.wwww, cb0[12].xyzx
    mad r4.xyz, r7.xyzx, r3.zzzz, r4.xyzx
  endif 
  if_z r9.z
    mul r5.xzw, r16.xxyz, r5.xxzw
  endif 
  mad r4.xyz, r4.xyzx, r15.xyzx, r5.xzwx
  add r6.xyz, r4.xyzx, r6.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t3.xyzw, s3.x
min r0.x, r1.y, r1.x
min r0.x, r1.z, r0.x
min o0.w, r1.w, r0.x
mul o0.xyz, r0.wwww, r6.xyzx
ret 
// Approximately 226 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
