
cbuffer functionConstants : register(b0)
{
  float4 lightProbeShR : packoffset(c0);
  float4 lightProbeShG : packoffset(c1);
  float4 lightProbeShB : packoffset(c2);
  float4 lightProbeShO : packoffset(c3);
}

cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
  float4 exposureMultipliers : packoffset(c23);
  float4 fogParams : packoffset(c24);
  float4 fogForwardScatteringParamsGradientScaleFogEnable : packoffset(c25);
  float4 fogForwardScatteringColorPresence : packoffset(c26);
  float4 fogCoefficients : packoffset(c27);
  float4 fogColorCoefficients : packoffset(c28);
  float4 fogColor : packoffset(c29);
  float4 fogStartDistance : packoffset(c30);
  float4 fogHeightFogCoefficients : packoffset(c31);
  float4 fogMiscParam : packoffset(c32);
  float2 fogEnabledMode : packoffset(c33);
  float2 vc_pad10_ : packoffset(c33.z);
}

cbuffer externalConstants : register(b1)
{
  float3 external_Metal_Smoothness : packoffset(c0);
  float1 vc_pad0 : packoffset(c0.w);
  float4 external_IsRaining : packoffset(c1);
  float3 external_Optional_Tint : packoffset(c2);
  float1 vc_pad2 : packoffset(c2.w);
  float3 external_Metal_Falloff_Colour : packoffset(c3);
  float1 vc_pad3 : packoffset(c3.w);
}
SamplerState sampler0_s : register(s0);
Texture2D<float4> texture_Diffuse : register(t1);
Texture2D<float4> texture_Specular : register(t2);
Texture2D<float4> texture_Normal : register(t3);
Texture2D<float4> texture_Texture3 : register(t4);
Texture2D<float4> texture_Texture1 : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.x = v1.w;
  r0.y = v2.w;
  r1.xyzw = texture_Diffuse.Sample(sampler0_s, r0.xy).xyzw;
  r0.z = -5.000000000e-001 + r1.w;
  r1.xyz = external_Optional_Tint.xyz * r1.xyz;
  r0.z = r0.z < 0.000000000e+000;
  if (r0.z != 0) discard;
  r2.xy = float2(0.000000e+000,1.500000e-001) * time;
  r2.z = 0.000000000e+000;
  r2.xyz = v1.xyz * float3(3.000000e-001,3.000000e-001,3.000000e-001) + r2.xyz;
  r3.xyz = texture_Texture3.Sample(sampler0_s, r2.zy).xyw;
  r2.xyz = texture_Texture3.Sample(sampler0_s, r2.xy).xyw;
  r3.x = r3.x * r3.z;
  r3.xy = r3.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.z = dot(r3.xy, r3.xy);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.z = max(r0.z, 0.000000000e+000);
  r3.z = sqrt(r0.z);
  r2.x = r2.x * r2.z;
  r2.xy = r2.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.z = dot(r2.xy, r2.xy);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.z = max(r0.z, 0.000000000e+000);
  r2.z = sqrt(r0.z);
  r3.xyz = r3.xyz + -r2.xyz;
  r0.z = saturate(-v2.x);
  r0.w = saturate(v2.x);
  r0.z = r0.z + r0.w;
  r2.xyz = r0.zzz * r3.xyz + r2.xyz;
  r3.xyz = texture_Normal.Sample(sampler0_s, r0.xy).xyw;
  r0.xyz = texture_Specular.Sample(sampler0_s, r0.xy).xyz;
  r3.x = r3.x * r3.z;
  r3.xy = r3.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = dot(r3.xy, r3.xy);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = max(r0.w, 0.000000000e+000);
  r3.z = sqrt(r0.w);
  r3.xyz = v6.xxx ? r3.xyz : -r3.xyz;
  r4.xyz = float3(0.000000e+000,0.000000e+000,1.000000e+000) + -r3.xyz;
  r4.xyz = r4.xyz * float3(2.000000e-002,2.000000e-002,2.000000e-002) + r3.xyz;
  r4.xyz = r4.xyz + -r2.xyz;
  r2.xyz = r4.xyz * float3(8.300000e-001,8.300000e-001,8.300000e-001) + r2.xyz;
  r2.xyz = r2.xyz + -r3.xyz;
  r4.xy = float2(8.000000e-002,8.000000e-002) * v1.xz;
  r0.w = texture_Texture1.Sample(sampler0_s, r4.xy).x;
  r0.w = -3.000000119e-001 + r0.w;
  r0.w = saturate(r0.w + r0.w);
  r1.w = r0.w * -2.000000000e+000 + 3.000000000e+000;
  r0.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r2.xyz = r0.www * r2.xyz;
  r0.w = 6.999999881e-001 + v2.y;
  r0.w = saturate(1.000000095e+001 * r0.w);
  r1.w = r0.w * -2.000000000e+000 + 3.000000000e+000;
  r0.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r1.w = 6.999999881e-001 + -v2.y;
  r1.w = saturate(1.000000095e+001 * r1.w);
  r2.w = r1.w * -2.000000000e+000 + 3.000000000e+000;
  r1.w = r1.w * r1.w;
  r1.w = r2.w * r1.w;
  r0.w = r1.w * r0.w;
  
float4 r26;
r26.xyz = r0.www * r2.xyz;
r26.w = 1.0;

float4 stereo = StereoParams.Load(0);
r26.x -= stereo.x * (-r26.z - stereo.y)/projMatrix._m00;    
r2.xyz =  r26.xyz; 
  
  // r2.xyz = r0.www * r2.xyz;
  
  
  
  
  r2.xyz = external_IsRaining.xxx * r2.xyz + r3.xyz;
  r3.x = dot(r2.xyz, v3.xyz);
  r3.y = dot(r2.xyz, v4.xyz);
  r3.z = dot(r2.xyz, v5.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  o0.xyz = r2.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r0.w = r0.x == 1.000000;
  r0.xyz = r0.www ? external_Metal_Smoothness.xyz : r0.xyz;
  o0.w = external_Metal_Smoothness.x + r0.x;
  r0.xyz = -r0.xyz * float3(3.000000e+000,3.000000e+000,3.000000e+000) + float3(4.000000e+000,4.000000e+000,4.000000e+000);
  r3.xyz = float3(-3.000000e-001,-3.000000e-001,-3.000000e-001) * r1.xyz;
  r1.xyz = external_IsRaining.xxx * r3.xyz + r1.xyz;
  r3.xyz = cameraPos.xyz + -v1.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = dot(r2.xyz, r3.xyz);
  r0.w = 1.000000000e+000 + -r0.w;
  r1.w = r0.w * r0.w;
  r1.w = r1.w * r1.w;
  r0.w = saturate(r1.w * r0.w);
  r0.xyz = r0.www / r0.xyz;
  r3.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r1.xyz;
  r0.xyz = r3.xyz * r0.xyz;
  r0.xyz = r0.xyz * external_Metal_Falloff_Colour.xyz + r1.xyz;
  o1.xyz = sqrt(r0.xyz);
  o1.w = 4.431027174e-002;
  r2.w = 1.000000000e+000;
  o2.x = dot(r2.xyzw, lightProbeShO.xyzw);
  o2.yzw = float3(0.000000e+000,0.000000e+000,1.960780e-002);
  r0.x = dot(r2.xyzw, lightProbeShR.xyzw);
  r0.y = dot(r2.xyzw, lightProbeShG.xyzw);
  r0.z = dot(r2.xyzw, lightProbeShB.xyzw);
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  o3.xyz = exposureMultipliers.xxx * r0.xyz;
  o3.w = 0.000000000e+000;
  o4.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer functionConstants
// {
//
//   float4 lightProbeShR;              // Offset:    0 Size:    16
//   float4 lightProbeShG;              // Offset:   16 Size:    16
//   float4 lightProbeShB;              // Offset:   32 Size:    16
//   float4 lightProbeShO;              // Offset:   48 Size:    16
//
// }
//
// cbuffer viewConstants
// {
//
//   float1 time;                       // Offset:    0 Size:     4
//   float3 vc_pad0_;                   // Offset:    4 Size:    12 [unused]
//   float4 screenSize;                 // Offset:   16 Size:    16 [unused]
//   float3 debugNonFiniteColor;        // Offset:   32 Size:    12 [unused]
//   float1 vc_pad2_;                   // Offset:   44 Size:     4 [unused]
//   float4x4 viewMatrix;               // Offset:   48 Size:    64 [unused]
//   float4x4 projMatrix;               // Offset:  112 Size:    64 [unused]
//   float4x4 viewProjMatrix;           // Offset:  176 Size:    64 [unused]
//   float4x4 crViewProjMatrix;         // Offset:  240 Size:    64 [unused]
//   float4 projectionKxKyKzKw;         // Offset:  304 Size:    16 [unused]
//   float3 cameraPos;                  // Offset:  320 Size:    12
//   float1 vc_pad8_;                   // Offset:  332 Size:     4 [unused]
//   float3 transparentStartAndSlopeAndClamp;// Offset:  336 Size:    12 [unused]
//   float1 vc_pad9_;                   // Offset:  348 Size:     4 [unused]
//   float4 transparentCurve;           // Offset:  352 Size:    16 [unused]
//   float4 exposureMultipliers;        // Offset:  368 Size:    16
//   float4 fogParams;                  // Offset:  384 Size:    16 [unused]
//   float4 fogForwardScatteringParamsGradientScaleFogEnable;// Offset:  400 Size:    16 [unused]
//   float4 fogForwardScatteringColorPresence;// Offset:  416 Size:    16 [unused]
//   float4 fogCoefficients;            // Offset:  432 Size:    16 [unused]
//   float4 fogColorCoefficients;       // Offset:  448 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  464 Size:    16 [unused]
//   float4 fogStartDistance;           // Offset:  480 Size:    16 [unused]
//   float4 fogHeightFogCoefficients;   // Offset:  496 Size:    16 [unused]
//   float4 fogMiscParam;               // Offset:  512 Size:    16 [unused]
//   float2 fogEnabledMode;             // Offset:  528 Size:     8 [unused]
//   float2 vc_pad10_;                  // Offset:  536 Size:     8 [unused]
//
// }
//
// cbuffer externalConstants
// {
//
//   float3 external_Metal_Smoothness;  // Offset:    0 Size:    12
//   float1 vc_pad0;                    // Offset:   12 Size:     4 [unused]
//   float4 external_IsRaining;         // Offset:   16 Size:    16
//   float3 external_Optional_Tint;     // Offset:   32 Size:    12
//   float1 vc_pad2;                    // Offset:   44 Size:     4 [unused]
//   float3 external_Metal_Falloff_Colour;// Offset:   48 Size:    12
//   float1 vc_pad3;                    // Offset:   60 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler0                          sampler      NA          NA    0        1
// texture_Diffuse                   texture  float4          2d    1        1
// texture_Specular                  texture  float4          2d    2        1
// texture_Normal                    texture  float4          2d    3        1
// texture_Texture3                  texture  float4          2d    4        1
// texture_Texture1                  texture  float4          2d    5        1
// functionConstants                 cbuffer      NA          NA    0        1
// externalConstants                 cbuffer      NA          NA    1        1
// viewConstants                     cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
// TEXCOORD                 2   xyzw        3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// SV_IsFrontFace           0   x           6    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb2[24], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps_sgv v6.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
mov r0.x, v1.w
mov r0.y, v2.w
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t1.xyzw, s0
add r0.z, r1.w, l(-0.500000)
mul r1.xyz, r1.xyzx, cb1[2].xyzx
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
mul r2.xy, cb2[0].xxxx, l(0.000000, 0.150000, 0.000000, 0.000000)
mov r2.z, l(0)
mad r2.xyz, v1.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000), r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.zyzz, t4.xywz, s0
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t4.xywz, s0
mul r3.x, r3.z, r3.x
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.z, r3.xyxx, r3.xyxx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
sqrt r3.z, r0.z
mul r2.x, r2.z, r2.x
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.z, r2.xyxx, r2.xyxx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
sqrt r2.z, r0.z
add r3.xyz, -r2.xyzx, r3.xyzx
mov_sat r0.z, -v2.x
mov_sat r0.w, v2.x
add r0.z, r0.w, r0.z
mad r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyxx, t3.xywz, s0
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t2.xyzw, s0
mul r3.x, r3.z, r3.x
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r3.xyxx, r3.xyxx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
sqrt r3.z, r0.w
movc r3.xyz, v6.xxxx, r3.xyzx, -r3.xyzx
add r4.xyz, -r3.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r4.xyz, r4.xyzx, l(0.020000, 0.020000, 0.020000, 0.000000), r3.xyzx
add r4.xyz, -r2.xyzx, r4.xyzx
mad r2.xyz, r4.xyzx, l(0.830000, 0.830000, 0.830000, 0.000000), r2.xyzx
add r2.xyz, -r3.xyzx, r2.xyzx
mul r4.xy, v1.xzxx, l(0.080000, 0.080000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t5.yzwx, s0
add r0.w, r0.w, l(-0.300000)
add_sat r0.w, r0.w, r0.w
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
mul r2.xyz, r2.xyzx, r0.wwww
add r0.w, v2.y, l(0.700000)
mul_sat r0.w, r0.w, l(10.000001)
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
add r1.w, -v2.y, l(0.700000)
mul_sat r1.w, r1.w, l(10.000001)
mad r2.w, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.w
mul r0.w, r0.w, r1.w
mul r2.xyz, r2.xyzx, r0.wwww
mad r2.xyz, cb1[1].xxxx, r2.xyzx, r3.xyzx
dp3 r3.x, r2.xyzx, v3.xyzx
dp3 r3.y, r2.xyzx, v4.xyzx
dp3 r3.z, r2.xyzx, v5.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r3.xyzx
mad o0.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
eq r0.w, r0.x, l(1.000000)
movc r0.xyz, r0.wwww, cb1[0].xyzx, r0.xyzx
add o0.w, r0.x, cb1[0].x
mad r0.xyz, -r0.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000), l(4.000000, 4.000000, 4.000000, 0.000000)
mul r3.xyz, r1.xyzx, l(-0.300000, -0.300000, -0.300000, 0.000000)
mad r1.xyz, cb1[1].xxxx, r3.xyzx, r1.xyzx
add r3.xyz, -v1.xyzx, cb2[20].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r0.w, r2.xyzx, r3.xyzx
add r0.w, -r0.w, l(1.000000)
mul r1.w, r0.w, r0.w
mul r1.w, r1.w, r1.w
mul_sat r0.w, r0.w, r1.w
div r0.xyz, r0.wwww, r0.xyzx
add r3.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r3.xyzx
mad r0.xyz, r0.xyzx, cb1[3].xyzx, r1.xyzx
sqrt o1.xyz, r0.xyzx
mov o1.w, l(0.044310)
mov r2.w, l(1.000000)
dp4 o2.x, r2.xyzw, cb0[3].xyzw
mov o2.yzw, l(0,0,0,0.019608)
dp4 r0.x, r2.xyzw, cb0[0].xyzw
dp4 r0.y, r2.xyzw, cb0[1].xyzw
dp4 r0.z, r2.xyzw, cb0[2].xyzw
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul o3.xyz, r0.xyzx, cb2[23].xxxx
mov o3.w, l(0)
mov o4.xyzw, l(0,0,0,0)
ret 
// Approximately 103 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
