
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float3 g_lightDir : packoffset(c6);
  float4 g_keyColor : packoffset(c7);
  float2 g_lightAngularRadius : packoffset(c8);
  float4 g_keyTranslucencyParams : packoffset(c9);
  float4 g_subParams : packoffset(c10);
  float4 g_envmapParams : packoffset(c11);
  float g_skyEnvmap8BitTexInvScale : packoffset(c12);
  float4 g_exposureMultipliers : packoffset(c13);
  float4 g_envmapsMipmapCount : packoffset(c14);
  int g_drawReference : packoffset(c15);
  float g_skyEnvmapMipmapCount : packoffset(c15.y);
}
SamplerState g_skyEnvmapSampler_s : register(s0);
SamplerState g_customSampler_s : register(s1);
SamplerState g_diffuseOcclusionSampler_s : register(s2);
SamplerState g_dynamicEnvmapSampler_s : register(s3);
TextureCube<float4> g_skyEnvmap : register(t0);
TextureCube<float4> g_customEnvmap : register(t1);
Texture2D<float4> g_diffuseOcclusionTexture : register(t2);
TextureCube<float4> g_dynamicEnvmap : register(t3);
Texture2D<float4> g_depthTexture : register(t4);
Texture2D<float4> g_gbufferTexture0 : register(t5);
Texture2D<float4> g_gbufferTexture1 : register(t6);
Texture2D<float4> g_gbufferTexture2 : register(t7);
Texture2D<float4> g_gbufferTexture3 : register(t8);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_gbufferTexture0.Load(r1.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r4.xyz = g_gbufferTexture2.Load(r1.xyw).xzw;
  r5.xyz = g_gbufferTexture3.Load(r1.xyw).xyz;
  r1.z = g_depthTexture.Load(r1.xyz).x;
  r0.z = 2.550000000e+002 * r4.z;
  r0.z = round(r0.z * 0.5) * 2;
  r0.z = (int)r0.z;
  r4.z = r0.z == 4;
  r4.w = r0.z == 3;
  if (r4.z != 0) {
  r6.xy = r2.xy * float2(4.000000e+000,4.000000e+000) + float2(-2.000000e+000,-2.000000e+000);
  r0.w = dot(r6.xy, r6.xy);
  r7.zw = -r0.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r0.w = max(r7.z, 0.000000000e+000);
  r0.w = sqrt(r0.w);
  r7.xy = r6.xy * r0.ww;
  r0.w = dot(r7.xyw, r7.xyw);
  r0.w = rsqrt(r0.w);
  r6.xyz = r7.xyw * r0.www;
  r7.xyzw = r3.xyzw * r3.xyzw;
  r8.xyz = r7.www;
  r0.w = 0.000000000e+000;
  } else {
  r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r5.w = dot(r2.xyz, r2.xyz);
  r5.w = rsqrt(r5.w);
  r6.xyz = r5.www * r2.xyz;
  r3.xyzw = r3.xyzw * r3.xyzw;
  r2.x = r0.z == 5;
  if (r2.x != 0) {
  r7.xyz = r3.xyz * r3.www;
  r8.xyz = r3.xyz;
  } else {
  r2.x = r0.z == 1;
  if (r2.x != 0) {
  r8.xyz = r3.www * r3.xyz;
  } else {
  r8.xyz = r3.www;
  }
  r7.xyz = r3.xyz;
  }
  r2.x = 0.000000000e+000 < r8.x;
  r0.w = r2.w ? r2.x : 0;
  }
  r2.xyz = g_exposureMultipliers.yyy * r5.xyz;
  r3.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r1.xy = float2(1.000000e+000,-1.000000e+000) * r3.xy;
  r1.w = 1.000000000e+000;
  r3.x = dot(r1.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r3.y = dot(r1.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r3.z = dot(r1.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r1.x = dot(r1.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r1.x = 1.000000e+000 / r1.x;


float4 r28, r26, r27;
r26.xyz = r3.xyz * r1.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r3.xyz = r26.xyz / r1.xxx;

  r1.xyz = r3.xyz * r1.xxx;


  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.w = dot(r1.xyz, r6.xyz);
  r1.w = r1.w + r1.w;
  r1.xyz = r6.xyz * -r1.www + r1.xyz;
  if (r4.w != 0) {
  r1.w = (int)g_envmapsMipmapCount.z;
  r2.w = round(g_envmapsMipmapCount.z);
  r2.w = -r0.w * 1.500000000e+001 + r2.w;
  r2.w = 5.000000000e+000 + r2.w;
  r1.w = (int)r1.w + -1;
  r1.w = r1.w;
  r2.w = max(r2.w, 0.000000000e+000);
  r1.w = min(r1.w, r2.w);
  r3.xyz = g_dynamicEnvmap.SampleLevel(g_dynamicEnvmapSampler_s, r1.xyz, r1.w).xyz;
  } else {
  r1.w = log2(abs(r4.x));
  r1.w = g_envmapParams.z * r1.w;
  r1.w = exp2(r1.w);
  r0.z = r0.z != 4;
  if (r0.z != 0) {
  r6.x = r4.y == 0;
  r6.y = r4.y == 3.922000e-003;
  r6.z = r4.y == 7.843000e-003;
  r6.w = r4.y == 1.176500e-002;
  r6.x = r6.x ? g_envmapParams.x : 0;
  r6.y = r6.y ? g_envmapParams.x : 0;
  r6.z = r6.z ? g_envmapParams.x : 0;
  r6.w = r6.w ? g_envmapParams.x : 0;
  r4.xy = (int2)g_envmapsMipmapCount.xy;
  r9.x = round(g_envmapsMipmapCount.x);
  r9.y = round(g_envmapsMipmapCount.y);
  r0.zw = -r0.ww * float2(1.500000e+001,1.500000e+001) + r9.xy;
  r0.zw = float2(5.000000e+000,5.000000e+000) + r0.zw;
  r4.xy = (int2)r4.xy + int2(-1,-1);
  r4.xy = r4.xy;
  r0.zw = max(r0.zw, float2(0.000000e+000,0.000000e+000));
  r0.zw = min(r4.xy, r0.zw);
  r9.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r1.xyz, r0.w).xyzw;
  r0.w = dot(r6.xyzw, r9.xyzw);
  r1.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r1.xyz, r0.z).xyz;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = g_skyEnvmap8BitTexInvScale * r1.xyz;
  } else {
  r1.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r0.w = 0.000000000e+000;
  }
  r4.xyw = r5.xyz * g_exposureMultipliers.yyy + g_envmapParams.yyy;
  r4.xyw = r4.xyw * r0.www;
  r0.z = 1.000000000e+000 + -r1.w;
  r3.xyz = r4.xyw * r0.zzz + r1.xyz;
  }
  if (r4.z == 0) {
  r3.xyz = r3.xyz * r8.xyz;
  }
  o0.xyz = r2.xyz * r7.xyz + r3.xyz;
  r0.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r0.y, r0.x);
  r0.x = min(r0.z, r0.x);
  o0.w = min(r0.w, r0.x);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float3 g_lightDir;                 // Offset:   96 Size:    12 [unused]
//   float4 g_keyColor;                 // Offset:  112 Size:    16 [unused]
//   float2 g_lightAngularRadius;       // Offset:  128 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  144 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  160 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  176 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  192 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  208 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  224 Size:    16
//   int g_drawReference;               // Offset:  240 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  244 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_skyEnvmapSampler                sampler      NA          NA    0        1
// g_customSampler                   sampler      NA          NA    1        1
// g_diffuseOcclusionSampler         sampler      NA          NA    2        1
// g_dynamicEnvmapSampler            sampler      NA          NA    3        1
// g_skyEnvmap                       texture  float4        cube    0        1
// g_customEnvmap                    texture  float4        cube    1        1
// g_diffuseOcclusionTexture         texture  float4          2d    2        1
// g_dynamicEnvmap                   texture  float4        cube    3        1
// g_depthTexture                    texture  float4          2d    4        1
// g_gbufferTexture0                 texture  float4          2d    5        1
// g_gbufferTexture1                 texture  float4          2d    6        1
// g_gbufferTexture2                 texture  float4          2d    7        1
// g_gbufferTexture3                 texture  float4          2d    8        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 10
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t5.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t6.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t7.xzwy
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t8.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.z, r1.xyzw, t4.yzxw
mul r0.z, r4.z, l(255.000000)
round_ne r0.z, r0.z
ftoi r0.z, r0.z
ieq r4.zw, r0.zzzz, l(0, 0, 4, 3)
if_nz r4.z
  mad r6.xy, r2.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000), l(-2.000000, -2.000000, 0.000000, 0.000000)
  dp2 r0.w, r6.xyxx, r6.xyxx
  mad r7.zw, -r0.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
  max r0.w, r7.z, l(0.000000)
  sqrt r0.w, r0.w
  mul r7.xy, r0.wwww, r6.xyxx
  dp3 r0.w, r7.xywx, r7.xywx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r7.xywx
  mul r7.xyzw, r3.xyzw, r3.xyzw
  mov r8.xyz, r7.wwww
  mov r0.w, l(0)
else 
  mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r5.w, r2.xyzx, r2.xyzx
  rsq r5.w, r5.w
  mul r6.xyz, r2.xyzx, r5.wwww
  mul r3.xyzw, r3.xyzw, r3.xyzw
  ieq r2.x, r0.z, l(5)
  if_nz r2.x
    mul r7.xyz, r3.wwww, r3.xyzx
    mov r8.xyz, r3.xyzx
  else 
    ieq r2.x, r0.z, l(1)
    if_nz r2.x
      mul r8.xyz, r3.xyzx, r3.wwww
    else 
      mov r8.xyz, r3.wwww
    endif 
    mov r7.xyz, r3.xyzx
  endif 
  lt r2.x, l(0.000000), r8.x
  and r0.w, r2.w, r2.x
endif 
mul r2.xyz, r5.xyzx, cb0[13].yyyy
mad r3.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r1.xy, r3.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r3.x, r1.xyzw, cb0[2].xyzw
dp4 r3.y, r1.xyzw, cb0[3].xyzw
dp4 r3.z, r1.xyzw, cb0[4].xyzw
dp4 r1.x, r1.xyzw, cb0[5].xyzw
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul r1.xyz, r1.xxxx, r3.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
dp3 r1.w, r1.xyzx, r6.xyzx
add r1.w, r1.w, r1.w
mad r1.xyz, r6.xyzx, -r1.wwww, r1.xyzx
if_nz r4.w
  ftoi r1.w, cb0[14].z
  round_z r2.w, cb0[14].z
  mad r2.w, -r0.w, l(15.000000), r2.w
  add r2.w, r2.w, l(5.000000)
  iadd r1.w, r1.w, l(-1)
  itof r1.w, r1.w
  max r2.w, r2.w, l(0.000000)
  min r1.w, r1.w, r2.w
  sample_l_indexable(texturecube)(float,float,float,float) r3.xyz, r1.xyzx, t3.xyzw, s3, r1.w
else 
  log r1.w, |r4.x|
  mul r1.w, r1.w, cb0[11].z
  exp r1.w, r1.w
  ine r0.z, r0.z, l(4)
  if_nz r0.z
    eq r6.xyzw, r4.yyyy, l(0.000000, 0.003922, 0.007843, 0.011765)
    and r6.xyzw, r6.xyzw, cb0[11].xxxx
    ftoi r4.xy, cb0[14].xyxx
    round_z r9.xy, cb0[14].xyxx
    mad r0.zw, -r0.wwww, l(0.000000, 0.000000, 15.000000, 15.000000), r9.xxxy
    add r0.zw, r0.zzzw, l(0.000000, 0.000000, 5.000000, 5.000000)
    iadd r4.xy, r4.xyxx, l(-1, -1, 0, 0)
    itof r4.xy, r4.xyxx
    max r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r0.zw, r4.xxxy, r0.zzzw
    sample_l_indexable(texturecube)(float,float,float,float) r9.xyzw, r1.xyzx, t1.xyzw, s1, r0.w
    dp4 r0.w, r6.xyzw, r9.xyzw
    sample_l_indexable(texturecube)(float,float,float,float) r1.xyz, r1.xyzx, t0.xyzw, s0, r0.z
    mul r1.xyz, r1.wwww, r1.xyzx
    mul r1.xyz, r1.xyzx, cb0[12].xxxx
  else 
    mov r1.xyz, l(0,0,0,0)
    mov r0.w, l(0)
  endif 
  mad r4.xyw, r5.xyxz, cb0[13].yyyy, cb0[11].yyyy
  mul r4.xyw, r0.wwww, r4.xyxw
  add r0.z, -r1.w, l(1.000000)
  mad r3.xyz, r4.xywx, r0.zzzz, r1.xyzx
endif 
if_z r4.z
  mul r3.xyz, r8.xyzx, r3.xyzx
endif 
mad o0.xyz, r2.xyzx, r7.xyzx, r3.xyzx
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t2.xyzw, s2.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
ret 
// Approximately 112 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
