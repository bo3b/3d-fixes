
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float g_subRolloff : packoffset(c5);
  float4 g_exposureMultipliers : packoffset(c6);
}
Texture2D<float4> g_depthTexture : register(t0);
Texture2D<float4> g_gbufferTexture0 : register(t1);
Texture2D<float4> g_gbufferTexture1 : register(t2);
Texture2D<float4> g_gbufferTexture2 : register(t3);
Texture2D<float4> g_gbufferTexture4 : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyz = g_gbufferTexture0.Load(r1.xyw).xyz;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r0.z = g_gbufferTexture2.Load(r1.xyw).w;
  r4.z = g_depthTexture.Load(r1.xyw).x;
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = round(r0.z);
  r0.z = (int)r0.z;
  r5.xy = r0.zz == float2(4.000000e+000,2.000000e+000);
  if (r5.x != 0) {
    r0.w = g_gbufferTexture4.Load(r1.xyz).w;
    r1.xy = r2.xy * float2(4.000000e+000,4.000000e+000) + float2(-2.000000e+000,-2.000000e+000);
    r1.z = dot(r1.xy, r1.xy);
    r6.zw = -r1.zz * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
    r1.z = max(r6.z, 0.000000000e+000);
    r1.z = sqrt(r1.z);
    r6.xy = r1.xy * r1.zz;
    r1.x = dot(r6.xyw, r6.xyw);
    r1.x = rsqrt(r1.x);
    r1.xyz = r6.xyw * r1.xxx;
    r0.w = 2.550000000e+002 * r0.w;
    r0.w = round(r0.w);
    r1.w = 6.250000000e-002 * r0.w;
    r1.w = trunc(r1.w);
    r0.w = r0.w * 6.250000000e-002 + -r1.w;
    r0.w = 1.066666722e+000 * r0.w;
    r6.xyz = r3.xyz * r3.xyz;
  } else {
    r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r1.w = dot(r2.xyz, r2.xyz);
    r1.w = rsqrt(r1.w);
    r1.xyz = r2.xyz * r1.www;
    r6.xyzw = r3.xyzw * r3.xyzw;
    r0.z = r0.z == 5;
    if (r0.z != 0) {
      r6.xyz = r6.xyz * r6.www;
    }
    r0.w = 0.000000000e+000;
  }
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r4.xy = float2(1.000000e+000,-1.000000e+000) * r0.xy;
  r4.w = 1.000000000e+000;
  r0.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r0.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r0.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r1.w = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r1.w = 1.000000e+000 / r1.w;


float4 r28, r26, r27;
r26.xyz = r0.xyz * r1.www;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r0.xyz = r26.xyz / r1.www;

  r0.xyz = -r0.xyz * r1.www + v1.xyz;


  r1.w = dot(r0.xyz, r0.xyz);
  r2.x = rsqrt(r1.w);
  r0.xyz = r2.xxx * r0.xyz;
  r1.w = v3.w + r1.w;
  r1.w = 1.000000e+000 / r1.w;
  r1.w = v1.w + r1.w;
  r1.w = max(r1.w, 0.000000000e+000);
  r0.x = dot(r1.xyz, r0.xyz);
  if (r5.x != 0) {
    r0.w = saturate(r0.w);
    r0.y = r0.w * 5.000000000e-001 + r0.x;
    r0.z = r0.w * 5.000000000e-001 + 1.000000000e+000;
    r0.y = saturate(r0.y / r0.z);
    r0.yzw = v2.xyz * r0.yyy;
    r0.yzw = r0.yzw * r1.www;
  } else {
    r1.x = saturate(r0.x);
    r1.xyz = v2.xyz * r1.xxx;
    r0.yzw = r1.xyz * r1.www;
  }
  if (r5.y != 0) {
    r1.x = 1.000000000e+000 + g_subRolloff;
    r1.y = g_subRolloff + r0.x;
    r1.x = 1.000000e+000 / r1.x;
    r1.x = saturate(r1.y * r1.x);
    r1.y = r1.x * -2.000000000e+000 + 3.000000000e+000;
    r1.x = r1.x * r1.x;
    r0.x = saturate(r0.x);
    r1.z = r0.x * -2.000000000e+000 + 3.000000000e+000;
    r0.x = r0.x * r0.x;
    r0.x = r1.z * r0.x;
    r0.x = r1.y * r1.x + -r0.x;
    r0.x = max(r0.x, 0.000000000e+000);
    r1.xyz = v3.xyz * r0.xxx;
    r0.yzw = r1.xyz * r1.www + r0.yzw;
  }
  o0.xyz = r0.yzw * r6.xyz;
  o0.w = 0.000000000e+000;
  return;
}
