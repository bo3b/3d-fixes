
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float3 g_lightDir : packoffset(c6);
  float4 g_keyColor : packoffset(c7);
  float2 g_lightAngularRadius : packoffset(c8);
  float4 g_keyTranslucencyParams : packoffset(c9);
  float4 g_subParams : packoffset(c10);
  float4 g_envmapParams : packoffset(c11);
  float g_skyEnvmap8BitTexInvScale : packoffset(c12);
  float4 g_exposureMultipliers : packoffset(c13);
  float4 g_envmapsMipmapCount : packoffset(c14);
  int g_drawReference : packoffset(c15);
  float g_skyEnvmapMipmapCount : packoffset(c15.y);
}
SamplerState g_skyEnvmapSampler_s : register(s0);
SamplerState g_customSampler_s : register(s1);
SamplerState g_diffuseOcclusionSampler_s : register(s2);
TextureCube<float4> g_skyEnvmap : register(t0);
TextureCube<float4> g_customEnvmap : register(t1);
Texture2D<float4> g_diffuseOcclusionTexture : register(t2);
Texture2DMS<float4,2> g_depthTexture : register(t3);
Texture2DMS<float4,2> g_gbufferTexture0 : register(t4);
Texture2DMS<float4,2> g_gbufferTexture1 : register(t5);
Texture2DMS<float4,2> g_gbufferTexture2 : register(t6);
Texture2DMS<float4,2> g_gbufferTexture3 : register(t7);
Texture2D<float> g_msaaClassifyTexture : register(t8);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_msaaClassifyTexture.Load(r1.xyw).x;
  r0.z = 0.000000000e+000 < r0.z;
  r0.zw = r0.zz ? float2(2.802597e-045,5.000000e-001) : float2(1.401298e-045,1.000000e+000);
  r2.xy = (int2)g_envmapsMipmapCount.xy;
  r2.xy = (int2)r2.xy + int2(-1,-1);
  r2.z = round(g_envmapsMipmapCount.x);
  r2.w = round(g_envmapsMipmapCount.y);
  r2.xy = r2.xy;
  r3.w = 1.000000000e+000;
  r4.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  while (true) {
  r5.x = (int)r4.w >= (int)r0.z;
  if (r5.x != 0) break;
  r5.xy = icb[r4.w].xx * g_invScreenSize.xy + r0.xy;
  r6.xyzw = g_gbufferTexture0.Load(r1.xyw,r4.w).xyzw;
  r7.xyzw = g_gbufferTexture1.Load(r1.xyw,r4.w).xyzw;
  r8.xyz = g_gbufferTexture2.Load(r1.xyw,r4.w).xzw;
  r9.xyz = g_gbufferTexture3.Load(r1.xyw,r4.w).xyz;
  r3.z = g_depthTexture.Load(r1.xyz,r4.w).x;
  r6.xyz = r6.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r5.z = dot(r6.xyz, r6.xyz);
  r5.z = rsqrt(r5.z);
  r6.xyz = r6.xyz * r5.zzz;
  r5.z = 2.550000000e+002 * r8.z;
  r5.z = round(r5.z * 0.5) * 2;
  r5.z = (int)r5.z;
  r7.xyzw = r7.xyzw * r7.xyzw;
  r5.w = r5.z == 5;
  if (r5.w != 0) {
  r10.xyz = r7.xyz * r7.www;
  r11.xyz = r7.xyz;
  } else {
  r5.z = r5.z == 1;
  if (r5.z != 0) {
  r11.xyz = r7.www * r7.xyz;
  } else {
  r11.xyz = r7.www;
  }
  r10.xyz = r7.xyz;
  }
  r5.z = 0.000000000e+000 < r11.x;
  r5.z = r5.z ? r6.w : 0;
  r7.xyz = g_exposureMultipliers.yyy * r9.xyz;
  r5.xy = r5.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r3.xy = float2(1.000000e+000,-1.000000e+000) * r5.xy;
  r12.x = dot(r3.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r12.y = dot(r3.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r12.z = dot(r3.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r3.x = dot(r3.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r3.x = 1.000000e+000 / r3.x;


float4 r28, r26, r27;
r26.xyz = r12.xyz * r3.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r12.xyz = r26.xyz / r3.xxx;

  r3.xyz = r12.xyz * r3.xxx;


  r5.x = dot(r3.xyz, r3.xyz);
  r5.x = rsqrt(r5.x);
  r3.xyz = r5.xxx * r3.xyz;
  r5.x = log2(abs(r8.x));
  r5.x = g_envmapParams.z * r5.x;
  r5.x = exp2(r5.x);
  r5.y = dot(r3.xyz, r6.xyz);
  r5.y = r5.y + r5.y;
  r3.xyz = r6.xyz * -r5.yyy + r3.xyz;
  r6.x = r8.y == 0;
  r6.y = r8.y == 3.922000e-003;
  r6.z = r8.y == 7.843000e-003;
  r6.w = r8.y == 1.176500e-002;
  r6.x = r6.x ? g_envmapParams.x : 0;
  r6.y = r6.y ? g_envmapParams.x : 0;
  r6.z = r6.z ? g_envmapParams.x : 0;
  r6.w = r6.w ? g_envmapParams.x : 0;
  r5.yz = -r5.zz * float2(1.500000e+001,1.500000e+001) + r2.zw;
  r5.yz = float2(5.000000e+000,5.000000e+000) + r5.yz;
  r5.yz = max(r5.yz, float2(0.000000e+000,0.000000e+000));
  r5.yz = min(r2.xy, r5.yz);
  r8.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r3.xyz, r5.z).xyzw;
  r5.z = dot(r6.xyzw, r8.xyzw);
  r3.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r3.xyz, r5.y).xyz;
  r3.xyz = r3.xyz * r5.xxx;
  r6.xyz = r9.xyz * g_exposureMultipliers.yyy + g_envmapParams.yyy;
  r5.yzw = r6.xyz * r5.zzz;
  r5.x = 1.000000000e+000 + -r5.x;
  r5.xyz = r5.yzw * r5.xxx;
  r3.xyz = r3.xyz * g_skyEnvmap8BitTexInvScale + r5.xyz;
  r3.xyz = r3.xyz * r11.xyz;
  r3.xyz = r7.xyz * r10.xyz + r3.xyz;
  r4.xyz = r4.xyz + r3.xyz;
  r4.w = (int)r4.w + 1;
  }
  r1.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r1.y, r1.x);
  r0.x = min(r1.z, r0.x);
  o0.w = min(r1.w, r0.x);
  o0.xyz = r4.xyz * r0.www;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float3 g_lightDir;                 // Offset:   96 Size:    12 [unused]
//   float4 g_keyColor;                 // Offset:  112 Size:    16 [unused]
//   float2 g_lightAngularRadius;       // Offset:  128 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  144 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  160 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  176 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  192 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  208 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  224 Size:    16
//   int g_drawReference;               // Offset:  240 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  244 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_skyEnvmapSampler                sampler      NA          NA    0        1
// g_customSampler                   sampler      NA          NA    1        1
// g_diffuseOcclusionSampler         sampler      NA          NA    2        1
// g_skyEnvmap                       texture  float4        cube    0        1
// g_customEnvmap                    texture  float4        cube    1        1
// g_diffuseOcclusionTexture         texture  float4          2d    2        1
// g_depthTexture                    texture  float4       2dMS2    3        1
// g_gbufferTexture0                 texture  float4       2dMS2    4        1
// g_gbufferTexture1                 texture  float4       2dMS2    5        1
// g_gbufferTexture2                 texture  float4       2dMS2    6        1
// g_gbufferTexture3                 texture  float4       2dMS2    7        1
// g_msaaClassifyTexture             texture   float          2d    8        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} }
dcl_constantbuffer cb0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2dms(2) (float,float,float,float) t3
dcl_resource_texture2dms(2) (float,float,float,float) t4
dcl_resource_texture2dms(2) (float,float,float,float) t5
dcl_resource_texture2dms(2) (float,float,float,float) t6
dcl_resource_texture2dms(2) (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 13
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t8.yzxw
lt r0.z, l(0.000000), r0.z
movc r0.zw, r0.zzzz, l(0,0,2,0.500000), l(0,0,1,1.000000)
ftoi r2.xy, cb0[14].xyxx
iadd r2.xy, r2.xyxx, l(-1, -1, 0, 0)
round_z r2.zw, cb0[14].xxxy
itof r2.xy, r2.xyxx
mov r3.w, l(1.000000)
mov r4.xyzw, l(0,0,0,0)
loop 
  ige r5.x, r4.w, r0.z
  breakc_nz r5.x
  mad r5.xy, icb[r4.w + 0].xxxx, cb0[1].xyxx, r0.xyxx
  ldms_indexable(texture2dms)(float,float,float,float) r6.xyzw, r1.xyww, t4.xyzw, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r7.xyzw, r1.xyww, t5.xyzw, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyz, r1.xyww, t6.xzwy, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyz, r1.xyww, t7.xyzw, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r3.z, r1.xyzw, t3.yzxw, r4.w
  mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r5.z, r6.xyzx, r6.xyzx
  rsq r5.z, r5.z
  mul r6.xyz, r5.zzzz, r6.xyzx
  mul r5.z, r8.z, l(255.000000)
  round_ne r5.z, r5.z
  ftoi r5.z, r5.z
  mul r7.xyzw, r7.xyzw, r7.xyzw
  ieq r5.w, r5.z, l(5)
  if_nz r5.w
    mul r10.xyz, r7.wwww, r7.xyzx
    mov r11.xyz, r7.xyzx
  else 
    ieq r5.z, r5.z, l(1)
    if_nz r5.z
      mul r11.xyz, r7.xyzx, r7.wwww
    else 
      mov r11.xyz, r7.wwww
    endif 
    mov r10.xyz, r7.xyzx
  endif 
  lt r5.z, l(0.000000), r11.x
  and r5.z, r6.w, r5.z
  mul r7.xyz, r9.xyzx, cb0[13].yyyy
  mad r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r3.xy, r5.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r12.x, r3.xyzw, cb0[2].xyzw
  dp4 r12.y, r3.xyzw, cb0[3].xyzw
  dp4 r12.z, r3.xyzw, cb0[4].xyzw
  dp4 r3.x, r3.xyzw, cb0[5].xyzw
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
  mul r3.xyz, r3.xxxx, r12.xyzx
  dp3 r5.x, r3.xyzx, r3.xyzx
  rsq r5.x, r5.x
  mul r3.xyz, r3.xyzx, r5.xxxx
  log r5.x, |r8.x|
  mul r5.x, r5.x, cb0[11].z
  exp r5.x, r5.x
  dp3 r5.y, r3.xyzx, r6.xyzx
  add r5.y, r5.y, r5.y
  mad r3.xyz, r6.xyzx, -r5.yyyy, r3.xyzx
  eq r6.xyzw, r8.yyyy, l(0.000000, 0.003922, 0.007843, 0.011765)
  and r6.xyzw, r6.xyzw, cb0[11].xxxx
  mad r5.yz, -r5.zzzz, l(0.000000, 15.000000, 15.000000, 0.000000), r2.zzwz
  add r5.yz, r5.yyzy, l(0.000000, 5.000000, 5.000000, 0.000000)
  max r5.yz, r5.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r5.yz, r2.xxyx, r5.yyzy
  sample_l_indexable(texturecube)(float,float,float,float) r8.xyzw, r3.xyzx, t1.xyzw, s1, r5.z
  dp4 r5.z, r6.xyzw, r8.xyzw
  sample_l_indexable(texturecube)(float,float,float,float) r3.xyz, r3.xyzx, t0.xyzw, s0, r5.y
  mul r3.xyz, r5.xxxx, r3.xyzx
  mad r6.xyz, r9.xyzx, cb0[13].yyyy, cb0[11].yyyy
  mul r5.yzw, r5.zzzz, r6.xxyz
  add r5.x, -r5.x, l(1.000000)
  mul r5.xyz, r5.xxxx, r5.yzwy
  mad r3.xyz, r3.xyzx, cb0[12].xxxx, r5.xyzx
  mul r3.xyz, r11.xyzx, r3.xyzx
  mad r3.xyz, r7.xyzx, r10.xyzx, r3.xyzx
  add r4.xyz, r3.xyzx, r4.xyzx
  iadd r4.w, r4.w, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s2.x
min r0.x, r1.y, r1.x
min r0.x, r1.z, r0.x
min o0.w, r1.w, r0.x
mul o0.xyz, r0.wwww, r4.xyzx
ret 
// Approximately 88 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
