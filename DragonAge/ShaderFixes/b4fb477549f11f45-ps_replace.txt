
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float3 g_hemisphereDir : packoffset(c9);
  float3 g_topColor : packoffset(c10);
  float3 g_bottomColor : packoffset(c11);
  float4 g_keyColor : packoffset(c12);
  float2 g_lightAngularRadius : packoffset(c13);
  float4 g_keyTranslucencyParams : packoffset(c14);
  float4 g_subParams : packoffset(c15);
  float4 g_envmapParams : packoffset(c16);
  float g_skyEnvmap8BitTexInvScale : packoffset(c17);
  float4 g_exposureMultipliers : packoffset(c18);
  float4 g_envmapsMipmapCount : packoffset(c19);
  int g_drawReference : packoffset(c20);
  float g_skyEnvmapMipmapCount : packoffset(c20.y);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_diffuseOcclusionSampler_s : register(s2);
SamplerState g_dynamicEnvmapSampler_s : register(s3);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
Texture2D<float4> g_diffuseOcclusionTexture : register(t2);
TextureCube<float4> g_dynamicEnvmap : register(t3);
Texture2D<float4> g_depthTexture : register(t4);
Texture2D<float4> g_gbufferTexture0 : register(t5);
Texture2D<float4> g_gbufferTexture1 : register(t6);
Texture2D<float4> g_gbufferTexture2 : register(t7);
Texture2D<float4> g_gbufferTexture3 : register(t8);
Texture2D<float4> g_shadowAccumTexture : register(t9);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_gbufferTexture0.Load(r1.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r1.xyw).xyzw;
  r0.z = g_gbufferTexture2.Load(r1.xyw).w;
  r4.xyz = g_gbufferTexture3.Load(r1.xyw).xyz;
  r5.z = g_depthTexture.Load(r1.xyw).x;
  r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = round(r0.z * 0.5) * 2;
  r0.z = (int)r0.z;
  r3.xyzw = r3.xyzw * r3.xyzw;
  r6.x = r0.z == 5;
  r6.y = r0.z == 3;
  r6.z = r0.z == 2;
  if (r6.x != 0) {
  r7.xyz = r3.xyz * r3.www;
  r8.xyz = r3.xyz;
  } else {
  r0.z = r0.z == 1;
  if (r0.z != 0) {
  r8.xyz = r3.www * r3.xyz;
  } else {
  r8.xyz = r3.www;
  }
  r7.xyz = r3.xyz;
  }
  r0.z = 0.000000000e+000 < r8.x;
  r0.z = r0.z ? r2.w : 0;
  r0.w = r0.z * 1.200000000e+001 + 1.000000000e+000;
  r0.w = exp2(r0.w);
  r0.w = r0.w * 1.442999959e+000 + 1.442999959e+000;
  r3.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r5.xy = float2(1.000000e+000,-1.000000e+000) * r3.xy;
  r5.w = 1.000000000e+000;
  r3.x = dot(r5.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r3.y = dot(r5.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r3.z = dot(r5.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r2.w = dot(r5.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r2.w = 1.000000e+000 / r2.w;


float4 r28, r26, r27;
r26.xyz = r3.xyz * r2.www;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r3.xyz = r26.xyz / r2.www;

  r3.xzw = r3.xzy * r2.www;


  r4.w = dot(r3.xzw, r3.xzw);
  r5.x = rsqrt(r4.w);
  r5.yzw = r5.xxx * r3.xwz;
  r1.x = g_shadowAccumTexture.Load(r1.xyz).x;
  r1.y = r3.y * r2.w + g_cameraPos.y;
  r1.yz = g_lightDir.xz * r1.yy;
  r1.yz = r1.yz * g_cloudOffsetAndScale.ww + r3.xz;
  r1.yz = r1.yz * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
  r1.y = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r1.yz, 0.000000000e+000).x;
  r1.y = saturate(g_cloudCoverageExponentAndFade.x + r1.y);
  r1.y = log2(r1.y);
  r1.y = g_cloudCoverageExponentAndFade.y * r1.y;
  r1.y = exp2(r1.y);
  r1.z = sqrt(r4.w);
  r1.z = -g_cloudCoverageExponentAndFade.z + r1.z;
  r1.z = saturate(g_cloudCoverageExponentAndFade.w * r1.z);
  r1.z = r1.z * r1.z;
  r1.w = 1.000000000e+000 + -r1.y;
  r1.y = r1.z * r1.w + r1.y;
  r1.x = r1.x * r1.y;
  r1.y = saturate(dot(r2.xyz, g_lightDir.xyz));
  r1.yzw = g_keyColor.xyz * r1.yyy;
  r9.xyz = r1.yzw * r1.xxx;
  r3.xyz = -r3.xwz * r5.xxx + g_lightDir.xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r3.xyz * r2.www;
  r2.w = saturate(dot(r2.xyz, r3.xyz));
  r3.x = r0.w * 8.662509918e-002 + 8.750000000e-001;
  r0.w = r2.w * r0.w + -r0.w;
  r0.w = exp2(r0.w);
  r0.w = r3.x * r0.w;
  r3.xyz = r9.xyz * r0.www;
  r9.xyz = g_keyColor.www * r3.xyz;
  r0.w = dot(r2.xyz, g_hemisphereDir.xyz);
  r0.w = r0.w * 5.000000000e-001 + 5.000000000e-001;
  r10.xyz = -g_bottomColor.xyz + g_topColor.xyz;
  r10.xyz = r0.www * r10.xyz + g_bottomColor.xyz;
  r1.yzw = r1.yzw * r1.xxx + r10.xyz;
  r1.yzw = r4.xyz * g_exposureMultipliers.yyy + r1.yzw;
  r0.w = dot(r5.yzw, r2.xyz);
  r0.w = r0.w + r0.w;
  r2.xyz = r2.xyz * -r0.www + r5.yzw;
  if (r6.y != 0) {
  r0.w = (int)g_envmapsMipmapCount.z;
  r2.w = round(g_envmapsMipmapCount.z);
  r2.w = -r0.z * 1.500000000e+001 + r2.w;
  r2.w = 5.000000000e+000 + r2.w;
  r0.w = (int)r0.w + -1;
  r0.w = r0.w;
  r2.w = max(r2.w, 0.000000000e+000);
  r0.w = min(r0.w, r2.w);
  r4.xyz = g_dynamicEnvmap.SampleLevel(g_dynamicEnvmapSampler_s, r2.xyz, r0.w).xyz;
  r3.xyz = r3.xyz * g_keyColor.www + r4.xyz;
  } else {
  r0.w = 1.000000000e+000 + -g_envmapParams.w;
  r0.w = r1.x * r0.w + g_envmapParams.w;
  r1.x = (int)g_envmapsMipmapCount.x;
  r2.w = round(g_envmapsMipmapCount.x);
  r0.z = -r0.z * 1.500000000e+001 + r2.w;
  r0.z = 5.000000000e+000 + r0.z;
  r1.x = (int)r1.x + -1;
  r1.x = r1.x;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.z = min(r1.x, r0.z);
  r2.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r2.xyz, r0.z).xyz;
  r2.xyz = r2.xyz * r0.www;
  r3.xyz = r2.xyz * g_skyEnvmap8BitTexInvScale + r9.xyz;
  }
  r2.xyz = r3.xyz * r8.xyz;
  r0.z = r6.z ? 0.000000000e+000 : 1.000000000e+000;
  r3.xyz = r2.xyz * r0.zzz;
  o0.xyz = r1.yzw * r7.xyz + r3.xyz;
  r0.xyzw = g_diffuseOcclusionTexture.Gather(g_diffuseOcclusionSampler_s, r0.xy).xyzw;
  r0.x = min(r0.y, r0.x);
  r0.x = min(r0.z, r0.x);
  o0.w = min(r0.w, r0.x);
  o1.xyz = r2.xyz;
  o1.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float3 g_hemisphereDir;            // Offset:  144 Size:    12
//   float3 g_topColor;                 // Offset:  160 Size:    12
//   float3 g_bottomColor;              // Offset:  176 Size:    12
//   float4 g_keyColor;                 // Offset:  192 Size:    16
//   float2 g_lightAngularRadius;       // Offset:  208 Size:     8 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  224 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  240 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  256 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  272 Size:     4
//   float4 g_exposureMultipliers;      // Offset:  288 Size:    16
//   float4 g_envmapsMipmapCount;       // Offset:  304 Size:    16
//   int g_drawReference;               // Offset:  320 Size:     4 [unused]
//   float g_skyEnvmapMipmapCount;      // Offset:  324 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_diffuseOcclusionSampler         sampler      NA          NA    2        1
// g_dynamicEnvmapSampler            sampler      NA          NA    3        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_diffuseOcclusionTexture         texture  float4          2d    2        1
// g_dynamicEnvmap                   texture  float4        cube    3        1
// g_depthTexture                    texture  float4          2d    4        1
// g_gbufferTexture0                 texture  float4          2d    5        1
// g_gbufferTexture1                 texture  float4          2d    6        1
// g_gbufferTexture2                 texture  float4          2d    7        1
// g_gbufferTexture3                 texture  float4          2d    8        1
// g_shadowAccumTexture              texture  float4          2d    9        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[20], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 11
mul r0.xy, v0.xyxx, cb0[1].xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t5.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t6.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t7.xywz
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t8.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.z, r1.xyww, t4.yzxw
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r0.z, r0.z, l(255.000000)
round_ne r0.z, r0.z
ftoi r0.z, r0.z
mul r3.xyzw, r3.xyzw, r3.xyzw
ieq r6.xyz, r0.zzzz, l(5, 3, 2, 0)
if_nz r6.x
  mul r7.xyz, r3.wwww, r3.xyzx
  mov r8.xyz, r3.xyzx
else 
  ieq r0.z, r0.z, l(1)
  if_nz r0.z
    mul r8.xyz, r3.xyzx, r3.wwww
  else 
    mov r8.xyz, r3.wwww
  endif 
  mov r7.xyz, r3.xyzx
endif 
lt r0.z, l(0.000000), r8.x
and r0.z, r2.w, r0.z
mad r0.w, r0.z, l(12.000000), l(1.000000)
exp r0.w, r0.w
mad r0.w, r0.w, l(1.443000), l(1.443000)
mad r3.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r5.xy, r3.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r5.w, l(1.000000)
dp4 r3.x, r5.xyzw, cb0[2].xyzw
dp4 r3.y, r5.xyzw, cb0[3].xyzw
dp4 r3.z, r5.xyzw, cb0[4].xyzw
dp4 r2.w, r5.xyzw, cb0[5].xyzw
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mul r3.xzw, r2.wwww, r3.xxzy
dp3 r4.w, r3.xzwx, r3.xzwx
rsq r5.x, r4.w
mul r5.yzw, r3.xxwz, r5.xxxx
ld_indexable(texture2d)(float,float,float,float) r1.x, r1.xyzw, t9.xyzw
mad r1.y, r3.y, r2.w, cb0[0].y
mul r1.yz, r1.yyyy, cb0[8].xxzx
mad r1.yz, r1.yyzy, cb0[6].wwww, r3.xxzx
mad r1.yz, r1.yyzy, cb0[6].zzzz, cb0[6].xxyx
sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t0.yxzw, s0, l(0.000000)
add_sat r1.y, r1.y, cb0[7].x
log r1.y, r1.y
mul r1.y, r1.y, cb0[7].y
exp r1.y, r1.y
sqrt r1.z, r4.w
add r1.z, r1.z, -cb0[7].z
mul_sat r1.z, r1.z, cb0[7].w
mul r1.z, r1.z, r1.z
add r1.w, -r1.y, l(1.000000)
mad r1.y, r1.z, r1.w, r1.y
mul r1.x, r1.y, r1.x
dp3_sat r1.y, r2.xyzx, cb0[8].xyzx
mul r1.yzw, r1.yyyy, cb0[12].xxyz
mul r9.xyz, r1.xxxx, r1.yzwy
mad r3.xyz, -r3.xwzx, r5.xxxx, cb0[8].xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
dp3_sat r2.w, r2.xyzx, r3.xyzx
mad r3.x, r0.w, l(0.086625), l(0.875000)
mad r0.w, r2.w, r0.w, -r0.w
exp r0.w, r0.w
mul r0.w, r0.w, r3.x
mul r3.xyz, r0.wwww, r9.xyzx
mul r9.xyz, r3.xyzx, cb0[12].wwww
dp3 r0.w, r2.xyzx, cb0[9].xyzx
mad r0.w, r0.w, l(0.500000), l(0.500000)
add r10.xyz, cb0[10].xyzx, -cb0[11].xyzx
mad r10.xyz, r0.wwww, r10.xyzx, cb0[11].xyzx
mad r1.yzw, r1.yyzw, r1.xxxx, r10.xxyz
mad r1.yzw, r4.xxyz, cb0[18].yyyy, r1.yyzw
dp3 r0.w, r5.yzwy, r2.xyzx
add r0.w, r0.w, r0.w
mad r2.xyz, r2.xyzx, -r0.wwww, r5.yzwy
if_nz r6.y
  ftoi r0.w, cb0[19].z
  round_z r2.w, cb0[19].z
  mad r2.w, -r0.z, l(15.000000), r2.w
  add r2.w, r2.w, l(5.000000)
  iadd r0.w, r0.w, l(-1)
  itof r0.w, r0.w
  max r2.w, r2.w, l(0.000000)
  min r0.w, r0.w, r2.w
  sample_l_indexable(texturecube)(float,float,float,float) r4.xyz, r2.xyzx, t3.xyzw, s3, r0.w
  mad r3.xyz, r3.xyzx, cb0[12].wwww, r4.xyzx
else 
  add r0.w, -cb0[16].w, l(1.000000)
  mad r0.w, r1.x, r0.w, cb0[16].w
  ftoi r1.x, cb0[19].x
  round_z r2.w, cb0[19].x
  mad r0.z, -r0.z, l(15.000000), r2.w
  add r0.z, r0.z, l(5.000000)
  iadd r1.x, r1.x, l(-1)
  itof r1.x, r1.x
  max r0.z, r0.z, l(0.000000)
  min r0.z, r1.x, r0.z
  sample_l_indexable(texturecube)(float,float,float,float) r2.xyz, r2.xyzx, t1.xyzw, s1, r0.z
  mul r2.xyz, r0.wwww, r2.xyzx
  mad r3.xyz, r2.xyzx, cb0[17].xxxx, r9.xyzx
endif 
mul r2.xyz, r8.xyzx, r3.xyzx
movc r0.z, r6.z, l(0), l(1.000000)
mul r3.xyz, r0.zzzz, r2.xyzx
mad o0.xyz, r1.yzwy, r7.xyzx, r3.xyzx
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t2.xyzw, s2.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
mov o1.xyz, r2.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 123 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
