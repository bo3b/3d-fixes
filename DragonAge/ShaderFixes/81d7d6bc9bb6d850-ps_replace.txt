
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float g_subRolloff : packoffset(c5);
  float4 g_exposureMultipliers : packoffset(c6);
}
Texture2DMS<float4,2> g_depthTexture : register(t0);
Texture2DMS<float4,2> g_gbufferTexture0 : register(t1);
Texture2DMS<float4,2> g_gbufferTexture1 : register(t2);
Texture2DMS<float4,2> g_gbufferTexture2 : register(t3);
Texture2D<float> g_msaaClassifyTexture : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { 0.250000, 0, 0, 0},
                              { -0.250000, 0, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse


  r0.xy = (int2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = g_msaaClassifyTexture.Load(r0.xyw).x;
  r1.x = 0.000000000e+000 < r1.x;
  r1.xy = r1.xx ? float2(2.000000e+000,5.000000e-001) : float2(1.000000e+000,1.000000e+000);
  r1.z = 1.000000000e+000 + g_subRolloff;
  r1.z = 1.000000e+000 / r1.z;
  r2.w = 1.000000000e+000;
  r3.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r1.w = 0.000000000e+000;
  while (true) {
    r3.w = (int)r1.w >= (int)r1.x;
    if (r3.w != 0) break;
    r4.xy = icb[r1.w].xx * g_invScreenSize.xy;
    r4.xy = v0.xy * g_invScreenSize.xy + r4.xy;
    r5.xyz = g_gbufferTexture0.Load(r0.xyw,r1.w).xyz;
    r6.xyzw = g_gbufferTexture1.Load(r0.xyw,r1.w).xyzw;
    r4.zw = g_gbufferTexture2.Load(r0.xyw,r1.w).yw;
    r2.z = g_depthTexture.Load(r0.xyz,r1.w).x;
    r5.xyz = r5.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r3.w = dot(r5.xyz, r5.xyz);
    r3.w = rsqrt(r3.w);
    r5.xyz = r5.xyz * r3.www;
    r3.w = 2.550000000e+002 * r4.w;
    r3.w = round(r3.w);
    r3.w = (int)r3.w;
    r6.xyzw = r6.xyzw * r6.xyzw;
    r7.xy = r3.ww == float2(5.000000e+000,2.000000e+000);
    if (r7.x != 0) {
      r6.xyz = r6.xyz * r6.www;
    }
    r4.xy = r4.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
    r2.xy = float2(1.000000e+000,-1.000000e+000) * r4.xy;
    r8.x = dot(r2.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
    r8.y = dot(r2.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
    r8.z = dot(r2.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
    r2.x = dot(r2.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
    r2.x = 1.000000e+000 / r2.x;


float4 r28, r26, r27;
r26.xyz = r8.xyz * r2.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r8.xyz = r26.xyz / r2.xxx;

    r7.xzw = r8.xyz * r2.xxx;


    r9.xyz = r8.xyz * r2.xxx + -v1.xyz;
    r2.y = dot(r9.xyz, v4.xyz);
    r2.y = v4.w * r2.y;
    r2.y = max(r2.y, -5.000000000e-001);
    r2.y = min(r2.y, 5.000000000e-001);
    r9.xyz = r2.yyy * v4.xyz + v1.xyz;
    r2.xyz = -r8.xyz * r2.xxx + r9.xyz;
    r4.x = dot(r2.xyz, r2.xyz);
    r4.y = rsqrt(r4.x);
    r2.xyz = r4.yyy * r2.xyz;
    r4.x = v3.w + r4.x;
    r4.x = 1.000000e+000 / r4.x;
    r4.x = v1.w + r4.x;
    r4.x = max(r4.x, 0.000000000e+000);
    r4.y = dot(r5.xyz, r2.xyz);
    r5.w = saturate(r4.y);
    r8.xyz = v2.xyz * r5.www;
    r8.xyz = r8.xyz * r4.xxx;
    if (r7.y != 0) {
      r4.y = g_subRolloff + r4.y;
      r4.y = saturate(r4.y * r1.z);
      r6.w = r4.y * -2.000000000e+000 + 3.000000000e+000;
      r4.y = r4.y * r4.y;
      r7.y = r5.w * -2.000000000e+000 + 3.000000000e+000;
      r5.w = r5.w * r5.w;
      r5.w = r7.y * r5.w;
      r4.y = r6.w * r4.y + -r5.w;
      r4.y = max(r4.y, 0.000000000e+000);
      r9.xyz = v3.xyz * r4.yyy;
      r8.xyz = r9.xyz * r4.xxx + r8.xyz;
    }
    r3.w = (int)r3.w >= (int)6;
    if (r3.w != 0) {
      r3.w = saturate(-2.352941222e-002 + r4.w);
      r9.y = 1.000000000e+000 + -r3.w;
      r4.z = saturate(r4.z);
      r9.x = 1.000000000e+000 + -r4.z;
      r3.w = dot(r7.xzw, r7.xzw);
      r3.w = rsqrt(r3.w);
      r4.yzw = r7.xzw * r3.www;
      r2.xyz = r5.xyz * v5.www + r2.xyz;
      r2.x = saturate(dot(-r4.yzw, -r2.xyz));
      r2.yz = v5.yy * r9.xy;
      r2.yz = float2(-1.442695e+000,-1.442695e+000) * r2.yz;
      r2.yz = exp2(r2.yz);
      r2.x = r2.x * v5.z + v5.x;
      r2.x = dot(r2.xx, r2.yz);
      r2.xyz = v2.xyz * r2.xxx;
      r8.xyz = r2.xyz * r4.xxx + r8.xyz;
    }
    r3.xyz = r8.xyz * r6.xyz + r3.xyz;
    r1.w = (int)r1.w + 1;
  }
  o0.xyz = r3.xyz * r1.yyy;
  o0.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(45,14-48): warning X3206: 'Load': implicit truncation of vector type
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(46,15-49): warning X3206: 'Load': implicit truncation of vector type
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(47,13-47): warning X3206: 'Load': implicit truncation of vector type
E:\Program Files (x86)\Origin Games\Dragon Age Inquisition\wrapper1349(48,12-43): warning X3206: 'Load': implicit truncation of vector type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
