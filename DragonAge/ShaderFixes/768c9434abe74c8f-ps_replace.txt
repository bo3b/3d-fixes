//Fire decals
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
  float4 exposureMultipliers : packoffset(c23);
  float4 fogParams : packoffset(c24);
  float4 fogForwardScatteringParamsGradientScaleFogEnable : packoffset(c25);
  float4 fogForwardScatteringColorPresence : packoffset(c26);
  float4 fogCoefficients : packoffset(c27);
  float4 fogColorCoefficients : packoffset(c28);
  float4 fogColor : packoffset(c29);
  float4 fogStartDistance : packoffset(c30);
  float4 fogHeightFogCoefficients : packoffset(c31);
  float4 fogMiscParam : packoffset(c32);
  float2 fogEnabledMode : packoffset(c33);
  float2 vc_pad10_ : packoffset(c33.z);
}

cbuffer externalConstants : register(b1)
{
  float4 external_DistortionSpeed_Tile : packoffset(c0);
  float external_g_emitterTime : packoffset(c1);
  float3 vc_pad1 : packoffset(c1.y);
  float4 external_viewMatrix1 : packoffset(c2);
  float4 external_viewMatrix2 : packoffset(c3);
  float4 external_viewMatrix3 : packoffset(c4);
  float4 external_viewMatrix4 : packoffset(c5);
  float external_UVDistort_Power : packoffset(c6);
  float3 vc_pad6 : packoffset(c6.y);
  float4 external_TextureTile_Offset : packoffset(c7);
  float3 external_Diff_01_RGB_Switch : packoffset(c8);
  float1 vc_pad8 : packoffset(c8.w);
  float4 external_ADepthTB_AAngle : packoffset(c9);
  float3 external_Mask_RGB_Switch : packoffset(c10);
  float1 vc_pad10 : packoffset(c10.w);
}
SamplerState sampler0_s : register(s0);
SamplerState sampler1_s : register(s1);
SamplerState sampler2_s : register(s2);
Texture2D<float4> texture_depthBufferTexture : register(t1);
Texture2D<float4> texture_normalBufferTexture : register(t2);
Texture2D<float4> texture_Diff_01 : register(t3);
Texture2D<float4> texture_DistortionClouds : register(t4);
Texture2D<float4> texture_Mask : register(t5);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.xyz = external_viewMatrix2.xyz * v8.yyy;
  r0.xyz = external_viewMatrix1.xyz * v8.xxx + r0.xyz;
  r0.xyz = external_viewMatrix3.xyz * v8.zzz + r0.xyz;
  r0.xyz = external_viewMatrix4.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz / -r0.zzz;
  r1.xy = screenSize.zw * v0.xy;
  r0.w = texture_depthBufferTexture.Sample(sampler0_s, r1.xy).x;
  r1.xyz = texture_normalBufferTexture.Sample(sampler0_s, r1.xy).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  
float4 r26;
r26.xyz = r0.xyz * r0.www;
r26.w = 1.0;

float4 stereo = StereoParams.Load(0);
r26.x -= stereo.x * (-r26.z - stereo.y)/projMatrix._m00;   
r0.xyz = r26.xyz + -external_viewMatrix4.xyz;

  // r0.xyz = r0.xyz * r0.www + -external_viewMatrix4.xyz;
  
  r2.x = dot(external_viewMatrix1.xyz, r0.xyz);
  r2.y = dot(external_viewMatrix2.xyz, r0.xyz);
  r2.z = dot(external_viewMatrix3.xyz, r0.xyz);
  r2.w = 1.000000000e+000;
  r0.x = dot(r2.xyzw, v2.xyzw);
  r0.y = dot(r2.xyzw, v3.xyzw);
  r0.z = dot(r2.xyzw, v4.xyzw);
  r0.w = dot(r2.xyzw, v5.xyzw);
  r0.xyz = r0.xyz / r0.www;
  r2.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) + -abs(-r0.xyz);
  r0.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r0.xyz;
  r2.x = r2.x < 0;
  r2.y = r2.y < 0;
  r2.z = r2.z < 0;
  r0.w = (int)r2.y | (int)r2.x;
  r0.w = (int)r2.z | (int)r0.w;
  if (r0.w != 0) discard;
  r2.xy = external_DistortionSpeed_Tile.zw * r0.xz;
  r2.xy = external_DistortionSpeed_Tile.xy * external_g_emitterTime + r2.xy;
  r2.xy = v1.xy + r2.xy;
  r2.xy = texture_DistortionClouds.Sample(sampler2_s, r2.xy).xy;
  r2.zw = r0.xz * external_TextureTile_Offset.xy + -external_TextureTile_Offset.zw;
  r2.xy = r2.xy * external_UVDistort_Power + r2.zw;
  r2.xyz = texture_Diff_01.Sample(sampler1_s, r2.xy).xyz;
  r0.w = saturate(dot(r2.xyz, external_Diff_01_RGB_Switch.xyz));
  r1.w = r0.w * v7.w + -v7.z;
  r2.xyz = v6.xyz * r0.www;
  r0.w = log2(r1.w);
  r0.w = v7.y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = v7.x * r0.w;
  r3.xyz = texture_Mask.Sample(sampler1_s, r0.xz).xyz;
  r0.x = saturate(dot(r3.xyz, external_Mask_RGB_Switch.xyz));
  r0.x = r0.x * r0.w; 
  r0.z = 1.000000000e+000 + -r0.y;
  r0.y = log2(r0.y);
  r0.y = external_ADepthTB_AAngle.x * r0.y;
  r0.y = exp2(r0.y);
  r0.z = log2(r0.z);
  r0.z = external_ADepthTB_AAngle.y * r0.z;
  r0.z = exp2(r0.z);
  r0.y = r0.y + r0.z;
  r0.y = 1.000000000e+000 + -r0.y;
  r0.x = r0.y * r0.x;
  r0.yzw = r0.yyy * r2.xyz;
  r1.w = dot(v3.xyz, v3.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = v3.xyz * r1.www;
  r1.x = dot(r1.xyz, r2.xyz);
  r1.x = external_ADepthTB_AAngle.z + -abs(-r1.x);
  r1.y = external_ADepthTB_AAngle.w + -external_ADepthTB_AAngle.z;
  r1.x = r1.x / r1.y;
  r1.x = saturate(1.000000000e+000 + r1.x);
  r0.x = r1.x * r0.x;
  o0.xyz = r0.yzw * r0.xxx;
  o0.w = r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer viewConstants
// {
//
//   float1 time;                       // Offset:    0 Size:     4 [unused]
//   float3 vc_pad0_;                   // Offset:    4 Size:    12 [unused]
//   float4 screenSize;                 // Offset:   16 Size:    16
//   float3 debugNonFiniteColor;        // Offset:   32 Size:    12 [unused]
//   float1 vc_pad2_;                   // Offset:   44 Size:     4 [unused]
//   float4x4 viewMatrix;               // Offset:   48 Size:    64 [unused]
//   float4x4 projMatrix;               // Offset:  112 Size:    64 [unused]
//   float4x4 viewProjMatrix;           // Offset:  176 Size:    64 [unused]
//   float4x4 crViewProjMatrix;         // Offset:  240 Size:    64 [unused]
//   float4 projectionKxKyKzKw;         // Offset:  304 Size:    16 [unused]
//   float3 cameraPos;                  // Offset:  320 Size:    12 [unused]
//   float1 vc_pad8_;                   // Offset:  332 Size:     4 [unused]
//   float3 transparentStartAndSlopeAndClamp;// Offset:  336 Size:    12 [unused]
//   float1 vc_pad9_;                   // Offset:  348 Size:     4 [unused]
//   float4 transparentCurve;           // Offset:  352 Size:    16 [unused]
//   float4 exposureMultipliers;        // Offset:  368 Size:    16 [unused]
//   float4 fogParams;                  // Offset:  384 Size:    16 [unused]
//   float4 fogForwardScatteringParamsGradientScaleFogEnable;// Offset:  400 Size:    16 [unused]
//   float4 fogForwardScatteringColorPresence;// Offset:  416 Size:    16 [unused]
//   float4 fogCoefficients;            // Offset:  432 Size:    16 [unused]
//   float4 fogColorCoefficients;       // Offset:  448 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  464 Size:    16 [unused]
//   float4 fogStartDistance;           // Offset:  480 Size:    16 [unused]
//   float4 fogHeightFogCoefficients;   // Offset:  496 Size:    16 [unused]
//   float4 fogMiscParam;               // Offset:  512 Size:    16 [unused]
//   float2 fogEnabledMode;             // Offset:  528 Size:     8 [unused]
//   float2 vc_pad10_;                  // Offset:  536 Size:     8 [unused]
//
// }
//
// cbuffer externalConstants
// {
//
//   float4 external_DistortionSpeed_Tile;// Offset:    0 Size:    16
//   float external_g_emitterTime;      // Offset:   16 Size:     4
//   float3 vc_pad1;                    // Offset:   20 Size:    12 [unused]
//   float4 external_viewMatrix1;       // Offset:   32 Size:    16
//   float4 external_viewMatrix2;       // Offset:   48 Size:    16
//   float4 external_viewMatrix3;       // Offset:   64 Size:    16
//   float4 external_viewMatrix4;       // Offset:   80 Size:    16
//   float external_UVDistort_Power;    // Offset:   96 Size:     4
//   float3 vc_pad6;                    // Offset:  100 Size:    12 [unused]
//   float4 external_TextureTile_Offset;// Offset:  112 Size:    16
//   float3 external_Diff_01_RGB_Switch;// Offset:  128 Size:    12
//   float1 vc_pad8;                    // Offset:  140 Size:     4 [unused]
//   float4 external_ADepthTB_AAngle;   // Offset:  144 Size:    16
//   float3 external_Mask_RGB_Switch;   // Offset:  160 Size:    12
//   float1 vc_pad10;                   // Offset:  172 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler0                          sampler      NA          NA    0        1
// sampler1                          sampler      NA          NA    1        1
// sampler2                          sampler      NA          NA    2        1
// texture_depthBufferTexture        texture  float4          2d    1        1
// texture_normalBufferTexture       texture  float4          2d    2        1
// texture_Diff_01                   texture  float4          2d    3        1
// texture_DistortionClouds          texture  float4          2d    4        1
// texture_Mask                      texture  float4          2d    5        1
// externalConstants                 cbuffer      NA          NA    1        1
// viewConstants                     cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyz
dcl_output o0.xyzw
dcl_temps 4
mul r0.xyz, v8.yyyy, cb1[3].xyzx
mad r0.xyz, cb1[2].xyzx, v8.xxxx, r0.xyzx
mad r0.xyz, cb1[4].xyzx, v8.zzzz, r0.xyzx
add r0.xyz, r0.xyzx, cb1[5].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
div r0.xyz, r0.xyzx, -r0.zzzz
mul r1.xy, v0.xyxx, cb2[1].zwzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t1.yzwx, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t2.xyzw, s0
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r0.wwww, -cb1[5].xyzx
dp3 r2.x, cb1[2].xyzx, r0.xyzx
dp3 r2.y, cb1[3].xyzx, r0.xyzx
dp3 r2.z, cb1[4].xyzx, r0.xyzx
mov r2.w, l(1.000000)
dp4 r0.x, r2.xyzw, v2.xyzw
dp4 r0.y, r2.xyzw, v3.xyzw
dp4 r0.z, r2.xyzw, v4.xyzw
dp4 r0.w, r2.xyzw, v5.xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r2.xyz, -|r0.xyzx|, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
lt r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r2.y, r2.x
or r0.w, r2.z, r0.w
discard_nz r0.w
mul r2.xy, r0.xzxx, cb1[0].zwzz
mad r2.xy, cb1[0].xyxx, cb1[1].xxxx, r2.xyxx
add r2.xy, r2.xyxx, v1.xyxx
sample_indexable(texture2d)(float,float,float,float) r2.xy, r2.xyxx, t4.xyzw, s2
mad r2.zw, r0.xxxz, cb1[7].xxxy, -cb1[7].zzzw
mad r2.xy, r2.xyxx, cb1[6].xxxx, r2.zwzz
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t3.xyzw, s1
dp3_sat r0.w, r2.xyzx, cb1[8].xyzx
mad r1.w, r0.w, v7.w, -v7.z
mul r2.xyz, r0.wwww, v6.xyzx
log r0.w, r1.w
mul r0.w, r0.w, v7.y
exp r0.w, r0.w
mul r0.w, r0.w, v7.x
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xzxx, t5.xyzw, s1
dp3_sat r0.x, r3.xyzx, cb1[10].xyzx
mul r0.x, r0.w, r0.x
add r0.z, -r0.y, l(1.000000)
log r0.y, r0.y
mul r0.y, r0.y, cb1[9].x
exp r0.y, r0.y
log r0.z, r0.z
mul r0.z, r0.z, cb1[9].y
exp r0.z, r0.z
add r0.y, r0.z, r0.y
add r0.y, -r0.y, l(1.000000)
mul r0.x, r0.x, r0.y
mul r0.yzw, r2.xxyz, r0.yyyy
dp3 r1.w, v3.xyzx, v3.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, v3.xyzx
dp3 r1.x, r1.xyzx, r2.xyzx
add r1.x, -|r1.x|, cb1[9].z
add r1.y, -cb1[9].z, cb1[9].w
div r1.x, r1.x, r1.y
add_sat r1.x, r1.x, l(1.000000)
mul r0.x, r0.x, r1.x
mul o0.xyz, r0.xxxx, r0.yzwy
mov o0.w, r0.x
ret 
// Approximately 68 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 