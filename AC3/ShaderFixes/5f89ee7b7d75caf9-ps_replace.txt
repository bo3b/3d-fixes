//deferred - no
cbuffer cb0 : register(b0)
{
  float4 cb0[138];
}


cbuffer _Globals : register(b0)
{
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);
  float4 g_FogColor : packoffset(c16);
  float4 g_FogParams : packoffset(c17);
  float4 g_SunDirection : packoffset(c21);
  float4 g_ViewportScaleOffset : packoffset(c84);
  float4 g_FogSunBackColor : packoffset(c31);
  float4 g_MistWindVector : packoffset(c131);
  float MistOpacity : packoffset(c132);
  float4 g_ViewSpaceWorldOrigin : packoffset(c133);
  float4 g_ViewSpaceWorldUp : packoffset(c134);
  float4 g_VPOSToUVs : packoffset(c136);
  float4 g_VPOSReverseParams : packoffset(c137);
  float4x4 g_rainMatrix : packoffset(c91);
  float4 g_WeatherInfoforAtmosphericFog : packoffset(c135);

  struct
  {
    float2 m_ScreenPosition;
    float3 m_EyeDirection;
    float m_Alpha;
  } c : packoffset(c138);

}
SamplerState DiffuseLayer_s : register(s0);
SamplerState DepthSampler_s : register(s8);
Texture2D<float4> DiffuseLayer : register(t0);
Texture2D<float4> DepthSampler : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TEXCOORD1,
  float4 injectedScreenPos : SV_Position,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.z = 1.000000000e+000;
  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r1.xyz = v3.xyz * r0.xxx;
  r2.xyz = r1.xyz * float3(-3.000000e-001,-3.000000e-001,-3.000000e-001) + cb0[131].xyz;
  r3.xyzw = DiffuseLayer.Sample(DiffuseLayer_s, r2.yz).wxyz;
  r4.xyz = r1.xyz * r1.xyz;
  r4.xyz = r4.xyz * float3(7.000000e-001,7.000000e-001,7.000000e-001) + float3(3.000000e-001,3.000000e-001,3.000000e-001);
  r5.xyzw = DiffuseLayer.Sample(DiffuseLayer_s, r2.xz).xyzw;
  r2.xyzw = DiffuseLayer.Sample(DiffuseLayer_s, r2.xy).xyzw;
  r3.z = r2.w;
  r3.y = r5.w;
  r2.xyz = r4.xyz * r3.xyz;
  r0.x = -r4.z * r3.z + 1.000000000e+000;
  r0.y = -r2.y;
  r0.y = dot(r2.xx, r0.yz);
  r0.y = r4.y * r3.y + r0.y;
  r0.x = r0.y * r0.x + r2.z;
  r0.x = saturate(cb0[132].x * r0.x);
  r2.xyzw = DiffuseLayer.Sample(DiffuseLayer_s, v1.zw).xyzw;
  r0.y = cb0[135].y * r2.y;
  r0.x = r0.y * v2.w + r0.x;
  r0.y = 1.000000e+000 / cb0[17].w;
  r0.y = cb0[17].x + r0.y;
  r0.y = -r1.z * r0.y + cb0[12].z;
  r0.z = dot(r1.xy, cb0[21].xy);
  r0.z = r0.z * 5.000000000e-001 + 5.000000000e-001;
  r0.y = -cb0[17].z + r0.y;
  r1.xy = v0.xy * cb0[136].xy + cb0[136].zw;
  r1.zw = r1.xy * cb0[137].xy + cb0[137].zw;
  r2.xyzw = DepthSampler.Sample(DepthSampler_s, r1.xy).xyzw;
  r2.z = -r2.x;
  r2.xy = r2.zz * r1.zw;
  r1.xyz = -cb0[133].xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r1.x = dot(r1.xyz, cb0[134].xyz);
  r1.x = -cb0[17].z + r1.x;
  r0.y = min(r0.y, r1.x);
  r0.y = saturate(-r0.y * cb0[17].w + 1.000000000e+000);
  r1.x = -cb0[17].x + r0.w;
  r0.w = 2.000000000e+001 + -r0.w;
  r0.w = saturate(7.000000030e-002 * r0.w);
  r0.w = -r0.w * r0.w + 1.000000000e+000;
  r1.y = cb0[17].y + -cb0[17].x;
  r1.x = saturate(r1.x / r1.y);
  r1.x = 1.000000000e+000 + -r1.x;
  r1.x = r1.x * r1.x;
  r1.x = -r1.x * r1.x + 1.000000000e+000;
  r1.y = -r0.y * r1.x + 1.000000000e+000;
  r0.y = r1.x * r0.y;
  r0.x = r1.y * r0.x;
  o0.w = r0.w * r0.x + r0.y;
  r0.xyw = cb0[31].xyz + -cb0[16].xyz;
  o0.xyz = r0.zzz * r0.xyw + cb0[16].xyz;
  return;
}