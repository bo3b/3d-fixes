
cbuffer _Globals : register(b0)
{
  float4 g_ViewportScaleOffset : packoffset(c84);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float3 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_VPOSToUVs_Resolve : packoffset(c146);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);
  float4 g_DepthParams : packoffset(c110);
  float4 g_LinearFogColor : packoffset(c16);
  float4 g_LinearFogParams : packoffset(c17);
  float4x4 g_WorldViewProj : packoffset(c0);
  float4 g_EyeXAxis : packoffset(c8);
  float4 g_EyeYAxis : packoffset(c9);
  float4 g_EyeZAxis : packoffset(c10);
  float4 g_EyeWorldPosition_Resolve : packoffset(c11);

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c64);


  struct
  {
    float4 m_UseHQFiltering;
  } g_ShadowPerfOptions : packoffset(c63);

  float4 g_WorldLightmapParameters : packoffset(c87);
  float4 g_WorldLightmapUVParameters : packoffset(c88);
  float4 g_WorldLightmapColor : packoffset(c89);
  float4 g_WorldAOParameters : packoffset(c90);
  float4 g_WorldAORangeParameters : packoffset(c91);
  float4 g_WeatherExposedParams : packoffset(c92);
  float4 g_WinterParams : packoffset(c93);
  float4 g_SnowSparklesParams : packoffset(c94);
  float4 g_DebugValue : packoffset(c147) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);

  struct
  {
    float2 m_VPOS;
    float3 m_ShadowResult;
    float3 m_WorldPosition;
    float3 m_WorldNormal;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float m_SpecularPower;
  } c : packoffset(c148);

}
SamplerState g_WorldAOSampler_s : register(s4);
Texture2DMS<float4,4> g_TextureNormalDX11_MSAA : register(t1);
Texture2DMS<float,4> g_TextureDepthDX11_MSAA : register(t2);
Texture2DMS<float4,4> g_TextureLightingAccumulationDX11_MSAA : register(t3);
Texture2D<float4> g_WorldAOSampler : register(t4);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  uint v4 : SV_SAMPLEINDEX0,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  g_TextureNormalDX11_MSAA.GetDimensions(r1.x, r1.y, bitmask.x);
  r1.zw = v1.xy / v1.ww;
  r2.xy = r1.zw * g_ViewportScaleOffset.xy + g_ViewportScaleOffset.zw;
  r1.zw = g_ReverseProjectionParams2.xy + r1.zw;
  r1.zw = g_ReverseProjectionParams.xy * r1.zw;
  r1.xy = r2.xy * r1.xy;
  r0.xy = (int2)r1.xy;
  r0.xyz = g_TextureNormalDX11_MSAA.Load(r0.xyz,v4.x).xyz;
  r0.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r0.xyz;
  r0.xyz = g_WorldAOParameters.xxy * r0.xyz;
  g_TextureDepthDX11_MSAA.GetDimensions(r1.x, r1.y, bitmask.x);
  r1.xy = r2.xy * r1.xy;
  r3.xy = (int2)r1.xy;
  r3.zw = float2(0.000000e+000,0.000000e+000);
  r0.w = g_TextureDepthDX11_MSAA.Load(r3.xyz,v4.x).x;
  r0.w = g_ReverseProjectionParams.z + r0.w;
  r3.z = g_ReverseProjectionParams.w / r0.w;
  r3.xy = r3.zz * r1.zw;
  r3.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r3.x +=  stereoParams.x * (-r3.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r1.x = dot(r3.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r1.y = dot(r3.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r0.w = dot(r3.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r0.z = r0.z * 2.000000000e+000 + r0.w;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + r1.xy;
  r0.xy = r0.xy * g_WorldAOParameters.zw + float2(5.000000e-001,5.000000e-001);
  r0.x = g_WorldAOSampler.SampleLevel(g_WorldAOSampler_s, r0.xy, 0.000000000e+000).x;
  r0.x = r0.x * g_WorldAORangeParameters.z + g_WorldAORangeParameters.w;
  r0.y = g_WorldAORangeParameters.x + r0.z;
  r0.x = r0.y + -r0.x;
  r0.y = 1.000000e+000 / g_WorldAORangeParameters.x;
  r0.x = saturate(r0.x * r0.y);
  r0.x = r0.x * r0.x;
  o0.xyz = max(r0.xxx, g_WorldAORangeParameters.yyy);
  g_TextureLightingAccumulationDX11_MSAA.GetDimensions(r0.x, r0.y, bitmask.x);
  r0.xy = r2.xy * r0.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r0.x = g_TextureLightingAccumulationDX11_MSAA.Load(r0.xyz,v4.x).w;
  o0.w = r0.x;
  return;
}
