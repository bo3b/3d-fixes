//deferred - no
cbuffer _Globals : register(b0)
{
  float4 g_FogColor : packoffset(c16);
  float4 g_FogParams : packoffset(c17);
  float4 g_FogWeatherParams : packoffset(c90);
  float4 g_FogSunBackColor : packoffset(c31);
  float GlowIntensity_1 : packoffset(c128);
  float4 EmissiveColor_2 : packoffset(c129);
  float Alpha_3 : packoffset(c130);
  float AlphaRimCoeffician_4 : packoffset(c131);
  float AlphaRim_5 : packoffset(c132);
  float NearFallofMin_6 : packoffset(c133);
  float NearFallofMax_7 : packoffset(c134);
  float MaxAlpha_8 : packoffset(c135);
  float UseAlpha2GrayScale_9 : packoffset(c136);
  float MinAlpha_10 : packoffset(c137);
  float UseAlpha2_11 : packoffset(c138);
  float UseVertexcolor_12 : packoffset(c139);
  float AlphaRimInvert_13 : packoffset(c140);
  float UseVertexAlpha_14 : packoffset(c141);
  float isModulate_15 : packoffset(c142);
  float AlphaRimSub_16 : packoffset(c143);
  float4 FallofGlobalPosition_17 : packoffset(c144);
  float FallofPositionIsCamera_18 : packoffset(c145);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c32);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c40);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c44);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c52);

  float4 g_ProjWorldToLight[8] : packoffset(c55);
  float4 g_ProjShadowParams[2] : packoffset(c119);
  float g_HasSunDX11 : packoffset(c251);
  float4 g_NormalScale : packoffset(c86);
  float4 g_SunDirection : packoffset(c21);
  float4 g_TileOffset : packoffset(c96);
  float4 g_UnusedPredicated1 : packoffset(c97);
  float4 g_UnusedPredicated2 : packoffset(c98);
  float4 g_UnusedPredicated3 : packoffset(c99);
  float4 g_VPosToUV : packoffset(c0);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float g_AlphaTestValue : packoffset(c113);
  float4 g_EyePosition : packoffset(c12);
  float4 g_AmbientCube[6] : packoffset(c24);

  struct
  {
    float2 m_VPOS;
    float2 m_ScreenPosition;
    float3 m_WorldNormal;
    float3 m_VertexWorldNormal;
    float3 m_TangentSpaceNormal;
    float3 m_WorldPosition;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float4 m_UnitLightSpacePos;
    float3 m_LightSpaceNormal;
    float4 m_Albedo;
    float m_alpha;
    float m_WeatherExposed;
    float m_DistanceAttenuation;
    float4 m_LightColor;
    float3 m_IncidentLightAngle;
    float3 m_SpecularIncidentLightAngle;
    float m_SpecularInfluence;
    float m_Alpha;
    float m_SpecularPower;
    float4 m_EmissiveColor;
    float m_SpecularIntensity;
    float m_SpecularGlossiness;
    float3 m_ShadowResult;
  } c : packoffset(c252);

  bool g_HasSunOther : packoffset(c269.w);
}
SamplerState Diffuse_0_s : register(s0);
SamplerState Alpha2_1_s : register(s1);
Texture2D<float4> Diffuse_0 : register(t0);
Texture2D<float4> Alpha2_1 : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : COLOR0,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD6,
  uint v9 : SV_IsFrontFace0,
  float4 injectedScreenPos : SV_Position,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.x = v4.w < 0.000000000e+000;
  if (r0.x != 0) discard;
  r0.xyz = -FallofGlobalPosition_17.xyz + g_EyePosition.xyz;
  r0.xyz = FallofPositionIsCamera_18 * r0.xyz + FallofGlobalPosition_17.xyz;
  r0.xyz = -v4.xyz + r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = -NearFallofMin_6 + r0.x;
  r0.y = NearFallofMax_7 + -NearFallofMin_6;
  r0.x = saturate(r0.x / r0.y);
  r1.xyz = v4.xyz;
  r1.w = 0.000000000e+000;
  r1.xyzw = -g_EyePosition.xyzw + r1.xyzw;
  r0.y = dot(r1.xyzw, r1.xyzw);
  r0.y = rsqrt(r0.y);
  r0.yzw = r1.xyz * r0.yyy;
  r1.x = dot(v7.xyz, v7.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = v7.xyz * r1.xxx;
  r2.xyz = -g_NormalScale.xxx * r1.xyz;
  r1.x = v9.x ? r2.x : r1.x;
  r1.y = v9.x ? r2.y : r1.y;
  r1.z = v9.x ? r2.z : r1.z;
  r0.y = dot(r1.xyz, r0.yzw);
  r0.y = -AlphaRimSub_16 + r0.y;
  r0.y = log2(abs(r0.y));
  r0.y = AlphaRimCoeffician_4 * r0.y;
  r0.y = exp2(r0.y);
  r0.y = -1.000000000e+000 + r0.y;
  r0.y = AlphaRim_5 * r0.y + 1.000000000e+000;
  r0.z = saturate(r0.y);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.z = r0.z + -r0.y;
  r0.y = AlphaRimInvert_13 * r0.z + r0.y;
  r1.xyzw = Alpha2_1.Sample(Alpha2_1_s, v2.zw).xyzw;
  r0.z = dot(float3(3.300000e-001,3.300000e-001,3.300000e-001), r1.xyz);
  r2.xyzw = Diffuse_0.Sample(Diffuse_0_s, v2.xy).xyzw;
  r0.w = -r2.w + r1.w;
  r0.w = UseAlpha2_11 * r0.w + r2.w;
  r1.xyz = EmissiveColor_2.xyz * r2.xyz;
  r0.z = r0.z + -r0.w;
  r0.z = UseAlpha2GrayScale_9 * r0.z + r0.w;
  r0.w = Alpha_3 * r0.z;
  r0.y = r0.y * r0.w;
  r2.xyzw = float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + v3.wxyz;
  r0.w = UseVertexAlpha_14 * r2.x + 1.000000000e+000;
  r2.xyz = UseVertexcolor_12 * r2.yzw + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r0.y = r0.y * r0.w;
  r0.x = r0.x * r0.y;
  r0.y = 1.000000000e+000 + -r0.z;
  r0.z = saturate(-MinAlpha_10 + r0.z);
  r0.w = -MaxAlpha_8 + 1.000000000e+000;
  r0.y = saturate(r0.y + -r0.w);
  r0.y = min(r0.z, r0.y);
  r0.x = r0.y * r0.x;
  r0.yzw = r1.xyz * r2.xyz + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.yzw = r0.xxx * r0.yzw + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r0.yzw = -r1.xyz * r2.xyz + r0.yzw;
  r1.xyz = r2.xyz * r1.xyz;
  r0.yzw = saturate(isModulate_15 * r0.yzw + r1.xyz);
  r1.xyz = g_EyePosition.xyz + -v4.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r2.x = rsqrt(r1.w);
  r1.w = sqrt(r1.w);
  r1.xyz = r2.xxx * r1.xyz;
  r1.x = dot(g_SunDirection.xyz, r1.xyz);
  r1.x = 1.000000000e+000 + r1.x;
  r1.x = -r1.x * 5.000000000e-001 + 1.000000000e+000;
  r1.x = r1.x * r1.x;
  r2.xyz = -g_FogSunBackColor.xyz + g_FogColor.xyz;
  r1.xyz = r1.xxx * r2.xyz + g_FogSunBackColor.xyz;
  r1.xyz = r1.xyz + -r0.yzw;
  r2.x = -g_FogParams.x + r1.w;
  r1.w = -2.000000000e+001 + r1.w;
  r1.w = saturate(7.000000030e-002 * r1.w);
  r1.w = 1.000000000e+000 + -r1.w;
  r1.w = -r1.w * r1.w + 1.000000000e+000;
  r1.w = g_FogWeatherParams.x * r1.w;
  r2.y = g_FogParams.y + -g_FogParams.x;
  r2.x = saturate(r2.x / r2.y);
  r2.x = 1.000000000e+000 + -r2.x;
  r2.x = r2.x * r2.x;
  r2.x = -r2.x * r2.x + 1.000000000e+000;
  r2.y = -g_FogParams.z + v4.z;
  r2.z = -g_FogParams.z + g_EyePosition.z;
  r2.y = min(r2.z, r2.y);
  r2.y = saturate(-r2.y * g_FogParams.w + 1.000000000e+000);
  r1.w = saturate(r2.x * r2.y + r1.w);
  o0.xyz = r1.www * r1.xyz + r0.yzw;
  r0.y = 1.000000000e+000 + -r1.w;
  r0.x = r0.x * r0.y;
  o0.w = r0.x;
  o1.w = r0.x;
  o1.xyz = v1.zzz / v1.www;
  return;
}