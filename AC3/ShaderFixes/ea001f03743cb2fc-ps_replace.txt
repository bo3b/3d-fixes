
cbuffer _Globals : register(b0)
{
  float4 g_FogColor : packoffset(c16);
  float4 g_FogParams : packoffset(c17);
  float4 g_FogWeatherParams : packoffset(c90);
  float4 g_FogSunBackColor : packoffset(c31);
  float FogSplitFalloff_1 : packoffset(c128);
  float FogSplitHeight_2 : packoffset(c129);
  float4 MistWindVector_3 : packoffset(c130);
  float FogBottomFar_4 : packoffset(c131);
  float MistOpacity_5 : packoffset(c132);
  float4 FogSunFrontColor_6 : packoffset(c133);
  float4 FogSunBackColor_7 : packoffset(c134);
  float3x3 RainUVScroll_8_matrix : packoffset(c135);
  float FogBottomNear_9 : packoffset(c138);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c32);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c40);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c44);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c52);

  float4 g_ProjWorldToLight[8] : packoffset(c55);
  float4 g_ProjShadowParams[2] : packoffset(c119);
  float g_HasSunDX11 : packoffset(c251);
  float4 g_WeatherInfo : packoffset(c10);
  float4 g_WorldEntityPosition : packoffset(c13);
  float4 g_SunDirection : packoffset(c21);
  float4 g_TileOffset : packoffset(c96);
  float4 g_UnusedPredicated1 : packoffset(c97);
  float4 g_UnusedPredicated2 : packoffset(c98);
  float4 g_UnusedPredicated3 : packoffset(c99);
  float4 g_VPosToUV : packoffset(c0);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float g_AlphaTestValue : packoffset(c113);
  float4 g_EyePosition : packoffset(c12);
  float4 g_AmbientCube[6] : packoffset(c24);

  struct
  {
    float2 m_VPOS;
    float2 m_ScreenPosition;
    float3 m_WorldNormal;
    float3 m_VertexWorldNormal;
    float3 m_TangentSpaceNormal;
    float3 m_WorldPosition;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float4 m_UnitLightSpacePos;
    float3 m_LightSpaceNormal;
    float4 m_Albedo;
    float m_alpha;
    float m_WeatherExposed;
    float m_DistanceAttenuation;
    float4 m_LightColor;
    float3 m_IncidentLightAngle;
    float3 m_SpecularIncidentLightAngle;
    float m_SpecularInfluence;
    float m_Alpha;
    float m_SpecularPower;
    float4 m_EmissiveColor;
    float m_SpecularIntensity;
    float m_SpecularGlossiness;
    float3 m_ShadowResult;
    float m_LinearDepth;
  } c : packoffset(c252);

  bool g_HasSunOther : packoffset(c270);
}
SamplerState Layer0Diffuse_0_s : register(s0);
SamplerState g_DepthSampler_s : register(s8);
Texture2D<float4> Layer0Diffuse_0 : register(t0);
Texture2D<float4> g_DepthSampler : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : COLOR0,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD6,
  uint v9 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.x = v4.w < 0.000000000e+000;
  if (r0.x != 0) discard;
  r0.xyz = MistWindVector_3.xyz * float3(2.000000e-002,2.000000e-002,2.000000e-002);
  r1.xyz = v4.xyz;
  r1.w = 0.000000000e+000;
  r1.xyzw = g_EyePosition.xyzw + -r1.xyzw;
  r0.w = dot(r1.xyzw, r1.xyzw);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * float3(-3.000000e-001,-3.000000e-001,-3.000000e-001) + r0.xyz;
  r2.xyzw = Layer0Diffuse_0.Sample(Layer0Diffuse_0_s, r0.yz).xyzw;
  r2.xyz = r1.xyz * r1.xyz;
  r2.xyz = r2.xyz * float3(7.000000e-001,7.000000e-001,7.000000e-001) + float3(3.000000e-001,3.000000e-001,3.000000e-001);
  r0.w = r2.x * r2.w;
  r3.xyzw = Layer0Diffuse_0.Sample(Layer0Diffuse_0_s, r0.xz).xyzw;
  r4.xyzw = Layer0Diffuse_0.Sample(Layer0Diffuse_0_s, r0.xy).xyzw;
  r0.x = r3.w * r2.y;
  r0.y = -r2.y * r3.w + 1.000000000e+000;
  r0.x = r0.w * r0.y + r0.x;
  r0.y = r4.w * r2.z;
  r0.z = -r2.z * r4.w + 1.000000000e+000;
  r0.x = r0.x * r0.z + r0.y;
  r0.x = saturate(MistOpacity_5 * r0.x);
  r2.x = v2.x;
  r2.y = g_WorldEntityPosition.z * 1.999999955e-002 + v2.y;
  r2.z = 1.000000000e+000;
  r3.x = dot(r2.xyz, RainUVScroll_8_matrix._m00_m10_m20);
  r3.y = dot(r2.xyz, RainUVScroll_8_matrix._m01_m11_m21);
  r2.xyzw = Layer0Diffuse_0.Sample(Layer0Diffuse_0_s, r3.xy).xyzw;
  r0.y = g_WeatherInfo.y * r2.y;
  r0.x = r0.y * v3.w + r0.x;
  r0.y = v3.w * r0.y;
  r0.zw = v0.xy * g_VPosToUV.xy + float2(-5.000000e-001,-5.000000e-001);
  r0.zw = r0.zw * float2(2.000000e+000,-2.000000e+000) + g_ReverseProjectionParams2.xy;
  r0.zw = g_ReverseProjectionParams.xy * r0.zw;
  r2.xy = g_VPosToUV.xy * v0.xy;
  r2.xyzw = g_DepthSampler.Sample(g_DepthSampler_s, r2.xy).xyzw;
  r2.z = -r2.x;
  r2.xy = r2.zz * r0.zw;
  r2.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r2.x +=  stereoParams.x * (-r2.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r3.x = dot(r2.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r3.z = dot(r2.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r2.xyz = -g_EyePosition.xyz + r3.xyz;
  r0.z = -FogSplitHeight_2 + r3.z;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r1.w = -FogBottomNear_9 + r0.w;
  r0.w = 2.000000000e+001 + -r0.w;
  r0.w = saturate(1.000000015e-001 * r0.w);
  r0.w = -r0.w * r0.w + 1.000000000e+000;
  r2.x = -FogBottomNear_9 + FogBottomFar_4;
  r1.w = saturate(r1.w / r2.x);
  r1.w = 1.000000000e+000 + -r1.w;
  r1.w = r1.w * r1.w;
  r1.w = -r1.w * r1.w + 1.000000000e+000;
  r2.x = FogBottomNear_9 + FogSplitFalloff_1;
  r2.x = -r1.z * r2.x + g_EyePosition.z;
  r1.x = dot(r1.xyz, g_SunDirection.xyz);
  r1.x = 1.000000000e+000 + r1.x;
  r1.x = -r1.x * 5.000000000e-001 + 1.000000000e+000;
  r1.y = -FogSplitHeight_2 + r2.x;
  r0.z = min(r0.z, r1.y);
  r1.y = 1.000000e+000 / FogSplitFalloff_1;
  r0.z = saturate(-r0.z * r1.y + 1.000000000e+000);
  r1.y = -r0.z * r1.w + 1.000000000e+000;
  r0.z = r0.z * r1.w;
  r0.x = r1.y * r0.x;
  r0.x = r0.w * r0.x + r0.z;
  r0.z = -g_FogParams.z + v4.z;
  r1.y = -g_FogParams.z + g_EyePosition.z;
  r0.z = min(r0.z, r1.y);
  r0.z = saturate(-r0.z * g_FogParams.w + 1.000000000e+000);
  r1.y = g_FogParams.y + -g_FogParams.x;
  r2.xyz = g_EyePosition.xyz + -v4.xyz;
  r1.z = dot(r2.xyz, r2.xyz);
  r1.w = sqrt(r1.z);
  r1.z = rsqrt(r1.z);
  r2.xyz = r2.xyz * r1.zzz;
  r1.z = dot(g_SunDirection.xyz, r2.xyz);
  r1.z = 1.000000000e+000 + r1.z;
  r1.z = -r1.z * 5.000000000e-001 + 1.000000000e+000;
  r2.x = -g_FogParams.x + r1.w;
  r1.w = -2.000000000e+001 + r1.w;
  r1.w = saturate(7.000000030e-002 * r1.w);
  r1.w = 1.000000000e+000 + -r1.w;
  r1.w = -r1.w * r1.w + 1.000000000e+000;
  r1.w = g_FogWeatherParams.x * r1.w;
  r1.y = saturate(r2.x / r1.y);
  r1.y = 1.000000000e+000 + -r1.y;
  r1.xyz = r1.xyz * r1.xyz;
  r1.y = -r1.y * r1.y + 1.000000000e+000;
  r0.z = saturate(r1.y * r0.z + r1.w);
  r1.y = 1.000000000e+000 + -r0.z;
  r0.x = r1.y * r0.x;
  o0.w = r0.x;
  o1.w = r0.x;
  r2.xyz = -FogSunBackColor_7.xyz + FogSunFrontColor_6.xyz;
  r1.xyw = r1.xxx * r2.xyz + FogSunBackColor_7.xyz;
  r0.xyw = saturate(r0.yyy * r0.www + r1.xyw);
  r1.xyw = -g_FogSunBackColor.xyz + g_FogColor.xyz;
  r1.xyz = r1.zzz * r1.xyw + g_FogSunBackColor.xyz;
  r1.xyz = r1.xyz + -r0.xyw;
  o0.xyz = r0.zzz * r1.xyz + r0.xyw;
  o1.xyz = v1.zzz / v1.www;
  return;
}
