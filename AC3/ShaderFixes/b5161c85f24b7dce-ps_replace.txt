
cbuffer _Globals : register(b0)
{
  float4 g_ViewportScaleOffset : packoffset(c84);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float3 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_VPOSToUVs_Resolve : packoffset(c146);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);
  float4 g_DepthParams : packoffset(c110);
  float4 g_LinearFogColor : packoffset(c16);
  float4 g_LinearFogParams : packoffset(c17);
  float4x4 g_WorldViewProj : packoffset(c0);
  float4 g_EyeXAxis : packoffset(c8);
  float4 g_EyeYAxis : packoffset(c9);
  float4 g_EyeZAxis : packoffset(c10);
  float4 g_EyeWorldPosition_Resolve : packoffset(c11);

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c64);


  struct
  {
    float4 m_UseHQFiltering;
  } g_ShadowPerfOptions : packoffset(c63);

  float4 g_WorldLightmapParameters : packoffset(c87);
  float4 g_WorldLightmapUVParameters : packoffset(c88);
  float4 g_WorldLightmapColor : packoffset(c89);
  float4 g_WorldAOParameters : packoffset(c90);
  float4 g_WorldAORangeParameters : packoffset(c91);
  float4 g_WeatherExposedParams : packoffset(c92);
  float4 g_WinterParams : packoffset(c93);
  float4 g_SnowSparklesParams : packoffset(c94);
  float4 g_DebugValue : packoffset(c147) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);

  struct
  {
    float2 m_VPOS;
    float3 m_ShadowResult;
    float3 m_WorldPosition;
    float3 m_WorldNormal;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float m_SpecularPower;
  } c : packoffset(c148);

}
Texture2DMS<float4,4> g_TextureAlbedoDX11_MSAA : register(t0);
Texture2DMS<float4,4> g_TextureNormalDX11_MSAA : register(t1);
Texture2DMS<float,4> g_TextureDepthDX11_MSAA : register(t2);
Texture2DMS<float4,4> g_TextureLightingAccumulationDX11_MSAA : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  uint v4 : SV_SAMPLEINDEX0,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  g_TextureDepthDX11_MSAA.GetDimensions(r1.x, r1.y, bitmask.x);
  r1.zw = v0.xy * g_VPOSToUVs_Resolve.xy + g_VPOSToUVs_Resolve.zw;
  r1.xy = r1.zw * r1.xy;
  r0.xy = (int2)r1.xy;
  r0.x = g_TextureDepthDX11_MSAA.Load(r0.xyz,v4.x).x;
  r0.x = g_ReverseProjectionParams.z + r0.x;
  r0.x = g_ReverseProjectionParams.w / r0.x;
  r0.xyz = v2.xyz * r0.xxx + v3.xyz;

//Mike_ar69 - Stereo Shift
float4 stereoParams = StereoParams.Load(0);
float4 r21, r22;
r21.xyz = r0.xyz;
r21.w = 1.000000000e+000;
r22.x = dot(r21.xyzw, g_WorldToView._m00_m10_m20_m30);
r22.y = dot(r21.xyzw, g_WorldToView._m01_m11_m21_m31);
r22.z = dot(r21.xyzw, g_WorldToView._m02_m12_m22_m32);
r22.w = dot(r21.xyzw, g_WorldToView._m03_m13_m23_m33);
r22.x +=  stereoParams.x * (-r22.z - stereoParams.y ) * g_ReverseProjectionParams.x;
r21.x = dot(r22.xyzw, g_ViewToWorld._m00_m10_m20_m30);
r21.y = dot(r22.xyzw, g_ViewToWorld._m01_m11_m21_m31);
r21.z = dot(r22.xyzw, g_ViewToWorld._m02_m12_m22_m32);
r0.xyz = r21.xyz;


  r0.xyz = g_EyePosition.xyz + -r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www + g_DeferredDirectLight.m_Direction.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  g_TextureNormalDX11_MSAA.GetDimensions(r1.x, r1.y, bitmask.x);
  r1.xy = r1.zw * r1.xy;
  r2.xy = (int2)r1.xy;
  r2.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_TextureNormalDX11_MSAA.Load(r2.xyz,v4.x).xyzw;
  r2.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r2.xyz;
  r2.xyz = r2.xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r2.xyz * r0.www;
  r0.w = saturate(dot(g_DeferredDirectLight.m_Direction.xyz, r2.xyz));
  r0.x = saturate(dot(r3.xyz, r0.xyz));
  r0.x = log2(r0.x);
  g_TextureLightingAccumulationDX11_MSAA.GetDimensions(r0.y, r0.z, bitmask.x);
  r0.yz = r1.zw * r0.yz;
  r3.xy = (int2)r0.yz;
  r3.zw = float2(0.000000e+000,0.000000e+000);
  r0.y = g_TextureLightingAccumulationDX11_MSAA.Load(r3.xyz,v4.x).w;
  r0.z = 1.200000000e+001 * r0.y;
  o0.w = r0.y;
  r0.y = exp2(r0.z);
  r0.x = r0.y * r0.x;
  r0.y = 8.000000000e+000 + r0.y;
  r0.x = exp2(r0.x);
  r0.x = r0.w * r0.x;
  r0.x = r0.x * r0.y;
  r0.x = 1.250000000e-001 * r0.x;
  r0.xyz = g_DeferredDirectLight.m_Color.xyz * r0.xxx;
  r0.xyz = r0.xyz * r2.www;
  g_TextureAlbedoDX11_MSAA.GetDimensions(r1.x, r1.y, bitmask.x);
  r1.xy = r1.zw * r1.xy;
  r1.xy = (int2)r1.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r1.xyz = g_TextureAlbedoDX11_MSAA.Load(r1.xyz,v4.x).xyz;
  r1.xyz = g_DeferredDirectLight.m_Color.xyz * r1.xyz;
  o0.xyz = r1.xyz * r0.www + r0.xyz;
  return;
}
