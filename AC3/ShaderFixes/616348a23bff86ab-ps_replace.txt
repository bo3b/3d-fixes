
cbuffer _Globals : register(b0)
{
  float4 g_FogColor : packoffset(c16);
  float4 g_FogParams : packoffset(c17);
  float4 g_FogWeatherParams : packoffset(c90);
  float4 g_FogSunBackColor : packoffset(c31);
  float4 CharacterPosition_1 : packoffset(c128);
  float CurrentDistance_2 : packoffset(c129);
  float3x3 Operator487_3_matrix : packoffset(c130);
  float MaxDistance_4 : packoffset(c133);
  float GlowIntensity_5 : packoffset(c134);
  float3x3 Operator612_6_matrix : packoffset(c135);
  float FullAlpha_7 : packoffset(c138);
  float Distancecritic_8 : packoffset(c139);
  float3x3 Operator674_9_matrix : packoffset(c140);
  float DistanceNaval_10 : packoffset(c143);
  float DistanceNavalFade_11 : packoffset(c144);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c32);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c40);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c44);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c52);

  float4 g_ProjWorldToLight[8] : packoffset(c55);
  float4 g_ProjShadowParams[2] : packoffset(c119);
  float g_HasSunDX11 : packoffset(c251);
  float4 g_SunDirection : packoffset(c21);
  float4 g_TileOffset : packoffset(c96);
  float4 g_UnusedPredicated1 : packoffset(c97);
  float4 g_UnusedPredicated2 : packoffset(c98);
  float4 g_UnusedPredicated3 : packoffset(c99);
  float4 g_VPosToUV : packoffset(c0);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float g_AlphaTestValue : packoffset(c113);
  float4 g_EyePosition : packoffset(c12);
  float4 g_AmbientCube[6] : packoffset(c24);

  struct
  {
    float2 m_VPOS;
    float2 m_ScreenPosition;
    float3 m_WorldNormal;
    float3 m_VertexWorldNormal;
    float3 m_TangentSpaceNormal;
    float3 m_WorldPosition;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float4 m_UnitLightSpacePos;
    float3 m_LightSpaceNormal;
    float4 m_Albedo;
    float m_alpha;
    float m_WeatherExposed;
    float m_DistanceAttenuation;
    float4 m_LightColor;
    float3 m_IncidentLightAngle;
    float3 m_SpecularIncidentLightAngle;
    float m_SpecularInfluence;
    float m_Alpha;
    float m_SpecularPower;
    float4 m_EmissiveColor;
    float3 m_ShadowResult;
    float m_LinearDepth;
  } c : packoffset(c252);

  bool g_HasSunOther : packoffset(c269);
}
SamplerState Operator482_0_s : register(s0);
SamplerState g_DepthSampler_s : register(s8);
SamplerState g_RefractionSampler_s : register(s12);
Texture2D<float4> Operator482_0 : register(t0);
Texture2D<float4> g_DepthSampler : register(t8);
Texture2D<float4> g_RefractionSampler : register(t12);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  uint v9 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.x = v3.w < 0.000000000e+000;
  if (r0.x != 0) discard;
  r0.xyz = v3.xyz;
  r0.w = 0.000000000e+000;
  r1.xyzw = float4(1.000000e+000,-1.000000e+000,1.000000e+000,1.000000e+000) * v7.xyzw;
  r1.x = dot(r1.xyzw, r1.xyzw);
  r1.x = rsqrt(r1.x);
  r1.yz = float2(1.000000e+000,-1.000000e+000) * v7.xy;
  r1.xy = r1.yz * r1.xx;
  r2.xy = v2.xy;
  r2.z = 1.000000000e+000;
  r3.x = dot(r2.xyz, Operator674_9_matrix._m00_m10_m20);
  r3.y = dot(r2.xyz, Operator674_9_matrix._m01_m11_m21);
  r2.xyzw = Operator482_0.Sample(Operator482_0_s, r3.xy).xyzw;
  r1.z = r2.x * 6.000000238e-001 + -1.299999952e+000;
  r1.xy = r1.zz * r1.xy + r3.xy;
  r1.z = 1.000000000e+000;
  r2.x = dot(r1.xyz, Operator487_3_matrix._m00_m10_m20);
  r2.y = dot(r1.xyz, Operator487_3_matrix._m01_m11_m21);
  r2.xyzw = Operator482_0.Sample(Operator482_0_s, r2.xy).xyzw;
  r2.xy = r2.xx * float2(1.200000e-001,0.000000e+000) + float2(-6.000000e-002,0.000000e+000);
  r2.zw = v0.xy * g_VPosToUV.xy + r2.xy;
  r3.xy = float2(-5.000000e-001,-5.000000e-001) + r2.zw;
  r4.xyzw = g_DepthSampler.Sample(g_DepthSampler_s, r2.zw).xyzw;
  r4.z = -r4.x;
  r2.zw = r3.xy * float2(2.000000e+000,-2.000000e+000) + g_ReverseProjectionParams2.xy;
  r2.zw = g_ReverseProjectionParams.xy * r2.zw;
  r4.xy = r2.zw * r4.zz;
  r4.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r4.x +=  stereoParams.x * (-r4.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r3.w = dot(r4.xyzw, g_ViewToWorld._m03_m13_m23_m33);
  r3.x = dot(r4.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r3.y = dot(r4.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r3.z = dot(r4.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r0.xyzw = r3.xyzw + -r0.xyzw;
  r3.xyz = CharacterPosition_1.xyz + -r3.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = sqrt(r1.w);
  r1.w = -5.000000000e+000 + r1.w;
  r1.w = saturate(5.000000075e-002 * r1.w);
  r1.w = 1.000000000e+000 + -r1.w;
  r1.w = ceil(r1.w);
  r0.w = dot(r0.xyzw, r0.xyzw);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v6.xyz, v6.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v6.xyz * r0.www;
  r0.x = dot(r3.xyz, r0.xyz);
  r0.x = saturate(1.000000000e+003 * r0.x);
  r0.yz = g_VPosToUV.xy * v0.xy;
  r2.xy = r0.yz * float2(1.001000e+000,1.001000e+000) + r2.xy;
  r2.xyzw = g_RefractionSampler.Sample(g_RefractionSampler_s, r2.xy).xyzw;
  r4.xy = float2(1.001000e+000,1.001000e+000) * r0.yz;
  r5.xyzw = g_DepthSampler.Sample(g_DepthSampler_s, r0.yz).xyzw;
  r5.z = -r5.x;
  r4.xyzw = g_RefractionSampler.Sample(g_RefractionSampler_s, r4.xy).xyzw;
  r0.yzw = r4.xyz + -r2.xyz;
  r0.xyz = r0.xxx * r0.yzw;
  r0.xyz = r1.www * r0.xyz + r2.xyz;
  r2.xyz = r0.yyy * float3(2.000000e+000,2.000000e+000,2.000000e+000) + -r0.xyz;
  r4.xy = v0.xy * g_VPosToUV.xy + float2(-5.000000e-001,-5.000000e-001);
  r4.xy = r4.xy * float2(2.000000e+000,-2.000000e+000) + g_ReverseProjectionParams2.xy;
  r4.xy = g_ReverseProjectionParams.xy * r4.xy;
  r5.xy = r4.xy * r5.zz;
  r5.w = 1.000000000e+000;

//Stereo Shift
stereoParams = StereoParams.Load(0);
r5.x +=  stereoParams.x * (-r5.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r4.x = dot(r5.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r4.y = dot(r5.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r4.z = dot(r5.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r4.w = dot(r5.xyzw, g_ViewToWorld._m03_m13_m23_m33);
  r4.xyzw = CharacterPosition_1.xyzw + -r4.xyzw;
  r0.w = dot(r4.xyzw, r4.xyzw);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r3.xyz, r4.xyz);
  r0.w = log2(abs(r0.w));
  r3.x = dot(r1.xyz, Operator612_6_matrix._m00_m10_m20);
  r3.y = dot(r1.xyz, Operator612_6_matrix._m01_m11_m21);
  r1.xyzw = Operator482_0.Sample(Operator482_0_s, r3.xy).xyzw;
  r1.y = CurrentDistance_2 / MaxDistance_4;
  r1.z = CurrentDistance_2 + 3.000000000e+000;
  r1.w = CurrentDistance_2 + -r1.z;
  r1.y = r1.y * r1.w + r1.z;
  r1.y = min(r1.y, MaxDistance_4);
  r1.y = max(r1.y, Distancecritic_8);
  r1.y = r1.x + r1.y;
  r1.xzw = r1.xxx * float3(8.627400e-002,6.274500e-002,5.882300e-002) + float3(1.372550e-001,1.921570e-001,2.196080e-001);
  r3.xyz = -CharacterPosition_1.xyz + v3.xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r2.w = sqrt(r2.w);
  r1.y = r2.w + -r1.y;
  r2.w = -DistanceNaval_10 + r2.w;
  r2.w = saturate(r2.w / DistanceNavalFade_11);
  r2.w = 1.000000000e+000 + -r2.w;
  r2.w = FullAlpha_7 * r2.w;
  r1.y = saturate(4.583333492e+000 * r1.y);
  r3.x = r1.y * 1.999990039e+004 + 1.000000015e-001;
  r1.y = 1.000000000e+000 + -r1.y;
  r1.y = max(r1.y, r2.w);
  r0.w = r3.x * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w + r0.w;
  r0.w = min(r0.w, 1.000000000e+000);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.xyz = r0.www * r2.xyz + r0.xyz;
  r0.xyz = r1.xzw * r0.xyz;
  r0.xyz = saturate(float3(1.300000e+000,1.300000e+000,1.300000e+000) * r0.xyz);
  r1.xzw = g_EyePosition.xyz + -v3.xyz;
  r0.w = dot(r1.xzw, r1.xzw);
  r2.x = rsqrt(r0.w);
  r0.w = sqrt(r0.w);
  r1.xzw = r2.xxx * r1.xzw;
  r1.x = dot(g_SunDirection.xyz, r1.xzw);
  r1.x = 1.000000000e+000 + r1.x;
  r1.x = -r1.x * 5.000000000e-001 + 1.000000000e+000;
  r1.x = r1.x * r1.x;
  r2.xyz = -g_FogSunBackColor.xyz + g_FogColor.xyz;
  r1.xzw = r1.xxx * r2.xyz + g_FogSunBackColor.xyz;
  r1.xzw = r1.xzw + -r0.xyz;
  r2.x = -g_FogParams.x + r0.w;
  r0.w = -2.000000000e+001 + r0.w;
  r0.w = saturate(7.000000030e-002 * r0.w);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = -r0.w * r0.w + 1.000000000e+000;
  r0.w = g_FogWeatherParams.x * r0.w;
  r2.y = g_FogParams.y + -g_FogParams.x;
  r2.x = saturate(r2.x / r2.y);
  r2.x = 1.000000000e+000 + -r2.x;
  r2.x = r2.x * r2.x;
  r2.x = -r2.x * r2.x + 1.000000000e+000;
  r2.y = -g_FogParams.z + v3.z;
  r2.z = -g_FogParams.z + g_EyePosition.z;
  r2.y = min(r2.z, r2.y);
  r2.y = saturate(-r2.y * g_FogParams.w + 1.000000000e+000);
  r0.w = saturate(r2.x * r2.y + r0.w);
  o0.xyz = r0.www * r1.xzw + r0.xyz;
  r0.x = 1.000000000e+000 + -r0.w;
  r0.x = r1.y * r0.x;
  o0.w = r0.x;
  o1.w = r0.x;
  o1.xyz = v1.zzz / v1.www;
  return;
}
