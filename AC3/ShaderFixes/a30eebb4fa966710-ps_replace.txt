
cbuffer _Globals : register(b0)
{
  float4 g_ViewportScaleOffset : packoffset(c84);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float3 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_VPOSToUVs_Resolve : packoffset(c146);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);
  float4 g_DepthParams : packoffset(c110);
  float4 g_LinearFogColor : packoffset(c16);
  float4 g_LinearFogParams : packoffset(c17);
  float4x4 g_WorldViewProj : packoffset(c0);
  float4 g_EyeXAxis : packoffset(c8);
  float4 g_EyeYAxis : packoffset(c9);
  float4 g_EyeZAxis : packoffset(c10);
  float4 g_EyeWorldPosition_Resolve : packoffset(c11);

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c64);


  struct
  {
    float4 m_UseHQFiltering;
  } g_ShadowPerfOptions : packoffset(c63);

  float4 g_WorldLightmapParameters : packoffset(c87);
  float4 g_WorldLightmapUVParameters : packoffset(c88);
  float4 g_WorldLightmapColor : packoffset(c89);
  float4 g_WorldAOParameters : packoffset(c90);
  float4 g_WorldAORangeParameters : packoffset(c91);
  float4 g_WeatherExposedParams : packoffset(c92);
  float4 g_WinterParams : packoffset(c93);
  float4 g_SnowSparklesParams : packoffset(c94);
  float4 g_DebugValue : packoffset(c147) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);

  struct
  {
    float2 m_VPOS;
    float3 m_ShadowResult;
    float3 m_WorldPosition;
    float3 m_WorldNormal;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float m_SpecularPower;
  } c : packoffset(c148);

}
SamplerState Albedo_s : register(s0);
SamplerState Normals_s : register(s1);
SamplerState DepthSurface_s : register(s2);
SamplerState LightingAccumulation_s : register(s3);
SamplerState g_WeatherReflectionCubeMap_s : register(s5);
SamplerState g_SnowDetailMap_s : register(s8);
SamplerState g_AmbientCubeTexture_s : register(s13);
SamplerState g_CloudShadowSampler_s : register(s14);
SamplerComparisonState g_ShadowSampler_s : register(s15);
Texture2D<float4> Albedo : register(t0);
Texture2D<float4> Normals : register(t1);
Texture2D<float4> DepthSurface : register(t2);
Texture2D<float4> LightingAccumulation : register(t3);
TextureCube<float4> g_WeatherReflectionCubeMap : register(t5);
Texture2D<float4> g_SnowDetailMap : register(t8);
TextureCube<float4> g_AmbientCubeTexture : register(t13);
Texture2D<float4> g_CloudShadowSampler : register(t14);
Texture2D<float4> g_ShadowTexture : register(t15);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask;
  r0.xy = v0.xy * g_VPOSToUVs_Resolve.xy + g_VPOSToUVs_Resolve.zw;
  r1.xyzw = DepthSurface.Sample(DepthSurface_s, r0.xy).xyzw;
  r0.z = g_ReverseProjectionParams.z + r1.x;
  r0.z = g_ReverseProjectionParams.w / r0.z;
  r1.xyz = v2.xyz * r0.zzz + v3.xyz;

//Mike_ar69 - Stereo Shift
float4 stereoParams = StereoParams.Load(0);
float4 r21, r22;
r21.xyz = r1.xyz;
r21.w = 1.000000000e+000;
r22.x = dot(r21.xyzw, g_WorldToView._m00_m10_m20_m30);
r22.y = dot(r21.xyzw, g_WorldToView._m01_m11_m21_m31);
r22.z = dot(r21.xyzw, g_WorldToView._m02_m12_m22_m32);
r22.w = dot(r21.xyzw, g_WorldToView._m03_m13_m23_m33);
r22.x +=  stereoParams.x * (-r22.z - stereoParams.y ) * g_ReverseProjectionParams.x;
r21.x = dot(r22.xyzw, g_ViewToWorld._m00_m10_m20_m30);
r21.y = dot(r22.xyzw, g_ViewToWorld._m01_m11_m21_m31);
r21.z = dot(r22.xyzw, g_ViewToWorld._m02_m12_m22_m32);
r1.xyz = r21.xyz;


  r2.xyzw = Normals.Sample(Normals_s, r0.xy).xyzw;
  r3.xyzw = Albedo.Sample(Albedo_s, r0.xy).xyzw;
  r2.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r2.xyz;
  r4.xyz = r2.xyz + r2.xyz;
  r0.xyzw = LightingAccumulation.Sample(LightingAccumulation_s, r0.xy).xyzw;
  r5.xyz = g_EyePosition.xyz + -r1.xyz;
  r2.x = dot(r5.xyz, r5.xyz);
  r2.y = rsqrt(r2.x);
  r6.xyz = r5.xyz * r2.yyy;
  r7.xy = -g_SnowSparklesParams.xy + r1.xy;
  r7.xy = float2(7.500000e-001,7.500000e-001) * r7.xy;
  r8.xyzw = g_SnowDetailMap.Sample(g_SnowDetailMap_s, r1.xy).xyzw;
  r7.xyzw = g_SnowDetailMap.Sample(g_SnowDetailMap_s, r7.xy).xyzw;
  r4.w = r7.x * r8.x;
  r2.z = saturate(r2.z * 2.000000000e+001 + -9.000000000e+000);
  r2.z = r4.w * r2.z;
  r2.z = g_SnowSparklesParams.z * r2.z;
  r4.w = r8.y * 2.000000000e+000 + -1.000000000e+000;
  r4.w = r4.w * r3.w;
  r3.xyz = r4.www * float3(5.000000e-001,5.000000e-001,5.000000e-001) + r3.xyz;
  r4.w = g_WinterParams.w + -r0.w;
  r0.w = r3.w * r4.w + r0.w;
  r4.w = dot(-r6.xyz, r4.xyz);
  r4.w = r4.w + r4.w;
  r6.xyz = r4.xyz * -r4.www + -r6.xyz;
  r4.w = 1.200000000e+001 * r0.w;
  r5.w = -r0.w * 1.125000000e+000 + 1.000000000e+000;
  r5.w = 5.000000000e+000 * r5.w;
  r6.xyzw = g_WeatherReflectionCubeMap.SampleLevel(g_WeatherReflectionCubeMap_s, r6.xyz, r5.w).xyzw;
  r6.xyz = r6.xyz * r0.www;
  r6.xyz = r2.zzz * r3.www + r6.xyz;
  r2.z = exp2(r4.w);
  r1.w = 1.000000000e+000;
  r7.y = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m00_m10_m20_m30);
  r7.z = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m01_m11_m21_m31);
  r7.w = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m02_m12_m22_m32);
  r8.xyz = r7.yzw * g_Shadows.m_ScalesX.xyz + g_Shadows.m_OffsetsX.xyz;
  r9.xyz = r7.yzw * g_Shadows.m_ScalesY.xyz + g_Shadows.m_OffsetsY.xyz;
  r10.xyz = r7.yzw * g_Shadows.m_ScalesZ.xyz + g_Shadows.m_OffsetsZ.xyz;
  r7.xyz = r7.yzw * g_Shadows.m_ScalesW.xyz + g_Shadows.m_OffsetsW.xyz;
  r11.x = abs(r8.x) < g_Shadows.m_CascadesRangesMax.x;
  r11.y = abs(r8.y) < g_Shadows.m_CascadesRangesMax.x;
  r1.w = r11.y ? r11.x : 0;
  r11.x = abs(r9.x) < g_Shadows.m_CascadesRangesMax.y;
  r11.y = abs(r9.y) < g_Shadows.m_CascadesRangesMax.y;
  r3.w = r11.y ? r11.x : 0;
  r11.x = abs(r10.x) < g_Shadows.m_CascadesRangesMax.z;
  r11.y = abs(r10.y) < g_Shadows.m_CascadesRangesMax.z;
  r4.w = r11.y ? r11.x : 0;
  r11.x = abs(r7.x) < g_Shadows.m_CascadesRangesMax.w;
  r11.y = abs(r7.y) < g_Shadows.m_CascadesRangesMax.w;
  r5.w = r11.y ? r11.x : 0;
  r11.x = r3.w ? r9.x : r8.x;
  r11.y = r3.w ? r9.y : r8.y;
  r11.z = r3.w ? r9.z : r8.z;
  r11.x = r4.w ? r10.x : r11.x;
  r11.y = r4.w ? r10.y : r11.y;
  r11.z = r4.w ? r10.z : r11.z;
  r7.x = r5.w ? r7.x : r11.x;
  r7.y = r5.w ? r7.y : r11.y;
  r7.z = r5.w ? r7.z : r11.z;
  r6.w = r3.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r6.w = r4.w ? g_Shadows.m_OffsetsZ.w : r6.w;
  r6.w = r5.w ? g_Shadows.m_OffsetsW.w : r6.w;
  r11.xyzw = g_Shadows.m_CascadesRangesMax.yyzz + -abs(-r7.xyxy);
  r11.x = r3.w ? r11.x : 10;
  r11.y = r3.w ? r11.y : 10;
  r11.x = r4.w ? r11.z : r11.x;
  r11.y = r4.w ? r11.w : r11.y;
  r11.zw = g_Shadows.m_CascadesRangesMax.ww + -abs(-r7.xy);
  r11.x = r5.w ? r11.z : r11.x;
  r11.y = r5.w ? r11.w : r11.y;
  r11.xy = saturate(-r11.xy * float2(1.000000e+001,1.000000e+001) + float2(1.000000e+000,1.000000e+000));
  r7.w = max(r11.y, r11.x);
  r1.w = (int)r1.w & (int)r3.w;
  r1.w = (int)r1.w & 0x3f800000;
  r8.w = (int)r3.w & 0x3f800000;
  r1.w = r4.w ? r8.w : r1.w;
  r8.w = (int)r4.w & 0x3f800000;
  r1.w = r5.w ? r8.w : r1.w;
  r8.w = r7.w * r1.w;
  r11.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r7.xyz;
  r11.x = r11.y * g_Shadows.m_ScalesX.w + r6.w;
  r12.xyzw = r11.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r12.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r12.xyzw;
  r13.x = floor(r12.w);
  r13.y = floor(r12.y);
  r12.xyzw = -r13.yyxx + r12.xyzw;
  r14.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r13.xyxy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r14.zw;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r11.w).x;
  r15.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r13.xyxy;
  r15.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r15.xyzw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xy, r11.w).x;
  r7.x = 4.000000000e+000 * r7.x;
  r6.w = r6.w * 4.000000000e+000 + r7.x;
  r13.zw = float2(4.000000e+000,4.000000e+000) + r13.xy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r11.w).x;
  r6.w = r7.x * 4.000000000e+000 + r6.w;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.zw, r11.w).x;
  r6.w = r7.x * 4.000000000e+000 + r6.w;
  r15.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r13.xyxw;
  r15.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r15.xyzw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xy, r11.w).x;
  r6.w = r7.x * 4.000000000e+000 + r6.w;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.zw, r11.w).x;
  r11.xyz = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r12.wyw;
  r7.x = dot(r7.xx, r11.xx);
  r6.w = r7.x + r6.w;
  r7.xy = float2(7.500000e+000,0.000000e+000) + r13.xw;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r7.xy;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r11.w).x;
  r7.x = dot(r7.xx, r12.ww);
  r6.w = r7.x + r6.w;
  r15.zw = float2(4.000000e+000,5.000000e-001) + r13.xy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r15.zw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r11.w).x;
  r7.x = r7.x + r7.x;
  r6.w = r7.x * r11.y + r6.w;
  r16.zw = float2(4.000000e+000,7.500000e+000) + r13.xy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r16.zw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r11.w).x;
  r7.x = dot(r7.xx, r12.yy);
  r6.w = r7.x + r6.w;
  r7.xy = r11.xz + -r12.yy;
  r7.yz = saturate(r7.xy);
  r13.zw = r7.yz * r7.yy;
  r7.x = 1.000000000e+000 + -abs(-r7.x);
  r7.x = max(r7.x, 0.000000000e+000);
  r7.y = -r7.x * 5.000000000e-001 + r7.z;
  r7.x = r7.y * r7.x + r13.w;
  r7.yz = min(r11.yx, r12.wy);
  r14.zw = -r7.yz * float2(5.000000e-001,5.000000e-001) + r11.yx;
  r7.yz = r14.zw * r7.yz;
  r7.yz = r11.yy * r11.xx + r7.yz;
  r9.w = r12.w + r12.y;
  r9.w = saturate(-1.000000000e+000 + r9.w);
  r9.w = r9.w * r9.w;
  r14.zw = -r9.ww * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r9.w = r13.z * 5.000000000e-001 + r7.y;
  r9.w = max(r9.w, 9.999999825e-014);
  r7.y = r7.y / r9.w;
  r7.y = r13.x + r7.y;
  r15.y = 1.500000000e+000 + r7.y;
  r15.yz = g_Shadows.m_ShadowMapSize.xy * r15.yw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.yz, r11.w).x;
  r6.w = r7.y * r9.w + r6.w;
  r7.y = r13.z * 5.000000000e-001 + r7.x;
  r7.y = max(r7.y, 9.999999825e-014);
  r7.x = r7.x / r7.y;
  r7.x = r13.x + r7.x;
  r17.y = 5.000000000e-001 + r7.x;
  r18.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r13.yxyx;
  r17.z = r18.x;
  r13.zw = g_Shadows.m_ShadowMapSize.xy * r17.yz;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.zw, r11.w).x;
  r6.w = r7.x * r7.y + r6.w;
  r7.x = r14.z + r7.z;
  r7.x = max(r7.x, 9.999999825e-014);
  r7.y = r14.z / r7.x;
  r7.y = r13.x + r7.y;
  r19.y = 5.000000000e-001 + r7.y;
  r19.z = r18.z;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r19.yz;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r11.w).x;
  r6.w = r7.y * r7.x + r6.w;
  r7.x = 1.000000e+000 / r14.w;
  r7.x = r13.y + r7.x;
  r18.x = 1.500000000e+000 + r7.x;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r18.yx;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r11.w).x;
  r6.w = r7.x * r14.w + r6.w;
  r7.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r11.xxy;
  r13.zw = r7.xy + -r12.yy;
  r14.zw = saturate(r13.zw);
  r15.yz = r14.zw * r14.zz;
  r9.w = 1.000000000e+000 + -abs(-r13.z);
  r9.w = max(r9.w, 0.000000000e+000);
  r10.w = -r9.w * 5.000000000e-001 + r14.w;
  r9.w = r10.w * r9.w + r15.z;
  r10.w = min(r11.y, r11.x);
  r13.zw = r11.yx * r7.xz;
  r14.zw = -r10.ww * float2(5.000000e-001,5.000000e-001) + r11.yx;
  r14.zw = r14.zw * r10.ww + r13.zw;
  r17.yw = min(r7.xz, r12.yw);
  r19.yw = -r17.yw * float2(5.000000e-001,5.000000e-001) + r7.xz;
  r13.zw = r19.yw * r17.yw + r13.zw;
  r12.xyzw = r11.xxyy + r12.xyzw;
  r12.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r12.xyzw);
  r12.xyzw = r12.xyzw * r12.xyzw;
  r12.xyzw = -r12.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r10.w = r15.y * 5.000000000e-001 + r14.z;
  r10.w = max(r10.w, 9.999999825e-014);
  r14.z = r14.z / r10.w;
  r14.z = 1.500000000e+000 + r14.z;
  r15.x = r14.x + -r14.z;
  r15.xz = g_Shadows.m_ShadowMapSize.xy * r15.xw;
  r14.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xz, r11.w).x;
  r6.w = r14.z * r10.w + r6.w;
  r10.w = r15.y * 5.000000000e-001 + r9.w;
  r10.w = max(r10.w, 9.999999825e-014);
  r9.w = r9.w / r10.w;
  r9.w = 5.000000000e-001 + r9.w;
  r17.x = r14.x + -r9.w;
  r15.xy = g_Shadows.m_ShadowMapSize.xy * r17.xz;
  r9.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xy, r11.w).x;
  r6.w = r9.w * r10.w + r6.w;
  r9.w = r13.z + r12.x;
  r9.w = max(r9.w, 9.999999825e-014);
  r10.w = r12.x / r9.w;
  r10.w = 5.000000000e-001 + r10.w;
  r19.x = r14.x + -r10.w;
  r15.xy = g_Shadows.m_ShadowMapSize.xy * r19.xz;
  r10.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xy, r11.w).x;
  r6.w = r10.w * r9.w + r6.w;
  r15.xy = float2(1.000000e+000,1.000000e+000) / r12.yw;
  r9.w = r15.x + r13.y;
  r18.x = 1.500000000e+000 + r9.w;
  r15.xz = g_Shadows.m_ShadowMapSize.xy * r18.wx;
  r9.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xz, r11.w).x;
  r6.w = r9.w * r12.y + r6.w;
  r12.xy = r11.xz + -r11.yy;
  r15.xz = saturate(r12.xy);
  r15.xw = r15.xz * r15.xx;
  r9.w = 1.000000000e+000 + -abs(-r12.x);
  r9.w = max(r9.w, 0.000000000e+000);
  r10.w = -r9.w * 5.000000000e-001 + r15.z;
  r9.w = r10.w * r9.w + r15.w;
  r10.w = r15.x * 5.000000000e-001 + r13.w;
  r10.w = max(r10.w, 9.999999825e-014);
  r11.z = r13.w / r10.w;
  r11.z = r13.x + r11.z;
  r16.y = 1.500000000e+000 + r11.z;
  r12.xy = g_Shadows.m_ShadowMapSize.xy * r16.yw;
  r11.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r11.w).x;
  r6.w = r11.z * r10.w + r6.w;
  r10.w = r15.x * 5.000000000e-001 + r9.w;
  r10.w = max(r10.w, 9.999999825e-014);
  r9.w = r9.w / r10.w;
  r9.w = r13.x + r9.w;
  r17.z = 5.000000000e-001 + r9.w;
  r17.yw = float2(6.500000e+000,5.500000e+000) + r13.yy;
  r12.xy = g_Shadows.m_ShadowMapSize.xy * r17.zy;
  r9.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r11.w).x;
  r6.w = r9.w * r10.w + r6.w;
  r9.w = r14.w + r12.z;
  r9.w = max(r9.w, 9.999999825e-014);
  r10.w = r12.z / r9.w;
  r10.w = r13.x + r10.w;
  r17.x = 5.000000000e-001 + r10.w;
  r12.xy = g_Shadows.m_ShadowMapSize.xy * r17.xw;
  r10.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r11.w).x;
  r6.w = r10.w * r9.w + r6.w;
  r9.w = 1.500000000e+000 + r15.y;
  r18.z = r14.y + -r9.w;
  r12.xy = g_Shadows.m_ShadowMapSize.xy * r18.yz;
  r9.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r11.w).x;
  r6.w = r9.w * r12.w + r6.w;
  r12.xy = r7.xy + -r11.yy;
  r12.yz = saturate(r12.xy);
  r12.yw = r12.yz * r12.yy;
  r7.y = 1.000000000e+000 + -abs(-r12.x);
  r7.y = max(r7.y, 0.000000000e+000);
  r9.w = -r7.y * 5.000000000e-001 + r12.z;
  r7.y = r9.w * r7.y + r12.w;
  r12.xz = min(r7.zx, r11.xy);
  r13.xy = -r12.xz * float2(5.000000e-001,5.000000e-001) + r7.zx;
  r12.xz = r13.xy * r12.xz;
  r7.xz = r7.zz * r7.xx + r12.xz;
  r9.w = r11.x + r11.y;
  r9.w = saturate(-1.000000000e+000 + r9.w);
  r9.w = r9.w * r9.w;
  r11.xy = -r9.ww * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r9.w = r12.y * 5.000000000e-001 + r7.x;
  r9.w = max(r9.w, 9.999999825e-014);
  r7.x = r7.x / r9.w;
  r7.x = 1.500000000e+000 + r7.x;
  r16.x = r14.x + -r7.x;
  r12.xz = g_Shadows.m_ShadowMapSize.xy * r16.xw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xz, r11.w).x;
  r6.w = r7.x * r9.w + r6.w;
  r7.x = r12.y * 5.000000000e-001 + r7.y;
  r7.x = max(r7.x, 9.999999825e-014);
  r7.y = r7.y / r7.x;
  r7.y = 5.000000000e-001 + r7.y;
  r17.x = r14.x + -r7.y;
  r12.xy = g_Shadows.m_ShadowMapSize.xy * r17.xy;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r11.w).x;
  r6.w = r7.y * r7.x + r6.w;
  r7.x = r11.x + r7.z;
  r7.x = max(r7.x, 9.999999825e-014);
  r7.y = r11.x / r7.x;
  r7.y = 5.000000000e-001 + r7.y;
  r17.z = r14.x + -r7.y;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r17.zw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r11.w).x;
  r6.w = r7.y * r7.x + r6.w;
  r7.x = 1.000000e+000 / r11.y;
  r7.x = 1.500000000e+000 + r7.x;
  r18.z = r14.y + -r7.x;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r18.wz;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r11.w).x;
  r6.w = r7.x * r11.y + r6.w;
  r6.w = g_Shadows.m_ShadowContrast.x * r6.w;
  r7.x = g_Shadows.m_ShadowContrast.x + -1.000000000e+000;
  r7.x = 5.000000000e-001 * r7.x;
  r6.w = saturate(r6.w * 2.439024299e-002 + -r7.x);
  r7.x = 0.000000000e+000 < r8.w;
  if (r7.x != 0) {
  r7.x = r4.w ? r9.x : r8.x;
  r7.y = r4.w ? r9.y : r8.y;
  r7.z = r4.w ? r9.z : r8.z;
  r7.x = r5.w ? r10.x : r7.x;
  r7.y = r5.w ? r10.y : r7.y;
  r7.z = r5.w ? r10.z : r7.z;
  r8.x = r4.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r8.x = r5.w ? g_Shadows.m_OffsetsZ.w : r8.x;
  r9.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r7.xyz;
  r9.x = r9.y * g_Shadows.m_ScalesX.w + r8.x;
  r10.xyzw = r9.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r10.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r10.xyzw;
  r11.x = floor(r10.w);
  r11.y = floor(r10.y);
  r10.xyzw = -r11.yyxx + r10.xyzw;
  r12.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r11.xyxy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r12.zw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r9.w).x;
  r13.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r11.xyxy;
  r13.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r13.xyzw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r7.y = 4.000000000e+000 * r7.y;
  r7.x = r7.x * 4.000000000e+000 + r7.y;
  r11.zw = float2(4.000000e+000,4.000000e+000) + r11.xy;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r11.zw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r9.w).x;
  r7.x = r7.y * 4.000000000e+000 + r7.x;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.zw, r9.w).x;
  r7.x = r7.y * 4.000000000e+000 + r7.x;
  r13.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r11.xyxw;
  r13.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r13.xyzw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r7.x = r7.y * 4.000000000e+000 + r7.x;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.zw, r9.w).x;
  r8.xyz = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r10.wyw;
  r7.y = dot(r7.yy, r8.xx);
  r7.x = r7.x + r7.y;
  r7.yz = float2(7.500000e+000,0.000000e+000) + r11.xw;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r7.yz;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r9.w).x;
  r7.y = dot(r7.yy, r10.ww);
  r7.x = r7.x + r7.y;
  r13.zw = float2(4.000000e+000,5.000000e-001) + r11.xy;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r9.w).x;
  r7.y = r7.y + r7.y;
  r7.x = r7.y * r8.y + r7.x;
  r14.zw = float2(4.000000e+000,7.500000e+000) + r11.xy;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r14.zw;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r9.w).x;
  r7.y = dot(r7.yy, r10.yy);
  r7.x = r7.x + r7.y;
  r7.yz = r8.xz + -r10.yy;
  r9.xy = saturate(r7.yz);
  r9.xz = r9.xy * r9.xx;
  r7.y = 1.000000000e+000 + -abs(-r7.y);
  r7.y = max(r7.y, 0.000000000e+000);
  r7.z = -r7.y * 5.000000000e-001 + r9.y;
  r7.y = r7.z * r7.y + r9.z;
  r9.yz = min(r8.yx, r10.wy);
  r11.zw = -r9.yz * float2(5.000000e-001,5.000000e-001) + r8.yx;
  r9.yz = r11.zw * r9.yz;
  r9.yz = r8.yy * r8.xx + r9.yz;
  r7.z = r10.w + r10.y;
  r7.z = saturate(-1.000000000e+000 + r7.z);
  r7.z = r7.z * r7.z;
  r11.zw = -r7.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r7.z = r9.x * 5.000000000e-001 + r9.y;
  r7.z = max(r7.z, 9.999999825e-014);
  r9.y = r9.y / r7.z;
  r9.y = r11.x + r9.y;
  r13.y = 1.500000000e+000 + r9.y;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r13.yw;
  r9.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r7.x = r9.y * r7.z + r7.x;
  r7.z = r9.x * 5.000000000e-001 + r7.y;
  r7.z = max(r7.z, 9.999999825e-014);
  r7.y = r7.y / r7.z;
  r7.y = r11.x + r7.y;
  r15.y = 5.000000000e-001 + r7.y;
  r16.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r11.yxyx;
  r15.z = r16.x;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r15.yz;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r9.w).x;
  r7.x = r7.y * r7.z + r7.x;
  r7.y = r11.z + r9.z;
  r7.y = max(r7.y, 9.999999825e-014);
  r7.z = r11.z / r7.y;
  r7.z = r11.x + r7.z;
  r9.y = 5.000000000e-001 + r7.z;
  r9.z = r16.z;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r9.yz;
  r7.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r7.x = r7.z * r7.y + r7.x;
  r7.y = 1.000000e+000 / r11.w;
  r7.y = r11.y + r7.y;
  r16.x = 1.500000000e+000 + r7.y;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r16.yx;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r9.w).x;
  r7.x = r7.y * r11.w + r7.x;
  r17.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r8.xxy;
  r7.yz = r17.xy + -r10.yy;
  r11.zw = saturate(r7.yz);
  r12.zw = r11.zw * r11.zz;
  r7.y = 1.000000000e+000 + -abs(-r7.y);
  r7.y = max(r7.y, 0.000000000e+000);
  r7.z = -r7.y * 5.000000000e-001 + r11.w;
  r7.y = r7.z * r7.y + r12.w;
  r7.z = min(r8.y, r8.x);
  r11.zw = r17.xz * r8.yx;
  r13.yz = -r7.zz * float2(5.000000e-001,5.000000e-001) + r8.yx;
  r13.yz = r13.yz * r7.zz + r11.zw;
  r15.yw = min(r10.yw, r17.xz);
  r18.xy = -r15.yw * float2(5.000000e-001,5.000000e-001) + r17.xz;
  r11.zw = r18.xy * r15.yw + r11.zw;
  r10.xyzw = r8.xxyy + r10.xyzw;
  r10.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r10.xyzw);
  r10.xyzw = r10.xyzw * r10.xyzw;
  r10.xyzw = -r10.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r7.z = r12.z * 5.000000000e-001 + r13.y;
  r7.z = max(r7.z, 9.999999825e-014);
  r9.y = r13.y / r7.z;
  r9.y = 1.500000000e+000 + r9.y;
  r13.x = r12.x + -r9.y;
  r13.xy = g_Shadows.m_ShadowMapSize.xy * r13.xw;
  r9.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r7.x = r9.y * r7.z + r7.x;
  r7.z = r12.z * 5.000000000e-001 + r7.y;
  r7.z = max(r7.z, 9.999999825e-014);
  r7.y = r7.y / r7.z;
  r7.y = 5.000000000e-001 + r7.y;
  r15.x = r12.x + -r7.y;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r15.xz;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r7.x = r7.y * r7.z + r7.x;
  r7.y = r11.z + r10.x;
  r7.y = max(r7.y, 9.999999825e-014);
  r7.z = r10.x / r7.y;
  r7.z = 5.000000000e-001 + r7.z;
  r9.x = r12.x + -r7.z;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r9.xz;
  r7.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r9.w).x;
  r7.x = r7.z * r7.y + r7.x;
  r7.yz = float2(1.000000e+000,1.000000e+000) / r10.yw;
  r7.y = r11.y + r7.y;
  r16.x = 1.500000000e+000 + r7.y;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r16.wx;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r9.w).x;
  r7.x = r7.y * r10.y + r7.x;
  r9.xy = r8.xz + -r8.yy;
  r9.yz = saturate(r9.xy);
  r10.xy = r9.yz * r9.yy;
  r7.y = 1.000000000e+000 + -abs(-r9.x);
  r7.y = max(r7.y, 0.000000000e+000);
  r8.z = -r7.y * 5.000000000e-001 + r9.z;
  r7.y = r8.z * r7.y + r10.y;
  r8.z = r10.x * 5.000000000e-001 + r11.w;
  r8.z = max(r8.z, 9.999999825e-014);
  r9.x = r11.w / r8.z;
  r9.x = r11.x + r9.x;
  r14.y = 1.500000000e+000 + r9.x;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r14.yw;
  r9.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r9.w).x;
  r7.x = r9.x * r8.z + r7.x;
  r8.z = r10.x * 5.000000000e-001 + r7.y;
  r8.z = max(r8.z, 9.999999825e-014);
  r7.y = r7.y / r8.z;
  r7.y = r11.x + r7.y;
  r15.z = 5.000000000e-001 + r7.y;
  r15.yw = float2(6.500000e+000,5.500000e+000) + r11.yy;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r15.zy;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r9.w).x;
  r7.x = r7.y * r8.z + r7.x;
  r7.y = r13.z + r10.z;
  r7.y = max(r7.y, 9.999999825e-014);
  r8.z = r10.z / r7.y;
  r8.z = r11.x + r8.z;
  r15.x = 5.000000000e-001 + r8.z;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r15.xw;
  r8.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r9.w).x;
  r7.x = r8.z * r7.y + r7.x;
  r7.y = 1.500000000e+000 + r7.z;
  r16.z = r12.y + -r7.y;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r16.yz;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r9.w).x;
  r7.x = r7.y * r10.w + r7.x;
  r7.yz = r17.xy + -r8.yy;
  r9.xy = saturate(r7.yz);
  r9.xz = r9.xy * r9.xx;
  r7.y = 1.000000000e+000 + -abs(-r7.y);
  r7.y = max(r7.y, 0.000000000e+000);
  r7.z = -r7.y * 5.000000000e-001 + r9.y;
  r7.y = r7.z * r7.y + r9.z;
  r9.yz = min(r8.xy, r17.zx);
  r10.xy = -r9.yz * float2(5.000000e-001,5.000000e-001) + r17.zx;
  r9.yz = r10.xy * r9.yz;
  r9.yz = r17.zz * r17.xx + r9.yz;
  r7.z = r8.x + r8.y;
  r7.z = saturate(-1.000000000e+000 + r7.z);
  r7.z = r7.z * r7.z;
  r8.xy = -r7.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r7.z = r9.x * 5.000000000e-001 + r9.y;
  r7.z = max(r7.z, 9.999999825e-014);
  r8.z = r9.y / r7.z;
  r8.z = 1.500000000e+000 + r8.z;
  r14.x = r12.x + -r8.z;
  r10.xy = g_Shadows.m_ShadowMapSize.xy * r14.xw;
  r8.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r9.w).x;
  r7.x = r8.z * r7.z + r7.x;
  r7.z = r9.x * 5.000000000e-001 + r7.y;
  r7.z = max(r7.z, 9.999999825e-014);
  r7.y = r7.y / r7.z;
  r7.y = 5.000000000e-001 + r7.y;
  r15.x = r12.x + -r7.y;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r15.xy;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r9.w).x;
  r7.x = r7.y * r7.z + r7.x;
  r7.y = r9.z + r8.x;
  r7.y = max(r7.y, 9.999999825e-014);
  r7.z = r8.x / r7.y;
  r7.z = 5.000000000e-001 + r7.z;
  r15.z = r12.x + -r7.z;
  r8.xz = g_Shadows.m_ShadowMapSize.xy * r15.zw;
  r7.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xz, r9.w).x;
  r7.x = r7.z * r7.y + r7.x;
  r7.y = 1.000000e+000 / r8.y;
  r7.y = 1.500000000e+000 + r7.y;
  r16.z = r12.y + -r7.y;
  r7.yz = g_Shadows.m_ShadowMapSize.xy * r16.wz;
  r7.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.yz, r9.w).x;
  r7.x = r7.y * r8.y + r7.x;
  r7.x = 2.439024299e-002 * r7.x;
  r1.w = -r7.w * r1.w + 1.000000000e+000;
  r3.w = (int)r3.w & (int)g_Shadows.m_NoiseScale.y;
  r3.w = r4.w ? g_Shadows.m_NoiseScale.z : r3.w;
  r3.w = r5.w ? g_Shadows.m_NoiseScale.w : r3.w;
  r1.w = r1.w * r3.w + 1.000000000e+000;
  r3.w = g_Shadows.m_ShadowContrast.x * r1.w;
  r1.w = g_Shadows.m_ShadowContrast.x * r1.w + -1.000000000e+000;
  r1.w = 5.000000000e-001 * r1.w;
  r1.w = saturate(r7.x * r3.w + -r1.w);
  r1.w = r1.w + -r6.w;
  r6.w = r8.w * r1.w + r6.w;
  }
  r7.xyz = -g_EyePosition.xyz + r1.xyz;
  r1.z = dot(r7.xyz, r7.xyz);
  r1.z = saturate(r1.z * g_Shadows.m_FadeParams.x + g_Shadows.m_FadeParams.y);
  r1.z = saturate(r6.w + r1.z);
  r1.xy = r1.xy * g_Shadows.m_CloudUVScaleOffset.xy + g_Shadows.m_CloudUVScaleOffset.zw;
  r1.w = sqrt(r2.x);
  r1.w = r1.w * g_Shadows.m_CloudShadowsParams.w + g_Shadows.m_CloudShadowsParams.z;
  r7.xyzw = g_CloudShadowSampler.SampleLevel(g_CloudShadowSampler_s, r1.xy, r1.w).xyzw;
  r1.x = saturate(-g_Shadows.m_CloudShadowsParams.y + r7.x);
  r1.x = saturate(g_Shadows.m_CloudShadowsParams.x + r1.x);
  r1.x = r1.z * r1.x;
  r7.xyzw = g_AmbientCubeTexture.SampleLevel(g_AmbientCubeTexture_s, r4.xyz, 0.000000000e+000).xyzw;
  r1.yzw = float3(3.000000e+000,3.000000e+000,3.000000e+000) * r7.xyz;
  r2.x = saturate(dot(g_DeferredDirectLight.m_Direction.xyz, r4.xyz));
  r7.xyz = saturate(r1.yzw * r3.xyz);
  r0.xyz = r6.xyz * r1.yzw + r0.xyz;
  r1.yzw = g_DeferredDirectLight.m_Color.xyz * r3.xyz;
  r1.yzw = r1.yzw * r1.xxx;
  r1.yzw = r1.yzw * r2.xxx + r7.xyz;
  r3.xyz = r5.xyz * r2.yyy + g_DeferredDirectLight.m_Direction.xyz;
  r2.y = dot(r3.xyz, r3.xyz);
  r2.y = rsqrt(r2.y);
  r3.xyz = r3.xyz * r2.yyy;
  r2.y = dot(r4.xyz, r4.xyz);
  r2.y = rsqrt(r2.y);
  r4.xyz = r4.xyz * r2.yyy;
  r2.y = saturate(dot(r4.xyz, r3.xyz));
  r2.y = log2(r2.y);
  r2.y = r2.z * r2.y;
  r2.y = exp2(r2.y);
  r2.x = r2.x * r2.y;
  r2.y = 8.000000000e+000 + r2.z;
  r2.x = r2.x * r2.y;
  r2.x = 1.250000000e-001 * r2.x;
  r2.xyz = g_DeferredDirectLight.m_Color.xyz * r2.xxx;
  r2.xyz = r2.xyz * r1.xxx;
  r1.xyz = r2.xyz * r2.www + r1.yzw;
  o0.xyz = r1.xyz + r0.xyz;
  o0.w = r0.w;
  return;
}
