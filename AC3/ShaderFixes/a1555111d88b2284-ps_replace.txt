
cbuffer _Globals : register(b0)
{
  float4 g_ViewportScaleOffset : packoffset(c84);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float3 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_VPOSToUVs_Resolve : packoffset(c146);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);
  float4 g_DepthParams : packoffset(c110);
  float4 g_LinearFogColor : packoffset(c16);
  float4 g_LinearFogParams : packoffset(c17);
  float4x4 g_WorldViewProj : packoffset(c0);
  float4 g_EyeXAxis : packoffset(c8);
  float4 g_EyeYAxis : packoffset(c9);
  float4 g_EyeZAxis : packoffset(c10);
  float4 g_EyeWorldPosition_Resolve : packoffset(c11);

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c64);


  struct
  {
    float4 m_UseHQFiltering;
  } g_ShadowPerfOptions : packoffset(c63);

  float4 g_WorldLightmapParameters : packoffset(c87);
  float4 g_WorldLightmapUVParameters : packoffset(c88);
  float4 g_WorldLightmapColor : packoffset(c89);
  float4 g_WorldAOParameters : packoffset(c90);
  float4 g_WorldAORangeParameters : packoffset(c91);
  float4 g_WeatherExposedParams : packoffset(c92);
  float4 g_WinterParams : packoffset(c93);
  float4 g_SnowSparklesParams : packoffset(c94);
  float4 g_DebugValue : packoffset(c147) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);

  struct
  {
    float2 m_VPOS;
    float3 m_ShadowResult;
    float3 m_WorldPosition;
    float3 m_WorldNormal;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float m_SpecularPower;
  } c : packoffset(c148);

}
SamplerState g_WorldAOSampler_s : register(s4);
SamplerState g_WeatherReflectionCubeMap_s : register(s5);
SamplerState g_WorldLightmapColorSampler_s : register(s7);
SamplerState g_WorldLightMapSampler_s : register(s12);
SamplerState g_AmbientCubeTexture_s : register(s13);
SamplerComparisonState g_ShadowSampler_s : register(s15);
Texture2DMS<float4,4> g_TextureAlbedoDX11_MSAA : register(t0);
Texture2DMS<float4,4> g_TextureNormalDX11_MSAA : register(t1);
Texture2DMS<float,4> g_TextureDepthDX11_MSAA : register(t2);
Texture2DMS<float4,4> g_TextureLightingAccumulationDX11_MSAA : register(t3);
Texture2D<float4> g_WorldAOSampler : register(t4);
TextureCube<float4> g_WeatherReflectionCubeMap : register(t5);
Texture2D<float4> g_WorldLightmapColorSampler : register(t7);
Texture2D<float4> g_WorldLightMapSampler : register(t12);
TextureCube<float4> g_AmbientCubeTexture : register(t13);
Texture2D<float4> g_ShadowTexture : register(t15);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  uint v4 : SV_SAMPLEINDEX0,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20;
  uint4 bitmask;
  r0.xy = v0.xy * g_VPOSToUVs_Resolve.xy + g_VPOSToUVs_Resolve.zw;
  g_TextureDepthDX11_MSAA.GetDimensions(r0.z, r0.w, bitmask.x);
  r0.zw = r0.xy * r0.zw;
  r1.xy = (int2)r0.zw;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = g_TextureDepthDX11_MSAA.Load(r1.xyz,v4.x).x;
  r0.z = g_ReverseProjectionParams.z + r0.z;
  r0.z = g_ReverseProjectionParams.w / r0.z;
  r1.xyz = v2.xyz * r0.zzz + v3.xyz;

//Mike_ar69 - Stereo Shift
float4 stereoParams = StereoParams.Load(0);
float4 r21, r22;
r21.xyz = r1.xyz;
r21.w = 1.000000000e+000;
r22.x = dot(r21.xyzw, g_WorldToView._m00_m10_m20_m30);
r22.y = dot(r21.xyzw, g_WorldToView._m01_m11_m21_m31);
r22.z = dot(r21.xyzw, g_WorldToView._m02_m12_m22_m32);
r22.w = dot(r21.xyzw, g_WorldToView._m03_m13_m23_m33);
r22.x +=  stereoParams.x * (-r22.z - stereoParams.y ) * g_ReverseProjectionParams.x;
r21.x = dot(r22.xyzw, g_ViewToWorld._m00_m10_m20_m30);
r21.y = dot(r22.xyzw, g_ViewToWorld._m01_m11_m21_m31);
r21.z = dot(r22.xyzw, g_ViewToWorld._m02_m12_m22_m32);
r1.xyz = r21.xyz;


  g_TextureNormalDX11_MSAA.GetDimensions(r0.z, r0.w, bitmask.x);
  r0.zw = r0.xy * r0.zw;
  r2.xy = (int2)r0.zw;
  r2.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = g_TextureNormalDX11_MSAA.Load(r2.xyz,v4.x).xyzw;
  g_TextureAlbedoDX11_MSAA.GetDimensions(r0.z, r0.w, bitmask.x);
  r0.zw = r0.xy * r0.zw;
  r3.xy = (int2)r0.zw;
  r3.zw = float2(0.000000e+000,0.000000e+000);
  r3.xyzw = g_TextureAlbedoDX11_MSAA.Load(r3.xyz,v4.x).xyzw;
  r2.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r2.xyz;
  r2.xyz = r2.xyz + r2.xyz;
  g_TextureLightingAccumulationDX11_MSAA.GetDimensions(r0.z, r0.w, bitmask.x);
  r0.xy = r0.xy * r0.zw;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r0.xyzw = g_TextureLightingAccumulationDX11_MSAA.Load(r0.xyz,v4.x).xyzw;
  r4.xyz = g_EyePosition.xyz + -r1.xyz;
  r4.w = dot(r4.xyz, r4.xyz);
  r4.w = rsqrt(r4.w);
  r5.xyz = r4.xyz * r4.www;
  r5.w = g_WinterParams.w + -r0.w;
  r0.w = r3.w * r5.w + r0.w;
  r3.w = dot(-r5.xyz, r2.xyz);
  r3.w = r3.w + r3.w;
  r5.xyz = r2.xyz * -r3.www + -r5.xyz;
  r3.w = 1.200000000e+001 * r0.w;
  r5.w = -r0.w * 1.125000000e+000 + 1.000000000e+000;
  r5.w = 5.000000000e+000 * r5.w;
  r5.xyz = g_WeatherReflectionCubeMap.SampleLevel(g_WeatherReflectionCubeMap_s, r5.xyz, r5.w).xyz;
  r5.xyz = r5.xyz * r0.www;
  r3.w = exp2(r3.w);
  r1.w = 1.000000000e+000;
  r6.y = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m00_m10_m20_m30);
  r6.z = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m01_m11_m21_m31);
  r6.w = dot(r1.xyzw, g_Shadows.m_WorldToLightProj._m02_m12_m22_m32);
  r7.xyz = r6.yzw * g_Shadows.m_ScalesX.xyz + g_Shadows.m_OffsetsX.xyz;
  r8.xyz = r6.yzw * g_Shadows.m_ScalesY.xyz + g_Shadows.m_OffsetsY.xyz;
  r9.xyz = r6.yzw * g_Shadows.m_ScalesZ.xyz + g_Shadows.m_OffsetsZ.xyz;
  r6.xyz = r6.yzw * g_Shadows.m_ScalesW.xyz + g_Shadows.m_OffsetsW.xyz;
  r10.x = abs(r7.x) < g_Shadows.m_CascadesRangesMax.x;
  r10.y = abs(r7.y) < g_Shadows.m_CascadesRangesMax.x;
  r1.w = r10.y ? r10.x : 0;
  r10.x = abs(r8.x) < g_Shadows.m_CascadesRangesMax.y;
  r10.y = abs(r8.y) < g_Shadows.m_CascadesRangesMax.y;
  r5.w = r10.y ? r10.x : 0;
  r10.x = abs(r9.x) < g_Shadows.m_CascadesRangesMax.z;
  r10.y = abs(r9.y) < g_Shadows.m_CascadesRangesMax.z;
  r6.w = r10.y ? r10.x : 0;
  r10.x = abs(r6.x) < g_Shadows.m_CascadesRangesMax.w;
  r10.y = abs(r6.y) < g_Shadows.m_CascadesRangesMax.w;
  r7.w = r10.y ? r10.x : 0;
  r10.x = r5.w ? r8.x : r7.x;
  r10.y = r5.w ? r8.y : r7.y;
  r10.z = r5.w ? r8.z : r7.z;
  r10.x = r6.w ? r9.x : r10.x;
  r10.y = r6.w ? r9.y : r10.y;
  r10.z = r6.w ? r9.z : r10.z;
  r6.x = r7.w ? r6.x : r10.x;
  r6.y = r7.w ? r6.y : r10.y;
  r6.z = r7.w ? r6.z : r10.z;
  r8.w = r5.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r8.w = r6.w ? g_Shadows.m_OffsetsZ.w : r8.w;
  r8.w = r7.w ? g_Shadows.m_OffsetsW.w : r8.w;
  r10.xyzw = g_Shadows.m_CascadesRangesMax.yyzz + -abs(-r6.xyxy);
  r10.x = r5.w ? r10.x : 10;
  r10.y = r5.w ? r10.y : 10;
  r10.x = r6.w ? r10.z : r10.x;
  r10.y = r6.w ? r10.w : r10.y;
  r10.zw = g_Shadows.m_CascadesRangesMax.ww + -abs(-r6.xy);
  r10.x = r7.w ? r10.z : r10.x;
  r10.y = r7.w ? r10.w : r10.y;
  r10.xy = saturate(-r10.xy * float2(1.000000e+001,1.000000e+001) + float2(1.000000e+000,1.000000e+000));
  r9.w = max(r10.y, r10.x);
  r1.w = (int)r1.w & (int)r5.w;
  r1.w = (int)r1.w & 0x3f800000;
  r10.x = (int)r5.w & 0x3f800000;
  r1.w = r6.w ? r10.x : r1.w;
  r10.x = (int)r6.w & 0x3f800000;
  r1.w = r7.w ? r10.x : r1.w;
  r10.x = r9.w * r1.w;
  r11.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r6.xyz;
  r11.x = r11.y * g_Shadows.m_ScalesX.w + r8.w;
  r12.xyzw = r11.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r12.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r12.xyzw;
  r13.x = floor(r12.w);
  r13.y = floor(r12.y);
  r12.xyzw = -r13.yyxx + r12.xyzw;
  r14.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r13.xyxy;
  r6.xy = g_Shadows.m_ShadowMapSize.xy * r14.zw;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r11.w).x;
  r15.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r13.xyxy;
  r15.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r15.xyzw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xy, r11.w).x;
  r6.y = 4.000000000e+000 * r6.y;
  r6.x = r6.x * 4.000000000e+000 + r6.y;
  r13.zw = float2(4.000000e+000,4.000000e+000) + r13.xy;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r11.w).x;
  r6.x = r6.y * 4.000000000e+000 + r6.x;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.zw, r11.w).x;
  r6.x = r6.y * 4.000000000e+000 + r6.x;
  r15.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r13.xyxw;
  r15.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r15.xyzw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xy, r11.w).x;
  r6.x = r6.y * 4.000000000e+000 + r6.x;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.zw, r11.w).x;
  r10.yzw = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r12.wyw;
  r6.y = dot(r6.yy, r10.yy);
  r6.x = r6.x + r6.y;
  r6.yz = float2(7.500000e+000,0.000000e+000) + r13.xw;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r6.yz;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r11.w).x;
  r6.y = dot(r6.yy, r12.ww);
  r6.x = r6.x + r6.y;
  r15.zw = float2(4.000000e+000,5.000000e-001) + r13.xy;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r15.zw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r11.w).x;
  r6.y = r6.y + r6.y;
  r6.x = r6.y * r10.z + r6.x;
  r16.zw = float2(4.000000e+000,7.500000e+000) + r13.xy;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r16.zw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r11.w).x;
  r6.y = dot(r6.yy, r12.yy);
  r6.x = r6.x + r6.y;
  r6.yz = r10.yw + -r12.yy;
  r11.xy = saturate(r6.yz);
  r11.xz = r11.xy * r11.xx;
  r6.y = 1.000000000e+000 + -abs(-r6.y);
  r6.y = max(r6.y, 0.000000000e+000);
  r6.z = -r6.y * 5.000000000e-001 + r11.y;
  r6.y = r6.z * r6.y + r11.z;
  r11.yz = min(r10.zy, r12.wy);
  r13.zw = -r11.yz * float2(5.000000e-001,5.000000e-001) + r10.zy;
  r11.yz = r13.zw * r11.yz;
  r11.yz = r10.zz * r10.yy + r11.yz;
  r6.z = r12.w + r12.y;
  r6.z = saturate(-1.000000000e+000 + r6.z);
  r6.z = r6.z * r6.z;
  r13.zw = -r6.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r6.z = r11.x * 5.000000000e-001 + r11.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r8.w = r11.y / r6.z;
  r8.w = r13.x + r8.w;
  r15.y = 1.500000000e+000 + r8.w;
  r14.zw = g_Shadows.m_ShadowMapSize.xy * r15.yw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.zw, r11.w).x;
  r6.x = r8.w * r6.z + r6.x;
  r6.z = r11.x * 5.000000000e-001 + r6.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r6.y = r6.y / r6.z;
  r6.y = r13.x + r6.y;
  r17.y = 5.000000000e-001 + r6.y;
  r18.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r13.yxyx;
  r17.z = r18.x;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r17.yz;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r11.w).x;
  r6.x = r6.y * r6.z + r6.x;
  r6.y = r13.z + r11.z;
  r6.y = max(r6.y, 9.999999825e-014);
  r6.z = r13.z / r6.y;
  r6.z = r13.x + r6.z;
  r11.y = 5.000000000e-001 + r6.z;
  r11.z = r18.z;
  r14.zw = g_Shadows.m_ShadowMapSize.xy * r11.yz;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.zw, r11.w).x;
  r6.x = r6.z * r6.y + r6.x;
  r6.y = 1.000000e+000 / r13.w;
  r6.y = r13.y + r6.y;
  r18.x = 1.500000000e+000 + r6.y;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r18.yx;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r11.w).x;
  r6.x = r6.y * r13.w + r6.x;
  r19.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r10.yyz;
  r6.yz = r19.xy + -r12.yy;
  r13.zw = saturate(r6.yz);
  r14.zw = r13.zw * r13.zz;
  r6.y = 1.000000000e+000 + -abs(-r6.y);
  r6.y = max(r6.y, 0.000000000e+000);
  r6.z = -r6.y * 5.000000000e-001 + r13.w;
  r6.y = r6.z * r6.y + r14.w;
  r6.z = min(r10.z, r10.y);
  r13.zw = r19.xz * r10.zy;
  r15.yz = -r6.zz * float2(5.000000e-001,5.000000e-001) + r10.zy;
  r15.yz = r15.yz * r6.zz + r13.zw;
  r17.yw = min(r12.yw, r19.xz);
  r20.xy = -r17.yw * float2(5.000000e-001,5.000000e-001) + r19.xz;
  r13.zw = r20.xy * r17.yw + r13.zw;
  r12.xyzw = r10.yyzz + r12.xyzw;
  r12.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r12.xyzw);
  r12.xyzw = r12.xyzw * r12.xyzw;
  r12.xyzw = -r12.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r6.z = r14.z * 5.000000000e-001 + r15.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r8.w = r15.y / r6.z;
  r8.w = 1.500000000e+000 + r8.w;
  r15.x = r14.x + -r8.w;
  r15.xy = g_Shadows.m_ShadowMapSize.xy * r15.xw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r15.xy, r11.w).x;
  r6.x = r8.w * r6.z + r6.x;
  r6.z = r14.z * 5.000000000e-001 + r6.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r6.y = r6.y / r6.z;
  r6.y = 5.000000000e-001 + r6.y;
  r17.x = r14.x + -r6.y;
  r14.zw = g_Shadows.m_ShadowMapSize.xy * r17.xz;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.zw, r11.w).x;
  r6.x = r6.y * r6.z + r6.x;
  r6.y = r13.z + r12.x;
  r6.y = max(r6.y, 9.999999825e-014);
  r6.z = r12.x / r6.y;
  r6.z = 5.000000000e-001 + r6.z;
  r11.x = r14.x + -r6.z;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r11.xz;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r11.w).x;
  r6.x = r6.z * r6.y + r6.x;
  r6.yz = float2(1.000000e+000,1.000000e+000) / r12.yw;
  r6.y = r13.y + r6.y;
  r18.x = 1.500000000e+000 + r6.y;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r18.wx;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r11.w).x;
  r6.x = r6.y * r12.y + r6.x;
  r11.xy = r10.yw + -r10.zz;
  r11.yz = saturate(r11.xy);
  r12.xy = r11.yz * r11.yy;
  r6.y = 1.000000000e+000 + -abs(-r11.x);
  r6.y = max(r6.y, 0.000000000e+000);
  r8.w = -r6.y * 5.000000000e-001 + r11.z;
  r6.y = r8.w * r6.y + r12.y;
  r8.w = r12.x * 5.000000000e-001 + r13.w;
  r8.w = max(r8.w, 9.999999825e-014);
  r10.w = r13.w / r8.w;
  r10.w = r13.x + r10.w;
  r16.y = 1.500000000e+000 + r10.w;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r16.yw;
  r10.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r11.w).x;
  r6.x = r10.w * r8.w + r6.x;
  r8.w = r12.x * 5.000000000e-001 + r6.y;
  r8.w = max(r8.w, 9.999999825e-014);
  r6.y = r6.y / r8.w;
  r6.y = r13.x + r6.y;
  r17.z = 5.000000000e-001 + r6.y;
  r17.yw = float2(6.500000e+000,5.500000e+000) + r13.yy;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r17.zy;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r11.w).x;
  r6.x = r6.y * r8.w + r6.x;
  r6.y = r15.z + r12.z;
  r6.y = max(r6.y, 9.999999825e-014);
  r8.w = r12.z / r6.y;
  r8.w = r13.x + r8.w;
  r17.x = 5.000000000e-001 + r8.w;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r17.xw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r11.w).x;
  r6.x = r8.w * r6.y + r6.x;
  r6.y = 1.500000000e+000 + r6.z;
  r18.z = r14.y + -r6.y;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r18.yz;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r11.w).x;
  r6.x = r6.y * r12.w + r6.x;
  r6.yz = r19.xy + -r10.zz;
  r11.xy = saturate(r6.yz);
  r11.xz = r11.xy * r11.xx;
  r6.y = 1.000000000e+000 + -abs(-r6.y);
  r6.y = max(r6.y, 0.000000000e+000);
  r6.z = -r6.y * 5.000000000e-001 + r11.y;
  r6.y = r6.z * r6.y + r11.z;
  r11.yz = min(r10.yz, r19.zx);
  r12.xy = -r11.yz * float2(5.000000e-001,5.000000e-001) + r19.zx;
  r11.yz = r12.xy * r11.yz;
  r11.yz = r19.zz * r19.xx + r11.yz;
  r6.z = r10.y + r10.z;
  r6.z = saturate(-1.000000000e+000 + r6.z);
  r6.z = r6.z * r6.z;
  r10.yz = -r6.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r6.z = r11.x * 5.000000000e-001 + r11.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r8.w = r11.y / r6.z;
  r8.w = 1.500000000e+000 + r8.w;
  r16.x = r14.x + -r8.w;
  r12.xy = g_Shadows.m_ShadowMapSize.xy * r16.xw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r11.w).x;
  r6.x = r8.w * r6.z + r6.x;
  r6.z = r11.x * 5.000000000e-001 + r6.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r6.y = r6.y / r6.z;
  r6.y = 5.000000000e-001 + r6.y;
  r17.x = r14.x + -r6.y;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r17.xy;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r11.w).x;
  r6.x = r6.y * r6.z + r6.x;
  r6.y = r11.z + r10.y;
  r6.y = max(r6.y, 9.999999825e-014);
  r6.z = r10.y / r6.y;
  r6.z = 5.000000000e-001 + r6.z;
  r17.z = r14.x + -r6.z;
  r10.yw = g_Shadows.m_ShadowMapSize.xy * r17.zw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.yw, r11.w).x;
  r6.x = r6.z * r6.y + r6.x;
  r6.y = 1.000000e+000 / r10.z;
  r6.y = 1.500000000e+000 + r6.y;
  r18.z = r14.y + -r6.y;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r18.wz;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r11.w).x;
  r6.x = r6.y * r10.z + r6.x;
  r6.x = g_Shadows.m_ShadowContrast.x * r6.x;
  r6.y = g_Shadows.m_ShadowContrast.x + -1.000000000e+000;
  r6.y = 5.000000000e-001 * r6.y;
  r6.x = saturate(r6.x * 2.439024299e-002 + -r6.y);
  r6.y = 0.000000000e+000 < r10.x;
  if (r6.y != 0) {
  r7.x = r6.w ? r8.x : r7.x;
  r7.y = r6.w ? r8.y : r7.y;
  r7.z = r6.w ? r8.z : r7.z;
  r7.x = r7.w ? r9.x : r7.x;
  r7.y = r7.w ? r9.y : r7.y;
  r7.z = r7.w ? r9.z : r7.z;
  r6.y = r6.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r6.y = r7.w ? g_Shadows.m_OffsetsZ.w : r6.y;
  r8.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r7.xyz;
  r8.x = r8.y * g_Shadows.m_ScalesX.w + r6.y;
  r11.xyzw = r8.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r11.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r11.xyzw;
  r12.x = floor(r11.w);
  r12.y = floor(r11.y);
  r11.xyzw = -r12.yyxx + r11.xyzw;
  r13.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r12.xyxy;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r8.w).x;
  r14.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r12.xyxy;
  r14.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r14.xyzw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.xy, r8.w).x;
  r6.z = 4.000000000e+000 * r6.z;
  r6.y = r6.y * 4.000000000e+000 + r6.z;
  r12.zw = float2(4.000000e+000,4.000000e+000) + r12.xy;
  r7.xy = g_Shadows.m_ShadowMapSize.xy * r12.zw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xy, r8.w).x;
  r6.y = r6.z * 4.000000000e+000 + r6.y;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.zw, r8.w).x;
  r6.y = r6.z * 4.000000000e+000 + r6.y;
  r14.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r12.xyxw;
  r14.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r14.xyzw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.xy, r8.w).x;
  r6.y = r6.z * 4.000000000e+000 + r6.y;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.zw, r8.w).x;
  r7.xyz = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r11.wyw;
  r6.z = dot(r6.zz, r7.xx);
  r6.y = r6.y + r6.z;
  r8.xy = float2(7.500000e+000,0.000000e+000) + r12.xw;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r8.xy;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r6.z = dot(r6.zz, r11.ww);
  r6.y = r6.y + r6.z;
  r14.zw = float2(4.000000e+000,5.000000e-001) + r12.xy;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r14.zw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r6.z = r6.z + r6.z;
  r6.y = r6.z * r7.y + r6.y;
  r15.zw = float2(4.000000e+000,7.500000e+000) + r12.xy;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r15.zw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r6.z = dot(r6.zz, r11.yy);
  r6.y = r6.y + r6.z;
  r8.xy = r7.xz + -r11.yy;
  r8.yz = saturate(r8.xy);
  r9.xy = r8.yz * r8.yy;
  r6.z = 1.000000000e+000 + -abs(-r8.x);
  r6.z = max(r6.z, 0.000000000e+000);
  r8.x = -r6.z * 5.000000000e-001 + r8.z;
  r6.z = r8.x * r6.z + r9.y;
  r8.xy = min(r7.yx, r11.wy);
  r9.yz = -r8.xy * float2(5.000000e-001,5.000000e-001) + r7.yx;
  r8.xy = r9.yz * r8.xy;
  r8.xy = r7.yy * r7.xx + r8.xy;
  r8.z = r11.w + r11.y;
  r8.z = saturate(-1.000000000e+000 + r8.z);
  r8.z = r8.z * r8.z;
  r9.yz = -r8.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r8.z = r9.x * 5.000000000e-001 + r8.x;
  r8.z = max(r8.z, 9.999999825e-014);
  r8.x = r8.x / r8.z;
  r8.x = r12.x + r8.x;
  r14.y = 1.500000000e+000 + r8.x;
  r10.yz = g_Shadows.m_ShadowMapSize.xy * r14.yw;
  r8.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.yz, r8.w).x;
  r6.y = r8.x * r8.z + r6.y;
  r8.x = r9.x * 5.000000000e-001 + r6.z;
  r8.x = max(r8.x, 9.999999825e-014);
  r6.z = r6.z / r8.x;
  r6.z = r12.x + r6.z;
  r16.y = 5.000000000e-001 + r6.z;
  r17.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r12.yxyx;
  r16.z = r17.x;
  r10.yz = g_Shadows.m_ShadowMapSize.xy * r16.yz;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.yz, r8.w).x;
  r6.y = r6.z * r8.x + r6.y;
  r6.z = r9.y + r8.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r8.x = r9.y / r6.z;
  r8.x = r12.x + r8.x;
  r8.y = 5.000000000e-001 + r8.x;
  r8.z = r17.z;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r8.yz;
  r8.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r8.w).x;
  r6.y = r8.y * r6.z + r6.y;
  r6.z = 1.000000e+000 / r9.z;
  r6.z = r12.y + r6.z;
  r17.x = 1.500000000e+000 + r6.z;
  r9.xy = g_Shadows.m_ShadowMapSize.xy * r17.yx;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r9.xy, r8.w).x;
  r6.y = r6.z * r9.z + r6.y;
  r9.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r7.xxy;
  r10.yz = r9.xy + -r11.yy;
  r10.zw = saturate(r10.yz);
  r12.zw = r10.zw * r10.zz;
  r6.z = 1.000000000e+000 + -abs(-r10.y);
  r6.z = max(r6.z, 0.000000000e+000);
  r8.y = -r6.z * 5.000000000e-001 + r10.w;
  r6.z = r8.y * r6.z + r12.w;
  r8.y = min(r7.y, r7.x);
  r10.yz = r9.xz * r7.yx;
  r13.zw = -r8.yy * float2(5.000000e-001,5.000000e-001) + r7.yx;
  r13.zw = r13.zw * r8.yy + r10.yz;
  r14.yz = min(r9.xz, r11.yw);
  r16.yw = -r14.yz * float2(5.000000e-001,5.000000e-001) + r9.xz;
  r10.yz = r16.yw * r14.yz + r10.yz;
  r11.xyzw = r7.xxyy + r11.xyzw;
  r11.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r11.xyzw);
  r11.xyzw = r11.xyzw * r11.xyzw;
  r11.xyzw = -r11.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r8.y = r12.z * 5.000000000e-001 + r13.z;
  r8.y = max(r8.y, 9.999999825e-014);
  r10.w = r13.z / r8.y;
  r10.w = 1.500000000e+000 + r10.w;
  r14.x = r13.x + -r10.w;
  r14.xy = g_Shadows.m_ShadowMapSize.xy * r14.xw;
  r10.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r14.xy, r8.w).x;
  r6.y = r10.w * r8.y + r6.y;
  r8.y = r12.z * 5.000000000e-001 + r6.z;
  r8.y = max(r8.y, 9.999999825e-014);
  r6.z = r6.z / r8.y;
  r6.z = 5.000000000e-001 + r6.z;
  r16.x = r13.x + -r6.z;
  r12.zw = g_Shadows.m_ShadowMapSize.xy * r16.xz;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r8.w).x;
  r6.y = r6.z * r8.y + r6.y;
  r6.z = r11.x + r10.y;
  r6.z = max(r6.z, 9.999999825e-014);
  r8.y = r11.x / r6.z;
  r8.y = 5.000000000e-001 + r8.y;
  r8.x = r13.x + -r8.y;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r8.xz;
  r8.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r6.y = r8.x * r6.z + r6.y;
  r8.xy = float2(1.000000e+000,1.000000e+000) / r11.yw;
  r6.z = r12.y + r8.x;
  r17.x = 1.500000000e+000 + r6.z;
  r8.xz = g_Shadows.m_ShadowMapSize.xy * r17.wx;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xz, r8.w).x;
  r6.y = r6.z * r11.y + r6.y;
  r8.xz = r7.xz + -r7.yy;
  r10.yw = saturate(r8.xz);
  r11.xy = r10.yw * r10.yy;
  r6.z = 1.000000000e+000 + -abs(-r8.x);
  r6.z = max(r6.z, 0.000000000e+000);
  r7.z = -r6.z * 5.000000000e-001 + r10.w;
  r6.z = r7.z * r6.z + r11.y;
  r7.z = r11.x * 5.000000000e-001 + r10.z;
  r7.z = max(r7.z, 9.999999825e-014);
  r8.x = r10.z / r7.z;
  r8.x = r12.x + r8.x;
  r15.y = 1.500000000e+000 + r8.x;
  r8.xz = g_Shadows.m_ShadowMapSize.xy * r15.yw;
  r8.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xz, r8.w).x;
  r6.y = r8.x * r7.z + r6.y;
  r7.z = r11.x * 5.000000000e-001 + r6.z;
  r7.z = max(r7.z, 9.999999825e-014);
  r6.z = r6.z / r7.z;
  r6.z = r12.x + r6.z;
  r14.z = 5.000000000e-001 + r6.z;
  r14.yw = float2(6.500000e+000,5.500000e+000) + r12.yy;
  r8.xz = g_Shadows.m_ShadowMapSize.xy * r14.zy;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xz, r8.w).x;
  r6.y = r6.z * r7.z + r6.y;
  r6.z = r13.w + r11.z;
  r6.z = max(r6.z, 9.999999825e-014);
  r7.z = r11.z / r6.z;
  r7.z = r12.x + r7.z;
  r14.x = 5.000000000e-001 + r7.z;
  r8.xz = g_Shadows.m_ShadowMapSize.xy * r14.xw;
  r7.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xz, r8.w).x;
  r6.y = r7.z * r6.z + r6.y;
  r6.z = 1.500000000e+000 + r8.y;
  r17.z = r13.y + -r6.z;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r17.yz;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r6.y = r6.z * r11.w + r6.y;
  r8.xy = r9.xy + -r7.yy;
  r8.yz = saturate(r8.xy);
  r10.yz = r8.yz * r8.yy;
  r6.z = 1.000000000e+000 + -abs(-r8.x);
  r6.z = max(r6.z, 0.000000000e+000);
  r7.z = -r6.z * 5.000000000e-001 + r8.z;
  r6.z = r7.z * r6.z + r10.z;
  r8.xy = min(r7.xy, r9.zx);
  r10.zw = -r8.xy * float2(5.000000e-001,5.000000e-001) + r9.zx;
  r8.xy = r10.zw * r8.xy;
  r8.xy = r9.zz * r9.xx + r8.xy;
  r7.x = r7.x + r7.y;
  r7.x = saturate(-1.000000000e+000 + r7.x);
  r7.x = r7.x * r7.x;
  r7.xy = -r7.xx * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r7.z = r10.y * 5.000000000e-001 + r8.x;
  r7.z = max(r7.z, 9.999999825e-014);
  r8.x = r8.x / r7.z;
  r8.x = 1.500000000e+000 + r8.x;
  r15.x = r13.x + -r8.x;
  r8.xz = g_Shadows.m_ShadowMapSize.xy * r15.xw;
  r8.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xz, r8.w).x;
  r6.y = r8.x * r7.z + r6.y;
  r7.z = r10.y * 5.000000000e-001 + r6.z;
  r7.z = max(r7.z, 9.999999825e-014);
  r6.z = r6.z / r7.z;
  r6.z = 5.000000000e-001 + r6.z;
  r14.x = r13.x + -r6.z;
  r8.xz = g_Shadows.m_ShadowMapSize.xy * r14.xy;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xz, r8.w).x;
  r6.y = r6.z * r7.z + r6.y;
  r6.z = r8.y + r7.x;
  r6.z = max(r6.z, 9.999999825e-014);
  r7.x = r7.x / r6.z;
  r7.x = 5.000000000e-001 + r7.x;
  r14.z = r13.x + -r7.x;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r14.zw;
  r7.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r8.w).x;
  r6.y = r7.x * r6.z + r6.y;
  r6.z = 1.000000e+000 / r7.y;
  r6.z = 1.500000000e+000 + r6.z;
  r17.z = r13.y + -r6.z;
  r7.xz = g_Shadows.m_ShadowMapSize.xy * r17.wz;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r7.xz, r8.w).x;
  r6.y = r6.z * r7.y + r6.y;
  r6.y = 2.439024299e-002 * r6.y;
  r1.w = -r9.w * r1.w + 1.000000000e+000;
  r5.w = (int)r5.w & (int)g_Shadows.m_NoiseScale.y;
  r5.w = r6.w ? g_Shadows.m_NoiseScale.z : r5.w;
  r5.w = r7.w ? g_Shadows.m_NoiseScale.w : r5.w;
  r1.w = r1.w * r5.w + 1.000000000e+000;
  r5.w = g_Shadows.m_ShadowContrast.x * r1.w;
  r1.w = g_Shadows.m_ShadowContrast.x * r1.w + -1.000000000e+000;
  r1.w = 5.000000000e-001 * r1.w;
  r1.w = saturate(r6.y * r5.w + -r1.w);
  r1.w = r1.w + -r6.x;
  r6.x = r10.x * r1.w + r6.x;
  }
  r6.yzw = -g_EyePosition.xyz + r1.xyz;
  r1.w = dot(r6.yzw, r6.yzw);
  r1.w = saturate(r1.w * g_Shadows.m_FadeParams.x + g_Shadows.m_FadeParams.y);
  r1.w = saturate(r6.x + r1.w);
  r6.xyz = g_AmbientCubeTexture.SampleLevel(g_AmbientCubeTexture_s, r2.xyz, 0.000000000e+000).xyz;
  r7.xy = r1.xy * g_WorldLightmapUVParameters.zw + float2(5.000000e-001,5.000000e-001);
  r8.xyzw = g_WorldLightMapSampler.SampleLevel(g_WorldLightMapSampler_s, r7.xy, 0.000000000e+000).xyzw;
  r7.xyz = g_WorldLightmapColorSampler.SampleLevel(g_WorldLightmapColorSampler_s, r7.xy, 0.000000000e+000).xyz;
  r7.xyz = g_WorldLightmapColor.xxx * r7.xyz;
  r8.xy = r8.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r9.xy = g_WorldLightmapColor.yy * r8.xy;
  r8.z = r8.z * g_WorldLightmapParameters.w + g_WorldLightmapParameters.y;
  r8.xy = float2(0.000000e+000,0.000000e+000);
  r9.z = -r1.z;
  r8.xyz = r9.xyz + r8.xyz;
  r5.w = dot(r8.xyz, r8.xyz);
  r5.w = rsqrt(r5.w);
  r9.xyz = r8.xyz * r5.www;
  r5.w = saturate(dot(r2.xyz, r9.xyz));
  r9.xyz = r4.xyz * r4.www + r9.xyz;
  r6.w = dot(r9.xyz, r9.xyz);
  r6.w = rsqrt(r6.w);
  r9.xyz = r9.xyz * r6.www;
  r6.w = saturate(dot(r2.xyz, r9.xyz));
  r6.w = log2(r6.w);
  r6.w = r6.w * r3.w;
  r6.w = exp2(r6.w);
  r6.w = r6.w * r5.w;
  r7.w = 8.000000000e+000 + r3.w;
  r6.w = r7.w * r6.w;
  r6.xyzw = float4(3.000000e+000,3.000000e+000,3.000000e+000,1.250000e-001) * r6.xyzw;
  r8.x = g_WorldLightmapParameters.z * abs(r8.z);
  r8.x = saturate(-r8.x * r8.x + r8.w);
  r7.xyz = r8.xxx * r7.xyz;
  r8.xyz = r7.xyz * r5.www;
  r7.xyz = r7.xyz * r6.www;
  r7.xyz = r7.xyz * r2.www;
  r7.xyz = r8.xyz * r3.xyz + r7.xyz;
  r0.xyz = r7.xyz + r0.xyz;
  r5.w = saturate(dot(g_DeferredDirectLight.m_Direction.xyz, r2.xyz));
  r6.w = min(r1.w, r5.w);
  r1.xyz = r2.xyz * g_WorldAOParameters.xxy + r1.xyz;
  r1.xy = r1.xy * g_WorldAOParameters.zw + float2(5.000000e-001,5.000000e-001);
  r1.x = g_WorldAOSampler.SampleLevel(g_WorldAOSampler_s, r1.xy, 0.000000000e+000).x;
  r1.x = r1.x * g_WorldAORangeParameters.z + g_WorldAORangeParameters.w;
  r1.y = g_WorldAORangeParameters.x + r1.z;
  r1.x = r1.y + -r1.x;
  r1.y = 1.000000e+000 / g_WorldAORangeParameters.x;
  r1.x = saturate(r1.x * r1.y);
  r1.x = r1.x * r1.x;
  r1.y = 2.000000030e-001 + r6.w;
  r1.y = r1.y + r1.y;
  r1.y = min(r1.y, 1.000000000e+000);
  r1.x = max(r1.y, r1.x);
  r1.x = max(r1.x, g_WorldAORangeParameters.y);
  r1.xyz = r6.xyz * r1.xxx;
  r6.xyz = saturate(r1.xyz * r3.xyz);
  r0.xyz = r5.xyz * r1.xyz + r0.xyz;
  r1.xyz = g_DeferredDirectLight.m_Color.xyz * r3.xyz;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz * r5.www + r6.xyz;
  r3.xyz = r4.xyz * r4.www + g_DeferredDirectLight.m_Direction.xyz;
  r4.x = dot(r3.xyz, r3.xyz);
  r4.x = rsqrt(r4.x);
  r3.xyz = r4.xxx * r3.xyz;
  r4.x = dot(r2.xyz, r2.xyz);
  r4.x = rsqrt(r4.x);
  r2.xyz = r4.xxx * r2.xyz;
  r2.x = saturate(dot(r2.xyz, r3.xyz));
  r2.x = log2(r2.x);
  r2.x = r3.w * r2.x;
  r2.x = exp2(r2.x);
  r2.x = r5.w * r2.x;
  r2.x = r2.x * r7.w;
  r2.x = 1.250000000e-001 * r2.x;
  r2.xyz = g_DeferredDirectLight.m_Color.xyz * r2.xxx;
  r2.xyz = r2.xyz * r1.www;
  r1.xyz = r2.xyz * r2.www + r1.xyz;
  o0.xyz = r1.xyz + r0.xyz;
  o0.w = r0.w;
  return;
}
