
cbuffer _Globals : register(b0)
{
  float4 g_ViewportScaleOffset : packoffset(c84);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_DeferredOmniLight : packoffset(c128);


  struct
  {
    float3 m_Direction;
    float3 m_Color;
  } g_DeferredDirectLight : packoffset(c130);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_DeferredSpotLight : packoffset(c132);

  float4 g_DeferredProjWorldToLight[4] : packoffset(c136);
  float4 g_DeferredProjShadowParams : packoffset(c140);
  float4 g_DeferredBackgroundColor : packoffset(c141);
  float4 g_VPOSToUVs_Resolve : packoffset(c146);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);
  float4 g_DepthParams : packoffset(c110);
  float4 g_LinearFogColor : packoffset(c16);
  float4 g_LinearFogParams : packoffset(c17);
  float4x4 g_WorldViewProj : packoffset(c0);
  float4 g_EyeXAxis : packoffset(c8);
  float4 g_EyeYAxis : packoffset(c9);
  float4 g_EyeZAxis : packoffset(c10);
  float4 g_EyeWorldPosition_Resolve : packoffset(c11);

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c64);


  struct
  {
    float4 m_UseHQFiltering;
  } g_ShadowPerfOptions : packoffset(c63);

  float4 g_WorldLightmapParameters : packoffset(c87);
  float4 g_WorldLightmapUVParameters : packoffset(c88);
  float4 g_WorldLightmapColor : packoffset(c89);
  float4 g_WorldAOParameters : packoffset(c90);
  float4 g_WorldAORangeParameters : packoffset(c91);
  float4 g_WeatherExposedParams : packoffset(c92);
  float4 g_WinterParams : packoffset(c93);
  float4 g_SnowSparklesParams : packoffset(c94);
  float4 g_DebugValue : packoffset(c147) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);

  struct
  {
    float2 m_VPOS;
    float3 m_ShadowResult;
    float3 m_WorldPosition;
    float3 m_WorldNormal;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float m_SpecularPower;
  } c : packoffset(c148);

}
SamplerState Albedo_s : register(s0);
SamplerState Normals_s : register(s1);
SamplerState DepthSurface_s : register(s2);
SamplerState LightingAccumulation_s : register(s3);
SamplerState g_ShadowNoiseSampler_s : register(s6);
SamplerState g_ProjectorCookies_s : register(s9);
SamplerState g_ProjectorShadow_s : register(s11);
Texture2D<float4> Albedo : register(t0);
Texture2D<float4> Normals : register(t1);
Texture2D<float4> DepthSurface : register(t2);
Texture2D<float4> LightingAccumulation : register(t3);
Texture2D<float4> g_ShadowNoiseSampler : register(t6);
Texture2D<float4> g_ProjectorCookies : register(t9);
Texture2D<float4> g_ProjectorShadow : register(t11);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.zw = g_ReverseProjectionParams2.xy + r0.xy;
  r0.xy = r0.xy * g_ViewportScaleOffset.xy + g_ViewportScaleOffset.zw;
  r0.zw = g_ReverseProjectionParams.xy * r0.zw;
  r1.xyzw = DepthSurface.Sample(DepthSurface_s, r0.xy).xyzw;
  r1.x = g_ReverseProjectionParams.z + r1.x;
  r1.z = g_ReverseProjectionParams.w / r1.x;
  r1.xy = r1.zz * r0.zw;
  r1.w = 1.000000000e+000;

//Stereo Shift
float4 stereoParams = StereoParams.Load(0);
r1.x +=  stereoParams.x * (-r1.z - stereoParams.y) * g_ReverseProjectionParams.x;


  r2.x = dot(r1.xyzw, g_ViewToWorld._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, g_ViewToWorld._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, g_ViewToWorld._m02_m12_m22_m32);
  r1.xyz = g_DeferredSpotLight.m_PositionFar.xyz + -r2.xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.z);
  r0.z = g_DeferredSpotLight.m_PositionFar.w + -r0.z;
  r0.z = saturate(g_DeferredSpotLight.m_ColorFade.w * r0.z);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r1.xyz, g_DeferredSpotLight.m_Direction.xyz);
  r0.w = g_DeferredSpotLight.m_ConeAngles.x + -r0.w;
  r0.w = saturate(g_DeferredSpotLight.m_ConeAngles.y * r0.w);
  r1.w = r0.z * r0.w + -1.000000047e-003;
  r0.z = r0.z * r0.w;
  r0.w = r1.w < 0.000000000e+000;
  if (r0.w != 0) discard;
  r3.xyz = g_EyePosition.xyz + -r2.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www + r1.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r4.xyzw = Normals.Sample(Normals_s, r0.xy).xyzw;
  r4.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r4.xyz;
  r4.xyz = r4.xyz + r4.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r4.xyz * r0.www;
  r0.w = saturate(dot(r5.xyz, r3.xyz));
  r0.w = log2(r0.w);
  r3.xyzw = LightingAccumulation.Sample(LightingAccumulation_s, r0.xy).xyzw;
  r5.xyzw = Albedo.Sample(Albedo_s, r0.xy).xyzw;
  r3.xyz = g_DeferredSpotLight.m_ColorFade.xyz * r5.xyz;
  r3.xyz = r3.xyz * r0.zzz;
  r0.x = 1.200000000e+001 * r3.w;
  o0.w = r3.w;
  r0.x = exp2(r0.x);
  r0.y = r0.x * r0.w;
  r0.x = 8.000000000e+000 + r0.x;
  r0.y = exp2(r0.y);
  r0.w = saturate(dot(r1.xyz, r4.xyz));
  r1.xyz = r4.xyz * g_DeferredProjShadowParams.yyy + r2.xyz;
  r0.y = r0.w * r0.y;
  r0.x = r0.y * r0.x;
  r0.x = 1.250000000e-001 * r0.x;
  r2.xyz = g_DeferredSpotLight.m_ColorFade.xyz * r0.xxx;
  r0.xyz = r2.xyz * r0.zzz;
  r2.xyzw = g_DeferredProjWorldToLight[1].xyzw * r1.yyyy;
  r2.xyzw = r1.xxxx * g_DeferredProjWorldToLight[0].xyzw + r2.xyzw;
  r1.xyzw = r1.zzzz * g_DeferredProjWorldToLight[2].xyzw + r2.xyzw;
  r1.xyzw = g_DeferredProjWorldToLight[3].xyzw + r1.xyzw;
  r2.xy = r1.xy / r1.ww;
  r1.xyz = saturate(r1.xyz / r1.www);
  r2.xyzw = g_ProjectorCookies.Sample(g_ProjectorCookies_s, r2.xy).xyzw;
  r1.z = saturate(g_DeferredProjShadowParams.z + r1.z);
  r1.w = g_Shadows.m_ShadowMapSize.w / g_Shadows.m_ShadowMapSize.z;
  r1.w = round(r1.w);
  r1.x = r1.x / r1.w;
  r4.y = 1.000000000e+000 + -r1.y;
  r4.x = g_DeferredProjShadowParams.x + r1.x;
  r1.xy = g_Shadows.m_ShadowMapSize.zw * float2(5.000000e-001,5.000000e-001) + r4.xy;
  r4.xy = float2(5.000000e-001,5.000000e-001) + v0.xy;
  r4.xy = float2(1.562500e-002,1.562500e-002) * r4.xy;
  r5.xyzw = g_ShadowNoiseSampler.Sample(g_ShadowNoiseSampler_s, r4.xy).xyzw;
  r4.xy = float2(-5.000000e-001,-5.000000e-001) + r5.yx;
  r4.xy = g_Shadows.m_NoiseScale.xx * r4.xy;
  r5.xy = float2(5.417546e-001,-2.868566e-001) * r4.xx;
  r5.xy = r4.yy * float2(-1.351325e+000,-1.481807e+000) + -r5.xy;
  r5.z = dot(r4.yx, float2(5.417546e-001,-1.351325e+000));
  r5.xz = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r6.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xz, 0.000000000e+000).xyzw;
  r1.w = r6.x < r1.z;
  r1.w = r1.w ? 0.000000000e+000 : 1.000000000e+000;
  r5.w = dot(r4.xy, float2(-1.481807e+000,-2.868566e-001));
  r5.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xy, 0.000000000e+000).xyzw;
  r2.w = r5.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.xy = float2(1.044665e+000,-3.782768e-001) * r4.xx;
  r5.xy = r4.yy * float2(8.528456e-002,-5.675442e-001) + -r5.xy;
  r5.z = dot(r4.xy, float2(8.528456e-002,1.044665e+000));
  r5.xz = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r6.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xz, 0.000000000e+000).xyzw;
  r2.w = r6.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.w = dot(r4.xy, float2(-5.675442e-001,-3.782768e-001));
  r5.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xy, 0.000000000e+000).xyzw;
  r2.w = r5.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.xy = float2(4.234782e-001,1.544053e+000) * r4.xx;
  r5.xy = r4.yy * float2(9.909384e-001,-1.166829e+000) + -r5.xy;
  r5.z = dot(r4.yx, float2(4.234782e-001,9.909384e-001));
  r5.xz = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r6.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xz, 0.000000000e+000).xyzw;
  r2.w = r6.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.w = dot(r4.yx, float2(1.544053e+000,-1.166829e+000));
  r5.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xy, 0.000000000e+000).xyzw;
  r2.w = r5.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.xy = float2(1.927134e+000,1.555011e+000) * r4.xx;
  r5.xy = r4.yy * float2(-3.878524e-002,9.570452e-001) + -r5.xy;
  r5.z = dot(r4.yx, float2(1.927134e+000,-3.878524e-002));
  r5.xz = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r6.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xz, 0.000000000e+000).xyzw;
  r2.w = r6.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.w = dot(r4.yx, float2(1.555011e+000,9.570452e-001));
  r5.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xy, 0.000000000e+000).xyzw;
  r2.w = r5.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.xy = float2(-1.772642e+000,-9.153258e-001) * r4.xx;
  r5.xy = r4.yy * float2(-3.506712e-002,8.353496e-001) + -r5.xy;
  r5.z = dot(r4.yx, float2(-1.772642e+000,-3.506712e-002));
  r5.xz = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r6.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xz, 0.000000000e+000).xyzw;
  r2.w = r6.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.w = dot(r4.yx, float2(-9.153258e-001,8.353496e-001));
  r5.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xy, 0.000000000e+000).xyzw;
  r2.w = r5.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.xy = float2(-1.392839e+000,-1.669042e-001) * r4.xx;
  r5.xy = r4.yy * float2(-9.032954e-001,2.045898e-001) + -r5.xy;
  r5.z = dot(r4.yx, float2(-1.392839e+000,-9.032954e-001));
  r5.xz = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r6.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xz, 0.000000000e+000).xyzw;
  r2.w = r6.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.w = dot(r4.yx, float2(-1.669042e-001,2.045898e-001));
  r5.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xy, 0.000000000e+000).xyzw;
  r2.w = r5.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.xy = float2(9.123722e-001,-4.192604e-002) * r4.xx;
  r5.xy = r4.yy * float2(1.637838e+000,1.650586e+000) + -r5.xy;
  r5.z = dot(r4.yx, float2(9.123722e-001,1.637838e+000));
  r5.xz = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r6.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xz, 0.000000000e+000).xyzw;
  r2.w = r6.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.w = dot(r4.yx, float2(-4.192604e-002,1.650586e+000));
  r5.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r5.xy, 0.000000000e+000).xyzw;
  r2.w = r5.x < r1.z;
  r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
  r1.w = r2.w + r1.w;
  r5.xy = float2(-9.770750e-001,-1.745379e+000) * r4.xx;
  r5.xy = r4.yy * float2(1.710768e+000,9.450100e-001) + -r5.xy;
  r5.z = dot(r4.yx, float2(-9.770750e-001,1.710768e+000));
  r5.w = dot(r4.yx, float2(-1.745379e+000,9.450100e-001));
  r4.xy = r5.yw * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r1.xy = r5.xz * g_Shadows.m_ShadowMapSize.zw + r1.xy;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r1.xy, 0.000000000e+000).xyzw;
  r1.x = r5.x < r1.z;
  r1.x = r1.x ? 0.000000000e+000 : 1.000000000e+000;
  r1.x = r1.w + r1.x;
  r5.xyzw = g_ProjectorShadow.SampleLevel(g_ProjectorShadow_s, r4.xy, 0.000000000e+000).xyzw;
  r1.y = r5.x < r1.z;
  r1.y = r1.y ? 0.000000000e+000 : 1.000000000e+000;
  r1.x = r1.x + r1.y;
  r1.x = 6.250000000e-002 * r1.x;
  r1.xyz = r2.xyz * r1.xxx;
  r0.xyz = r1.xyz * r0.xyz;
  r1.xyz = r3.xyz * r1.xyz;
  r0.xyz = r0.xyz * r4.www;
  o0.xyz = r1.xyz * r0.www + r0.xyz;
  return;
}
