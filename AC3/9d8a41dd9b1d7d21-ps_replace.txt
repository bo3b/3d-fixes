
cbuffer _Globals : register(b0)
{
  float4 g_FogColor : packoffset(c16);
  float4 g_FogParams : packoffset(c17);
  float4 g_FogWeatherParams : packoffset(c90);
  float4 g_FogSunBackColor : packoffset(c31);
  float3x3 Operator374_1_matrix : packoffset(c128);
  float3x3 Operator485_2_matrix : packoffset(c131);
  float3x3 Operator328_3_matrix : packoffset(c134);
  float3x3 Operator329_4_matrix : packoffset(c137);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c32);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c40);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float3 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c44);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c52);

  float4 g_ProjWorldToLight[8] : packoffset(c55);
  float4 g_ProjShadowParams[2] : packoffset(c119);
  float g_HasSunDX11 : packoffset(c251);
  float4 g_LayeredSkyUserColor3 : packoffset(c3);
  float g_AlphaTestValue : packoffset(c113);
  float4 g_TileOffset : packoffset(c96);
  float4 g_UnusedPredicated1 : packoffset(c97);
  float4 g_UnusedPredicated2 : packoffset(c98);
  float4 g_UnusedPredicated3 : packoffset(c99);
  float4 g_VPosToUV : packoffset(c0);
  float4 g_ReverseProjectionParams : packoffset(c100);
  float2 g_ReverseProjectionParams2 : packoffset(c101);
  float4x4 g_ViewToWorld : packoffset(c102);
  float4x4 g_WorldToView : packoffset(c106);
  float4 g_EyePosition : packoffset(c12);

  struct
  {
    float4 m_CloudUVScaleOffset;
    float4 m_CloudShadowsParams;
    float4 m_ShadowMapSize;
    float4 m_OffsetsY;
    float4 m_OffsetsX;
    float4 m_ScalesY;
    float4 m_ScalesX;
    float4 m_OffsetsZ;
    float4 m_ScalesZ;
    float4 m_OffsetsW;
    float4 m_ScalesW;
    float4 m_NoiseScale;
    float4 m_NearFar;
    float4 m_FadeParams;
    float4 m_CascadesRangesMax;
    float4 m_ShadowContrast;
    float4x4 m_WorldToLightProj;
  } g_Shadows : packoffset(c64);


  struct
  {
    float4 m_UseHQFiltering;
  } g_ShadowPerfOptions : packoffset(c63);

  float4 g_AmbientCube[6] : packoffset(c24);

  struct
  {
    float2 m_VPOS;
    float2 m_ScreenPosition;
    float3 m_WorldNormal;
    float3 m_VertexWorldNormal;
    float3 m_TangentSpaceNormal;
    float3 m_WorldPosition;
    float3 m_WorldEyeVector;
    float3 m_NormalizedWorldEyeVector;
    float4 m_UnitLightSpacePos;
    float3 m_LightSpaceNormal;
    float4 m_Albedo;
    float m_alpha;
    float m_WeatherExposed;
    float m_DistanceAttenuation;
    float4 m_LightColor;
    float3 m_IncidentLightAngle;
    float3 m_SpecularIncidentLightAngle;
    float m_SpecularInfluence;
    float m_Alpha;
    float m_SpecularPower;
    float4 m_DiffuseColor;
    float m_SpecularGlossiness;
    float m_SpecularIntensity;
    float m_SpecularAlphaOpacityScaleFactor;
    float4 m_EmissiveColor;
    float3 m_ShadowResult;
    float m_LinearDepth;
  } c : packoffset(c252);

  bool g_HasSunOther : packoffset(c271);
}
SamplerState WaveTexture_0_s : register(s0);
SamplerState Layer0Reflection_0_s : register(s1);
SamplerState g_ShadowNoiseSampler_s : register(s6);
SamplerState g_DepthSampler_s : register(s8);
SamplerState g_CloudShadowSampler_s : register(s14);
SamplerComparisonState g_ShadowSampler_s : register(s15);
Texture2D<float4> WaveTexture_0 : register(t0);
TextureCube<float4> Layer0Reflection_0 : register(t1);
Texture2D<float4> g_ShadowNoiseSampler : register(t6);
Texture2D<float4> g_DepthSampler : register(t8);
Texture2D<float4> g_CloudShadowSampler : register(t14);
Texture2D<float4> g_ShadowTexture : register(t15);

Texture2D<float4> StereoParams : register(t125);
Texture2D<float4> InjectedDepthTexture : register(t126);

void main(
  float4 injectedScreenPos : SV_Position,
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : COLOR0,
  float4 v4 : COLOR1,
  float4 v5 : TEXCOORD2,
  float4 v6 : TEXCOORD3,
  float4 v7 : TEXCOORD4,
  float4 v8 : TEXCOORD5,
  float4 v9 : TEXCOORD6,
  uint v10 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 zpos4 = InjectedDepthTexture.Load((int3) injectedScreenPos.xyz);
  float zpos = zpos4.x - 1;
  float wpos = 1.0 / zpos;
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;
  uint4 bitmask;
  r0.xy = g_VPosToUV.xy * v0.xy;
  r0.z = v5.w < 0.000000000e+000;
  if (r0.z != 0) discard;
  r1.xy = v5.xy;
  r1.z = 1.000000000e+000;
  r2.x = dot(r1.xyz, Operator328_3_matrix._m00_m10_m20);
  r2.y = dot(r1.xyz, Operator328_3_matrix._m01_m11_m21);
  r2.xyzw = WaveTexture_0.Sample(WaveTexture_0_s, r2.xy).xyzw;
  r0.zw = float2(-5.000000e-001,-5.000000e-001) + r2.xy;
  r0.zw = r0.zw + r0.zw;
  r3.x = dot(r1.yxz, Operator329_4_matrix._m00_m10_m20);
  r3.y = dot(r1.yxz, Operator329_4_matrix._m01_m11_m21);
  r2.yz = r0.zw * v4.zz + r3.xy;
  r3.xyzw = WaveTexture_0.Sample(WaveTexture_0_s, r2.yz).xyzw;
  r2.yz = float2(-5.000000e-001,-5.000000e-001) + r3.xy;
  r2.xy = r2.yz * r2.xx;
  r2.xy = r2.xy * float2(2.000000e+000,2.000000e+000) + r0.zw;
  r3.x = dot(r1.xyz, Operator374_1_matrix._m00_m10_m20);
  r3.y = dot(r1.xyz, Operator374_1_matrix._m01_m11_m21);
  r3.xyzw = WaveTexture_0.Sample(WaveTexture_0_s, r3.xy).xyzw;
  r1.w = r3.x * r3.x;
  r1.w = v4.y * r1.w;
  r2.z = 8.000000000e+000 * r1.w;
  r2.xy = r2.xy * r2.zz;
  r2.z = dot(v6.xyz, v6.xyz);
  r2.z = rsqrt(r2.z);
  r3.xyz = v6.xyz * r2.zzz;
  r2.z = dot(v7.xyz, v7.xyz);
  r2.z = rsqrt(r2.z);
  r4.xyz = v7.xyz * r2.zzz;
  r2.z = dot(v8.xyz, v8.xyz);
  r2.z = rsqrt(r2.z);
  r5.xyz = v8.xyz * r2.zzz;
  r2.yzw = r4.xyz * r2.yyy;
  r2.xyz = r2.xxx * r3.xyz + r2.yzw;
  r2.xyz = r5.xyz * float3(4.000000e+000,4.000000e+000,4.000000e+000) + r2.xyz;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r2.xyz = r2.xyz * r2.www;
  r3.xyz = g_EyePosition.xyz + -v5.xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r3.w = rsqrt(r2.w);
  r4.x = dot(r1.xyz, Operator485_2_matrix._m00_m10_m20);
  r4.y = dot(r1.xyz, Operator485_2_matrix._m01_m11_m21);
  r0.zw = r0.zw * v4.zz + r4.xy;
  r4.xyzw = WaveTexture_0.Sample(WaveTexture_0_s, r0.zw).xyzw;
  r0.xyzw = g_DepthSampler.Sample(g_DepthSampler_s, r0.xy).xyzw;
  r0.x = -v1.w + r0.x;
  r0.x = saturate(5.000000000e-001 * r0.x);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.x = r0.x * r0.x;
  r0.y = r1.w * 8.000000000e+000 + r0.x;
  r1.xyz = r4.www * r0.yyy + v3.xyz;
  r0.x = r4.w * r0.y + -r0.x;
  r0.x = 1.100000024e+000 + r0.x;
  r0.x = v3.w * r0.x;
  r4.xyz = -g_EyePosition.xzy + v5.xzy;
  r0.z = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.z);
  r4.xyz = r4.xyz * r0.www;
  r0.w = dot(r4.xzy, r2.xyz);
  r0.w = r0.w + r0.w;
  r4.xyz = r2.xzy * -r0.www + r4.xyz;
  r5.xyzw = Layer0Reflection_0.Sample(Layer0Reflection_0_s, r4.xyz).xyzw;
  r4.xyz = g_LayeredSkyUserColor3.xyz * r5.xyz;
  r0.y = -r4.w * r0.y + 1.000000000e+000;
  r5.xyz = v5.xyz;
  r5.w = 0.000000000e+000;
  r5.xyzw = g_EyePosition.xyzw + -r5.xyzw;
  r0.w = dot(r5.xyzw, r5.xyzw);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r0.w = dot(r2.xyz, r5.xyz);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = r0.w * r0.w + 1.000000015e-001;
  r0.w = min(r0.w, 1.000000000e+000);
  r0.y = r0.y * r0.w;
  r0.w = 0.000000e+000 != g_ShadowPerfOptions.m_UseHQFiltering.x;
  r5.xyz = v5.xyz;
  r5.w = 1.000000000e+000;
  r6.y = dot(r5.xyzw, g_Shadows.m_WorldToLightProj._m00_m10_m20_m30);
  r6.z = dot(r5.xyzw, g_Shadows.m_WorldToLightProj._m01_m11_m21_m31);
  r6.w = dot(r5.xyzw, g_Shadows.m_WorldToLightProj._m02_m12_m22_m32);
  r5.xyz = r6.yzw * g_Shadows.m_ScalesX.xyz + g_Shadows.m_OffsetsX.xyz;
  r7.xyz = r6.yzw * g_Shadows.m_ScalesY.xyz + g_Shadows.m_OffsetsY.xyz;
  r8.xyz = r6.yzw * g_Shadows.m_ScalesZ.xyz + g_Shadows.m_OffsetsZ.xyz;
  r6.xyz = r6.yzw * g_Shadows.m_ScalesW.xyz + g_Shadows.m_OffsetsW.xyz;
  r9.x = abs(r7.x) < g_Shadows.m_CascadesRangesMax.y;
  r9.y = abs(r7.y) < g_Shadows.m_CascadesRangesMax.y;
  r1.w = r9.y ? r9.x : 0;
  r9.x = abs(r8.x) < g_Shadows.m_CascadesRangesMax.z;
  r9.y = abs(r8.y) < g_Shadows.m_CascadesRangesMax.z;
  r4.w = r9.y ? r9.x : 0;
  r9.x = abs(r6.x) < g_Shadows.m_CascadesRangesMax.w;
  r9.y = abs(r6.y) < g_Shadows.m_CascadesRangesMax.w;
  r5.w = r9.y ? r9.x : 0;
  r9.x = r1.w ? r7.x : r5.x;
  r9.y = r1.w ? r7.y : r5.y;
  r9.z = r1.w ? r7.z : r5.z;
  r9.x = r4.w ? r8.x : r9.x;
  r9.y = r4.w ? r8.y : r9.y;
  r9.z = r4.w ? r8.z : r9.z;
  r6.x = r5.w ? r6.x : r9.x;
  r6.y = r5.w ? r6.y : r9.y;
  r6.z = r5.w ? r6.z : r9.z;
  r6.w = r1.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r6.w = r4.w ? g_Shadows.m_OffsetsZ.w : r6.w;
  r6.w = r5.w ? g_Shadows.m_OffsetsW.w : r6.w;
  if (r0.w != 0) {
  r9.x = abs(r5.x) < g_Shadows.m_CascadesRangesMax.x;
  r9.y = abs(r5.y) < g_Shadows.m_CascadesRangesMax.x;
  r7.w = r9.y ? r9.x : 0;
  r9.xyzw = g_Shadows.m_CascadesRangesMax.yyzz + -abs(-r6.xyxy);
  r9.x = r1.w ? r9.x : 10;
  r9.y = r1.w ? r9.y : 10;
  r9.x = r4.w ? r9.z : r9.x;
  r9.y = r4.w ? r9.w : r9.y;
  r9.zw = g_Shadows.m_CascadesRangesMax.ww + -abs(-r6.xy);
  r9.x = r5.w ? r9.z : r9.x;
  r9.y = r5.w ? r9.w : r9.y;
  r9.xy = saturate(-r9.xy * float2(1.000000e+001,1.000000e+001) + float2(1.000000e+000,1.000000e+000));
  r8.w = max(r9.y, r9.x);
  r7.w = (int)r1.w & (int)r7.w;
  r7.w = (int)r7.w & 0x3f800000;
  r9.x = (int)r1.w & 0x3f800000;
  r7.w = r4.w ? r9.x : r7.w;
  r9.x = (int)r4.w & 0x3f800000;
  r7.w = r5.w ? r9.x : r7.w;
  r7.w = r8.w * r7.w;
  } else {
  r7.w = 0.000000000e+000;
  }
  r9.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r6.xyz;
  r9.x = r9.y * g_Shadows.m_ScalesX.w + r6.w;
  if (r0.w != 0) {
  r6.xyzw = r9.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r6.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r6.xyzw;
  r10.x = floor(r6.w);
  r10.y = floor(r6.y);
  r6.xyzw = -r10.yyxx + r6.xyzw;
  r11.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r10.xyxy;
  r11.zw = g_Shadows.m_ShadowMapSize.xy * r11.zw;
  r0.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.zw, r9.w).x;
  r12.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r10.xyxy;
  r12.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r12.xyzw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r9.w).x;
  r8.w = 4.000000000e+000 * r8.w;
  r0.w = r0.w * 4.000000000e+000 + r8.w;
  r10.zw = float2(4.000000e+000,4.000000e+000) + r10.xy;
  r11.zw = g_Shadows.m_ShadowMapSize.xy * r10.zw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.zw, r9.w).x;
  r0.w = r8.w * 4.000000000e+000 + r0.w;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r0.w = r8.w * 4.000000000e+000 + r0.w;
  r12.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r10.xyxw;
  r12.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r12.xyzw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.xy, r9.w).x;
  r0.w = r8.w * 4.000000000e+000 + r0.w;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r12.zw, r9.w).x;
  r12.xyz = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r6.wyw;
  r8.w = dot(r8.ww, r12.xx);
  r0.w = r8.w + r0.w;
  r10.zw = float2(7.500000e+000,0.000000e+000) + r10.xw;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r10.zw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r9.w).x;
  r8.w = dot(r8.ww, r6.ww);
  r0.w = r8.w + r0.w;
  r13.zw = float2(4.000000e+000,5.000000e-001) + r10.xy;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r9.w).x;
  r8.w = r8.w + r8.w;
  r0.w = r8.w * r12.y + r0.w;
  r14.zw = float2(4.000000e+000,7.500000e+000) + r10.xy;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r14.zw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r9.w).x;
  r8.w = dot(r8.ww, r6.yy);
  r0.w = r8.w + r0.w;
  r10.zw = r12.xz + -r6.yy;
  r11.zw = saturate(r10.zw);
  r15.xy = r11.zw * r11.zz;
  r8.w = 1.000000000e+000 + -abs(-r10.z);
  r8.w = max(r8.w, 0.000000000e+000);
  r9.y = -r8.w * 5.000000000e-001 + r11.w;
  r8.w = r9.y * r8.w + r15.y;
  r10.zw = min(r6.wy, r12.yx);
  r11.zw = -r10.zw * float2(5.000000e-001,5.000000e-001) + r12.yx;
  r10.zw = r11.zw * r10.zw;
  r10.zw = r12.yy * r12.xx + r10.zw;
  r9.y = r6.w + r6.y;
  r9.y = saturate(-1.000000000e+000 + r9.y);
  r9.y = r9.y * r9.y;
  r11.zw = -r9.yy * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r9.y = r15.x * 5.000000000e-001 + r10.z;
  r9.y = max(r9.y, 9.999999825e-014);
  r10.z = r10.z / r9.y;
  r10.z = r10.x + r10.z;
  r13.y = 1.500000000e+000 + r10.z;
  r13.yz = g_Shadows.m_ShadowMapSize.xy * r13.yw;
  r10.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.yz, r9.w).x;
  r0.w = r10.z * r9.y + r0.w;
  r9.y = r15.x * 5.000000000e-001 + r8.w;
  r9.y = max(r9.y, 9.999999825e-014);
  r8.w = r8.w / r9.y;
  r8.w = r10.x + r8.w;
  r15.y = 5.000000000e-001 + r8.w;
  r16.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r10.yxyx;
  r15.z = r16.x;
  r13.yz = g_Shadows.m_ShadowMapSize.xy * r15.yz;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.yz, r9.w).x;
  r0.w = r8.w * r9.y + r0.w;
  r8.w = r11.z + r10.w;
  r8.w = max(r8.w, 9.999999825e-014);
  r9.y = r11.z / r8.w;
  r9.y = r10.x + r9.y;
  r17.y = 5.000000000e-001 + r9.y;
  r17.z = r16.z;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r17.yz;
  r9.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r9.w).x;
  r0.w = r9.y * r8.w + r0.w;
  r8.w = 1.000000e+000 / r11.w;
  r8.w = r10.y + r8.w;
  r16.x = 1.500000000e+000 + r8.w;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r16.yx;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r9.w).x;
  r0.w = r8.w * r11.w + r0.w;
  r18.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r12.xxy;
  r10.zw = r18.xy + -r6.yy;
  r11.zw = saturate(r10.zw);
  r13.yz = r11.zw * r11.zz;
  r8.w = 1.000000000e+000 + -abs(-r10.z);
  r8.w = max(r8.w, 0.000000000e+000);
  r9.y = -r8.w * 5.000000000e-001 + r11.w;
  r8.w = r9.y * r8.w + r13.z;
  r9.y = min(r12.y, r12.x);
  r10.zw = r18.xz * r12.yx;
  r11.zw = -r9.yy * float2(5.000000e-001,5.000000e-001) + r12.yx;
  r11.zw = r11.zw * r9.yy + r10.zw;
  r15.yw = min(r6.yw, r18.xz);
  r17.yw = -r15.yw * float2(5.000000e-001,5.000000e-001) + r18.xz;
  r10.zw = r17.yw * r15.yw + r10.zw;
  r6.xyzw = r12.xxyy + r6.xyzw;
  r6.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r6.xyzw);
  r6.xyzw = r6.xyzw * r6.xyzw;
  r6.xyzw = -r6.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r9.y = r13.y * 5.000000000e-001 + r11.z;
  r9.y = max(r9.y, 9.999999825e-014);
  r11.z = r11.z / r9.y;
  r11.z = 1.500000000e+000 + r11.z;
  r13.x = r11.x + -r11.z;
  r13.xz = g_Shadows.m_ShadowMapSize.xy * r13.xw;
  r11.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xz, r9.w).x;
  r0.w = r11.z * r9.y + r0.w;
  r9.y = r13.y * 5.000000000e-001 + r8.w;
  r9.y = max(r9.y, 9.999999825e-014);
  r8.w = r8.w / r9.y;
  r8.w = 5.000000000e-001 + r8.w;
  r15.x = r11.x + -r8.w;
  r13.xy = g_Shadows.m_ShadowMapSize.xy * r15.xz;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r0.w = r8.w * r9.y + r0.w;
  r8.w = r10.z + r6.x;
  r8.w = max(r8.w, 9.999999825e-014);
  r6.x = r6.x / r8.w;
  r6.x = 5.000000000e-001 + r6.x;
  r17.x = r11.x + -r6.x;
  r13.xy = g_Shadows.m_ShadowMapSize.xy * r17.xz;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xy, r9.w).x;
  r0.w = r6.x * r8.w + r0.w;
  r13.xy = float2(1.000000e+000,1.000000e+000) / r6.yw;
  r6.x = r13.x + r10.y;
  r16.x = 1.500000000e+000 + r6.x;
  r13.xz = g_Shadows.m_ShadowMapSize.xy * r16.wx;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r13.xz, r9.w).x;
  r0.w = r6.x * r6.y + r0.w;
  r6.xy = r12.xz + -r12.yy;
  r12.zw = saturate(r6.xy);
  r13.xz = r12.zw * r12.zz;
  r6.x = 1.000000000e+000 + -abs(-r6.x);
  r6.x = max(r6.x, 0.000000000e+000);
  r6.y = -r6.x * 5.000000000e-001 + r12.w;
  r6.x = r6.y * r6.x + r13.z;
  r6.y = r13.x * 5.000000000e-001 + r10.w;
  r6.y = max(r6.y, 9.999999825e-014);
  r8.w = r10.w / r6.y;
  r8.w = r10.x + r8.w;
  r14.y = 1.500000000e+000 + r8.w;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r14.yw;
  r8.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r9.w).x;
  r0.w = r8.w * r6.y + r0.w;
  r6.y = r13.x * 5.000000000e-001 + r6.x;
  r6.y = max(r6.y, 9.999999825e-014);
  r6.x = r6.x / r6.y;
  r6.x = r10.x + r6.x;
  r15.z = 5.000000000e-001 + r6.x;
  r15.yw = float2(6.500000e+000,5.500000e+000) + r10.yy;
  r10.yz = g_Shadows.m_ShadowMapSize.xy * r15.zy;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.yz, r9.w).x;
  r0.w = r6.x * r6.y + r0.w;
  r6.x = r11.w + r6.z;
  r6.x = max(r6.x, 9.999999825e-014);
  r6.y = r6.z / r6.x;
  r6.y = r10.x + r6.y;
  r15.x = 5.000000000e-001 + r6.y;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r15.xw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r9.w).x;
  r0.w = r6.y * r6.x + r0.w;
  r6.x = 1.500000000e+000 + r13.y;
  r16.z = r11.y + -r6.x;
  r6.xy = g_Shadows.m_ShadowMapSize.xy * r16.yz;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r9.w).x;
  r0.w = r6.x * r6.w + r0.w;
  r6.xy = r18.xy + -r12.yy;
  r6.yz = saturate(r6.xy);
  r6.yw = r6.yz * r6.yy;
  r6.x = 1.000000000e+000 + -abs(-r6.x);
  r6.x = max(r6.x, 0.000000000e+000);
  r6.z = -r6.x * 5.000000000e-001 + r6.z;
  r6.x = r6.z * r6.x + r6.w;
  r6.zw = min(r12.xy, r18.zx);
  r10.xy = -r6.zw * float2(5.000000e-001,5.000000e-001) + r18.zx;
  r6.zw = r10.xy * r6.zw;
  r6.zw = r18.zz * r18.xx + r6.zw;
  r8.w = r12.x + r12.y;
  r8.w = saturate(-1.000000000e+000 + r8.w);
  r8.w = r8.w * r8.w;
  r10.xy = -r8.ww * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r8.w = r6.y * 5.000000000e-001 + r6.z;
  r8.w = max(r8.w, 9.999999825e-014);
  r6.z = r6.z / r8.w;
  r6.z = 1.500000000e+000 + r6.z;
  r14.x = r11.x + -r6.z;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r14.xw;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r9.w).x;
  r0.w = r6.z * r8.w + r0.w;
  r6.y = r6.y * 5.000000000e-001 + r6.x;
  r6.y = max(r6.y, 9.999999825e-014);
  r6.x = r6.x / r6.y;
  r6.x = 5.000000000e-001 + r6.x;
  r15.x = r11.x + -r6.x;
  r6.xz = g_Shadows.m_ShadowMapSize.xy * r15.xy;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xz, r9.w).x;
  r0.w = r6.x * r6.y + r0.w;
  r6.x = r10.x + r6.w;
  r6.x = max(r6.x, 9.999999825e-014);
  r6.y = r10.x / r6.x;
  r6.y = 5.000000000e-001 + r6.y;
  r15.z = r11.x + -r6.y;
  r6.yz = g_Shadows.m_ShadowMapSize.xy * r15.zw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yz, r9.w).x;
  r0.w = r6.y * r6.x + r0.w;
  r6.x = 1.000000e+000 / r10.y;
  r6.x = 1.500000000e+000 + r6.x;
  r16.z = r11.y + -r6.x;
  r6.xy = g_Shadows.m_ShadowMapSize.xy * r16.wz;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r9.w).x;
  r0.w = r6.x * r10.y + r0.w;
  r0.w = g_Shadows.m_ShadowContrast.x * r0.w;
  r6.x = g_Shadows.m_ShadowContrast.x + -1.000000000e+000;
  r6.x = 5.000000000e-001 * r6.x;
  r0.w = saturate(r0.w * 2.439024299e-002 + -r6.x);
  } else {
  r6.xy = float2(1.562500e-002,1.562500e-002) * v0.xy;
  r6.xyzw = g_ShadowNoiseSampler.Sample(g_ShadowNoiseSampler_s, r6.xy).xyzw;
  r6.xy = float2(-5.000000e-001,-5.000000e-001) + r6.yx;
  r6.xy = g_Shadows.m_NoiseScale.xx * r6.xy;
  r6.zw = float2(-1.240012e-001,3.890280e-001) * r6.xx;
  r10.xy = r6.yy * float2(1.299115e+000,-5.041982e-001) + -r6.zw;
  r10.z = dot(r6.yx, float2(-1.240012e-001,1.299115e+000));
  r6.zw = r10.xz * g_Shadows.m_ShadowMapSize.xy + r9.xz;
  r6.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.zw, r9.w).x;
  r10.w = dot(r6.xy, float2(-5.041982e-001,3.890280e-001));
  r10.xy = r10.yw * g_Shadows.m_ShadowMapSize.xy + r9.xz;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xy, r9.w).x;
  r6.z = r6.z + r6.w;
  r10.xy = float2(-1.205221e+000,1.975933e+000) * r6.xx;
  r10.xy = r6.yy * float2(-3.350320e-001,1.601254e-001) + -r10.xy;
  r10.z = dot(r6.yx, float2(-1.205221e+000,-3.350320e-001));
  r10.xz = r10.xz * g_Shadows.m_ShadowMapSize.xy + r9.xz;
  r6.w = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.xz, r9.w).x;
  r6.z = r6.z + r6.w;
  r10.w = dot(r6.yx, float2(1.975933e+000,1.601254e-001));
  r6.xy = r10.yw * g_Shadows.m_ShadowMapSize.xy + r9.xz;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r9.w).x;
  r6.x = r6.z + r6.x;
  r0.w = 2.500000000e-001 * r6.x;
  }
  r6.x = 0.000000000e+000 < r7.w;
  if (r6.x != 0) {
  r5.x = r4.w ? r7.x : r5.x;
  r5.y = r4.w ? r7.y : r5.y;
  r5.z = r4.w ? r7.z : r5.z;
  r5.x = r5.w ? r8.x : r5.x;
  r5.y = r5.w ? r8.y : r5.y;
  r5.z = r5.w ? r8.z : r5.z;
  r6.x = r4.w ? g_Shadows.m_OffsetsY.w : g_Shadows.m_OffsetsX.w;
  r6.x = r5.w ? g_Shadows.m_OffsetsZ.w : r6.x;
  r8.yzw = float3(5.000000e-001,5.000000e-001,5.000000e-001) + r5.xyz;
  r8.x = r8.y * g_Shadows.m_ScalesX.w + r6.x;
  r6.xyzw = r8.zzxx / g_Shadows.m_ShadowMapSize.yyxx;
  r6.xyzw = float4(-3.500000e+000,-3.500000e+000,-3.500000e+000,-3.500000e+000) + r6.xyzw;
  r9.x = floor(r6.w);
  r9.y = floor(r6.y);
  r6.xyzw = -r9.yyxx + r6.xyzw;
  r10.xyzw = float4(8.000000e+000,8.000000e+000,4.000000e+000,2.000000e+000) + r9.xyxy;
  r5.xy = g_Shadows.m_ShadowMapSize.xy * r10.zw;
  r5.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.xy, r8.w).x;
  r11.xyzw = float4(2.000000e+000,4.000000e+000,6.000000e+000,4.000000e+000) + r9.xyxy;
  r11.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r11.xyzw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r8.w).x;
  r5.y = 4.000000000e+000 * r5.y;
  r5.x = r5.x * 4.000000000e+000 + r5.y;
  r9.zw = float2(4.000000e+000,4.000000e+000) + r9.xy;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r9.zw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r8.w).x;
  r5.x = r5.y * 4.000000000e+000 + r5.x;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.zw, r8.w).x;
  r5.x = r5.y * 4.000000000e+000 + r5.x;
  r11.xyzw = float4(4.000000e+000,6.000000e+000,5.000000e-001,0.000000e+000) + r9.xyxw;
  r11.xyzw = g_Shadows.m_ShadowMapSize.xyxy * r11.xyzw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r8.w).x;
  r5.x = r5.y * 4.000000000e+000 + r5.x;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.zw, r8.w).x;
  r7.xyz = float3(1.000000e+000,1.000000e+000,2.000000e+000) + -r6.wyw;
  r5.y = dot(r5.yy, r7.xx);
  r5.x = r5.x + r5.y;
  r5.yz = float2(7.500000e+000,0.000000e+000) + r9.xw;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r5.yz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r8.w).x;
  r5.y = dot(r5.yy, r6.ww);
  r5.x = r5.x + r5.y;
  r11.zw = float2(4.000000e+000,5.000000e-001) + r9.xy;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r11.zw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r8.w).x;
  r5.y = r5.y + r5.y;
  r5.x = r5.y * r7.y + r5.x;
  r12.zw = float2(4.000000e+000,7.500000e+000) + r9.xy;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r12.zw;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r8.w).x;
  r5.y = dot(r5.yy, r6.yy);
  r5.x = r5.x + r5.y;
  r5.yz = r7.xz + -r6.yy;
  r8.xy = saturate(r5.yz);
  r8.xz = r8.xy * r8.xx;
  r5.y = 1.000000000e+000 + -abs(-r5.y);
  r5.y = max(r5.y, 0.000000000e+000);
  r5.z = -r5.y * 5.000000000e-001 + r8.y;
  r5.y = r5.z * r5.y + r8.z;
  r8.yz = min(r6.wy, r7.yx);
  r9.zw = -r8.yz * float2(5.000000e-001,5.000000e-001) + r7.yx;
  r8.yz = r9.zw * r8.yz;
  r8.yz = r7.yy * r7.xx + r8.yz;
  r5.z = r6.w + r6.y;
  r5.z = saturate(-1.000000000e+000 + r5.z);
  r5.z = r5.z * r5.z;
  r9.zw = -r5.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r5.z = r8.x * 5.000000000e-001 + r8.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r8.y = r8.y / r5.z;
  r8.y = r9.x + r8.y;
  r11.y = 1.500000000e+000 + r8.y;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r11.yw;
  r8.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r8.w).x;
  r5.x = r8.y * r5.z + r5.x;
  r5.z = r8.x * 5.000000000e-001 + r5.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r5.y = r5.y / r5.z;
  r5.y = r9.x + r5.y;
  r13.y = 5.000000000e-001 + r5.y;
  r14.xyzw = float4(1.500000e+000,2.500000e+000,2.500000e+000,5.500000e+000) + r9.yxyx;
  r13.z = r14.x;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r13.yz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r5.x = r5.y * r5.z + r5.x;
  r5.y = r9.z + r8.z;
  r5.y = max(r5.y, 9.999999825e-014);
  r5.z = r9.z / r5.y;
  r5.z = r9.x + r5.z;
  r8.y = 5.000000000e-001 + r5.z;
  r8.z = r14.z;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r8.yz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r8.w).x;
  r5.x = r5.z * r5.y + r5.x;
  r5.y = 1.000000e+000 / r9.w;
  r5.y = r9.y + r5.y;
  r14.x = 1.500000000e+000 + r5.y;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r14.yx;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r8.w).x;
  r5.x = r5.y * r9.w + r5.x;
  r15.xyz = float3(1.000000e+000,2.000000e+000,1.000000e+000) + -r7.xxy;
  r5.yz = r15.xy + -r6.yy;
  r9.zw = saturate(r5.yz);
  r10.zw = r9.zw * r9.zz;
  r5.y = 1.000000000e+000 + -abs(-r5.y);
  r5.y = max(r5.y, 0.000000000e+000);
  r5.z = -r5.y * 5.000000000e-001 + r9.w;
  r5.y = r5.z * r5.y + r10.w;
  r5.z = min(r7.y, r7.x);
  r9.zw = r15.xz * r7.yx;
  r11.yz = -r5.zz * float2(5.000000e-001,5.000000e-001) + r7.yx;
  r11.yz = r11.yz * r5.zz + r9.zw;
  r13.yw = min(r6.yw, r15.xz);
  r16.xy = -r13.yw * float2(5.000000e-001,5.000000e-001) + r15.xz;
  r9.zw = r16.xy * r13.yw + r9.zw;
  r6.xyzw = r7.xxyy + r6.xyzw;
  r6.xyzw = saturate(float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r6.xyzw);
  r6.xyzw = r6.xyzw * r6.xyzw;
  r6.xyzw = -r6.xyzw * float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + float4(1.000000e+000,2.000000e+000,1.000000e+000,2.000000e+000);
  r5.z = r10.z * 5.000000000e-001 + r11.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r8.y = r11.y / r5.z;
  r8.y = 1.500000000e+000 + r8.y;
  r11.x = r10.x + -r8.y;
  r11.xy = g_Shadows.m_ShadowMapSize.xy * r11.xw;
  r8.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r11.xy, r8.w).x;
  r5.x = r8.y * r5.z + r5.x;
  r5.z = r10.z * 5.000000000e-001 + r5.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r5.y = r5.y / r5.z;
  r5.y = 5.000000000e-001 + r5.y;
  r13.x = r10.x + -r5.y;
  r10.zw = g_Shadows.m_ShadowMapSize.xy * r13.xz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r10.zw, r8.w).x;
  r5.x = r5.y * r5.z + r5.x;
  r5.y = r9.z + r6.x;
  r5.y = max(r5.y, 9.999999825e-014);
  r5.z = r6.x / r5.y;
  r5.z = 5.000000000e-001 + r5.z;
  r8.x = r10.x + -r5.z;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r8.xz;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r5.x = r5.z * r5.y + r5.x;
  r5.yz = float2(1.000000e+000,1.000000e+000) / r6.yw;
  r5.y = r9.y + r5.y;
  r14.x = 1.500000000e+000 + r5.y;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r14.wx;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r5.x = r5.y * r6.y + r5.x;
  r6.xy = r7.xz + -r7.yy;
  r8.xy = saturate(r6.xy);
  r8.xz = r8.xy * r8.xx;
  r5.y = 1.000000000e+000 + -abs(-r6.x);
  r5.y = max(r5.y, 0.000000000e+000);
  r6.x = -r5.y * 5.000000000e-001 + r8.y;
  r5.y = r6.x * r5.y + r8.z;
  r6.x = r8.x * 5.000000000e-001 + r9.w;
  r6.x = max(r6.x, 9.999999825e-014);
  r6.y = r9.w / r6.x;
  r6.y = r9.x + r6.y;
  r12.y = 1.500000000e+000 + r6.y;
  r8.yz = g_Shadows.m_ShadowMapSize.xy * r12.yw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.yz, r8.w).x;
  r5.x = r6.y * r6.x + r5.x;
  r6.x = r8.x * 5.000000000e-001 + r5.y;
  r6.x = max(r6.x, 9.999999825e-014);
  r5.y = r5.y / r6.x;
  r5.y = r9.x + r5.y;
  r13.z = 5.000000000e-001 + r5.y;
  r13.yw = float2(6.500000e+000,5.500000e+000) + r9.yy;
  r8.xy = g_Shadows.m_ShadowMapSize.xy * r13.zy;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r8.xy, r8.w).x;
  r5.x = r5.y * r6.x + r5.x;
  r5.y = r11.z + r6.z;
  r5.y = max(r5.y, 9.999999825e-014);
  r6.x = r6.z / r5.y;
  r6.x = r9.x + r6.x;
  r13.x = 5.000000000e-001 + r6.x;
  r6.xy = g_Shadows.m_ShadowMapSize.xy * r13.xw;
  r6.x = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r8.w).x;
  r5.x = r6.x * r5.y + r5.x;
  r5.y = 1.500000000e+000 + r5.z;
  r14.z = r10.y + -r5.y;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r14.yz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r8.w).x;
  r5.x = r5.y * r6.w + r5.x;
  r5.yz = r15.xy + -r7.yy;
  r6.xy = saturate(r5.yz);
  r6.xz = r6.xy * r6.xx;
  r5.y = 1.000000000e+000 + -abs(-r5.y);
  r5.y = max(r5.y, 0.000000000e+000);
  r5.z = -r5.y * 5.000000000e-001 + r6.y;
  r5.y = r5.z * r5.y + r6.z;
  r6.yz = min(r7.xy, r15.zx);
  r8.xy = -r6.yz * float2(5.000000e-001,5.000000e-001) + r15.zx;
  r6.yz = r8.xy * r6.yz;
  r6.yz = r15.zz * r15.xx + r6.yz;
  r5.z = r7.x + r7.y;
  r5.z = saturate(-1.000000000e+000 + r5.z);
  r5.z = r5.z * r5.z;
  r7.xy = -r5.zz * float2(5.000000e-001,5.000000e-001) + float2(1.000000e+000,2.000000e+000);
  r5.z = r6.x * 5.000000000e-001 + r6.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r6.y = r6.y / r5.z;
  r6.y = 1.500000000e+000 + r6.y;
  r12.x = r10.x + -r6.y;
  r6.yw = g_Shadows.m_ShadowMapSize.xy * r12.xw;
  r6.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.yw, r8.w).x;
  r5.x = r6.y * r5.z + r5.x;
  r5.z = r6.x * 5.000000000e-001 + r5.y;
  r5.z = max(r5.z, 9.999999825e-014);
  r5.y = r5.y / r5.z;
  r5.y = 5.000000000e-001 + r5.y;
  r13.x = r10.x + -r5.y;
  r6.xy = g_Shadows.m_ShadowMapSize.xy * r13.xy;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r8.w).x;
  r5.x = r5.y * r5.z + r5.x;
  r5.y = r7.x + r6.z;
  r5.y = max(r5.y, 9.999999825e-014);
  r5.z = r7.x / r5.y;
  r5.z = 5.000000000e-001 + r5.z;
  r13.z = r10.x + -r5.z;
  r6.xy = g_Shadows.m_ShadowMapSize.xy * r13.zw;
  r5.z = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r6.xy, r8.w).x;
  r5.x = r5.z * r5.y + r5.x;
  r5.y = 1.000000e+000 / r7.y;
  r5.y = 1.500000000e+000 + r5.y;
  r14.z = r10.y + -r5.y;
  r5.yz = g_Shadows.m_ShadowMapSize.xy * r14.wz;
  r5.y = g_ShadowTexture.SampleCmpLevelZero(g_ShadowSampler_s, r5.yz, r8.w).x;
  r5.x = r5.y * r7.y + r5.x;
  r5.x = 2.439024299e-002 * r5.x;
  r5.y = 1.000000000e+000 + -r7.w;
  r1.w = (int)r1.w & (int)g_Shadows.m_NoiseScale.y;
  r1.w = r4.w ? g_Shadows.m_NoiseScale.z : r1.w;
  r1.w = r5.w ? g_Shadows.m_NoiseScale.w : r1.w;
  r1.w = r5.y * r1.w + 1.000000000e+000;
  r4.w = g_Shadows.m_ShadowContrast.x * r1.w;
  r1.w = g_Shadows.m_ShadowContrast.x * r1.w + -1.000000000e+000;
  r1.w = 5.000000000e-001 * r1.w;
  r1.w = saturate(r5.x * r4.w + -r1.w);
  r1.w = r1.w + -r0.w;
  r0.w = r7.w * r1.w + r0.w;
  }
  r0.z = saturate(r0.z * g_Shadows.m_FadeParams.x + g_Shadows.m_FadeParams.y);
  r0.z = saturate(r0.w + r0.z);
  r5.xy = v5.xy * g_Shadows.m_CloudUVScaleOffset.xy + g_Shadows.m_CloudUVScaleOffset.zw;
  r0.w = sqrt(r2.w);
  r0.w = r0.w * g_Shadows.m_CloudShadowsParams.w + g_Shadows.m_CloudShadowsParams.z;
  r5.xyzw = g_CloudShadowSampler.SampleLevel(g_CloudShadowSampler_s, r5.xy, r0.w).xyzw;
  r0.w = saturate(-g_Shadows.m_CloudShadowsParams.y + r5.x);
  r0.w = saturate(g_Shadows.m_CloudShadowsParams.x + r0.w);
  r0.z = r0.z * r0.w;
  r0.w = saturate(dot(r2.xyz, g_ShadowedDirect.m_Direction.xyz));
  r5.xyz = g_ShadowedDirect.m_Color.xyz * r0.www;
  r5.xyz = r5.xyz * r0.zzz;
  r6.xyz = r3.xyz * r3.www + g_ShadowedDirect.m_SpecularDirection.xyz;
  r0.w = dot(r6.xyz, r6.xyz);
  r0.w = rsqrt(r0.w);
  r6.xyz = r6.xyz * r0.www;
  r0.w = saturate(dot(r2.xyz, r6.xyz));
  r1.w = saturate(dot(r2.xyz, g_ShadowedDirect.m_SpecularDirection.xyz));
  r0.w = log2(r0.w);
  r0.w = 1.782887573e+003 * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r1.w * r0.w;
  r0.w = g_ShadowedDirect.m_Color.w * r0.w;
  r0.z = r0.w * r0.z;
  r0.z = 5.372662544e+000 * r0.z;
  r6.xyz = g_ShadowedDirect.m_Color.xyz * r0.zzz;
  r5.xyz = r1.xyz * r5.xyz + r6.xyz;
  r6.xyz = r5.xyz;
  r0.w = r0.z;
  r1.w = 0.000000000e+000;
  while (true) {
  r2.w = (int)r1.w >= (int)4;
  if (r2.w != 0) break;
  r2.w = 1 << (uint)r1.w;
  r7.xyz = g_OmniLights[r2.w].m_PositionFar.xyz + -v5.xyz;
  r4.w = dot(r7.xyz, r7.xyz);
  r5.w = g_OmniLights[r2.w].m_PositionFar.w + -r4.w;
  r5.w = saturate(abs(g_OmniLights[r2.w].m_ColorFade.w) * r5.w);
  r6.w = 0.000000000e+000 < r5.w;
  if (r6.w != 0) {
  r4.w = rsqrt(r4.w);
  r7.xyz = r7.xyz * r4.www;
  r4.w = g_OmniLights[r2.w].m_ColorFade.w >= 0.000000000e+000;
  r4.w = r4.w ? 0x3f800000 : 0;
  r6.w = saturate(dot(r2.xyz, r7.xyz));
  r8.xyz = g_OmniLights[r2.w].m_ColorFade.xyz * r6.www;
  r9.xyz = r5.www * r1.xyz;
  r7.xyz = r3.xyz * r3.www + r7.xyz;
  r7.w = dot(r7.xyz, r7.xyz);
  r7.w = rsqrt(r7.w);
  r7.xyz = r7.xyz * r7.www;
  r7.x = saturate(dot(r2.xyz, r7.xyz));
  r7.x = log2(r7.x);
  r7.x = 1.782887573e+003 * r7.x;
  r7.x = exp2(r7.x);
  r6.w = r7.x * r6.w;
  r4.w = r6.w * r4.w;
  r4.w = r4.w * r5.w;
  r5.w = 5.372662544e+000 * r4.w;
  r0.w = r4.w * 5.372662544e+000 + r0.w;
  r7.xyz = g_OmniLights[r2.w].m_ColorFade.xyz * r5.www;
  r7.xyz = r9.xyz * r8.xyz + r7.xyz;
  r6.xyz = r7.xyz + r6.xyz;
  }
  r1.w = (int)r1.w + 1;
  }
  r3.xyz = r2.xyz * r2.xyz;
  r5.x = r2.x >= 0;
  r5.y = r2.y >= 0;
  r5.z = r2.z >= 0;
  r5.x = r5.x ? 0 : 0;
  r5.y = r5.y ? 0 : 0;
  r5.z = r5.z ? 0 : 0;
  r2.x = 0 >= r2.x;
  r2.y = 0 >= r2.y;
  r2.z = 0 >= r2.z;
  r2.x = r2.x ? 0 : 0;
  r2.y = r2.y ? 0 : 0;
  r2.z = r2.z ? 0 : 0;
  r7.xyzw = g_AmbientCube[0].xyzw * r3.xxxx;
  r8.xyzw = g_AmbientCube[1].xyzw * r3.xxxx;
  r8.xyzw = r8.xyzw * r2.xxxx;
  r7.xyzw = r7.xyzw * r5.xxxx + r8.xyzw;
  r8.xyzw = g_AmbientCube[2].xyzw * r3.yyyy;
  r7.xyzw = r8.xyzw * r5.yyyy + r7.xyzw;
  r8.xyzw = g_AmbientCube[3].xyzw * r3.yyyy;
  r7.xyzw = r8.xyzw * r2.yyyy + r7.xyzw;
  r8.xyzw = g_AmbientCube[4].xyzw * r3.zzzz;
  r5.xyzw = r8.xyzw * r5.zzzz + r7.xyzw;
  r3.xyzw = g_AmbientCube[5].xyzw * r3.zzzz;
  r2.xyzw = r3.xyzw * r2.zzzz + r5.xyzw;
  r2.xyz = r2.xyz * r2.www;
  r1.xyz = r2.xyz * r1.xyz + r6.xyz;
  o0.xyz = r4.xyz * r0.yyy + r1.xyz;
  o0.w = r0.w * 1.250000000e-001 + r0.x;
  o1.xyz = v1.zzz / v1.www;
  o1.w = r0.x;
  return;
}