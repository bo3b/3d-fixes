
cbuffer PER_FRAME : register(b0)
{
  float3 light_hemispheric_color_top : packoffset(c0);
  float3 light_hemispheric_color_bottom : packoffset(c1);
  float3 light_hemispheric_color_xn : packoffset(c2);
  float3 light_hemispheric_color_xp : packoffset(c3);
  float3 light_hemispheric_color_zn : packoffset(c4);
  float3 light_hemispheric_color_zp : packoffset(c5);
  float4 ssao_parameters : packoffset(c6);
  float4 shadowmap_texture_size : packoffset(c7);
  float4 backbuffer_size : packoffset(c8);
}

cbuffer PER_STAGE : register(b1)
{
  float4 camera_position_viewspace : packoffset(c0);
  float3 camera_upvector : packoffset(c1);
  float4x4 inverse_view_matrix : packoffset(c2);
  float4x4 projection_matrix : packoffset(c6);
  float4 camera_clip_distances : packoffset(c10);
}

cbuffer PER_LIGHT : register(b2)
{
  float4 light_position_viewspace : packoffset(c0);
  float4x4 light_viewprojection_matrix_viewspace : packoffset(c1);
  float4 light_color_diffuse : packoffset(c5);
  float4 light_color_specular : packoffset(c6);
  float4 light_color_diffuse_back : packoffset(c7);
  float4 light_ies_parameters : packoffset(c8);
  float4 light_specular_parameters : packoffset(c9);
  float3 light_direction_viewspace : packoffset(c10);
  float3 light_direction_worldspace : packoffset(c11);
  float4 light_subsurface_scattering_parameters : packoffset(c12);
  float4 light_subsurface_scattering_color : packoffset(c13);
  float4 light_color_diffuse0 : packoffset(c14);
  float4 light_color_specular0 : packoffset(c15);
  float4 light_specular_parameters0 : packoffset(c16);
  float3 light_direction_viewspace0 : packoffset(c17);
  float4 light_color_diffuse_back0 : packoffset(c18);
  float4 light_rimlight_color : packoffset(c19);
  float4 light_rimlight_parameters : packoffset(c20);
  float4 light_parameters : packoffset(c21);
  float4 shadow_parameters : packoffset(c22);
  float4 light_projector_parameters : packoffset(c23);
  float4 light_attenuation_parameters : packoffset(c24);
  float4 light_screenspace_shadows_parameters : packoffset(c25);
  float4 genericparam_shadowmask_channelmask : packoffset(c26);
}
SamplerState sampler_point_clamp_s : register(s1);
SamplerState sampler_bilinear_wrap_mipBiasNeg2_s : register(s10);
Texture2D<float4> gbuffer0Sampler : register(t0);
Texture2D<float4> gbuffer1Sampler : register(t1);
Texture2D<float4> depthSampler : register(t2);
Texture2D<float4> shadowMaskSampler : register(t3);
Texture2D<float4> lightImageSampler : register(t4);
Buffer<float4> MaterialParametersBuffer : register(t5);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : Texcoord0,
  float4 v3 : Texcoord3,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xy = backbuffer_size.zw * v0.xy;
  r1.xyzw = gbuffer0Sampler.Sample(sampler_point_clamp_s, r0.xy).xyzw;
  r0.z = gbuffer1Sampler.Sample(sampler_point_clamp_s, r0.xy).x;
  r0.w = camera_clip_distances.y / v1.z;
  r2.xyz = v1.xyz * r0.www;
  r2.xyz = r2.xyz / camera_clip_distances.yyy;
  r0.w = depthSampler.SampleLevel(sampler_point_clamp_s, r0.xy, 0.000000000e+000).x;
  r0.w = -camera_clip_distances.z + r0.w;
  r0.w = camera_clip_distances.w / r0.w;
  
float4 stereo = StereoParams.Load(0);
float4 r25;
r25.xyz = r0.www * r2.xyz;
r25.x -= stereo.x*(-r25.z - stereo.y)/v3.x; ;
r3.xyz = r25.xyz + -camera_position_viewspace.xyz;
  
  // r3.xyz = r0.www * r2.xyz + -camera_position_viewspace.xyz;
  r2.w = dot(-r3.xyz, -r3.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = -r3.xyz * r2.www;
  r1.xy = r1.xy * float2(4.000000e+000,4.000000e+000) + float2(-2.000000e+000,-2.000000e+000);
  r3.w = dot(r1.xy, r1.xy);
  r5.zw = -r3.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r3.w = 0.000000000e+000 >= r5.z;
  r4.w = sqrt(r5.z);
  r3.w = r3.w ? 0.000000000e+000 : r4.w;
  r5.xy = r3.ww * r1.xy;
r2.xyz = -r25.xyz + light_position_viewspace.xyz;
  // r2.xyz = -r0.www * r2.xyz + light_position_viewspace.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r1.x = sqrt(r0.w);
  r1.y = 0.000000000e+000 < light_attenuation_parameters.w;
  r3.w = log2(r1.x);
  r3.w = light_attenuation_parameters.z * r3.w;
  r3.w = exp2(r3.w);
  r3.w = saturate(r3.w / light_attenuation_parameters.w);
  r3.w = 1.000000000e+000 + -r3.w;
  r4.w = -light_attenuation_parameters.y + r1.x;
  r4.w = max(r4.w, 0.000000000e+000);
  r5.z = light_attenuation_parameters.x + -light_attenuation_parameters.y;
  r4.w = r4.w / r5.z;
  r4.w = 1.000000000e+000 + -r4.w;
  r4.w = max(r4.w, 0.000000000e+000);
  r5.z = 9.999999776e-003 + light_attenuation_parameters.z;
  r4.w = log2(r4.w);
  r4.w = r5.z * r4.w;
  r4.w = exp2(r4.w);
  r4.w = min(r4.w, 1.000000000e+000);
  r6.x = r1.y ? r3.w : r4.w;
  r1.y = light_parameters.w == 2.000000;
  r7.yzw = r2.xyz / r1.xxx;
  r1.x = saturate(dot(-light_direction_viewspace.xyz, r7.yzw));
  r1.x = saturate(-light_parameters.y + r1.x);
  r2.x = light_parameters.x + -light_parameters.y;
  r1.x = r1.x / r2.x;
  r1.x = log2(r1.x);
  r1.x = light_parameters.z * r1.x;
  r1.x = exp2(r1.x);
  r7.x = r6.x * r1.x;
  r6.yzw = -light_direction_viewspace.xyz;
  r6.xyzw = r1.yyyy ? r7.xyzw : r6.xyzw;
  r1.x = min(r6.x, 1.000000000e+000);
  r2.xyz = -r3.xyz * r2.www + r6.yzw;
  r1.y = dot(r2.xyz, r2.xyz);
  r1.y = rsqrt(r1.y);
  r2.xyz = r2.xyz * r1.yyy;
  r1.y = dot(-r6.yzw, light_direction_viewspace.xyz);
  r2.w = 1.000000000e+000 + -abs(-r1.y);
  r2.w = sqrt(r2.w);
  r3.x = abs(r1.y) * -1.872929931e-002 + 7.426100224e-002;
  r3.x = r3.x * abs(r1.y) + -2.121143937e-001;
  r3.x = r3.x * abs(r1.y) + 1.570728779e+000;
  r3.y = r3.x * r2.w;
  r3.y = r3.y * -2.000000000e+000 + 3.141592741e+000;
  r1.y = r1.y < -r1.y;
  r1.y = r1.y ? r3.y : 0;
  r1.y = r3.x * r2.w + r1.y;
  r3.x = 3.183098137e-001 * r1.y;
  r3.y = 0.000000000e+000;
  r1.y = lightImageSampler.SampleLevel(sampler_bilinear_wrap_mipBiasNeg2_s, r3.xy, 0.000000000e+000).x;
  r1.y = light_ies_parameters.x * r1.y;
  r0.w = 1.000000000e+000 + r0.w;
  r0.w = r1.y / r0.w;
  r0.w = r1.x * r0.w;
  r3.xyz = shadowMaskSampler.Sample(sampler_point_clamp_s, r0.xy).yzw;
  r3.xyz = genericparam_shadowmask_channelmask.yzw * r3.xyz;
  r0.x = dot(r3.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r0.y = saturate(dot(r6.yzw, r5.xyw));
  r3.xyz = light_color_diffuse.xyz * r0.yyy;
  r0.y = dot(r5.xyw, r2.xyz);
  r0.y = max(r0.y, 0.000000000e+000);
  r1.x = max(r1.w, 9.999999776e-003);
  r1.x = light_specular_parameters.y * r1.x;
  r1.x = 2.550000000e+003 * r1.x;
  r0.y = log2(r0.y);
  r0.y = r1.x * r0.y;
  r0.y = exp2(r0.y);
  r1.x = 1.992187500e+000 * r0.z;
  r1.x = floor(r1.x);
  r1.x = r1.x == 1.000000;
  if (r1.x != 0) {
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = (uint)r0.z;
  bitmask.z = ((~(-1 << 7)) << 2) & 0xffffffff;
  r0.z = (((uint)r0.z << 2) & bitmask.z) | ((uint)0 & ~bitmask.z);
  r2.xyzw = MaterialParametersBuffer.Load(r0.zzzz).xyzw;
  r0.z = (int)r0.z + 1;
  r1.xy = MaterialParametersBuffer.Load(r0.zzzz).xy;
  r2.xyz = light_subsurface_scattering_color.xyz * r2.xyz;
  r5.xyz = r5.xyw * r1.yyy + r6.yzw;
  r0.z = saturate(dot(r4.xyz, -r5.xyz));
  r0.z = r0.z * r1.x + -r1.x;
  r0.z = exp2(r0.z);
  r0.z = r0.z * r2.w;
  r1.xyw = r0.zzz * r2.xyz;
  r3.xyz = r1.xyw * r1.zzz + r3.xyz;
  }
  r1.xyz = light_color_specular.xyz * r0.yyy;
  r2.xyz = r3.xyz * r0.www;
  r0.yzw = r1.xyz * r0.www;
  r0.x = 1.000000000e+000 + -r0.x;
  r1.xy = saturate(shadow_parameters.yz * r0.xx);
  r1.xy = float2(1.000000e+000,1.000000e+000) + -r1.xy;
  o0.xyz = r2.xyz * r1.xxx;
  o1.xyz = r1.yyy * r0.yzw;
  o0.w = 0.000000000e+000;
  o1.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20499
//
//
// Buffer Definitions: 
//
// cbuffer PER_FRAME
// {
//
//   float3 light_hemispheric_color_top;// Offset:    0 Size:    12 [unused]
//   float3 light_hemispheric_color_bottom;// Offset:   16 Size:    12 [unused]
//   float3 light_hemispheric_color_xn; // Offset:   32 Size:    12 [unused]
//   float3 light_hemispheric_color_xp; // Offset:   48 Size:    12 [unused]
//   float3 light_hemispheric_color_zn; // Offset:   64 Size:    12 [unused]
//   float3 light_hemispheric_color_zp; // Offset:   80 Size:    12 [unused]
//   float4 ssao_parameters;            // Offset:   96 Size:    16 [unused]
//   float4 shadowmap_texture_size;     // Offset:  112 Size:    16 [unused]
//   float4 backbuffer_size;            // Offset:  128 Size:    16
//
// }
//
// cbuffer PER_STAGE
// {
//
//   float4 camera_position_viewspace;  // Offset:    0 Size:    16
//   float3 camera_upvector;            // Offset:   16 Size:    12 [unused]
//   float4x4 inverse_view_matrix;      // Offset:   32 Size:    64 [unused]
//   float4x4 projection_matrix;        // Offset:   96 Size:    64 [unused]
//   float4 camera_clip_distances;      // Offset:  160 Size:    16
//
// }
//
// cbuffer PER_LIGHT
// {
//
//   float4 light_position_viewspace;   // Offset:    0 Size:    16
//   float4x4 light_viewprojection_matrix_viewspace;// Offset:   16 Size:    64 [unused]
//   float4 light_color_diffuse;        // Offset:   80 Size:    16
//   float4 light_color_specular;       // Offset:   96 Size:    16
//   float4 light_color_diffuse_back;   // Offset:  112 Size:    16 [unused]
//   float4 light_ies_parameters;       // Offset:  128 Size:    16
//   float4 light_specular_parameters;  // Offset:  144 Size:    16
//   float3 light_direction_viewspace;  // Offset:  160 Size:    12
//   float3 light_direction_worldspace; // Offset:  176 Size:    12 [unused]
//   float4 light_subsurface_scattering_parameters;// Offset:  192 Size:    16 [unused]
//   float4 light_subsurface_scattering_color;// Offset:  208 Size:    16
//   float4 light_color_diffuse0;       // Offset:  224 Size:    16 [unused]
//   float4 light_color_specular0;      // Offset:  240 Size:    16 [unused]
//   float4 light_specular_parameters0; // Offset:  256 Size:    16 [unused]
//   float3 light_direction_viewspace0; // Offset:  272 Size:    12 [unused]
//   float4 light_color_diffuse_back0;  // Offset:  288 Size:    16 [unused]
//   float4 light_rimlight_color;       // Offset:  304 Size:    16 [unused]
//   float4 light_rimlight_parameters;  // Offset:  320 Size:    16 [unused]
//   float4 light_parameters;           // Offset:  336 Size:    16
//   float4 shadow_parameters;          // Offset:  352 Size:    16
//   float4 light_projector_parameters; // Offset:  368 Size:    16 [unused]
//   float4 light_attenuation_parameters;// Offset:  384 Size:    16
//   float4 light_screenspace_shadows_parameters;// Offset:  400 Size:    16 [unused]
//   float4 genericparam_shadowmask_channelmask;// Offset:  416 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler_point_clamp               sampler      NA          NA    1        1
// sampler_bilinear_wrap_mipBiasNeg2    sampler      NA          NA   10        1
// gbuffer0Sampler                   texture  float4          2d    0        1
// gbuffer1Sampler                   texture  float4          2d    1        1
// depthSampler                      texture  float4          2d    2        1
// shadowMaskSampler                 texture  float4          2d    3        1
// lightImageSampler                 texture  float4          2d    4        1
// MaterialParametersBuffer          texture  float4         buf    5        1
// PER_FRAME                         cbuffer      NA          NA    0        1
// PER_STAGE                         cbuffer      NA          NA    1        1
// PER_LIGHT                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// Texcoord                 0   xyzw        1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_constantbuffer cb2[27], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 8
mul r0.xy, v0.xyxx, cb0[8].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t1.yzxw, s1
div r0.w, cb1[10].y, v1.z
mul r2.xyz, r0.wwww, v1.xyzx
div r2.xyz, r2.xyzx, cb1[10].yyyy
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r0.xyxx, t2.yzwx, s1, l(0.000000)
add r0.w, r0.w, -cb1[10].z
div r0.w, cb1[10].w, r0.w
mad r3.xyz, r0.wwww, r2.xyzx, -cb1[0].xyzx
dp3 r2.w, -r3.xyzx, -r3.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, -r3.xyzx
mad r1.xy, r1.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000), l(-2.000000, -2.000000, 0.000000, 0.000000)
dp2 r3.w, r1.xyxx, r1.xyxx
mad r5.zw, -r3.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
ge r3.w, l(0.000000), r5.z
sqrt r4.w, r5.z
movc r3.w, r3.w, l(0), r4.w
mul r5.xy, r1.xyxx, r3.wwww
mad r2.xyz, -r0.wwww, r2.xyzx, cb2[0].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r1.x, r0.w
lt r1.y, l(0.000000), cb2[24].w
log r3.w, r1.x
mul r3.w, r3.w, cb2[24].z
exp r3.w, r3.w
div_sat r3.w, r3.w, cb2[24].w
add r3.w, -r3.w, l(1.000000)
add r4.w, r1.x, -cb2[24].y
max r4.w, r4.w, l(0.000000)
add r5.z, -cb2[24].y, cb2[24].x
div r4.w, r4.w, r5.z
add r4.w, -r4.w, l(1.000000)
max r4.w, r4.w, l(0.000000)
add r5.z, cb2[24].z, l(0.010000)
log r4.w, r4.w
mul r4.w, r4.w, r5.z
exp r4.w, r4.w
min r4.w, r4.w, l(1.000000)
movc r6.x, r1.y, r3.w, r4.w
eq r1.y, cb2[21].w, l(2.000000)
div r7.yzw, r2.xxyz, r1.xxxx
dp3_sat r1.x, -cb2[10].xyzx, r7.yzwy
add_sat r1.x, r1.x, -cb2[21].y
add r2.x, -cb2[21].y, cb2[21].x
div r1.x, r1.x, r2.x
log r1.x, r1.x
mul r1.x, r1.x, cb2[21].z
exp r1.x, r1.x
mul r7.x, r1.x, r6.x
mov r6.yzw, -cb2[10].xxyz
movc r6.xyzw, r1.yyyy, r7.xyzw, r6.xyzw
min r1.x, r6.x, l(1.000000)
mad r2.xyz, -r3.xyzx, r2.wwww, r6.yzwy
dp3 r1.y, r2.xyzx, r2.xyzx
rsq r1.y, r1.y
mul r2.xyz, r1.yyyy, r2.xyzx
dp3 r1.y, -r6.yzwy, cb2[10].xyzx
add r2.w, -|r1.y|, l(1.000000)
sqrt r2.w, r2.w
mad r3.x, |r1.y|, l(-0.018729), l(0.074261)
mad r3.x, r3.x, |r1.y|, l(-0.212114)
mad r3.x, r3.x, |r1.y|, l(1.570729)
mul r3.y, r2.w, r3.x
mad r3.y, r3.y, l(-2.000000), l(3.141593)
lt r1.y, r1.y, -r1.y
and r1.y, r1.y, r3.y
mad r1.y, r3.x, r2.w, r1.y
mul r3.x, r1.y, l(0.318310)
mov r3.y, l(0)
sample_l_indexable(texture2d)(float,float,float,float) r1.y, r3.xyxx, t4.yxzw, s10, l(0.000000)
mul r1.y, r1.y, cb2[8].x
add r0.w, r0.w, l(1.000000)
div r0.w, r1.y, r0.w
mul r0.w, r0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyxx, t3.yzwx, s1
mul r3.xyz, r3.xyzx, cb2[26].yzwy
dp3 r0.x, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
dp3_sat r0.y, r6.yzwy, r5.xywx
mul r3.xyz, r0.yyyy, cb2[5].xyzx
dp3 r0.y, r5.xywx, r2.xyzx
max r0.y, r0.y, l(0.000000)
max r1.x, r1.w, l(0.010000)
mul r1.x, r1.x, cb2[9].y
mul r1.x, r1.x, l(2550.000000)
log r0.y, r0.y
mul r0.y, r0.y, r1.x
exp r0.y, r0.y
mul r1.x, r0.z, l(1.992188)
round_ni r1.x, r1.x
eq r1.x, r1.x, l(1.000000)
if_nz r1.x
  mul r0.z, r0.z, l(255.000000)
  ftou r0.z, r0.z
  bfi r0.z, l(7), l(2), r0.z, l(0)
  ld_indexable(buffer)(float,float,float,float) r2.xyzw, r0.zzzz, t5.xyzw
  iadd r0.z, r0.z, l(1)
  ld_indexable(buffer)(float,float,float,float) r1.xy, r0.zzzz, t5.xyzw
  mul r2.xyz, r2.xyzx, cb2[13].xyzx
  mad r5.xyz, r5.xywx, r1.yyyy, r6.yzwy
  dp3_sat r0.z, r4.xyzx, -r5.xyzx
  mad r0.z, r0.z, r1.x, -r1.x
  exp r0.z, r0.z
  mul r0.z, r2.w, r0.z
  mul r1.xyw, r2.xyxz, r0.zzzz
  mad r3.xyz, r1.xywx, r1.zzzz, r3.xyzx
endif 
mul r1.xyz, r0.yyyy, cb2[6].xyzx
mul r2.xyz, r0.wwww, r3.xyzx
mul r0.yzw, r0.wwww, r1.xxyz
add r0.x, -r0.x, l(1.000000)
mul_sat r1.xy, r0.xxxx, cb2[22].yzyy
add r1.xy, -r1.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul o0.xyz, r1.xxxx, r2.xyzx
mul o1.xyz, r0.yzwy, r1.yyyy
mov o0.w, l(0)
mov o1.w, l(0)
ret 
// Approximately 119 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
