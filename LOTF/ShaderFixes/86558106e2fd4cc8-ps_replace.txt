
cbuffer PER_FRAME : register(b0)
{
  float3 light_hemispheric_color_top : packoffset(c0);
  float3 light_hemispheric_color_bottom : packoffset(c1);
  float3 light_hemispheric_color_xn : packoffset(c2);
  float3 light_hemispheric_color_xp : packoffset(c3);
  float3 light_hemispheric_color_zn : packoffset(c4);
  float3 light_hemispheric_color_zp : packoffset(c5);
  float4 ssao_parameters : packoffset(c6);
  float4 shadowmap_texture_size : packoffset(c7);
  float4 backbuffer_size : packoffset(c8);
}

cbuffer PER_STAGE : register(b1)
{
  float4 camera_position_viewspace : packoffset(c0);
  float3 camera_upvector : packoffset(c1);
  float4x4 inverse_view_matrix : packoffset(c2);
  float4x4 projection_matrix : packoffset(c6);
  float4 camera_clip_distances : packoffset(c10);
}

cbuffer PER_LIGHT : register(b2)
{
  float4 light_position_viewspace : packoffset(c0);
  float4x4 light_viewprojection_matrix_viewspace : packoffset(c1);
  float4 light_color_diffuse : packoffset(c5);
  float4 light_color_specular : packoffset(c6);
  float4 light_color_diffuse_back : packoffset(c7);
  float4 light_ies_parameters : packoffset(c8);
  float4 light_specular_parameters : packoffset(c9);
  float3 light_direction_viewspace : packoffset(c10);
  float3 light_direction_worldspace : packoffset(c11);
  float4 light_subsurface_scattering_parameters : packoffset(c12);
  float4 light_subsurface_scattering_color : packoffset(c13);
  float4 light_color_diffuse0 : packoffset(c14);
  float4 light_color_specular0 : packoffset(c15);
  float4 light_specular_parameters0 : packoffset(c16);
  float3 light_direction_viewspace0 : packoffset(c17);
  float4 light_color_diffuse_back0 : packoffset(c18);
  float4 light_rimlight_color : packoffset(c19);
  float4 light_rimlight_parameters : packoffset(c20);
  float4 light_parameters : packoffset(c21);
  float4 shadow_parameters : packoffset(c22);
  float4 light_projector_parameters : packoffset(c23);
  float4 light_attenuation_parameters : packoffset(c24);
  float4 light_screenspace_shadows_parameters : packoffset(c25);
  float4 genericparam_shadowmask_channelmask : packoffset(c26);
}
SamplerState sampler_point_clamp_s_s : register(s1);
Texture2D<float4> gbuffer0Sampler : register(t0);
Texture2D<float4> gbuffer1Sampler : register(t1);
Texture2D<float4> depthSampler : register(t2);
Texture2D<float4> shadowMaskSampler : register(t3);
Buffer<float4> MaterialParametersBuffer : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : Texcoord0,
  float2 v2 : Texcoord1,
  float4 v3 : Texcoord3,  
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xyzw = gbuffer0Sampler.Sample(sampler_point_clamp_s_s, v2.xy).xwyz;
  r1.x = gbuffer1Sampler.Sample(sampler_point_clamp_s_s, v2.xy).x;
  r1.y = depthSampler.SampleLevel(sampler_point_clamp_s_s, v2.xy, 0.000000000e+000).x;
  r1.y = -camera_clip_distances.z + r1.y;
  r1.y = camera_clip_distances.w / r1.y;
  
float4 stereo = StereoParams.Load(0);
float4 r25;
r25.xyz = v1.xyz * r1.yyy;
r25.x -= stereo.x*(-r25.z - stereo.y)/v3.x;  // /v3.x; ;  
r1.yzw = r25.xyz;  
  // r1.yzw = v1.xyz * r1.yyy;
  r2.x = dot(-r1.yzw, -r1.yzw);
  r2.x = rsqrt(r2.x);
  r2.yzw = r2.xxx * -r1.yzw;
  r3.xy = r0.xz * float2(4.000000e+000,4.000000e+000) + float2(-2.000000e+000,-2.000000e+000);
  r0.z = dot(r3.xy, r3.xy);
  r4.zw = r0.zz * float2(-2.500000e-001,-5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r0.z = 0.000000000e+000 >= r4.z;
  r3.z = sqrt(r4.z);
  r0.z = r0.z ? 0.000000000e+000 : r3.z;
  r4.xy = r0.zz * r3.xy;
  r1.yzw = r2.xxx * -r1.yzw + -light_direction_viewspace0.xyz;
  r0.z = dot(r1.yzw, r1.yzw);
  r0.z = rsqrt(r0.z);
  r1.yzw = r1.yzw * r0.zzz;
  r0.z = saturate(dot(-light_direction_viewspace0.xyz, r4.xyw));
  r3.xyz = light_color_diffuse0.xyz * r0.zzz;
  r0.z = saturate(dot(light_direction_viewspace0.xyz, r4.xyw));
  r5.xyz = light_color_diffuse_back0.xyz * r0.zzz;
  r0.z = 1.992187500e+000 * r1.x;
  r0.z = floor(r0.z);
  r0.z = r0.z == 1.000000;
  if (r0.z != 0) {
  r0.z = 2.550000000e+002 * r1.x;
  r0.z = (uint)r0.z;
  bitmask.z = ((~(-1 << 7)) << 2) & 0xffffffff;
  r0.z = (((uint)r0.z << 2) & bitmask.z) | ((uint)0 & ~bitmask.z);
  r0.z = r0.z;
  r0.z = (int)r0.z;
  r6.xyzw = MaterialParametersBuffer.Load(r0.zzzz).xyzw;
  r0.z = (int)r0.z + 1;
  r7.xy = MaterialParametersBuffer.Load(r0.zzzz).xy;
  r6.xyz = light_subsurface_scattering_color.xyz * r6.xyz;
  r7.yzw = r4.xyw * r7.yyy + -light_direction_viewspace0.xyz;
  r0.z = saturate(dot(r2.yzw, -r7.yzw));
  r0.z = r0.z * r7.x + -r7.x;
  r0.z = exp2(r0.z);
  r0.z = r0.z * r6.w;
  r2.xyz = r0.zzz * r6.xyz;
  r3.xyz = r2.xyz * r0.www + r3.xyz;
  }
  r0.x = dot(r4.xyw, r1.yzw);
  r0.xy = max(r0.xy, float2(0.000000e+000,1.000000e-002));
  r0.y = light_specular_parameters0.y * r0.y;
  r0.y = 2.550000000e+003 * r0.y;
  r0.x = log2(r0.x);
  r0.x = r0.y * r0.x;
  r0.x = exp2(r0.x);
  r0.xyz = light_color_specular0.xyz * r0.xxx;
  r1.xyzw = shadowMaskSampler.Sample(sampler_point_clamp_s_s, v2.xy).xyzw;
  r1.yzw = -r1.xxx * r1.yzw + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r2.xyz = saturate(shadow_parameters.yyy * r1.yzw);
  r2.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r2.xyz;
  r1.yzw = saturate(shadow_parameters.zzz * r1.yzw);
  r1.yzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r1.yzw;
  o1.xyz = r1.yzw * r0.xyz;
  r0.xyz = r3.xyz * r2.xyz + r5.xyz;
  r2.x = dot(r4.xyw, inverse_view_matrix._m00_m10_m20);
  r2.y = dot(r4.xyw, inverse_view_matrix._m01_m11_m21);
  r2.z = dot(r4.xyw, inverse_view_matrix._m02_m12_m22);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.yzw = r2.xyz * r0.www;
  r2.xyz = r1.yzw * r1.yzw;
  r1.y = r1.y < 0;
  r1.z = r1.z < 0;
  r1.w = r1.w < 0;
  r3.xyz = r1.yyy ? light_hemispheric_color_xn.xyz : light_hemispheric_color_xp.xyz;
  r4.xyz = r1.zzz ? light_hemispheric_color_bottom.xyz : light_hemispheric_color_top.xyz;
  r1.yzw = r1.www ? light_hemispheric_color_zn.xyz : light_hemispheric_color_zp.xyz;
  r4.xyz = r4.xyz * r2.yyy;
  r2.xyw = r2.xxx * r3.xyz + r4.xyz;
  r1.yzw = r2.zzz * r1.yzw + r2.xyw;
  o0.xyz = r1.yzw * r1.xxx + r0.xyz;
  o0.w = 0.000000000e+000;
  o1.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20499
//
//
// Buffer Definitions: 
//
// cbuffer PER_FRAME
// {
//
//   float3 light_hemispheric_color_top;// Offset:    0 Size:    12
//   float3 light_hemispheric_color_bottom;// Offset:   16 Size:    12
//   float3 light_hemispheric_color_xn; // Offset:   32 Size:    12
//   float3 light_hemispheric_color_xp; // Offset:   48 Size:    12
//   float3 light_hemispheric_color_zn; // Offset:   64 Size:    12
//   float3 light_hemispheric_color_zp; // Offset:   80 Size:    12
//   float4 ssao_parameters;            // Offset:   96 Size:    16 [unused]
//   float4 shadowmap_texture_size;     // Offset:  112 Size:    16 [unused]
//   float4 backbuffer_size;            // Offset:  128 Size:    16 [unused]
//
// }
//
// cbuffer PER_STAGE
// {
//
//   float4 camera_position_viewspace;  // Offset:    0 Size:    16 [unused]
//   float3 camera_upvector;            // Offset:   16 Size:    12 [unused]
//   float4x4 inverse_view_matrix;      // Offset:   32 Size:    64
//   float4x4 projection_matrix;        // Offset:   96 Size:    64 [unused]
//   float4 camera_clip_distances;      // Offset:  160 Size:    16
//
// }
//
// cbuffer PER_LIGHT
// {
//
//   float4 light_position_viewspace;   // Offset:    0 Size:    16 [unused]
//   float4x4 light_viewprojection_matrix_viewspace;// Offset:   16 Size:    64 [unused]
//   float4 light_color_diffuse;        // Offset:   80 Size:    16 [unused]
//   float4 light_color_specular;       // Offset:   96 Size:    16 [unused]
//   float4 light_color_diffuse_back;   // Offset:  112 Size:    16 [unused]
//   float4 light_ies_parameters;       // Offset:  128 Size:    16 [unused]
//   float4 light_specular_parameters;  // Offset:  144 Size:    16 [unused]
//   float3 light_direction_viewspace;  // Offset:  160 Size:    12 [unused]
//   float3 light_direction_worldspace; // Offset:  176 Size:    12 [unused]
//   float4 light_subsurface_scattering_parameters;// Offset:  192 Size:    16 [unused]
//   float4 light_subsurface_scattering_color;// Offset:  208 Size:    16
//   float4 light_color_diffuse0;       // Offset:  224 Size:    16
//   float4 light_color_specular0;      // Offset:  240 Size:    16
//   float4 light_specular_parameters0; // Offset:  256 Size:    16
//   float3 light_direction_viewspace0; // Offset:  272 Size:    12
//   float4 light_color_diffuse_back0;  // Offset:  288 Size:    16
//   float4 light_rimlight_color;       // Offset:  304 Size:    16 [unused]
//   float4 light_rimlight_parameters;  // Offset:  320 Size:    16 [unused]
//   float4 light_parameters;           // Offset:  336 Size:    16 [unused]
//   float4 shadow_parameters;          // Offset:  352 Size:    16
//   float4 light_projector_parameters; // Offset:  368 Size:    16 [unused]
//   float4 light_attenuation_parameters;// Offset:  384 Size:    16 [unused]
//   float4 light_screenspace_shadows_parameters;// Offset:  400 Size:    16 [unused]
//   float4 genericparam_shadowmask_channelmask;// Offset:  416 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler_point_clamp_s             sampler      NA          NA    1        1
// gbuffer0Sampler                   texture  float4          2d    0        1
// gbuffer1Sampler                   texture  float4          2d    1        1
// depthSampler                      texture  float4          2d    2        1
// shadowMaskSampler                 texture  float4          2d    3        1
// MaterialParametersBuffer          texture  float4         buf    4        1
// PER_FRAME                         cbuffer      NA          NA    0        1
// PER_STAGE                         cbuffer      NA          NA    1        1
// PER_LIGHT                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// Texcoord                 0   xyzw        1     NONE   float   xyz 
// Texcoord                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_buffer (float,float,float,float) t4
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 8
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xwyz, s1
sample_indexable(texture2d)(float,float,float,float) r1.x, v2.xyxx, t1.xyzw, s1
sample_l_indexable(texture2d)(float,float,float,float) r1.y, v2.xyxx, t2.yxzw, s1, l(0.000000)
add r1.y, r1.y, -cb1[10].z
div r1.y, cb1[10].w, r1.y
mul r1.yzw, r1.yyyy, v1.xxyz
dp3 r2.x, -r1.yzwy, -r1.yzwy
rsq r2.x, r2.x
mul r2.yzw, -r1.yyzw, r2.xxxx
mad r3.xy, r0.xzxx, l(4.000000, 4.000000, 0.000000, 0.000000), l(-2.000000, -2.000000, 0.000000, 0.000000)
dp2 r0.z, r3.xyxx, r3.xyxx
mad r4.zw, r0.zzzz, l(0.000000, 0.000000, -0.250000, -0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
ge r0.z, l(0.000000), r4.z
sqrt r3.z, r4.z
movc r0.z, r0.z, l(0), r3.z
mul r4.xy, r3.xyxx, r0.zzzz
mad r1.yzw, r2.xxxx, -r1.yyzw, -cb2[17].xxyz
dp3 r0.z, r1.yzwy, r1.yzwy
rsq r0.z, r0.z
mul r1.yzw, r0.zzzz, r1.yyzw
dp3_sat r0.z, -cb2[17].xyzx, r4.xywx
mul r3.xyz, r0.zzzz, cb2[14].xyzx
dp3_sat r0.z, cb2[17].xyzx, r4.xywx
mul r5.xyz, r0.zzzz, cb2[18].xyzx
mul r0.z, r1.x, l(1.992188)
round_ni r0.z, r0.z
eq r0.z, r0.z, l(1.000000)
if_nz r0.z
  mul r0.z, r1.x, l(255.000000)
  ftou r0.z, r0.z
  bfi r0.z, l(7), l(2), r0.z, l(0)
  utof r0.z, r0.z
  ftoi r0.z, r0.z
  ld_indexable(buffer)(float,float,float,float) r6.xyzw, r0.zzzz, t4.xyzw
  iadd r0.z, r0.z, l(1)
  ld_indexable(buffer)(float,float,float,float) r7.xy, r0.zzzz, t4.xyzw
  mul r6.xyz, r6.xyzx, cb2[13].xyzx
  mad r7.yzw, r4.xxyw, r7.yyyy, -cb2[17].xxyz
  dp3_sat r0.z, r2.yzwy, -r7.yzwy
  mad r0.z, r0.z, r7.x, -r7.x
  exp r0.z, r0.z
  mul r0.z, r6.w, r0.z
  mul r2.xyz, r6.xyzx, r0.zzzz
  mad r3.xyz, r2.xyzx, r0.wwww, r3.xyzx
endif 
dp3 r0.x, r4.xywx, r1.yzwy
max r0.xy, r0.xyxx, l(0.000000, 0.010000, 0.000000, 0.000000)
mul r0.y, r0.y, cb2[16].y
mul r0.y, r0.y, l(2550.000000)
log r0.x, r0.x
mul r0.x, r0.x, r0.y
exp r0.x, r0.x
mul r0.xyz, r0.xxxx, cb2[15].xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t3.xyzw, s1
mad r1.yzw, -r1.xxxx, r1.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
mul_sat r2.xyz, r1.yzwy, cb2[22].yyyy
add r2.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul_sat r1.yzw, r1.yyzw, cb2[22].zzzz
add r1.yzw, -r1.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
mul o1.xyz, r0.xyzx, r1.yzwy
mad r0.xyz, r3.xyzx, r2.xyzx, r5.xyzx
dp3 r2.x, r4.xywx, cb1[2].xyzx
dp3 r2.y, r4.xywx, cb1[3].xyzx
dp3 r2.z, r4.xywx, cb1[4].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.yzw, r0.wwww, r2.xxyz
mul r2.xyz, r1.yzwy, r1.yzwy
lt r1.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r3.xyz, r1.yyyy, cb0[2].xyzx, cb0[3].xyzx
movc r4.xyz, r1.zzzz, cb0[1].xyzx, cb0[0].xyzx
movc r1.yzw, r1.wwww, cb0[4].xxyz, cb0[5].xxyz
mul r4.xyz, r2.yyyy, r4.xyzx
mad r2.xyw, r2.xxxx, r3.xyxz, r4.xyxz
mad r1.yzw, r2.zzzz, r1.yyzw, r2.xxyw
mad o0.xyz, r1.yzwy, r1.xxxx, r0.xyzx
mov o0.w, l(0)
mov o1.w, l(0)
ret 
// Approximately 79 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
