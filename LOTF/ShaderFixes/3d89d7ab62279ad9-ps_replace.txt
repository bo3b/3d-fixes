
cbuffer PER_FRAME : register(b0)
{
  float3 light_hemispheric_color_top : packoffset(c0);
  float3 light_hemispheric_color_bottom : packoffset(c1);
  float3 light_hemispheric_color_xn : packoffset(c2);
  float3 light_hemispheric_color_xp : packoffset(c3);
  float3 light_hemispheric_color_zn : packoffset(c4);
  float3 light_hemispheric_color_zp : packoffset(c5);
  float4 ssao_parameters : packoffset(c6);
  float4 shadowmap_texture_size : packoffset(c7);
  float4 backbuffer_size : packoffset(c8);
}

cbuffer PER_STAGE : register(b1)
{
  float4 camera_position_viewspace : packoffset(c0);
  float3 camera_upvector : packoffset(c1);
  float4x4 inverse_view_matrix : packoffset(c2);
  float4x4 projection_matrix : packoffset(c6);
  float4 camera_clip_distances : packoffset(c10);
}

cbuffer PER_LIGHT : register(b2)
{
  float4 light_position_viewspace : packoffset(c0);
  float4x4 light_viewprojection_matrix_viewspace : packoffset(c1);
  float4 light_color_diffuse : packoffset(c5);
  float4 light_color_specular : packoffset(c6);
  float4 light_color_diffuse_back : packoffset(c7);
  float4 light_ies_parameters : packoffset(c8);
  float4 light_specular_parameters : packoffset(c9);
  float3 light_direction_viewspace : packoffset(c10);
  float3 light_direction_worldspace : packoffset(c11);
  float4 light_subsurface_scattering_parameters : packoffset(c12);
  float4 light_subsurface_scattering_color : packoffset(c13);
  float4 light_color_diffuse0 : packoffset(c14);
  float4 light_color_specular0 : packoffset(c15);
  float4 light_specular_parameters0 : packoffset(c16);
  float3 light_direction_viewspace0 : packoffset(c17);
  float4 light_color_diffuse_back0 : packoffset(c18);
  float4 light_rimlight_color : packoffset(c19);
  float4 light_rimlight_parameters : packoffset(c20);
  float4 light_parameters : packoffset(c21);
  float4 shadow_parameters : packoffset(c22);
  float4 light_projector_parameters : packoffset(c23);
  float4 light_attenuation_parameters : packoffset(c24);
  float4 light_screenspace_shadows_parameters : packoffset(c25);
  float4 genericparam_shadowmask_channelmask : packoffset(c26);
}
SamplerState sampler_point_clamp_s : register(s1);
Texture2D<float4> gbuffer0Sampler : register(t0);
Texture2D<float4> gbuffer1Sampler : register(t1);
Texture2D<float4> depthSampler : register(t2);
Buffer<float4> MaterialParametersBuffer : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : Texcoord0,
  float4 v3 : Texcoord3,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask;
  r0.xy = backbuffer_size.zw * v0.xy;
  r1.xyzw = gbuffer0Sampler.Sample(sampler_point_clamp_s, r0.xy).xyzw;
  r0.z = gbuffer1Sampler.Sample(sampler_point_clamp_s, r0.xy).x;
  r0.w = camera_clip_distances.y / v1.z;
  r2.xyz = v1.xyz * r0.www;
  r2.xyz = r2.xyz / camera_clip_distances.yyy;
  r0.x = depthSampler.SampleLevel(sampler_point_clamp_s, r0.xy, 0.000000000e+000).x;
  r0.x = -camera_clip_distances.z + r0.x;
  r0.x = camera_clip_distances.w / r0.x;
  
float4 stereo = StereoParams.Load(0);
float4 r25;
r25.xyz = r0.xxx * r2.xyz;
r25.x -= stereo.x*(-r25.z - stereo.y)/v3.x; ;  

r3.xyz = r25.xyz;
r4.xyz = r25.xyz + -camera_position_viewspace.xyz;
  // r3.xyz = r0.xxx * r2.xyz;
  // r4.xyz = r0.xxx * r2.xyz + -camera_position_viewspace.xyz;
  r0.y = dot(-r4.xyz, -r4.xyz);
  r0.y = rsqrt(r0.y);
  r5.xyz = -r4.xyz * r0.yyy;
  r1.xy = r1.xy * float2(4.000000e+000,4.000000e+000) + float2(-2.000000e+000,-2.000000e+000);
  r0.w = dot(r1.xy, r1.xy);
  r6.zw = -r0.ww * float2(2.500000e-001,5.000000e-001) + float2(1.000000e+000,1.000000e+000);
  r0.w = 0.000000000e+000 >= r6.z;
  r2.w = sqrt(r6.z);
  r0.w = r0.w ? 0.000000000e+000 : r2.w;
  r6.xy = r1.xy * r0.ww;
r2.xyz = -r25.xyz + light_position_viewspace.xyz;
  // r2.xyz = -r0.xxx * r2.xyz + light_position_viewspace.xyz;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.x);
  r7.xyz = r2.xyz / r0.www;
  r1.x = 0.000000000e+000 < light_attenuation_parameters.w;
  r1.y = log2(r0.w);
  r1.y = light_attenuation_parameters.z * r1.y;
  r1.y = exp2(r1.y);
  r1.y = saturate(r1.y / light_attenuation_parameters.w);
  r1.y = 1.000000000e+000 + -r1.y;
  r0.w = -light_attenuation_parameters.y + r0.w;
  r0.w = max(r0.w, 0.000000000e+000);
  r2.w = light_attenuation_parameters.x + -light_attenuation_parameters.y;
  r0.w = r0.w / r2.w;
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = max(r0.w, 0.000000000e+000);
  r2.w = 9.999999776e-003 + light_attenuation_parameters.z;
  r0.w = log2(r0.w);
  r0.w = r2.w * r0.w;
  r0.w = exp2(r0.w);
  r0.w = min(r0.w, 1.000000000e+000);
  r0.w = r1.x ? r1.y : r0.w;
  r4.xyz = -r4.xyz * r0.yyy + r7.xyz;
  r0.y = dot(r4.xyz, r4.xyz);
  r0.y = rsqrt(r0.y);
  r4.xyz = r4.xyz * r0.yyy;
  r0.y = saturate(dot(r7.xyz, r6.xyw));
  r8.xyz = light_color_diffuse.xyz * r0.yyy;
  r0.y = dot(r6.xyw, r4.xyz);
  r0.y = max(r0.y, 0.000000000e+000);
  r1.x = max(r1.w, 9.999999776e-003);
  r1.x = light_specular_parameters.y * r1.x;
  r1.x = 2.550000000e+003 * r1.x;
  r0.y = log2(r0.y);
  r0.y = r1.x * r0.y;
  r0.y = exp2(r0.y);
  r1.x = 1.992187500e+000 * r0.z;
  r1.x = floor(r1.x);
  r1.x = r1.x == 1.000000;
  if (r1.x != 0) {
  r0.z = 2.550000000e+002 * r0.z;
  r0.z = (uint)r0.z;
  bitmask.z = ((~(-1 << 7)) << 2) & 0xffffffff;
  r0.z = (((uint)r0.z << 2) & bitmask.z) | ((uint)0 & ~bitmask.z);
  r4.xyzw = MaterialParametersBuffer.Load(r0.zzzz).xyzw;
  r0.z = (int)r0.z + 1;
  r1.xy = MaterialParametersBuffer.Load(r0.zzzz).xy;
  r4.xyz = light_subsurface_scattering_color.xyz * r4.xyz;
  r6.xyz = r6.xyw * r1.yyy + r7.xyz;
  r0.z = saturate(dot(r5.xyz, -r6.xyz));
  r0.z = r0.z * r1.x + -r1.x;
  r0.z = exp2(r0.z);
  r0.z = r0.z * r4.w;
  r1.xyw = r0.zzz * r4.xyz;
  r8.xyz = r1.xyw * r1.zzz + r8.xyz;
  }
  r1.xyz = light_color_specular.xyz * r0.yyy;
  r4.xyz = r8.xyz * r0.www;
  o1.xyz = r1.xyz * r0.www;
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx;
  r0.w = 1.562500000e-002 * light_screenspace_shadows_parameters.x;
  r1.w = 1.000000000e+000;
  r1.xyz = r3.xyz;
  r2.xy = float2(1.000000e+000,0.000000e+000);
  while (true) {
  r2.z = (uint)r2.y >= (uint)64;
  if (r2.z != 0) break;
  r1.xyz = r0.xyz * r0.www + r1.xyz;
  r5.x = dot(r1.xyzw, projection_matrix._m00_m10_m20_m30);
  r5.y = dot(r1.xyzw, projection_matrix._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, projection_matrix._m03_m13_m23_m33);
  r2.zw = r5.xy / r2.zz;
  r5.xy = r2.zw * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r5.z = 1.000000000e+000 + -r5.y;
  r2.z = depthSampler.SampleLevel(sampler_point_clamp_s, r5.xz, 0.000000000e+000).x;
  r2.z = -camera_clip_distances.z + r2.z;
  r2.z = camera_clip_distances.w / r2.z;
  r2.z = r2.z / camera_clip_distances.y;
  r2.w = r1.z / camera_clip_distances.y;
  r2.z = r2.z < r2.w;
  r2.w = -light_screenspace_shadows_parameters.y * 1.562500000e-002 + r2.x;
  r2.x = r2.z ? r2.w : r2.x;
  r2.y = (int)r2.y + 1;
  }
  r2.x = saturate(r2.x);
  o0.xyz = r4.xyz * r2.xxx;
  o0.w = 0.000000000e+000;
  o1.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20499
//
//
// Buffer Definitions: 
//
// cbuffer PER_FRAME
// {
//
//   float3 light_hemispheric_color_top;// Offset:    0 Size:    12 [unused]
//   float3 light_hemispheric_color_bottom;// Offset:   16 Size:    12 [unused]
//   float3 light_hemispheric_color_xn; // Offset:   32 Size:    12 [unused]
//   float3 light_hemispheric_color_xp; // Offset:   48 Size:    12 [unused]
//   float3 light_hemispheric_color_zn; // Offset:   64 Size:    12 [unused]
//   float3 light_hemispheric_color_zp; // Offset:   80 Size:    12 [unused]
//   float4 ssao_parameters;            // Offset:   96 Size:    16 [unused]
//   float4 shadowmap_texture_size;     // Offset:  112 Size:    16 [unused]
//   float4 backbuffer_size;            // Offset:  128 Size:    16
//
// }
//
// cbuffer PER_STAGE
// {
//
//   float4 camera_position_viewspace;  // Offset:    0 Size:    16
//   float3 camera_upvector;            // Offset:   16 Size:    12 [unused]
//   float4x4 inverse_view_matrix;      // Offset:   32 Size:    64 [unused]
//   float4x4 projection_matrix;        // Offset:   96 Size:    64
//   float4 camera_clip_distances;      // Offset:  160 Size:    16
//
// }
//
// cbuffer PER_LIGHT
// {
//
//   float4 light_position_viewspace;   // Offset:    0 Size:    16
//   float4x4 light_viewprojection_matrix_viewspace;// Offset:   16 Size:    64 [unused]
//   float4 light_color_diffuse;        // Offset:   80 Size:    16
//   float4 light_color_specular;       // Offset:   96 Size:    16
//   float4 light_color_diffuse_back;   // Offset:  112 Size:    16 [unused]
//   float4 light_ies_parameters;       // Offset:  128 Size:    16 [unused]
//   float4 light_specular_parameters;  // Offset:  144 Size:    16
//   float3 light_direction_viewspace;  // Offset:  160 Size:    12 [unused]
//   float3 light_direction_worldspace; // Offset:  176 Size:    12 [unused]
//   float4 light_subsurface_scattering_parameters;// Offset:  192 Size:    16 [unused]
//   float4 light_subsurface_scattering_color;// Offset:  208 Size:    16
//   float4 light_color_diffuse0;       // Offset:  224 Size:    16 [unused]
//   float4 light_color_specular0;      // Offset:  240 Size:    16 [unused]
//   float4 light_specular_parameters0; // Offset:  256 Size:    16 [unused]
//   float3 light_direction_viewspace0; // Offset:  272 Size:    12 [unused]
//   float4 light_color_diffuse_back0;  // Offset:  288 Size:    16 [unused]
//   float4 light_rimlight_color;       // Offset:  304 Size:    16 [unused]
//   float4 light_rimlight_parameters;  // Offset:  320 Size:    16 [unused]
//   float4 light_parameters;           // Offset:  336 Size:    16 [unused]
//   float4 shadow_parameters;          // Offset:  352 Size:    16 [unused]
//   float4 light_projector_parameters; // Offset:  368 Size:    16 [unused]
//   float4 light_attenuation_parameters;// Offset:  384 Size:    16
//   float4 light_screenspace_shadows_parameters;// Offset:  400 Size:    16
//   float4 genericparam_shadowmask_channelmask;// Offset:  416 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler_point_clamp               sampler      NA          NA    1        1
// gbuffer0Sampler                   texture  float4          2d    0        1
// gbuffer1Sampler                   texture  float4          2d    1        1
// depthSampler                      texture  float4          2d    2        1
// MaterialParametersBuffer          texture  float4         buf    3        1
// PER_FRAME                         cbuffer      NA          NA    0        1
// PER_STAGE                         cbuffer      NA          NA    1        1
// PER_LIGHT                         cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// Texcoord                 0   xyzw        1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_constantbuffer cb2[26], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 9
mul r0.xy, v0.xyxx, cb0[8].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t1.yzxw, s1
div r0.w, cb1[10].y, v1.z
mul r2.xyz, r0.wwww, v1.xyzx
div r2.xyz, r2.xyzx, cb1[10].yyyy
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
add r0.x, r0.x, -cb1[10].z
div r0.x, cb1[10].w, r0.x
mul r3.xyz, r2.xyzx, r0.xxxx
mad r4.xyz, r0.xxxx, r2.xyzx, -cb1[0].xyzx
dp3 r0.y, -r4.xyzx, -r4.xyzx
rsq r0.y, r0.y
mul r5.xyz, r0.yyyy, -r4.xyzx
mad r1.xy, r1.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000), l(-2.000000, -2.000000, 0.000000, 0.000000)
dp2 r0.w, r1.xyxx, r1.xyxx
mad r6.zw, -r0.wwww, l(0.000000, 0.000000, 0.250000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
ge r0.w, l(0.000000), r6.z
sqrt r2.w, r6.z
movc r0.w, r0.w, l(0), r2.w
mul r6.xy, r0.wwww, r1.xyxx
mad r2.xyz, -r0.xxxx, r2.xyzx, cb2[0].xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
sqrt r0.w, r0.x
div r7.xyz, r2.xyzx, r0.wwww
lt r1.x, l(0.000000), cb2[24].w
log r1.y, r0.w
mul r1.y, r1.y, cb2[24].z
exp r1.y, r1.y
div_sat r1.y, r1.y, cb2[24].w
add r1.y, -r1.y, l(1.000000)
add r0.w, r0.w, -cb2[24].y
max r0.w, r0.w, l(0.000000)
add r2.w, -cb2[24].y, cb2[24].x
div r0.w, r0.w, r2.w
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
add r2.w, cb2[24].z, l(0.010000)
log r0.w, r0.w
mul r0.w, r0.w, r2.w
exp r0.w, r0.w
min r0.w, r0.w, l(1.000000)
movc r0.w, r1.x, r1.y, r0.w
mad r4.xyz, -r4.xyzx, r0.yyyy, r7.xyzx
dp3 r0.y, r4.xyzx, r4.xyzx
rsq r0.y, r0.y
mul r4.xyz, r0.yyyy, r4.xyzx
dp3_sat r0.y, r7.xyzx, r6.xywx
mul r8.xyz, r0.yyyy, cb2[5].xyzx
dp3 r0.y, r6.xywx, r4.xyzx
max r0.y, r0.y, l(0.000000)
max r1.x, r1.w, l(0.010000)
mul r1.x, r1.x, cb2[9].y
mul r1.x, r1.x, l(2550.000000)
log r0.y, r0.y
mul r0.y, r0.y, r1.x
exp r0.y, r0.y
mul r1.x, r0.z, l(1.992188)
round_ni r1.x, r1.x
eq r1.x, r1.x, l(1.000000)
if_nz r1.x
  mul r0.z, r0.z, l(255.000000)
  ftou r0.z, r0.z
  bfi r0.z, l(7), l(2), r0.z, l(0)
  ld_indexable(buffer)(float,float,float,float) r4.xyzw, r0.zzzz, t3.xyzw
  iadd r0.z, r0.z, l(1)
  ld_indexable(buffer)(float,float,float,float) r1.xy, r0.zzzz, t3.xyzw
  mul r4.xyz, r4.xyzx, cb2[13].xyzx
  mad r6.xyz, r6.xywx, r1.yyyy, r7.xyzx
  dp3_sat r0.z, r5.xyzx, -r6.xyzx
  mad r0.z, r0.z, r1.x, -r1.x
  exp r0.z, r0.z
  mul r0.z, r4.w, r0.z
  mul r1.xyw, r4.xyxz, r0.zzzz
  mad r8.xyz, r1.xywx, r1.zzzz, r8.xyzx
endif 
mul r1.xyz, r0.yyyy, cb2[6].xyzx
mul r4.xyz, r0.wwww, r8.xyzx
mul o1.xyz, r0.wwww, r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
mul r0.w, cb2[25].x, l(0.015625)
mov r1.w, l(1.000000)
mov r1.xyz, r3.xyzx
mov r2.xy, l(1.000000,0,0,0)
loop 
  uge r2.z, r2.y, l(64)
  breakc_nz r2.z
  mad r1.xyz, r0.xyzx, r0.wwww, r1.xyzx
  dp4 r5.x, r1.xyzw, cb1[6].xyzw
  dp4 r5.y, r1.xyzw, cb1[7].xyzw
  dp4 r2.z, r1.xyzw, cb1[9].xyzw
  div r2.zw, r5.xxxy, r2.zzzz
  mad r5.xy, r2.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  add r5.z, -r5.y, l(1.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.xzxx, t2.yzxw, s1, l(0.000000)
  add r2.z, r2.z, -cb1[10].z
  div r2.z, cb1[10].w, r2.z
  div r2.z, r2.z, cb1[10].y
  div r2.w, r1.z, cb1[10].y
  lt r2.z, r2.z, r2.w
  mad r2.w, -cb2[25].y, l(0.015625), r2.x
  movc r2.x, r2.z, r2.w, r2.x
  iadd r2.y, r2.y, l(1)
endloop 
mov_sat r2.x, r2.x
mul o0.xyz, r2.xxxx, r4.xyzx
mov o0.w, l(0)
mov o1.w, l(0)
ret 
// Approximately 110 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
