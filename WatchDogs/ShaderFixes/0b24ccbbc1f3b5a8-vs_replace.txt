//Water pipe (burst) - haloing
cbuffer Viewport : register(b0)
{
  float4x4 _ViewRotProjectionMatrix : packoffset(c0);
  float4x4 _ViewProjectionMatrix : packoffset(c4);
  float4x4 _ProjectionMatrix : packoffset(c8);
  float4x4 _InvProjectionMatrix : packoffset(c12);
  float4x4 _InvProjectionMatrixDepth : packoffset(c16);
  float4x4 _DepthTextureTransform : packoffset(c20);
  float4x3 _ViewMatrix : packoffset(c24);
  float4x3 _InvViewMatrix : packoffset(c27);
  float4x4 _PreviousViewProjectionMatrix : packoffset(c30);
  float4 _CameraDistances : packoffset(c34);
  float4 _ViewportSize : packoffset(c35);
  float4 _CameraPosition_MaxStaticReflectionMipIndex : packoffset(c36);
  float4 _CameraDirection_MaxParaboloidReflectionMipIndex : packoffset(c37);
  float4 _ViewPoint_ExposureScale : packoffset(c38);
  float4 _FogColorVector_ExposedWhitePointOverExposureScale : packoffset(c39);
  float3 _SideFogColor : packoffset(c40);
  float3 _SunFogColorDelta : packoffset(c41);
  float3 _OppositeFogColorDelta : packoffset(c42);
  float4 _FogValues0 : packoffset(c43);
  float4 _FogValues1 : packoffset(c44);
  float4 _CameraNearPlaneSize : packoffset(c45);
  float4 _UncompressDepthWeights_ShadowProjDepthMinValue : packoffset(c46);
  float4 _UncompressDepthWeightsWS_ReflectionFadeTarget : packoffset(c47);
  float4 _WorldAmbientColorParams0 : packoffset(c48);
  float4 _WorldAmbientColorParams1 : packoffset(c49);
  float4 _WorldAmbientColorParams2 : packoffset(c50);
  float4 _GlobalWorldTextureParams : packoffset(c51);
  float4 _CullingCameraPosition_OneOverAutoExposureScale : packoffset(c52);
  float4 _AmbientSkyColor_ReflectionScaleStrength : packoffset(c53);
  float4 _AmbientGroundColor_ReflectionScaleDistanceMul : packoffset(c54);
  float4 _FacettedShadowCastParams : packoffset(c55);
  float4 _FSMClipPlanes : packoffset(c56);
  float2 _ReflectionGIControl : packoffset(c57);
}

cbuffer LightData : register(b1)
{
  float4 _CascadedShadowDepthRanges : packoffset(c0);
  float4 _CascadedShadowRanges : packoffset(c1);
  float4 _CascadedShadowScale : packoffset(c2);
  float4 _CascadedShadowSliceDepthOffsets : packoffset(c3);
  float4 _CascadedShadowSliceDepthScales : packoffset(c4);
  float4 _CascadedShadowSliceScaleOffsets[3] : packoffset(c5);
  float4 _CascadedShadowSliceScaleOffsetsBiased[3] : packoffset(c8);
  float4 _FacettedShadowReceiveParams : packoffset(c11);
  float4 _LightCapsuleDivLength : packoffset(c12);
  float4 _LightFadingClipPlanes[8] : packoffset(c13);
  float4 _LightProjectedVideoUnpack[8] : packoffset(c21);
  float4 _LightShadowFactor : packoffset(c29);
  float4 _LightShadowMapSize : packoffset(c30);
  float4x4 _LightSpotShadowProjections : packoffset(c31);
  float4x4 _LightVolumeTransform : packoffset(c35);
  float4 _LongRangeShadowVolumePosScaleBias : packoffset(c39);
  float4 _LongRangeShadowVolumeUvScaleBias : packoffset(c40);
  float4 _RainLightViewpointLPS_DistVPToEdgesLPS : packoffset(c41);
  float3 _LightAttenuation : packoffset(c42);
  float _LightSpecularIntensity : packoffset(c42.w);
  float3 _LightCapsuleMulLength : packoffset(c43);
  float _LightSpotNearClipFactor : packoffset(c43.w);
  float3 _LightDirection : packoffset(c44);
  float3 _LightFrontColor : packoffset(c45);
  float3 _LightPosition : packoffset(c46);
  float2 _LightCapsuleParams : packoffset(c47);
  float2 _LightShadowDepthTransform : packoffset(c47.z);
  float2 _LightSpotConeFactors : packoffset(c48);
}

cbuffer LightProbes : register(b2)
{
  float4 _InteriorIrradianceRadianceScale : packoffset(c0);
  float4x4 _LocalToWorldMatrixWithFeatherMargin : packoffset(c1);
  float4x4 _LocalToWorldMatrixWithoutFeatherMargin : packoffset(c5);
  float4 _MiscDataToTidy : packoffset(c9);
  float4x4 _ScreenToLocalMatrix : packoffset(c10);
  float4x4 _WorldToLocalMatrix : packoffset(c14);
  float3 _InteriorAmbientLightInfo : packoffset(c18);
  float _LinearGridResCutoff : packoffset(c18.w);
  float3 _InteriorUVWBias : packoffset(c19);
  float _MaxLinearSliceIndex : packoffset(c19.w);
  float3 _InteriorUVWScale : packoffset(c20);
  float3 _RcpFeatherWidthsInBasicUVWSpace : packoffset(c21);
  float3 _VolumeCentre : packoffset(c22);
  float3 _VolumeDimensions : packoffset(c23);
  float2 _IrradianceSHInfo : packoffset(c24);
  float2 _MaxDepthBoundsInnerOuter : packoffset(c24.z);
  float2 _RadianceSHInfo : packoffset(c25);
  float2 _SkySHInfo : packoffset(c25.z);
}

cbuffer LightProbesGlobal : register(b3)
{
  float4x4 _BoxMatrix : packoffset(c0);
  float4 _LightProbesMultipliers : packoffset(c4);
  float4 _MinAmbient : packoffset(c5);
  float4 _ProbeUVToViewSpace : packoffset(c6);
  float4 _SH_B : packoffset(c7);
  float4 _SH_G : packoffset(c8);
  float4 _SH_R : packoffset(c9);
  float4x4 _ScreenToWorldMatrix : packoffset(c10);
  float4x4 _ViewProjectionMatrixWithZBias : packoffset(c14);
  float4 _VolumeCentreGlobal : packoffset(c18);
  float4 _WorldEdgeFadeParams : packoffset(c19);
  float3 _DefaultProbeAverageColor : packoffset(c20);
  float _CenterBaseZ : packoffset(c20.w);
  float3 _DefaultProbeLowerColor : packoffset(c21);
  float _DrawDistance : packoffset(c21.w);
  float3 _DefaultProbeUpperColor : packoffset(c22);
  int _ProbeMSAALevel : packoffset(c22.w);
  float2 _LocalLightsMultipliersGlobal : packoffset(c23);
  float2 _RelightingMultiplier : packoffset(c23.z);
}

cbuffer Emitter : register(b4)
{
  float4 _ParticleLightAttenuations[4] : packoffset(c0);
  float4 _ParticleLightColors[4] : packoffset(c4);
  float4 _ParticleLightDirections[4] : packoffset(c8);
  float4 _ParticleLightPositions[4] : packoffset(c12);
  float4 _ParticleSpotParams[4] : packoffset(c16);
  float4x4 _ParticleSpotProjMatrix : packoffset(c20);
  float4 _ParticleSpotShadowTextureSize : packoffset(c24);
  float4 _ParticleSpotVideoUnpack[8] : packoffset(c25);
  float4 _RainColor : packoffset(c33);
  float4x4 _ShadowOcclusionProjMatrix : packoffset(c34);
  float4 _SoftClipPlane : packoffset(c38);
  float4 _UniformFog : packoffset(c39);
  float3 _TweakedLightDirection : packoffset(c40);
  float _OneOverSoftRange : packoffset(c40.w);
  float2 _AlphaScaleOffset : packoffset(c41);
  float _ParticleZOffset : packoffset(c41.z);
  float _QuadTessellationFactor : packoffset(c41.w);
  float2 _FarSoftDistanceRange : packoffset(c42);
  int _ParticleLightCount : packoffset(c42.z);
}

cbuffer SceneParticleAttributes : register(b5)
{
  float4 _DistortionSpeedTiling : packoffset(c0);
  float4 _OpacityCompensationKeyFrames[5] : packoffset(c1);
  float _DiffuseLightingPowerExponent : packoffset(c6);
  float _DistortionStrength : packoffset(c6.y);
  float _HDRMul : packoffset(c6.z);
  float _Translucency : packoffset(c6.w);
}
SamplerState Viewport__ParaboloidReflectionTexture__SampObj___s : register(s0);
SamplerState LightData__FacettedShadowNoiseTexture__SampObj___s : register(s1);
SamplerState LightProbes__FloorCeilingTexture__SampObj___s : register(s3);
SamplerState LightProbes__VolumeTextureB__SampObj___s : register(s4);
SamplerState LightProbes__VolumeTextureG__SampObj___s : register(s5);
SamplerState LightProbes__VolumeTextureR__SampObj___s : register(s6);
SamplerComparisonState ShadowRealSampler_s : register(s2);
Texture2D<float4> Viewport__ParaboloidReflectionTexture__TexObj__ : register(t0);
Texture2D<float4> LightData__LightShadowTexture__TexObj__ : register(t1);
Texture2D<float4> LightData__FacettedShadowNoiseTexture__TexObj__ : register(t2);
Texture2D<float4> LightProbes__FloorCeilingTexture__TexObj__ : register(t3);
Texture3D<float4> LightProbes__VolumeTextureB__TexObj__ : register(t4);
Texture3D<float4> LightProbes__VolumeTextureG__TexObj__ : register(t5);
Texture3D<float4> LightProbes__VolumeTextureR__TexObj__ : register(t6);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : position0,
  float4 v1 : color1,
  float4 v2 : texcoord4,
  float4 v3 : texcoord5,
  float4 v4 : texcoord6,
  float4 v5 : texcoord7,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float3 o4 : TEXCOORD4,
  out float2 o5 : TEXCOORD5,
  out float4 o6 : SV_Position0)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask;
  r0.xyz = v3.xyz * v0.yyy;
  r0.xyz = v0.xxx * v2.xyz + r0.xyz;
  r0.xyz = v4.xyz + r0.xyz;
  r1.x = _InvViewMatrix._m30 + -r0.x;
  r1.y = _InvViewMatrix._m31 + -r0.y;
  r1.z = _InvViewMatrix._m32 + -r0.z;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * _ParticleZOffset + r0.xyz;
  sincos(v4.w, r1.x, r2.x);
  r3.x = -r1.x;
  r1.yz = float2(-5.000000e-001,-5.000000e-001) + v0.zw;
  r3.y = r2.x;
  r2.x = dot(r1.zy, r3.xy);
  r3.z = r1.x;
  r2.y = dot(r1.zy, r3.yz);
  r1.xy = float2(5.000000e-001,5.000000e-001) + r2.xy;
  o5.xy = r1.xy * v5.zw + v5.xy;
  r1.x = v1.w * _AlphaScaleOffset.x + _AlphaScaleOffset.y;
  r0.w = 1.000000000e+000;
  r2.x = dot(r0.xyzw, _ViewProjectionMatrix._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, _ViewProjectionMatrix._m01_m11_m21_m31);
  r2.z = dot(r0.xyzw, _ViewProjectionMatrix._m02_m12_m22_m32);
  r2.w = dot(r0.xyzw, _ViewProjectionMatrix._m03_m13_m23_m33);
  
float4 stereo = StereoParams.Load(0);
float4 r22 = r2;
r2.x += stereo.x*(r2.w - stereo.y);

  r1.yzw = _CameraPosition_MaxStaticReflectionMipIndex.xyz + -r0.xyz;
  r3.x = dot(r1.yzw, r1.yzw);
  r3.x = rsqrt(r3.x);
  r1.yzw = r3.xxx * r1.yzw;
  r3.xyz = v1.zyx * v1.zyx;
  r4.xyz = -v4.xyz + r0.xyz;
  r3.w = dot(r4.xyz, r4.xyz);
  r3.w = sqrt(r3.w);
  r4.xyz = r4.xyz / r3.www;
  r5.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r4.w = 0.000000000e+000;
  while (true) {
  r6.x = (int)r4.w >= (int)_ParticleLightCount;
  if (r6.x != 0) break;
  r6.xyz = _ParticleLightPositions[r4.w].xyz + -v4.xyz;
  r6.w = dot(r6.xyz, r6.xyz);
  r6.w = sqrt(r6.w);
  r6.xyz = r6.xyz / r6.www;
  r7.xyz = _ParticleLightPositions[r4.w].xyz + -r0.xyz;
  r7.w = dot(r7.xyz, r7.xyz);
  r8.x = rsqrt(r7.w);
  r7.xyz = r8.xxx * r7.xyz;
  r6.w = r6.w / r3.w;
  r6.w = min(r6.w, 1.000000000e+000);
  r6.w = 1.000000000e+000 + -r6.w;
  r6.x = dot(r6.xyz, r4.xyz);
  r6.x = saturate(r6.x * 5.857999921e-001 + 5.857999921e-001);
  r6.y = 0.000000000e+000 < _ParticleLightAttenuations[r4.w].x;
  r6.z = sqrt(r7.w);
  r6.z = 1.000000000e+000 + r6.z;
  r6.z = r6.z * r6.z;
  r6.z = 1.000000e+000 / r6.z;
  r6.y = r6.y ? r6.z : r7.w;
  r6.y = saturate(r6.y * _ParticleLightAttenuations[r4.w].y + _ParticleLightAttenuations[r4.w].z);
  r6.z = dot(-r7.xyz, _ParticleLightDirections[r4.w].xyz);
  r7.x = saturate(r6.z * _ParticleSpotParams[r4.w].x + _ParticleSpotParams[r4.w].y);
  r6.z = r6.z < _ParticleLightDirections[r4.w].w;
  r6.x = r6.x * r6.y;
  r6.x = r6.x * r7.x;
  r6.x = r6.z ? 0.000000000e+000 : r6.x;
  r6.x = _ParticleLightColors[r4.w].w * r6.w + r6.x;
  r5.xyzw = icb[r4.w].xyzw * r6.xxxx + r5.xyzw;
  r4.w = (int)r4.w + 1;
  }
  r4.x = dot(r0.xyzw, _WorldToLocalMatrix._m00_m10_m20_m30);
  r4.y = dot(r0.xyzw, _WorldToLocalMatrix._m01_m11_m21_m31);
  r3.w = saturate(dot(r0.xyzw, _WorldToLocalMatrix._m02_m12_m22_m32));
  r4.xy = float2(5.000000e-001,5.000000e-001) + r4.xy;
  r6.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) / _MiscDataToTidy.xyz;
  r4.xy = r6.xy + r4.xy;
  r6.xyw = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + _MiscDataToTidy.xyz;
  r4.zw = r6.xy / _MiscDataToTidy.xy;
  r4.xy = r4.xy * r4.zw;
  r6.x = 0.000000000e+000 < _LinearGridResCutoff;
  r6.y = saturate(r3.w / _LinearGridResCutoff);
  r6.y = _MaxLinearSliceIndex * r6.y;
  r6.x = (int)r6.y & (int)r6.x;
  r6.y = _LinearGridResCutoff < 1.000000000e+000;
  r3.w = saturate(-_LinearGridResCutoff + r3.w);
  r7.x = 1.000000000e+000 + -_LinearGridResCutoff;
  r3.w = r3.w / r7.x;
  r3.w = log2(r3.w);
  r3.w = _MiscDataToTidy.w * r3.w;
  r3.w = exp2(r3.w);
  r6.w = -_MaxLinearSliceIndex + r6.w;
  r3.w = r6.w * r3.w;
  r3.w = (int)r3.w & (int)r6.y;
  r3.w = r6.x + r3.w;
  r6.x = r3.w / _MiscDataToTidy.z;
  r6.y = floor(r3.w);
  r6.y = r6.y / _MiscDataToTidy.z;
  r3.w = ceil(r3.w);
  r3.w = r3.w / _MiscDataToTidy.z;
  r6.w = saturate(r4.y);
  r6.w = r6.w / _MiscDataToTidy.z;
  r4.z = r6.w + r6.y;
  r7.xy = LightProbes__FloorCeilingTexture__TexObj__.SampleLevel(LightProbes__FloorCeilingTexture__SampObj___s, r4.xz, 0.000000000e+000).xy;
  r7.zw = float2(1.000000e+000,1.000000e+000) + -r7.xy;
  r4.z = r7.w * 2.500000000e-001 + r7.y;
  r4.z = min(r4.z, r7.z);
  r6.w = r7.x / _MiscDataToTidy.z;
  r6.w = r6.y + r6.w;
  r6.x = r6.x + -r6.w;
  r6.x = _MiscDataToTidy.z * r6.x;
  r4.z = saturate(r6.x / r4.z);
  r3.w = r3.w + -r6.y;
  r3.w = r4.z * r3.w + r6.y;
  r4.w = r3.w + r6.z;
  r6.xyzw = LightProbes__VolumeTextureR__TexObj__.SampleLevel(LightProbes__VolumeTextureR__SampObj___s, r4.xyw, 0.000000000e+000).xyzw;
  r7.xyzw = LightProbes__VolumeTextureG__TexObj__.SampleLevel(LightProbes__VolumeTextureG__SampObj___s, r4.xyw, 0.000000000e+000).xyzw;
  r4.xyzw = LightProbes__VolumeTextureB__TexObj__.SampleLevel(LightProbes__VolumeTextureB__SampObj___s, r4.xyw, 0.000000000e+000).xyzw;
  r3.w = -3.000000000e+001 + _DrawDistance;
  r8.xyz = -_ViewPoint_ExposureScale.xyz + r0.xyz;
  r8.x = dot(r8.xy, r8.xy);
  r8.x = sqrt(r8.x);
  r8.x = max(abs(r8.z), r8.x);
  r8.x = r8.x + -r3.w;
  r3.w = _DrawDistance + -r3.w;
  r3.w = saturate(r8.x / r3.w);
  r8.x = _VolumeDimensions.z + _VolumeCentre.z;
  r8.x = r8.x + -r0.z;
  r8.x = saturate(3.333333507e-002 * r8.x);
  r8.x = 1.000000000e+000 + -r8.x;
  r3.w = max(r3.w, r8.x);
  r8.xy = abs(r0.xy) * _WorldEdgeFadeParams.xy + float2(-1.000000e+000,-1.000000e+000);
  r8.xy = saturate(_WorldEdgeFadeParams.zw * r8.xy);
  r8.x = max(r8.y, r8.x);
  r3.w = max(r3.w, r8.x);
  r8.xyzw = _SH_R.xyzw + -r6.xyzw;
  r6.xyzw = r3.wwww * r8.xyzw + r6.xyzw;
  r8.xyzw = _SH_G.xyzw + -r7.xyzw;
  r7.xyzw = r3.wwww * r8.xyzw + r7.xyzw;
  r8.xyzw = _SH_B.xyzw + -r4.xyzw;
  r4.xyzw = r3.wwww * r8.xyzw + r4.xyzw;
  r6.xyzw = max(r6.xyzw, _MinAmbient.xxxw);
  r7.xyzw = max(r7.xyzw, _MinAmbient.yyyw);
  r4.xyzw = max(r4.xywz, _MinAmbient.zzwz);
  r6.xyz = r7.xyz + r6.xyz;
  r6.xyz = r6.xyz + r4.xyw;
  r4.x = r6.w;
  r4.y = r7.w;
  r4.xyz = r6.xyz + r4.xyz;
  r4.xyz = float3(2.500000e-001,2.500000e-001,2.500000e-001) * r4.xyz;
  r3.w = 0.000000000e+000 >= _UncompressDepthWeightsWS_ReflectionFadeTarget.w;
  r3.w = r3.w ? -1.000000000e+001 : -1.000000000e+004;
  r3.w = r0.z >= r3.w;
  r6.xyz = -_CameraPosition_MaxStaticReflectionMipIndex.xyz + r0.xyz;
  r4.w = dot(r6.xyz, r6.xyz);
  r7.x = rsqrt(r4.w);
  r6.w = max(r6.z, 0.000000000e+000);
  r7.y = dot(r6.xyw, r6.xyw);
  r7.y = rsqrt(r7.y);
  r7.xyzw = r7.xyyy * r6.zxyw;
  r8.xyz = Viewport__ParaboloidReflectionTexture__TexObj__.SampleLevel(Viewport__ParaboloidReflectionTexture__SampObj___s, float2(7.500000e-001,5.000000e-001), 6.000000000e+000).xyz;
  r6.w = r7.w * 2.000000000e+000 + 2.000000000e+000;
  r7.yz = r7.zy / r6.ww;
  r6.w = 5.000000000e-001 + -r7.y;
  r9.y = saturate(5.000000000e-001 + r7.z);
  r9.x = saturate(max(r6.w, 1.250000000e-001));
  r9.z = r9.x * 5.000000000e-001 + 5.000000000e-001;
  r7.yzw = Viewport__ParaboloidReflectionTexture__TexObj__.SampleLevel(Viewport__ParaboloidReflectionTexture__SampObj___s, r9.zy, 6.000000000e+000).xyz;
  r8.xyz = r8.xyz + -r7.yzw;
  r7.xyz = abs(r7.xxx) * r8.xyz + r7.yzw;
  r7.xyz = _WorldAmbientColorParams2.xyz * r7.xyz;
  r7.xyz = _WorldAmbientColorParams1.www * r7.xyz;
  r4.w = sqrt(r4.w);
  r8.xy = _WorldAmbientColorParams0.zw * r4.ww;
  r4.w = 9.999999776e-003 < abs(r6.z);
  r8.zw = float2(1.000000e+000,-1.000000e+000) * r6.zz;
  r8.zw = _WorldAmbientColorParams1.xy * r8.zw;
  r9.xy = float2(-1.442695e+000,-1.442695e+000) * r8.zw;
  r9.xy = exp2(r9.xy);
  r9.xy = float2(1.000000e+000,1.000000e+000) + -r9.xy;
  r8.zw = r9.xy / r8.zw;
  r8.zw = r8.xy * r8.zw;
  r8.xy = r4.ww ? r8.zw : r8.xy;
  r8.xy = -_WorldAmbientColorParams0.xy * r8.xy;
  r8.xy = float2(1.442695e+000,1.442695e+000) * r8.xy;
  r8.xy = exp2(r8.xy);
  r8.xy = float2(1.000000e+000,1.000000e+000) + -r8.xy;
  r4.w = max(r8.y, r8.x);
  r4.w = log2(r4.w);
  r4.w = _WorldAmbientColorParams2.w * r4.w;
  r4.w = exp2(r4.w);
  r7.w = min(r4.w, _WorldAmbientColorParams1.z);
  r7.xyzw = r3.wwww ? r7.xyzw : float4(0.000000e+000,0.000000e+000,0.000000e+000,1.000000e+000);
  r8.xyz = r7.xyz * r7.www;
  r8.w = 1.000000000e+000 + -r7.w;
  o1.xyzw = _ViewPoint_ExposureScale.wwww * r8.xyzw;
  o0.xyz = saturate(_HDRMul * r3.xyz);
  r3.x = dot(r1.yzw, -_LightDirection.xyz);
  r3.x = saturate(r3.x * 5.000000000e-001 + 5.000000000e-001);
  r3.x = log2(r3.x);
  r3.x = _DiffuseLightingPowerExponent * r3.x;
  r3.x = exp2(r3.x);
  r1.y = saturate(dot(-r1.yzw, -_LightDirection.xyz));
  r1.yzw = _LightFrontColor.xyz * r1.yyy;
  r1.yzw = _Translucency * r1.yzw;
  r1.yzw = _LightFrontColor.xyz * r3.xxx + r1.yzw;
  r3.x = dot(r0.xyzw, _LightSpotShadowProjections._m00_m10_m20_m30);
  r3.y = dot(r0.xyzw, _LightSpotShadowProjections._m01_m11_m21_m31);
  r0.x = dot(r0.xyzw, _LightSpotShadowProjections._m02_m12_m22_m32);
  r7.x = dot(r3.xy, float2(1.000000e+000,1.000000e+000));
  r7.y = dot(r3.xy, float2(1.000000e+000,-1.000000e+000));
  r7.z = dot(r3.xy, float2(-1.000000e+000,-1.000000e+000));
  r7.w = dot(r3.yx, float2(1.000000e+000,-1.000000e+000));
  r7.x = r7.x >= 0;
  r7.y = r7.y >= 0;
  r7.z = r7.z >= 0;
  r7.w = r7.w >= 0;
  r7.x = r7.x ? 1 : 0;
  r7.y = r7.y ? 1 : 0;
  r7.z = r7.z ? 1 : 0;
  r7.w = r7.w ? 1 : 0;
  r0.yzw = r7.yzw * r7.zwx;
  r0.y = 0 != r0.y;
  r0.z = 0 != r0.z;
  r0.w = 0 != r0.w;
  r7.xy = r0.yy ? float2(0.000000e+000,-1.000000e+000) : float2(1.000000e+000,0.000000e+000);
  r0.yz = r0.zz ? float2(-1.000000e+000,0.000000e+000) : r7.xy;
  r0.yz = r0.ww ? float2(0.000000e+000,1.000000e+000) : r0.yz;
  r0.y = dot(r3.xy, r0.yz);
  r0.z = _FacettedShadowReceiveParams.y + r0.y;
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.x;
  r3.z = r0.x * r0.x;
  r3.xyz = _FacettedShadowReceiveParams.xxx * r3.xyz;
  r0.x = saturate(r0.y * _FacettedShadowReceiveParams.z + _FacettedShadowReceiveParams.w);
  r0.yzw = r3.xyz / r0.zzz;
  r3.x = -8.999999762e-001 + r0.w;
  r3.x = saturate(1.000000000e+001 * r3.x);
  r0.x = max(r0.x, r3.x);
  r3.xy = float2(2.200000e+000,2.200000e+000) * _LightShadowMapSize.zw;
  r3.zw = _LightShadowMapSize.zw * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.yz = r0.yz * float2(5.000000e-001,-5.000000e-001) + r3.zw;
  r3.zw = LightData__FacettedShadowNoiseTexture__TexObj__.SampleLevel(LightData__FacettedShadowNoiseTexture__SampObj___s, float2(0.000000e+000,0.000000e+000), 0.000000000e+000).xy;
  r3.zw = r3.wz * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r7.xy = float2(-6.200062e-002,1.945140e-001) * r3.zz;
  r7.xy = r3.ww * float2(6.495577e-001,-2.520991e-001) + -r7.xy;
  r7.z = dot(r3.wz, float2(-6.200062e-002,6.495577e-001));
  r8.xy = r7.xz * r3.xy;
  r8.z = 0.000000000e+000;
  r8.xyz = r8.xyz + r0.yzw;
  r4.w = LightData__LightShadowTexture__TexObj__.SampleCmpLevelZero(ShadowRealSampler_s, r8.xy, r8.z, int2(0, 0)).x;
  r7.w = dot(r3.wz, float2(1.945140e-001,-2.520991e-001));
  r7.xy = r7.yw * r3.xy;
  r7.z = 0.000000000e+000;
  r7.xyz = r7.xyz + r0.yzw;
  r6.w = LightData__LightShadowTexture__TexObj__.SampleCmpLevelZero(ShadowRealSampler_s, r7.xy, r7.z, int2(0, 0)).x;
  r4.w = r6.w + r4.w;
  r7.xy = float2(-6.026105e-001,9.879663e-001) * r3.zz;
  r7.xy = r3.ww * float2(-1.675160e-001,8.006269e-002) + -r7.xy;
  r7.z = dot(r3.wz, float2(-6.026105e-001,-1.675160e-001));
  r8.xy = r7.xz * r3.xy;
  r8.z = 0.000000000e+000;
  r8.xyz = r8.xyz + r0.yzw;
  r6.w = LightData__LightShadowTexture__TexObj__.SampleCmpLevelZero(ShadowRealSampler_s, r8.xy, r8.z, int2(0, 0)).x;
  r4.w = r6.w + r4.w;
  r7.w = dot(r3.wz, float2(9.879663e-001,8.006269e-002));
  r3.xy = r7.yw * r3.xy;
  r3.z = 0.000000000e+000;
  r0.yzw = r3.xyz + r0.yzw;
  r0.y = LightData__LightShadowTexture__TexObj__.SampleCmpLevelZero(ShadowRealSampler_s, r0.yz, r0.w, int2(0, 0)).x;
  r0.y = r4.w + r0.y;
  r0.z = 2.500000000e-001 * r0.y;
  r0.y = -r0.y * 2.500000000e-001 + 1.000000000e+000;
  r0.x = r0.x * r0.y + r0.z;
  r0.xyz = r1.yzw * r0.xxx + r4.xyz;
  r1.yzw = _ParticleLightColors[1].xyz * r5.yyy;
  r1.yzw = _ParticleLightColors[0].xyz * r5.xxx + r1.yzw;
  r1.yzw = _ParticleLightColors[2].xyz * r5.zzz + r1.yzw;
  r1.yzw = r1.yzw + r0.xyz;
  r1.yzw = r1.yzw / _FogColorVector_ExposedWhitePointOverExposureScale.www;
  r0.w = saturate(dot(r1.yzw, float3(2.125000e-001,7.154000e-001,7.210000e-002)));
  r1.y = r0.w >= _OpacityCompensationKeyFrames[0].x;
  r1.z = r0.w >= _OpacityCompensationKeyFrames[0].z;
  r1.w = _OpacityCompensationKeyFrames[0].z >= r0.w;
  r1.y = r1.y ? 1 : 0;
  r1.z = r1.z ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r1.y = r1.y * r1.w;
  r3.xy = -_OpacityCompensationKeyFrames[0].xz + r0.ww;
  r3.zw = _OpacityCompensationKeyFrames[0].zw + -_OpacityCompensationKeyFrames[0].xy;
  r1.w = r3.x / r3.z;
  r1.w = r1.w * r3.w + _OpacityCompensationKeyFrames[0].y;
  r1.y = r1.y * r1.w;
  r3.x = _OpacityCompensationKeyFrames[1].x >= r0.w;
  r3.z = _OpacityCompensationKeyFrames[1].z >= r0.w;
  r3.x = r3.x ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r1.z = r3.x * r1.z;
  r3.xw = _OpacityCompensationKeyFrames[1].xy + -_OpacityCompensationKeyFrames[0].zw;
  r1.w = r3.y / r3.x;
  r1.w = r1.w * r3.w + _OpacityCompensationKeyFrames[0].w;
  r1.z = r1.z * r1.w;
  r1.yz = max(r1.yz, float2(0.000000e+000,0.000000e+000));
  r1.y = r1.y + r1.z;
  r1.z = r0.w >= _OpacityCompensationKeyFrames[1].x;
  r1.w = r0.w >= _OpacityCompensationKeyFrames[1].z;
  r1.z = r1.z ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r1.z = r1.z * r3.z;
  r3.xy = -_OpacityCompensationKeyFrames[1].xz + r0.ww;
  r3.zw = _OpacityCompensationKeyFrames[1].zw + -_OpacityCompensationKeyFrames[1].xy;
  r3.x = r3.x / r3.z;
  r3.x = r3.x * r3.w + _OpacityCompensationKeyFrames[1].y;
  r1.z = r3.x * r1.z;
  r1.z = max(r1.z, 0.000000000e+000);
  r1.y = r1.y + r1.z;
  r3.x = _OpacityCompensationKeyFrames[2].x >= r0.w;
  r3.z = _OpacityCompensationKeyFrames[2].z >= r0.w;
  r3.x = r3.x ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r1.z = r3.x * r1.w;
  r3.xw = _OpacityCompensationKeyFrames[2].xy + -_OpacityCompensationKeyFrames[1].zw;
  r1.w = r3.y / r3.x;
  r1.w = r1.w * r3.w + _OpacityCompensationKeyFrames[1].w;
  r1.z = r1.z * r1.w;
  r1.z = max(r1.z, 0.000000000e+000);
  r1.y = r1.y + r1.z;
  r1.z = r0.w >= _OpacityCompensationKeyFrames[2].x;
  r1.w = r0.w >= _OpacityCompensationKeyFrames[2].z;
  r1.z = r1.z ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r1.z = r1.z * r3.z;
  r3.xy = -_OpacityCompensationKeyFrames[2].xz + r0.ww;
  r3.zw = _OpacityCompensationKeyFrames[2].zw + -_OpacityCompensationKeyFrames[2].xy;
  r3.x = r3.x / r3.z;
  r3.x = r3.x * r3.w + _OpacityCompensationKeyFrames[2].y;
  r1.z = r3.x * r1.z;
  r1.z = max(r1.z, 0.000000000e+000);
  r1.y = r1.y + r1.z;
  r3.x = _OpacityCompensationKeyFrames[3].x >= r0.w;
  r3.z = _OpacityCompensationKeyFrames[3].z >= r0.w;
  r3.x = r3.x ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r1.z = r3.x * r1.w;
  r3.xw = _OpacityCompensationKeyFrames[3].xy + -_OpacityCompensationKeyFrames[2].zw;
  r1.w = r3.y / r3.x;
  r1.w = r1.w * r3.w + _OpacityCompensationKeyFrames[2].w;
  r1.z = r1.z * r1.w;
  r1.z = max(r1.z, 0.000000000e+000);
  r1.y = r1.y + r1.z;
  r1.z = r0.w >= _OpacityCompensationKeyFrames[3].x;
  r1.w = r0.w >= _OpacityCompensationKeyFrames[3].z;
  r1.z = r1.z ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r1.z = r1.z * r3.z;
  r3.xy = -_OpacityCompensationKeyFrames[3].xz + r0.ww;
  r3.zw = _OpacityCompensationKeyFrames[3].zw + -_OpacityCompensationKeyFrames[3].xy;
  r3.x = r3.x / r3.z;
  r3.x = r3.x * r3.w + _OpacityCompensationKeyFrames[3].y;
  r1.z = r3.x * r1.z;
  r1.z = max(r1.z, 0.000000000e+000);
  r1.y = r1.y + r1.z;
  r3.x = _OpacityCompensationKeyFrames[4].x >= r0.w;
  r3.z = _OpacityCompensationKeyFrames[4].z >= r0.w;
  r3.x = r3.x ? 1 : 0;
  r3.z = r3.z ? 1 : 0;
  r1.z = r3.x * r1.w;
  r3.xw = _OpacityCompensationKeyFrames[4].xy + -_OpacityCompensationKeyFrames[3].zw;
  r1.w = r3.y / r3.x;
  r1.w = r1.w * r3.w + _OpacityCompensationKeyFrames[3].w;
  r1.z = r1.z * r1.w;
  r1.z = max(r1.z, 0.000000000e+000);
  r1.y = r1.y + r1.z;
  r1.z = r0.w >= _OpacityCompensationKeyFrames[4].x;
  r1.z = r1.z ? 1.000000 : 0;
  r1.z = r1.z * r3.z;
  r0.w = -_OpacityCompensationKeyFrames[4].x + r0.w;
  r3.xy = _OpacityCompensationKeyFrames[4].zw + -_OpacityCompensationKeyFrames[4].xy;
  r0.w = r0.w / r3.x;
  r0.w = r0.w * r3.y + _OpacityCompensationKeyFrames[4].y;
  r0.w = r1.z * r0.w;
  r0.w = max(r0.w, 0.000000000e+000);
  r0.w = r1.y + r0.w;
  o0.w = saturate(r0.w * r1.x);
  o3.x = dot(r2.xyzw, _DepthTextureTransform._m00_m10_m20_m30);
  o3.y = dot(r2.xyzw, _DepthTextureTransform._m01_m11_m21_m31);
  o3.z = dot(r2.xyzw, _DepthTextureTransform._m03_m13_m23_m33);
  r0.w = dot(_CameraDirection_MaxParaboloidReflectionMipIndex.xyz, r6.xyz);
  o3.w = _CameraDistances.w * r0.w;
  o2.xyzw = r5.xyzw;
o6.xyzw = r22.xyzw;
  o4.xyz = r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4x4 _ViewRotProjectionMatrix; // Offset:    0 Size:    64 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:   64 Size:    64
//   float4x4 _ProjectionMatrix;        // Offset:  128 Size:    64 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  192 Size:    64 [unused]
//   float4x4 _InvProjectionMatrixDepth;// Offset:  256 Size:    64 [unused]
//   float4x4 _DepthTextureTransform;   // Offset:  320 Size:    64
//   float4x3 _ViewMatrix;              // Offset:  384 Size:    48 [unused]
//   float4x3 _InvViewMatrix;           // Offset:  432 Size:    48
//   float4x4 _PreviousViewProjectionMatrix;// Offset:  480 Size:    64 [unused]
//   float4 _CameraDistances;           // Offset:  544 Size:    16
//   float4 _ViewportSize;              // Offset:  560 Size:    16 [unused]
//   float4 _CameraPosition_MaxStaticReflectionMipIndex;// Offset:  576 Size:    16
//   float4 _CameraDirection_MaxParaboloidReflectionMipIndex;// Offset:  592 Size:    16
//   float4 _ViewPoint_ExposureScale;   // Offset:  608 Size:    16
//   float4 _FogColorVector_ExposedWhitePointOverExposureScale;// Offset:  624 Size:    16
//   float3 _SideFogColor;              // Offset:  640 Size:    12 [unused]
//   float3 _SunFogColorDelta;          // Offset:  656 Size:    12 [unused]
//   float3 _OppositeFogColorDelta;     // Offset:  672 Size:    12 [unused]
//   float4 _FogValues0;                // Offset:  688 Size:    16 [unused]
//   float4 _FogValues1;                // Offset:  704 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:  720 Size:    16 [unused]
//   float4 _UncompressDepthWeights_ShadowProjDepthMinValue;// Offset:  736 Size:    16 [unused]
//   float4 _UncompressDepthWeightsWS_ReflectionFadeTarget;// Offset:  752 Size:    16
//   float4 _WorldAmbientColorParams0;  // Offset:  768 Size:    16
//   float4 _WorldAmbientColorParams1;  // Offset:  784 Size:    16
//   float4 _WorldAmbientColorParams2;  // Offset:  800 Size:    16
//   float4 _GlobalWorldTextureParams;  // Offset:  816 Size:    16 [unused]
//   float4 _CullingCameraPosition_OneOverAutoExposureScale;// Offset:  832 Size:    16 [unused]
//   float4 _AmbientSkyColor_ReflectionScaleStrength;// Offset:  848 Size:    16 [unused]
//   float4 _AmbientGroundColor_ReflectionScaleDistanceMul;// Offset:  864 Size:    16 [unused]
//   float4 _FacettedShadowCastParams;  // Offset:  880 Size:    16 [unused]
//   float4 _FSMClipPlanes;             // Offset:  896 Size:    16 [unused]
//   float2 _ReflectionGIControl;       // Offset:  912 Size:     8 [unused]
//
// }
//
// cbuffer LightData
// {
//
//   float4 _CascadedShadowDepthRanges; // Offset:    0 Size:    16 [unused]
//   float4 _CascadedShadowRanges;      // Offset:   16 Size:    16 [unused]
//   float4 _CascadedShadowScale;       // Offset:   32 Size:    16 [unused]
//   float4 _CascadedShadowSliceDepthOffsets;// Offset:   48 Size:    16 [unused]
//   float4 _CascadedShadowSliceDepthScales;// Offset:   64 Size:    16 [unused]
//   float4 _CascadedShadowSliceScaleOffsets[3];// Offset:   80 Size:    48 [unused]
//   float4 _CascadedShadowSliceScaleOffsetsBiased[3];// Offset:  128 Size:    48 [unused]
//   float4 _FacettedShadowReceiveParams;// Offset:  176 Size:    16
//   float4 _LightCapsuleDivLength;     // Offset:  192 Size:    16 [unused]
//   float4 _LightFadingClipPlanes[8];  // Offset:  208 Size:   128 [unused]
//   float4 _LightProjectedVideoUnpack[8];// Offset:  336 Size:   128 [unused]
//   float4 _LightShadowFactor;         // Offset:  464 Size:    16 [unused]
//   float4 _LightShadowMapSize;        // Offset:  480 Size:    16
//   float4x4 _LightSpotShadowProjections;// Offset:  496 Size:    64
//   float4x4 _LightVolumeTransform;    // Offset:  560 Size:    64 [unused]
//   float4 _LongRangeShadowVolumePosScaleBias;// Offset:  624 Size:    16 [unused]
//   float4 _LongRangeShadowVolumeUvScaleBias;// Offset:  640 Size:    16 [unused]
//   float4 _RainLightViewpointLPS_DistVPToEdgesLPS;// Offset:  656 Size:    16 [unused]
//   float3 _LightAttenuation;          // Offset:  672 Size:    12 [unused]
//   float _LightSpecularIntensity;     // Offset:  684 Size:     4 [unused]
//   float3 _LightCapsuleMulLength;     // Offset:  688 Size:    12 [unused]
//   float _LightSpotNearClipFactor;    // Offset:  700 Size:     4 [unused]
//   float3 _LightDirection;            // Offset:  704 Size:    12
//   float3 _LightFrontColor;           // Offset:  720 Size:    12
//   float3 _LightPosition;             // Offset:  736 Size:    12 [unused]
//   float2 _LightCapsuleParams;        // Offset:  752 Size:     8 [unused]
//   float2 _LightShadowDepthTransform; // Offset:  760 Size:     8 [unused]
//   float2 _LightSpotConeFactors;      // Offset:  768 Size:     8 [unused]
//
// }
//
// cbuffer LightProbes
// {
//
//   float4 _InteriorIrradianceRadianceScale;// Offset:    0 Size:    16 [unused]
//   float4x4 _LocalToWorldMatrixWithFeatherMargin;// Offset:   16 Size:    64 [unused]
//   float4x4 _LocalToWorldMatrixWithoutFeatherMargin;// Offset:   80 Size:    64 [unused]
//   float4 _MiscDataToTidy;            // Offset:  144 Size:    16
//   float4x4 _ScreenToLocalMatrix;     // Offset:  160 Size:    64 [unused]
//   float4x4 _WorldToLocalMatrix;      // Offset:  224 Size:    64
//   float3 _InteriorAmbientLightInfo;  // Offset:  288 Size:    12 [unused]
//   float _LinearGridResCutoff;        // Offset:  300 Size:     4
//   float3 _InteriorUVWBias;           // Offset:  304 Size:    12 [unused]
//   float _MaxLinearSliceIndex;        // Offset:  316 Size:     4
//   float3 _InteriorUVWScale;          // Offset:  320 Size:    12 [unused]
//   float3 _RcpFeatherWidthsInBasicUVWSpace;// Offset:  336 Size:    12 [unused]
//   float3 _VolumeCentre;              // Offset:  352 Size:    12
//   float3 _VolumeDimensions;          // Offset:  368 Size:    12
//   float2 _IrradianceSHInfo;          // Offset:  384 Size:     8 [unused]
//   float2 _MaxDepthBoundsInnerOuter;  // Offset:  392 Size:     8 [unused]
//   float2 _RadianceSHInfo;            // Offset:  400 Size:     8 [unused]
//   float2 _SkySHInfo;                 // Offset:  408 Size:     8 [unused]
//
// }
//
// cbuffer LightProbesGlobal
// {
//
//   float4x4 _BoxMatrix;               // Offset:    0 Size:    64 [unused]
//   float4 _LightProbesMultipliers;    // Offset:   64 Size:    16 [unused]
//   float4 _MinAmbient;                // Offset:   80 Size:    16
//   float4 _ProbeUVToViewSpace;        // Offset:   96 Size:    16 [unused]
//   float4 _SH_B;                      // Offset:  112 Size:    16
//   float4 _SH_G;                      // Offset:  128 Size:    16
//   float4 _SH_R;                      // Offset:  144 Size:    16
//   float4x4 _ScreenToWorldMatrix;     // Offset:  160 Size:    64 [unused]
//   float4x4 _ViewProjectionMatrixWithZBias;// Offset:  224 Size:    64 [unused]
//   float4 _VolumeCentreGlobal;        // Offset:  288 Size:    16 [unused]
//   float4 _WorldEdgeFadeParams;       // Offset:  304 Size:    16
//   float3 _DefaultProbeAverageColor;  // Offset:  320 Size:    12 [unused]
//   float _CenterBaseZ;                // Offset:  332 Size:     4 [unused]
//   float3 _DefaultProbeLowerColor;    // Offset:  336 Size:    12 [unused]
//   float _DrawDistance;               // Offset:  348 Size:     4
//   float3 _DefaultProbeUpperColor;    // Offset:  352 Size:    12 [unused]
//   int _ProbeMSAALevel;               // Offset:  364 Size:     4 [unused]
//   float2 _LocalLightsMultipliersGlobal;// Offset:  368 Size:     8 [unused]
//   float2 _RelightingMultiplier;      // Offset:  376 Size:     8 [unused]
//
// }
//
// cbuffer Emitter
// {
//
//   float4 _ParticleLightAttenuations[4];// Offset:    0 Size:    64
//   float4 _ParticleLightColors[4];    // Offset:   64 Size:    64
//   float4 _ParticleLightDirections[4];// Offset:  128 Size:    64
//   float4 _ParticleLightPositions[4]; // Offset:  192 Size:    64
//   float4 _ParticleSpotParams[4];     // Offset:  256 Size:    64
//   float4x4 _ParticleSpotProjMatrix;  // Offset:  320 Size:    64 [unused]
//   float4 _ParticleSpotShadowTextureSize;// Offset:  384 Size:    16 [unused]
//   float4 _ParticleSpotVideoUnpack[8];// Offset:  400 Size:   128 [unused]
//   float4 _RainColor;                 // Offset:  528 Size:    16 [unused]
//   float4x4 _ShadowOcclusionProjMatrix;// Offset:  544 Size:    64 [unused]
//   float4 _SoftClipPlane;             // Offset:  608 Size:    16 [unused]
//   float4 _UniformFog;                // Offset:  624 Size:    16 [unused]
//   float3 _TweakedLightDirection;     // Offset:  640 Size:    12 [unused]
//   float _OneOverSoftRange;           // Offset:  652 Size:     4 [unused]
//   float2 _AlphaScaleOffset;          // Offset:  656 Size:     8
//   float _ParticleZOffset;            // Offset:  664 Size:     4
//   float _QuadTessellationFactor;     // Offset:  668 Size:     4 [unused]
//   float2 _FarSoftDistanceRange;      // Offset:  672 Size:     8 [unused]
//   int _ParticleLightCount;           // Offset:  680 Size:     4
//
// }
//
// cbuffer SceneParticleAttributes
// {
//
//   float4 _DistortionSpeedTiling;     // Offset:    0 Size:    16 [unused]
//   float4 _OpacityCompensationKeyFrames[5];// Offset:   16 Size:    80
//   float _DiffuseLightingPowerExponent;// Offset:   96 Size:     4
//   float _DistortionStrength;         // Offset:  100 Size:     4 [unused]
//   float _HDRMul;                     // Offset:  104 Size:     4
//   float _Translucency;               // Offset:  108 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport__ParaboloidReflectionTexture__SampObj__    sampler      NA          NA    0        1
// LightData__FacettedShadowNoiseTexture__SampObj__    sampler      NA          NA    1        1
// ShadowRealSampler               sampler_c      NA          NA    2        1
// LightProbes__FloorCeilingTexture__SampObj__    sampler      NA          NA    3        1
// LightProbes__VolumeTextureB__SampObj__    sampler      NA          NA    4        1
// LightProbes__VolumeTextureG__SampObj__    sampler      NA          NA    5        1
// LightProbes__VolumeTextureR__SampObj__    sampler      NA          NA    6        1
// Viewport__ParaboloidReflectionTexture__TexObj__    texture  float4          2d    0        1
// LightData__LightShadowTexture__TexObj__    texture  float4          2d    1        1
// LightData__FacettedShadowNoiseTexture__TexObj__    texture  float4          2d    2        1
// LightProbes__FloorCeilingTexture__TexObj__    texture  float4          2d    3        1
// LightProbes__VolumeTextureB__TexObj__    texture  float4          3d    4        1
// LightProbes__VolumeTextureG__TexObj__    texture  float4          3d    5        1
// LightProbes__VolumeTextureR__TexObj__    texture  float4          3d    6        1
// Viewport                          cbuffer      NA          NA    0        1
// LightData                         cbuffer      NA          NA    1        1
// LightProbes                       cbuffer      NA          NA    2        1
// LightProbesGlobal                 cbuffer      NA          NA    3        1
// Emitter                           cbuffer      NA          NA    4        1
// SceneParticleAttributes           cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE   float   xyzw
// color                    1   xyzw        1     NONE   float   xyzw
// texcoord                 4   xyzw        2     NONE   float   xyz 
// texcoord                 5   xyzw        3     NONE   float   xyz 
// texcoord                 6   xyzw        4     NONE   float   xyzw
// texcoord                 7   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xy          5     NONE   float   xy  
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[51], immediateIndexed
dcl_constantbuffer cb1[46], immediateIndexed
dcl_constantbuffer cb2[24], immediateIndexed
dcl_constantbuffer cb3[22], immediateIndexed
dcl_constantbuffer cb4[43], dynamicIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_comparison
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture3d (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_resource_texture3d (float,float,float,float) t6
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xy
dcl_output_siv o6.xyzw, position
dcl_temps 10
mul r0.xyz, v0.yyyy, v3.xyzx
mad r0.xyz, v0.xxxx, v2.xyzx, r0.xyzx
add r0.xyz, r0.xyzx, v4.xyzx
add r1.x, -r0.x, cb0[27].w
add r1.y, -r0.y, cb0[28].w
add r1.z, -r0.z, cb0[29].w
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb4[41].zzzz, r0.xyzx
sincos r1.x, r2.x, v4.w
mov r3.x, -r1.x
add r1.yz, v0.zzwz, l(0.000000, -0.500000, -0.500000, 0.000000)
mov r3.y, r2.x
dp2 r2.x, r1.zyzz, r3.xyxx
mov r3.z, r1.x
dp2 r2.y, r1.zyzz, r3.yzyy
add r1.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad o5.xy, r1.xyxx, v5.zwzz, v5.xyxx
mad r1.x, v1.w, cb4[41].x, cb4[41].y
mov r0.w, l(1.000000)
dp4 r2.x, r0.xyzw, cb0[4].xyzw
dp4 r2.y, r0.xyzw, cb0[5].xyzw
dp4 r2.z, r0.xyzw, cb0[6].xyzw
dp4 r2.w, r0.xyzw, cb0[7].xyzw
add r1.yzw, -r0.xxyz, cb0[36].xxyz
dp3 r3.x, r1.yzwy, r1.yzwy
rsq r3.x, r3.x
mul r1.yzw, r1.yyzw, r3.xxxx
mul r3.xyz, v1.zyxz, v1.zyxz
add r4.xyz, r0.xyzx, -v4.xyzx
dp3 r3.w, r4.xyzx, r4.xyzx
sqrt r3.w, r3.w
div r4.xyz, r4.xyzx, r3.wwww
mov r5.xyzw, l(0,0,0,0)
mov r4.w, l(0)
loop 
  ige r6.x, r4.w, cb4[42].z
  breakc_nz r6.x
  add r6.xyz, -v4.xyzx, cb4[r4.w + 12].xyzx
  dp3 r6.w, r6.xyzx, r6.xyzx
  sqrt r6.w, r6.w
  div r6.xyz, r6.xyzx, r6.wwww
  add r7.xyz, -r0.xyzx, cb4[r4.w + 12].xyzx
  dp3 r7.w, r7.xyzx, r7.xyzx
  rsq r8.x, r7.w
  mul r7.xyz, r7.xyzx, r8.xxxx
  div r6.w, r6.w, r3.w
  min r6.w, r6.w, l(1.000000)
  add r6.w, -r6.w, l(1.000000)
  dp3 r6.x, r6.xyzx, r4.xyzx
  mad_sat r6.x, r6.x, l(0.585800), l(0.585800)
  lt r6.y, l(0.000000), cb4[r4.w + 0].x
  sqrt r6.z, r7.w
  add r6.z, r6.z, l(1.000000)
  mul r6.z, r6.z, r6.z
  div r6.z, l(1.000000, 1.000000, 1.000000, 1.000000), r6.z
  movc r6.y, r6.y, r6.z, r7.w
  mad_sat r6.y, r6.y, cb4[r4.w + 0].y, cb4[r4.w + 0].z
  dp3 r6.z, -r7.xyzx, cb4[r4.w + 8].xyzx
  mad_sat r7.x, r6.z, cb4[r4.w + 16].x, cb4[r4.w + 16].y
  lt r6.z, r6.z, cb4[r4.w + 8].w
  mul r6.x, r6.y, r6.x
  mul r6.x, r7.x, r6.x
  movc r6.x, r6.z, l(0), r6.x
  mad r6.x, cb4[r4.w + 4].w, r6.w, r6.x
  mad r5.xyzw, icb[r4.w + 0].xyzw, r6.xxxx, r5.xyzw
  iadd r4.w, r4.w, l(1)
endloop 
dp4 r4.x, r0.xyzw, cb2[14].xyzw
dp4 r4.y, r0.xyzw, cb2[15].xyzw
dp4_sat r3.w, r0.xyzw, cb2[16].xyzw
add r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r6.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), cb2[9].xyzx
add r4.xy, r4.xyxx, r6.xyxx
add r6.xyw, cb2[9].xyxz, l(-1.000000, -1.000000, 0.000000, -1.000000)
div r4.zw, r6.xxxy, cb2[9].xxxy
mul r4.xy, r4.zwzz, r4.xyxx
lt r6.x, l(0.000000), cb2[18].w
div_sat r6.y, r3.w, cb2[18].w
mul r6.y, r6.y, cb2[19].w
and r6.x, r6.y, r6.x
lt r6.y, cb2[18].w, l(1.000000)
add_sat r3.w, r3.w, -cb2[18].w
add r7.x, -cb2[18].w, l(1.000000)
div r3.w, r3.w, r7.x
log r3.w, r3.w
mul r3.w, r3.w, cb2[9].w
exp r3.w, r3.w
add r6.w, r6.w, -cb2[19].w
mul r3.w, r3.w, r6.w
and r3.w, r3.w, r6.y
add r3.w, r3.w, r6.x
div r6.x, r3.w, cb2[9].z
round_ni r6.y, r3.w
div r6.y, r6.y, cb2[9].z
round_pi r3.w, r3.w
div r3.w, r3.w, cb2[9].z
mov_sat r6.w, r4.y
div r6.w, r6.w, cb2[9].z
add r4.z, r6.y, r6.w
sample_l_indexable(texture2d)(float,float,float,float) r7.xy, r4.xzxx, t3.xyzw, s3, l(0.000000)
add r7.zw, -r7.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
mad r4.z, r7.w, l(0.250000), r7.y
min r4.z, r4.z, r7.z
div r6.w, r7.x, cb2[9].z
add r6.w, r6.w, r6.y
add r6.x, -r6.w, r6.x
mul r6.x, r6.x, cb2[9].z
div_sat r4.z, r6.x, r4.z
add r3.w, -r6.y, r3.w
mad r3.w, r4.z, r3.w, r6.y
add r4.w, r6.z, r3.w
sample_l_indexable(texture3d)(float,float,float,float) r6.xyzw, r4.xywx, t6.xyzw, s6, l(0.000000)
sample_l_indexable(texture3d)(float,float,float,float) r7.xyzw, r4.xywx, t5.xyzw, s5, l(0.000000)
sample_l_indexable(texture3d)(float,float,float,float) r4.xyzw, r4.xywx, t4.xyzw, s4, l(0.000000)
add r3.w, cb3[21].w, l(-30.000000)
add r8.xyz, r0.xyzx, -cb0[38].xyzx
dp2 r8.x, r8.xyxx, r8.xyxx
sqrt r8.x, r8.x
max r8.x, |r8.z|, r8.x
add r8.x, -r3.w, r8.x
add r3.w, -r3.w, cb3[21].w
div_sat r3.w, r8.x, r3.w
add r8.x, cb2[22].z, cb2[23].z
add r8.x, -r0.z, r8.x
mul_sat r8.x, r8.x, l(0.033333)
add r8.x, -r8.x, l(1.000000)
max r3.w, r3.w, r8.x
mad r8.xy, |r0.xyxx|, cb3[19].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
mul_sat r8.xy, r8.xyxx, cb3[19].zwzz
max r8.x, r8.y, r8.x
max r3.w, r3.w, r8.x
add r8.xyzw, -r6.xyzw, cb3[9].xyzw
mad r6.xyzw, r3.wwww, r8.xyzw, r6.xyzw
add r8.xyzw, -r7.xyzw, cb3[8].xyzw
mad r7.xyzw, r3.wwww, r8.xyzw, r7.xyzw
add r8.xyzw, -r4.xyzw, cb3[7].xyzw
mad r4.xyzw, r3.wwww, r8.xyzw, r4.xyzw
max r6.xyzw, r6.xyzw, cb3[5].xxxw
max r7.xyzw, r7.xyzw, cb3[5].yyyw
max r4.xyzw, r4.xywz, cb3[5].zzwz
add r6.xyz, r6.xyzx, r7.xyzx
add r6.xyz, r4.xywx, r6.xyzx
mov r4.x, r6.w
mov r4.y, r7.w
add r4.xyz, r4.xyzx, r6.xyzx
mul r4.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
ge r3.w, l(0.000000), cb0[47].w
movc r3.w, r3.w, l(-10.000000), l(-10000.000000)
ge r3.w, r0.z, r3.w
add r6.xyz, r0.xyzx, -cb0[36].xyzx
dp3 r4.w, r6.xyzx, r6.xyzx
rsq r7.x, r4.w
max r6.w, r6.z, l(0.000000)
dp3 r7.y, r6.xywx, r6.xywx
rsq r7.y, r7.y
mul r7.xyzw, r6.zxyw, r7.xyyy
sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, l(0.750000, 0.500000, 0.000000, 0.000000), t0.xyzw, s0, l(6.000000)
mad r6.w, r7.w, l(2.000000), l(2.000000)
div r7.yz, r7.zzyz, r6.wwww
add r6.w, -r7.y, l(0.500000)
add_sat r9.y, r7.z, l(0.500000)
max_sat r9.x, r6.w, l(0.125000)
mad r9.z, r9.x, l(0.500000), l(0.500000)
sample_l_indexable(texture2d)(float,float,float,float) r7.yzw, r9.zyzz, t0.wxyz, s0, l(6.000000)
add r8.xyz, -r7.yzwy, r8.xyzx
mad r7.xyz, |r7.xxxx|, r8.xyzx, r7.yzwy
mul r7.xyz, r7.xyzx, cb0[50].xyzx
mul r7.xyz, r7.xyzx, cb0[49].wwww
sqrt r4.w, r4.w
mul r8.xy, r4.wwww, cb0[48].zwzz
lt r4.w, l(0.010000), |r6.z|
mul r8.zw, r6.zzzz, l(0.000000, 0.000000, 1.000000, -1.000000)
mul r8.zw, r8.zzzw, cb0[49].xxxy
mul r9.xy, r8.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
exp r9.xy, r9.xyxx
add r9.xy, -r9.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
div r8.zw, r9.xxxy, r8.zzzw
mul r8.zw, r8.zzzw, r8.xxxy
movc r8.xy, r4.wwww, r8.zwzz, r8.xyxx
mul r8.xy, r8.xyxx, -cb0[48].xyxx
mul r8.xy, r8.xyxx, l(1.442695, 1.442695, 0.000000, 0.000000)
exp r8.xy, r8.xyxx
add r8.xy, -r8.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
max r4.w, r8.y, r8.x
log r4.w, r4.w
mul r4.w, r4.w, cb0[50].w
exp r4.w, r4.w
min r7.w, r4.w, cb0[49].z
movc r7.xyzw, r3.wwww, r7.xyzw, l(0,0,0,1.000000)
mul r8.xyz, r7.wwww, r7.xyzx
add r8.w, -r7.w, l(1.000000)
mul o1.xyzw, r8.xyzw, cb0[38].wwww
mul_sat o0.xyz, r3.xyzx, cb5[6].zzzz
dp3 r3.x, r1.yzwy, -cb1[44].xyzx
mad_sat r3.x, r3.x, l(0.500000), l(0.500000)
log r3.x, r3.x
mul r3.x, r3.x, cb5[6].x
exp r3.x, r3.x
dp3_sat r1.y, -r1.yzwy, -cb1[44].xyzx
mul r1.yzw, r1.yyyy, cb1[45].xxyz
mul r1.yzw, r1.yyzw, cb5[6].wwww
mad r1.yzw, cb1[45].xxyz, r3.xxxx, r1.yyzw
dp4 r3.x, r0.xyzw, cb1[31].xyzw
dp4 r3.y, r0.xyzw, cb1[32].xyzw
dp4 r0.x, r0.xyzw, cb1[33].xyzw
dp2 r7.x, r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
dp2 r7.y, r3.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
dp2 r7.z, r3.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r7.w, r3.yxyy, l(1.000000, -1.000000, 0.000000, 0.000000)
ge r7.xyzw, r7.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r7.xyzw, r7.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
mul r0.yzw, r7.zzwx, r7.yyzw
ne r0.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), r0.yyzw
movc r7.xy, r0.yyyy, l(0,-1.000000,0,0), l(1.000000,0,0,0)
movc r0.yz, r0.zzzz, l(0,-1.000000,0,0), r7.xxyx
movc r0.yz, r0.wwww, l(0,0,1.000000,0), r0.yyzy
dp2 r0.y, r3.xyxx, r0.yzyy
add r0.z, r0.y, cb1[11].y
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.x
mul r3.z, r0.x, r0.x
mul r3.xyz, r3.xyzx, cb1[11].xxxx
mad_sat r0.x, r0.y, cb1[11].z, cb1[11].w
div r0.yzw, r3.xxyz, r0.zzzz
add r3.x, r0.w, l(-0.900000)
mul_sat r3.x, r3.x, l(10.000000)
max r0.x, r0.x, r3.x
mul r3.xy, cb1[30].zwzz, l(2.200000, 2.200000, 0.000000, 0.000000)
mad r3.zw, cb1[30].zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
mad r0.yz, r0.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), r3.zzwz
sample_l_indexable(texture2d)(float,float,float,float) r3.zw, l(0.000000, 0.000000, 0.000000, 0.000000), t2.zwxy, s1, l(0.000000)
mad r3.zw, r3.wwwz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r7.xy, r3.zzzz, l(-0.062001, 0.194514, 0.000000, 0.000000)
mad r7.xy, r3.wwww, l(0.649558, -0.252099, 0.000000, 0.000000), -r7.xyxx
dp2 r7.z, r3.wzww, l(-0.062001, 0.649558, 0.000000, 0.000000)
mul r8.xy, r3.xyxx, r7.xzxx
mov r8.z, l(0)
add r8.xyz, r0.yzwy, r8.xyzx
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r4.w, r8.xyxx, t1.xxxx, s2, r8.z
dp2 r7.w, r3.wzww, l(0.194514, -0.252099, 0.000000, 0.000000)
mul r7.xy, r3.xyxx, r7.ywyy
mov r7.z, l(0)
add r7.xyz, r0.yzwy, r7.xyzx
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r6.w, r7.xyxx, t1.xxxx, s2, r7.z
add r4.w, r4.w, r6.w
mul r7.xy, r3.zzzz, l(-0.602611, 0.987966, 0.000000, 0.000000)
mad r7.xy, r3.wwww, l(-0.167516, 0.080063, 0.000000, 0.000000), -r7.xyxx
dp2 r7.z, r3.wzww, l(-0.602611, -0.167516, 0.000000, 0.000000)
mul r8.xy, r3.xyxx, r7.xzxx
mov r8.z, l(0)
add r8.xyz, r0.yzwy, r8.xyzx
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r6.w, r8.xyxx, t1.xxxx, s2, r8.z
add r4.w, r4.w, r6.w
dp2 r7.w, r3.wzww, l(0.987966, 0.080063, 0.000000, 0.000000)
mul r3.xy, r3.xyxx, r7.ywyy
mov r3.z, l(0)
add r0.yzw, r0.yyzw, r3.xxyz
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r0.y, r0.yzyy, t1.xxxx, s2, r0.w
add r0.y, r0.y, r4.w
mul r0.z, r0.y, l(0.250000)
mad r0.y, -r0.y, l(0.250000), l(1.000000)
mad r0.x, r0.x, r0.y, r0.z
mad r0.xyz, r1.yzwy, r0.xxxx, r4.xyzx
mul r1.yzw, r5.yyyy, cb4[5].xxyz
mad r1.yzw, cb4[4].xxyz, r5.xxxx, r1.yyzw
mad r1.yzw, cb4[6].xxyz, r5.zzzz, r1.yyzw
add r1.yzw, r0.xxyz, r1.yyzw
div r1.yzw, r1.yyzw, cb0[39].wwww
dp3_sat r0.w, r1.yzwy, l(0.212500, 0.715400, 0.072100, 0.000000)
ge r1.yz, r0.wwww, cb5[1].xxzx
ge r1.w, cb5[1].z, r0.w
and r1.yzw, r1.yyzw, l(0, 0x3f800000, 0x3f800000, 0x3f800000)
mul r1.y, r1.w, r1.y
add r3.xy, r0.wwww, -cb5[1].xzxx
add r3.zw, -cb5[1].xxxy, cb5[1].zzzw
div r1.w, r3.x, r3.z
mad r1.w, r1.w, r3.w, cb5[1].y
mul r1.y, r1.w, r1.y
ge r3.xz, cb5[2].xxzx, r0.wwww
and r3.xz, r3.xxzx, l(0x3f800000, 0, 0x3f800000, 0)
mul r1.z, r1.z, r3.x
add r3.xw, -cb5[1].zzzw, cb5[2].xxxy
div r1.w, r3.y, r3.x
mad r1.w, r1.w, r3.w, cb5[1].w
mul r1.z, r1.w, r1.z
max r1.yz, r1.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
add r1.y, r1.z, r1.y
ge r1.zw, r0.wwww, cb5[2].xxxz
and r1.zw, r1.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
mul r1.z, r3.z, r1.z
add r3.xy, r0.wwww, -cb5[2].xzxx
add r3.zw, -cb5[2].xxxy, cb5[2].zzzw
div r3.x, r3.x, r3.z
mad r3.x, r3.x, r3.w, cb5[2].y
mul r1.z, r1.z, r3.x
max r1.z, r1.z, l(0.000000)
add r1.y, r1.z, r1.y
ge r3.xz, cb5[3].xxzx, r0.wwww
and r3.xz, r3.xxzx, l(0x3f800000, 0, 0x3f800000, 0)
mul r1.z, r1.w, r3.x
add r3.xw, -cb5[2].zzzw, cb5[3].xxxy
div r1.w, r3.y, r3.x
mad r1.w, r1.w, r3.w, cb5[2].w
mul r1.z, r1.w, r1.z
max r1.z, r1.z, l(0.000000)
add r1.y, r1.z, r1.y
ge r1.zw, r0.wwww, cb5[3].xxxz
and r1.zw, r1.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
mul r1.z, r3.z, r1.z
add r3.xy, r0.wwww, -cb5[3].xzxx
add r3.zw, -cb5[3].xxxy, cb5[3].zzzw
div r3.x, r3.x, r3.z
mad r3.x, r3.x, r3.w, cb5[3].y
mul r1.z, r1.z, r3.x
max r1.z, r1.z, l(0.000000)
add r1.y, r1.z, r1.y
ge r3.xz, cb5[4].xxzx, r0.wwww
and r3.xz, r3.xxzx, l(0x3f800000, 0, 0x3f800000, 0)
mul r1.z, r1.w, r3.x
add r3.xw, -cb5[3].zzzw, cb5[4].xxxy
div r1.w, r3.y, r3.x
mad r1.w, r1.w, r3.w, cb5[3].w
mul r1.z, r1.w, r1.z
max r1.z, r1.z, l(0.000000)
add r1.y, r1.z, r1.y
ge r1.zw, r0.wwww, cb5[4].xxxz
and r1.zw, r1.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
mul r1.z, r3.z, r1.z
add r3.xy, r0.wwww, -cb5[4].xzxx
add r3.zw, -cb5[4].xxxy, cb5[4].zzzw
div r3.x, r3.x, r3.z
mad r3.x, r3.x, r3.w, cb5[4].y
mul r1.z, r1.z, r3.x
max r1.z, r1.z, l(0.000000)
add r1.y, r1.z, r1.y
ge r3.xz, cb5[5].xxzx, r0.wwww
and r3.xz, r3.xxzx, l(0x3f800000, 0, 0x3f800000, 0)
mul r1.z, r1.w, r3.x
add r3.xw, -cb5[4].zzzw, cb5[5].xxxy
div r1.w, r3.y, r3.x
mad r1.w, r1.w, r3.w, cb5[4].w
mul r1.z, r1.w, r1.z
max r1.z, r1.z, l(0.000000)
add r1.y, r1.z, r1.y
ge r1.z, r0.w, cb5[5].x
and r1.z, r1.z, l(0x3f800000)
mul r1.z, r3.z, r1.z
add r0.w, r0.w, -cb5[5].x
add r3.xy, -cb5[5].xyxx, cb5[5].zwzz
div r0.w, r0.w, r3.x
mad r0.w, r0.w, r3.y, cb5[5].y
mul r0.w, r0.w, r1.z
max r0.w, r0.w, l(0.000000)
add r0.w, r0.w, r1.y
mul_sat o0.w, r1.x, r0.w
dp4 o3.x, r2.xyzw, cb0[20].xyzw
dp4 o3.y, r2.xyzw, cb0[21].xyzw
dp4 o3.z, r2.xyzw, cb0[23].xyzw
dp3 r0.w, cb0[37].xyzx, r6.xyzx
mul o3.w, r0.w, cb0[34].w
mov o2.xyzw, r5.xyzw
mov o6.xyzw, r2.xyzw
mov o4.xyz, r0.xyzx
ret 
// Approximately 366 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
