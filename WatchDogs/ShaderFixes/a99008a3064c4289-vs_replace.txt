//Smoke
cbuffer Viewport : register(b0)
{
  float4x4 _ViewRotProjectionMatrix : packoffset(c0);
  float4x4 _ViewProjectionMatrix : packoffset(c4);
  float4x4 _ProjectionMatrix : packoffset(c8);
  float4x4 _InvProjectionMatrix : packoffset(c12);
  float4x4 _InvProjectionMatrixDepth : packoffset(c16);
  float4x4 _DepthTextureTransform : packoffset(c20);
  float4x3 _ViewMatrix : packoffset(c24);
  float4x3 _InvViewMatrix : packoffset(c27);
  float4x4 _PreviousViewProjectionMatrix : packoffset(c30);
  float4 _CameraDistances : packoffset(c34);
  float4 _ViewportSize : packoffset(c35);
  float4 _CameraPosition_MaxStaticReflectionMipIndex : packoffset(c36);
  float4 _CameraDirection_MaxParaboloidReflectionMipIndex : packoffset(c37);
  float4 _ViewPoint_ExposureScale : packoffset(c38);
  float4 _FogColorVector_ExposedWhitePointOverExposureScale : packoffset(c39);
  float3 _SideFogColor : packoffset(c40);
  float3 _SunFogColorDelta : packoffset(c41);
  float3 _OppositeFogColorDelta : packoffset(c42);
  float4 _FogValues0 : packoffset(c43);
  float4 _FogValues1 : packoffset(c44);
  float4 _CameraNearPlaneSize : packoffset(c45);
  float4 _UncompressDepthWeights_ShadowProjDepthMinValue : packoffset(c46);
  float4 _UncompressDepthWeightsWS_ReflectionFadeTarget : packoffset(c47);
  float4 _WorldAmbientColorParams0 : packoffset(c48);
  float4 _WorldAmbientColorParams1 : packoffset(c49);
  float4 _WorldAmbientColorParams2 : packoffset(c50);
  float4 _GlobalWorldTextureParams : packoffset(c51);
  float4 _CullingCameraPosition_OneOverAutoExposureScale : packoffset(c52);
  float4 _AmbientSkyColor_ReflectionScaleStrength : packoffset(c53);
  float4 _AmbientGroundColor_ReflectionScaleDistanceMul : packoffset(c54);
  float4 _FacettedShadowCastParams : packoffset(c55);
  float4 _FSMClipPlanes : packoffset(c56);
  float2 _ReflectionGIControl : packoffset(c57);
}

cbuffer LightProbes : register(b1)
{
  float4 _InteriorIrradianceRadianceScale : packoffset(c0);
  float4x4 _LocalToWorldMatrixWithFeatherMargin : packoffset(c1);
  float4x4 _LocalToWorldMatrixWithoutFeatherMargin : packoffset(c5);
  float4 _MiscDataToTidy : packoffset(c9);
  float4x4 _ScreenToLocalMatrix : packoffset(c10);
  float4x4 _WorldToLocalMatrix : packoffset(c14);
  float3 _InteriorAmbientLightInfo : packoffset(c18);
  float _LinearGridResCutoff : packoffset(c18.w);
  float3 _InteriorUVWBias : packoffset(c19);
  float _MaxLinearSliceIndex : packoffset(c19.w);
  float3 _InteriorUVWScale : packoffset(c20);
  float3 _RcpFeatherWidthsInBasicUVWSpace : packoffset(c21);
  float3 _VolumeCentre : packoffset(c22);
  float3 _VolumeDimensions : packoffset(c23);
  float2 _IrradianceSHInfo : packoffset(c24);
  float2 _MaxDepthBoundsInnerOuter : packoffset(c24.z);
  float2 _RadianceSHInfo : packoffset(c25);
  float2 _SkySHInfo : packoffset(c25.z);
}

cbuffer LightProbesGlobal : register(b2)
{
  float4x4 _BoxMatrix : packoffset(c0);
  float4 _LightProbesMultipliers : packoffset(c4);
  float4 _MinAmbient : packoffset(c5);
  float4 _ProbeUVToViewSpace : packoffset(c6);
  float4 _SH_B : packoffset(c7);
  float4 _SH_G : packoffset(c8);
  float4 _SH_R : packoffset(c9);
  float4x4 _ScreenToWorldMatrix : packoffset(c10);
  float4x4 _ViewProjectionMatrixWithZBias : packoffset(c14);
  float4 _VolumeCentreGlobal : packoffset(c18);
  float4 _WorldEdgeFadeParams : packoffset(c19);
  float3 _DefaultProbeAverageColor : packoffset(c20);
  float _CenterBaseZ : packoffset(c20.w);
  float3 _DefaultProbeLowerColor : packoffset(c21);
  float _DrawDistance : packoffset(c21.w);
  float3 _DefaultProbeUpperColor : packoffset(c22);
  int _ProbeMSAALevel : packoffset(c22.w);
  float2 _LocalLightsMultipliersGlobal : packoffset(c23);
  float2 _RelightingMultiplier : packoffset(c23.z);
}

cbuffer Emitter : register(b3)
{
  float4 _ParticleLightAttenuations[4] : packoffset(c0);
  float4 _ParticleLightColors[4] : packoffset(c4);
  float4 _ParticleLightDirections[4] : packoffset(c8);
  float4 _ParticleLightPositions[4] : packoffset(c12);
  float4 _ParticleSpotParams[4] : packoffset(c16);
  float4x4 _ParticleSpotProjMatrix : packoffset(c20);
  float4 _ParticleSpotShadowTextureSize : packoffset(c24);
  float4 _ParticleSpotVideoUnpack[8] : packoffset(c25);
  float4 _RainColor : packoffset(c33);
  float4x4 _ShadowOcclusionProjMatrix : packoffset(c34);
  float4 _SoftClipPlane : packoffset(c38);
  float4 _UniformFog : packoffset(c39);
  float3 _TweakedLightDirection : packoffset(c40);
  float _OneOverSoftRange : packoffset(c40.w);
  float2 _AlphaScaleOffset : packoffset(c41);
  float _ParticleZOffset : packoffset(c41.z);
  float _QuadTessellationFactor : packoffset(c41.w);
  float2 _FarSoftDistanceRange : packoffset(c42);
  int _ParticleLightCount : packoffset(c42.z);
}

cbuffer SceneParticleAttributes : register(b4)
{
  float4 _DistortionSpeedTiling : packoffset(c0);
  float4 _OpacityCompensationKeyFrames[5] : packoffset(c1);
  float _DiffuseLightingPowerExponent : packoffset(c6);
  float _DistortionStrength : packoffset(c6.y);
  float _HDRMul : packoffset(c6.z);
  float _Translucency : packoffset(c6.w);
}
SamplerState Viewport__ParaboloidReflectionTexture__SampObj___s : register(s0);
SamplerState LightProbes__FloorCeilingTexture__SampObj___s : register(s1);
SamplerState LightProbes__VolumeTextureB__SampObj___s : register(s2);
SamplerState LightProbes__VolumeTextureG__SampObj___s : register(s3);
SamplerState LightProbes__VolumeTextureR__SampObj___s : register(s4);
Texture2D<float4> Viewport__ParaboloidReflectionTexture__TexObj__ : register(t0);
Texture2D<float4> LightProbes__FloorCeilingTexture__TexObj__ : register(t1);
Texture3D<float4> LightProbes__VolumeTextureB__TexObj__ : register(t2);
Texture3D<float4> LightProbes__VolumeTextureG__TexObj__ : register(t3);
Texture3D<float4> LightProbes__VolumeTextureR__TexObj__ : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : position0,
  float4 v1 : color1,
  float4 v2 : texcoord4,
  float4 v3 : texcoord5,
  float4 v4 : texcoord6,
  float4 v5 : texcoord7,
  float4 v6 : texcoord8,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : TEXCOORD5,
  out float4 o6 : SV_Position0)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask;
  r0.xyz = v3.xyz * v0.yyy;
  r0.xyz = v0.xxx * v2.xyz + r0.xyz;
  r0.xyz = v4.xyz + r0.xyz;
  r1.x = _InvViewMatrix._m30 + -r0.x;
  r1.y = _InvViewMatrix._m31 + -r0.y;
  r1.z = _InvViewMatrix._m32 + -r0.z;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * _ParticleZOffset + r0.xyz;
  sincos(v4.w, r1.x, r2.x);
  r3.x = -r1.x;
  r1.yz = float2(-5.000000e-001,-5.000000e-001) + v0.zw;
  r3.y = r2.x;
  r2.z = dot(r1.zy, r3.xy);
  r3.z = r1.x;
  r2.w = dot(r1.zy, r3.yz);
  r1.xy = float2(5.000000e-001,5.000000e-001) + r2.zw;
  o5.xy = r1.xy * v5.zw + v5.xy;
  o5.zw = r1.xy * v5.zw + v6.xy;
  r1.x = v1.w * _AlphaScaleOffset.x + _AlphaScaleOffset.y;
  r0.w = 1.000000000e+000;
  r2.x = dot(r0.xyzw, _ViewProjectionMatrix._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, _ViewProjectionMatrix._m01_m11_m21_m31);
  r2.z = dot(r0.xyzw, _ViewProjectionMatrix._m02_m12_m22_m32);
  r2.w = dot(r0.xyzw, _ViewProjectionMatrix._m03_m13_m23_m33);
  
float4 stereo = StereoParams.Load(0);
float4 r22 = r2;
r2.x += stereo.x*(r2.w - stereo.y);

  r1.yzw = v1.zyx * v1.zyx;
  r3.xyz = -v4.xyz + r0.xyz;
  r3.w = dot(r3.xyz, r3.xyz);
  r3.w = sqrt(r3.w);
  r3.xyz = r3.xyz / r3.www;
  r4.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r5.x = 0.000000000e+000;
  while (true) {
  r5.y = (int)r5.x >= (int)_ParticleLightCount;
  if (r5.y != 0) break;
  r5.yzw = _ParticleLightPositions[r5.x].xyz + -v4.xyz;
  r6.x = dot(r5.yzw, r5.yzw);
  r6.x = sqrt(r6.x);
  r5.yzw = r5.yzw / r6.xxx;
  r6.yzw = _ParticleLightPositions[r5.x].xyz + -r0.xyz;
  r7.x = dot(r6.yzw, r6.yzw);
  r7.y = rsqrt(r7.x);
  r6.yzw = r7.yyy * r6.yzw;
  r6.x = r6.x / r3.w;
  r6.x = min(r6.x, 1.000000000e+000);
  r6.x = 1.000000000e+000 + -r6.x;
  r5.y = dot(r5.yzw, r3.xyz);
  r5.y = saturate(r5.y * 5.857999921e-001 + 5.857999921e-001);
  r5.z = 0.000000000e+000 < _ParticleLightAttenuations[r5.x].x;
  r5.w = sqrt(r7.x);
  r5.w = 1.000000000e+000 + r5.w;
  r5.w = r5.w * r5.w;
  r5.w = 1.000000e+000 / r5.w;
  r5.z = r5.z ? r5.w : r7.x;
  r5.z = saturate(r5.z * _ParticleLightAttenuations[r5.x].y + _ParticleLightAttenuations[r5.x].z);
  r5.w = dot(-r6.yzw, _ParticleLightDirections[r5.x].xyz);
  r6.y = saturate(r5.w * _ParticleSpotParams[r5.x].x + _ParticleSpotParams[r5.x].y);
  r5.w = r5.w < _ParticleLightDirections[r5.x].w;
  r5.y = r5.y * r5.z;
  r5.y = r5.y * r6.y;
  r5.y = r5.w ? 0.000000000e+000 : r5.y;
  r5.y = _ParticleLightColors[r5.x].w * r6.x + r5.y;
  r4.xyzw = icb[r5.x].xyzw * r5.yyyy + r4.xyzw;
  r5.x = (int)r5.x + 1;
  }
  r3.x = dot(r0.xyzw, _WorldToLocalMatrix._m00_m10_m20_m30);
  r3.y = dot(r0.xyzw, _WorldToLocalMatrix._m01_m11_m21_m31);
  r0.w = saturate(dot(r0.xyzw, _WorldToLocalMatrix._m02_m12_m22_m32));
  r3.xy = float2(5.000000e-001,5.000000e-001) + r3.xy;
  r5.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) / _MiscDataToTidy.xyz;
  r3.xy = r5.xy + r3.xy;
  r5.xyw = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + _MiscDataToTidy.xyz;
  r3.zw = r5.xy / _MiscDataToTidy.xy;
  r3.xy = r3.xy * r3.zw;
  r5.x = 0.000000000e+000 < _LinearGridResCutoff;
  r5.y = saturate(r0.w / _LinearGridResCutoff);
  r5.y = _MaxLinearSliceIndex * r5.y;
  r5.x = (int)r5.y & (int)r5.x;
  r5.y = _LinearGridResCutoff < 1.000000000e+000;
  r0.w = saturate(-_LinearGridResCutoff + r0.w);
  r6.x = 1.000000000e+000 + -_LinearGridResCutoff;
  r0.w = r0.w / r6.x;
  r0.w = log2(r0.w);
  r0.w = _MiscDataToTidy.w * r0.w;
  r0.w = exp2(r0.w);
  r5.w = -_MaxLinearSliceIndex + r5.w;
  r0.w = r5.w * r0.w;
  r0.w = (int)r0.w & (int)r5.y;
  r0.w = r5.x + r0.w;
  r5.x = r0.w / _MiscDataToTidy.z;
  r5.y = floor(r0.w);
  r5.y = r5.y / _MiscDataToTidy.z;
  r0.w = ceil(r0.w);
  r0.w = r0.w / _MiscDataToTidy.z;
  r5.w = saturate(r3.y);
  r5.w = r5.w / _MiscDataToTidy.z;
  r3.z = r5.w + r5.y;
  r6.xy = LightProbes__FloorCeilingTexture__TexObj__.SampleLevel(LightProbes__FloorCeilingTexture__SampObj___s, r3.xz, 0.000000000e+000).xy;
  r6.zw = float2(1.000000e+000,1.000000e+000) + -r6.xy;
  r3.z = r6.w * 2.500000000e-001 + r6.y;
  r3.z = min(r3.z, r6.z);
  r5.w = r6.x / _MiscDataToTidy.z;
  r5.w = r5.y + r5.w;
  r5.x = r5.x + -r5.w;
  r5.x = _MiscDataToTidy.z * r5.x;
  r3.z = saturate(r5.x / r3.z);
  r0.w = r0.w + -r5.y;
  r0.w = r3.z * r0.w + r5.y;
  r3.w = r0.w + r5.z;
  r5.xyzw = LightProbes__VolumeTextureR__TexObj__.SampleLevel(LightProbes__VolumeTextureR__SampObj___s, r3.xyw, 0.000000000e+000).xyzw;
  r6.xyzw = LightProbes__VolumeTextureG__TexObj__.SampleLevel(LightProbes__VolumeTextureG__SampObj___s, r3.xyw, 0.000000000e+000).xyzw;
  r3.xyzw = LightProbes__VolumeTextureB__TexObj__.SampleLevel(LightProbes__VolumeTextureB__SampObj___s, r3.xyw, 0.000000000e+000).xyzw;
  r0.w = -3.000000000e+001 + _DrawDistance;
  r7.xyz = -_ViewPoint_ExposureScale.xyz + r0.xyz;
  r7.x = dot(r7.xy, r7.xy);
  r7.x = sqrt(r7.x);
  r7.x = max(abs(r7.z), r7.x);
  r7.x = r7.x + -r0.w;
  r0.w = _DrawDistance + -r0.w;
  r0.w = saturate(r7.x / r0.w);
  r7.x = _VolumeDimensions.z + _VolumeCentre.z;
  r7.x = r7.x + -r0.z;
  r7.x = saturate(3.333333507e-002 * r7.x);
  r7.x = 1.000000000e+000 + -r7.x;
  r0.w = max(r0.w, r7.x);
  r7.xy = abs(r0.xy) * _WorldEdgeFadeParams.xy + float2(-1.000000e+000,-1.000000e+000);
  r7.xy = saturate(_WorldEdgeFadeParams.zw * r7.xy);
  r7.x = max(r7.y, r7.x);
  r0.w = max(r0.w, r7.x);
  r7.xyzw = _SH_R.xyzw + -r5.xyzw;
  r5.xyzw = r0.wwww * r7.xyzw + r5.xyzw;
  r7.xyzw = _SH_G.xyzw + -r6.xyzw;
  r6.xyzw = r0.wwww * r7.xyzw + r6.xyzw;
  r7.xyzw = _SH_B.xyzw + -r3.xyzw;
  r3.xyzw = r0.wwww * r7.xyzw + r3.xyzw;
  r5.xyzw = max(r5.xyzw, _MinAmbient.xxxw);
  r6.xyzw = max(r6.xyzw, _MinAmbient.yyyw);
  r3.xyzw = max(r3.xywz, _MinAmbient.zzwz);
  r5.xyz = r6.xyz + r5.xyz;
  r5.xyz = r5.xyz + r3.xyw;
  r3.x = r5.w;
  r3.y = r6.w;
  r3.xyz = r5.xyz + r3.xyz;
  r5.xyz = float3(2.500000e-001,2.500000e-001,2.500000e-001) * r3.xyz;
  r0.w = 0.000000000e+000 >= _UncompressDepthWeightsWS_ReflectionFadeTarget.w;
  r0.w = r0.w ? -1.000000000e+001 : -1.000000000e+004;
  r0.w = r0.z >= r0.w;
  r6.xyz = -_CameraPosition_MaxStaticReflectionMipIndex.xyz + r0.xyz;
  r0.x = dot(r6.xyz, r6.xyz);
  r0.y = rsqrt(r0.x);
  r0.y = r6.z * r0.y;
  r6.w = max(r6.z, 0.000000000e+000);
  r0.z = dot(r6.xyw, r6.xyw);
  r0.z = rsqrt(r0.z);
  r7.xyz = r6.xyw * r0.zzz;
  r8.xyz = Viewport__ParaboloidReflectionTexture__TexObj__.SampleLevel(Viewport__ParaboloidReflectionTexture__SampObj___s, float2(7.500000e-001,5.000000e-001), 6.000000000e+000).xyz;
  r0.z = r7.z * 2.000000000e+000 + 2.000000000e+000;
  r7.xy = r7.yx / r0.zz;
  r0.z = 5.000000000e-001 + -r7.x;
  r7.y = saturate(5.000000000e-001 + r7.y);
  r7.x = saturate(max(r0.z, 1.250000000e-001));
  r7.z = r7.x * 5.000000000e-001 + 5.000000000e-001;
  r7.xyz = Viewport__ParaboloidReflectionTexture__TexObj__.SampleLevel(Viewport__ParaboloidReflectionTexture__SampObj___s, r7.zy, 6.000000000e+000).xyz;
  r8.xyz = r8.xyz + -r7.xyz;
  r7.xyz = abs(r0.yyy) * r8.xyz + r7.xyz;
  r7.xyz = _WorldAmbientColorParams2.xyz * r7.xyz;
  r7.xyz = _WorldAmbientColorParams1.www * r7.xyz;
  r0.x = sqrt(r0.x);
  r0.xy = _WorldAmbientColorParams0.zw * r0.xx;
  r0.z = 9.999999776e-003 < abs(r6.z);
  r8.xy = float2(1.000000e+000,-1.000000e+000) * r6.zz;
  r8.xy = _WorldAmbientColorParams1.xy * r8.xy;
  r8.zw = float2(-1.442695e+000,-1.442695e+000) * r8.xy;
  r8.zw = exp2(r8.zw);
  r8.zw = float2(1.000000e+000,1.000000e+000) + -r8.zw;
  r8.xy = r8.zw / r8.xy;
  r8.xy = r8.xy * r0.xy;
  r0.x = r0.z ? r8.x : r0.x;
  r0.y = r0.z ? r8.y : r0.y;
  r0.xy = -_WorldAmbientColorParams0.xy * r0.xy;
  r0.xy = float2(1.442695e+000,1.442695e+000) * r0.xy;
  r0.xy = exp2(r0.xy);
  r0.xy = float2(1.000000e+000,1.000000e+000) + -r0.xy;
  r0.x = max(r0.y, r0.x);
  r0.x = log2(r0.x);
  r0.x = _WorldAmbientColorParams2.w * r0.x;
  r0.x = exp2(r0.x);
  r7.w = min(r0.x, _WorldAmbientColorParams1.z);
  r0.x = r0.w ? r7.x : 0;
  r0.y = r0.w ? r7.y : 0;
  r0.z = r0.w ? r7.z : 0;
  r0.w = r0.w ? r7.w : 1;
  r7.xyz = r0.xyz * r0.www;
  r7.w = 1.000000000e+000 + -r0.w;
  o1.xyzw = _ViewPoint_ExposureScale.wwww * r7.xyzw;
  o0.xyz = saturate(_HDRMul * r1.yzw);
  r0.xyz = _ParticleLightColors[1].xyz * r4.yyy;
  r0.xyz = _ParticleLightColors[0].xyz * r4.xxx + r0.xyz;
  r0.xyz = _ParticleLightColors[2].xyz * r4.zzz + r0.xyz;
  r0.xyz = r3.xyz * float3(2.500000e-001,2.500000e-001,2.500000e-001) + r0.xyz;
  r0.xyz = r0.xyz / _FogColorVector_ExposedWhitePointOverExposureScale.www;
  r0.x = saturate(dot(r0.xyz, float3(2.125000e-001,7.154000e-001,7.210000e-002)));
  r0.y = r0.x >= _OpacityCompensationKeyFrames[0].x;
  r0.z = r0.x >= _OpacityCompensationKeyFrames[0].z;
  r0.w = _OpacityCompensationKeyFrames[0].z >= r0.x;
  r0.y = r0.y ? 1 : 0;
  r0.z = r0.z ? 1 : 0;
  r0.w = r0.w ? 1 : 0;
  r0.y = r0.y * r0.w;
  r1.yz = -_OpacityCompensationKeyFrames[0].xz + r0.xx;
  r3.xy = _OpacityCompensationKeyFrames[0].zw + -_OpacityCompensationKeyFrames[0].xy;
  r0.w = r1.y / r3.x;
  r0.w = r0.w * r3.y + _OpacityCompensationKeyFrames[0].y;
  r0.y = r0.y * r0.w;
  r1.y = _OpacityCompensationKeyFrames[1].x >= r0.x;
  r1.w = _OpacityCompensationKeyFrames[1].z >= r0.x;
  r1.y = r1.y ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r0.z = r1.y * r0.z;
  r3.xy = _OpacityCompensationKeyFrames[1].xy + -_OpacityCompensationKeyFrames[0].zw;
  r0.w = r1.z / r3.x;
  r0.w = r0.w * r3.y + _OpacityCompensationKeyFrames[0].w;
  r0.z = r0.z * r0.w;
  r0.yz = max(r0.yz, float2(0.000000e+000,0.000000e+000));
  r0.y = r0.y + r0.z;
  r0.z = r0.x >= _OpacityCompensationKeyFrames[1].x;
  r0.w = r0.x >= _OpacityCompensationKeyFrames[1].z;
  r0.z = r0.z ? 1 : 0;
  r0.w = r0.w ? 1 : 0;
  r0.z = r0.z * r1.w;
  r1.yz = -_OpacityCompensationKeyFrames[1].xz + r0.xx;
  r3.xy = _OpacityCompensationKeyFrames[1].zw + -_OpacityCompensationKeyFrames[1].xy;
  r1.y = r1.y / r3.x;
  r1.y = r1.y * r3.y + _OpacityCompensationKeyFrames[1].y;
  r0.z = r1.y * r0.z;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.y = r0.y + r0.z;
  r1.y = _OpacityCompensationKeyFrames[2].x >= r0.x;
  r1.w = _OpacityCompensationKeyFrames[2].z >= r0.x;
  r1.y = r1.y ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r0.z = r1.y * r0.w;
  r3.xy = _OpacityCompensationKeyFrames[2].xy + -_OpacityCompensationKeyFrames[1].zw;
  r0.w = r1.z / r3.x;
  r0.w = r0.w * r3.y + _OpacityCompensationKeyFrames[1].w;
  r0.z = r0.z * r0.w;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.y = r0.y + r0.z;
  r0.z = r0.x >= _OpacityCompensationKeyFrames[2].x;
  r0.w = r0.x >= _OpacityCompensationKeyFrames[2].z;
  r0.z = r0.z ? 1 : 0;
  r0.w = r0.w ? 1 : 0;
  r0.z = r0.z * r1.w;
  r1.yz = -_OpacityCompensationKeyFrames[2].xz + r0.xx;
  r3.xy = _OpacityCompensationKeyFrames[2].zw + -_OpacityCompensationKeyFrames[2].xy;
  r1.y = r1.y / r3.x;
  r1.y = r1.y * r3.y + _OpacityCompensationKeyFrames[2].y;
  r0.z = r1.y * r0.z;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.y = r0.y + r0.z;
  r1.y = _OpacityCompensationKeyFrames[3].x >= r0.x;
  r1.w = _OpacityCompensationKeyFrames[3].z >= r0.x;
  r1.y = r1.y ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r0.z = r1.y * r0.w;
  r3.xy = _OpacityCompensationKeyFrames[3].xy + -_OpacityCompensationKeyFrames[2].zw;
  r0.w = r1.z / r3.x;
  r0.w = r0.w * r3.y + _OpacityCompensationKeyFrames[2].w;
  r0.z = r0.z * r0.w;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.y = r0.y + r0.z;
  r0.z = r0.x >= _OpacityCompensationKeyFrames[3].x;
  r0.w = r0.x >= _OpacityCompensationKeyFrames[3].z;
  r0.z = r0.z ? 1 : 0;
  r0.w = r0.w ? 1 : 0;
  r0.z = r0.z * r1.w;
  r1.yz = -_OpacityCompensationKeyFrames[3].xz + r0.xx;
  r3.xy = _OpacityCompensationKeyFrames[3].zw + -_OpacityCompensationKeyFrames[3].xy;
  r1.y = r1.y / r3.x;
  r1.y = r1.y * r3.y + _OpacityCompensationKeyFrames[3].y;
  r0.z = r1.y * r0.z;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.y = r0.y + r0.z;
  r1.y = _OpacityCompensationKeyFrames[4].x >= r0.x;
  r1.w = _OpacityCompensationKeyFrames[4].z >= r0.x;
  r1.y = r1.y ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r0.z = r1.y * r0.w;
  r3.xy = _OpacityCompensationKeyFrames[4].xy + -_OpacityCompensationKeyFrames[3].zw;
  r0.w = r1.z / r3.x;
  r0.w = r0.w * r3.y + _OpacityCompensationKeyFrames[3].w;
  r0.z = r0.z * r0.w;
  r0.z = max(r0.z, 0.000000000e+000);
  r0.y = r0.y + r0.z;
  r0.z = r0.x >= _OpacityCompensationKeyFrames[4].x;
  r0.z = r0.z ? 1.000000 : 0;
  r0.z = r0.z * r1.w;
  r0.x = -_OpacityCompensationKeyFrames[4].x + r0.x;
  r1.yz = _OpacityCompensationKeyFrames[4].zw + -_OpacityCompensationKeyFrames[4].xy;
  r0.x = r0.x / r1.y;
  r0.x = r0.x * r1.z + _OpacityCompensationKeyFrames[4].y;
  r0.x = r0.z * r0.x;
  r0.x = max(r0.x, 0.000000000e+000);
  r0.x = r0.y + r0.x;
  o0.w = saturate(r0.x * r1.x);
  o3.x = dot(r2.xyzw, _DepthTextureTransform._m00_m10_m20_m30);
  o3.y = dot(r2.xyzw, _DepthTextureTransform._m01_m11_m21_m31);
  o3.z = dot(r2.xyzw, _DepthTextureTransform._m03_m13_m23_m33);
  r0.x = dot(_CameraDirection_MaxParaboloidReflectionMipIndex.xyz, r6.xyz);
  o4.w = _CameraDistances.w * r0.x;
  o2.xyzw = r4.xyzw;
  o3.w = v6.z;
  o4.xyz = r5.xyz;
  o6.xyzw = r22.xyzw;
  
  
  

  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4x4 _ViewRotProjectionMatrix; // Offset:    0 Size:    64 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:   64 Size:    64
//   float4x4 _ProjectionMatrix;        // Offset:  128 Size:    64 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  192 Size:    64 [unused]
//   float4x4 _InvProjectionMatrixDepth;// Offset:  256 Size:    64 [unused]
//   float4x4 _DepthTextureTransform;   // Offset:  320 Size:    64
//   float4x3 _ViewMatrix;              // Offset:  384 Size:    48 [unused]
//   float4x3 _InvViewMatrix;           // Offset:  432 Size:    48
//   float4x4 _PreviousViewProjectionMatrix;// Offset:  480 Size:    64 [unused]
//   float4 _CameraDistances;           // Offset:  544 Size:    16
//   float4 _ViewportSize;              // Offset:  560 Size:    16 [unused]
//   float4 _CameraPosition_MaxStaticReflectionMipIndex;// Offset:  576 Size:    16
//   float4 _CameraDirection_MaxParaboloidReflectionMipIndex;// Offset:  592 Size:    16
//   float4 _ViewPoint_ExposureScale;   // Offset:  608 Size:    16
//   float4 _FogColorVector_ExposedWhitePointOverExposureScale;// Offset:  624 Size:    16
//   float3 _SideFogColor;              // Offset:  640 Size:    12 [unused]
//   float3 _SunFogColorDelta;          // Offset:  656 Size:    12 [unused]
//   float3 _OppositeFogColorDelta;     // Offset:  672 Size:    12 [unused]
//   float4 _FogValues0;                // Offset:  688 Size:    16 [unused]
//   float4 _FogValues1;                // Offset:  704 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:  720 Size:    16 [unused]
//   float4 _UncompressDepthWeights_ShadowProjDepthMinValue;// Offset:  736 Size:    16 [unused]
//   float4 _UncompressDepthWeightsWS_ReflectionFadeTarget;// Offset:  752 Size:    16
//   float4 _WorldAmbientColorParams0;  // Offset:  768 Size:    16
//   float4 _WorldAmbientColorParams1;  // Offset:  784 Size:    16
//   float4 _WorldAmbientColorParams2;  // Offset:  800 Size:    16
//   float4 _GlobalWorldTextureParams;  // Offset:  816 Size:    16 [unused]
//   float4 _CullingCameraPosition_OneOverAutoExposureScale;// Offset:  832 Size:    16 [unused]
//   float4 _AmbientSkyColor_ReflectionScaleStrength;// Offset:  848 Size:    16 [unused]
//   float4 _AmbientGroundColor_ReflectionScaleDistanceMul;// Offset:  864 Size:    16 [unused]
//   float4 _FacettedShadowCastParams;  // Offset:  880 Size:    16 [unused]
//   float4 _FSMClipPlanes;             // Offset:  896 Size:    16 [unused]
//   float2 _ReflectionGIControl;       // Offset:  912 Size:     8 [unused]
//
// }
//
// cbuffer LightProbes
// {
//
//   float4 _InteriorIrradianceRadianceScale;// Offset:    0 Size:    16 [unused]
//   float4x4 _LocalToWorldMatrixWithFeatherMargin;// Offset:   16 Size:    64 [unused]
//   float4x4 _LocalToWorldMatrixWithoutFeatherMargin;// Offset:   80 Size:    64 [unused]
//   float4 _MiscDataToTidy;            // Offset:  144 Size:    16
//   float4x4 _ScreenToLocalMatrix;     // Offset:  160 Size:    64 [unused]
//   float4x4 _WorldToLocalMatrix;      // Offset:  224 Size:    64
//   float3 _InteriorAmbientLightInfo;  // Offset:  288 Size:    12 [unused]
//   float _LinearGridResCutoff;        // Offset:  300 Size:     4
//   float3 _InteriorUVWBias;           // Offset:  304 Size:    12 [unused]
//   float _MaxLinearSliceIndex;        // Offset:  316 Size:     4
//   float3 _InteriorUVWScale;          // Offset:  320 Size:    12 [unused]
//   float3 _RcpFeatherWidthsInBasicUVWSpace;// Offset:  336 Size:    12 [unused]
//   float3 _VolumeCentre;              // Offset:  352 Size:    12
//   float3 _VolumeDimensions;          // Offset:  368 Size:    12
//   float2 _IrradianceSHInfo;          // Offset:  384 Size:     8 [unused]
//   float2 _MaxDepthBoundsInnerOuter;  // Offset:  392 Size:     8 [unused]
//   float2 _RadianceSHInfo;            // Offset:  400 Size:     8 [unused]
//   float2 _SkySHInfo;                 // Offset:  408 Size:     8 [unused]
//
// }
//
// cbuffer LightProbesGlobal
// {
//
//   float4x4 _BoxMatrix;               // Offset:    0 Size:    64 [unused]
//   float4 _LightProbesMultipliers;    // Offset:   64 Size:    16 [unused]
//   float4 _MinAmbient;                // Offset:   80 Size:    16
//   float4 _ProbeUVToViewSpace;        // Offset:   96 Size:    16 [unused]
//   float4 _SH_B;                      // Offset:  112 Size:    16
//   float4 _SH_G;                      // Offset:  128 Size:    16
//   float4 _SH_R;                      // Offset:  144 Size:    16
//   float4x4 _ScreenToWorldMatrix;     // Offset:  160 Size:    64 [unused]
//   float4x4 _ViewProjectionMatrixWithZBias;// Offset:  224 Size:    64 [unused]
//   float4 _VolumeCentreGlobal;        // Offset:  288 Size:    16 [unused]
//   float4 _WorldEdgeFadeParams;       // Offset:  304 Size:    16
//   float3 _DefaultProbeAverageColor;  // Offset:  320 Size:    12 [unused]
//   float _CenterBaseZ;                // Offset:  332 Size:     4 [unused]
//   float3 _DefaultProbeLowerColor;    // Offset:  336 Size:    12 [unused]
//   float _DrawDistance;               // Offset:  348 Size:     4
//   float3 _DefaultProbeUpperColor;    // Offset:  352 Size:    12 [unused]
//   int _ProbeMSAALevel;               // Offset:  364 Size:     4 [unused]
//   float2 _LocalLightsMultipliersGlobal;// Offset:  368 Size:     8 [unused]
//   float2 _RelightingMultiplier;      // Offset:  376 Size:     8 [unused]
//
// }
//
// cbuffer Emitter
// {
//
//   float4 _ParticleLightAttenuations[4];// Offset:    0 Size:    64
//   float4 _ParticleLightColors[4];    // Offset:   64 Size:    64
//   float4 _ParticleLightDirections[4];// Offset:  128 Size:    64
//   float4 _ParticleLightPositions[4]; // Offset:  192 Size:    64
//   float4 _ParticleSpotParams[4];     // Offset:  256 Size:    64
//   float4x4 _ParticleSpotProjMatrix;  // Offset:  320 Size:    64 [unused]
//   float4 _ParticleSpotShadowTextureSize;// Offset:  384 Size:    16 [unused]
//   float4 _ParticleSpotVideoUnpack[8];// Offset:  400 Size:   128 [unused]
//   float4 _RainColor;                 // Offset:  528 Size:    16 [unused]
//   float4x4 _ShadowOcclusionProjMatrix;// Offset:  544 Size:    64 [unused]
//   float4 _SoftClipPlane;             // Offset:  608 Size:    16 [unused]
//   float4 _UniformFog;                // Offset:  624 Size:    16 [unused]
//   float3 _TweakedLightDirection;     // Offset:  640 Size:    12 [unused]
//   float _OneOverSoftRange;           // Offset:  652 Size:     4 [unused]
//   float2 _AlphaScaleOffset;          // Offset:  656 Size:     8
//   float _ParticleZOffset;            // Offset:  664 Size:     4
//   float _QuadTessellationFactor;     // Offset:  668 Size:     4 [unused]
//   float2 _FarSoftDistanceRange;      // Offset:  672 Size:     8 [unused]
//   int _ParticleLightCount;           // Offset:  680 Size:     4
//
// }
//
// cbuffer SceneParticleAttributes
// {
//
//   float4 _DistortionSpeedTiling;     // Offset:    0 Size:    16 [unused]
//   float4 _OpacityCompensationKeyFrames[5];// Offset:   16 Size:    80
//   float _DiffuseLightingPowerExponent;// Offset:   96 Size:     4 [unused]
//   float _DistortionStrength;         // Offset:  100 Size:     4 [unused]
//   float _HDRMul;                     // Offset:  104 Size:     4
//   float _Translucency;               // Offset:  108 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport__ParaboloidReflectionTexture__SampObj__    sampler      NA          NA    0        1
// LightProbes__FloorCeilingTexture__SampObj__    sampler      NA          NA    1        1
// LightProbes__VolumeTextureB__SampObj__    sampler      NA          NA    2        1
// LightProbes__VolumeTextureG__SampObj__    sampler      NA          NA    3        1
// LightProbes__VolumeTextureR__SampObj__    sampler      NA          NA    4        1
// Viewport__ParaboloidReflectionTexture__TexObj__    texture  float4          2d    0        1
// LightProbes__FloorCeilingTexture__TexObj__    texture  float4          2d    1        1
// LightProbes__VolumeTextureB__TexObj__    texture  float4          3d    2        1
// LightProbes__VolumeTextureG__TexObj__    texture  float4          3d    3        1
// LightProbes__VolumeTextureR__TexObj__    texture  float4          3d    4        1
// Viewport                          cbuffer      NA          NA    0        1
// LightProbes                       cbuffer      NA          NA    1        1
// LightProbesGlobal                 cbuffer      NA          NA    2        1
// Emitter                           cbuffer      NA          NA    3        1
// SceneParticleAttributes           cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE   float   xyzw
// color                    1   xyzw        1     NONE   float   xyzw
// texcoord                 4   xyzw        2     NONE   float   xyz 
// texcoord                 5   xyzw        3     NONE   float   xyz 
// texcoord                 6   xyzw        4     NONE   float   xyzw
// texcoord                 7   xyzw        5     NONE   float   xyzw
// texcoord                 8   xyzw        6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[51], immediateIndexed
dcl_constantbuffer cb1[24], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb3[43], dynamicIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture3d (float,float,float,float) t3
dcl_resource_texture3d (float,float,float,float) t4
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 9
mul r0.xyz, v0.yyyy, v3.xyzx
mad r0.xyz, v0.xxxx, v2.xyzx, r0.xyzx
add r0.xyz, r0.xyzx, v4.xyzx
add r1.x, -r0.x, cb0[27].w
add r1.y, -r0.y, cb0[28].w
add r1.z, -r0.z, cb0[29].w
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb3[41].zzzz, r0.xyzx
sincos r1.x, r2.x, v4.w
mov r3.x, -r1.x
add r1.yz, v0.zzwz, l(0.000000, -0.500000, -0.500000, 0.000000)
mov r3.y, r2.x
dp2 r2.z, r1.zyzz, r3.xyxx
mov r3.z, r1.x
dp2 r2.w, r1.zyzz, r3.yzyy
add r1.xy, r2.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
mad o5.xy, r1.xyxx, v5.zwzz, v5.xyxx
mad o5.zw, r1.xxxy, v5.zzzw, v6.xxxy
mad r1.x, v1.w, cb3[41].x, cb3[41].y
mov r0.w, l(1.000000)
dp4 r2.x, r0.xyzw, cb0[4].xyzw
dp4 r2.y, r0.xyzw, cb0[5].xyzw
dp4 r2.z, r0.xyzw, cb0[6].xyzw
dp4 r2.w, r0.xyzw, cb0[7].xyzw
mul r1.yzw, v1.zzyx, v1.zzyx
add r3.xyz, r0.xyzx, -v4.xyzx
dp3 r3.w, r3.xyzx, r3.xyzx
sqrt r3.w, r3.w
div r3.xyz, r3.xyzx, r3.wwww
mov r4.xyzw, l(0,0,0,0)
mov r5.x, l(0)
loop 
  ige r5.y, r5.x, cb3[42].z
  breakc_nz r5.y
  add r5.yzw, -v4.xxyz, cb3[r5.x + 12].xxyz
  dp3 r6.x, r5.yzwy, r5.yzwy
  sqrt r6.x, r6.x
  div r5.yzw, r5.yyzw, r6.xxxx
  add r6.yzw, -r0.xxyz, cb3[r5.x + 12].xxyz
  dp3 r7.x, r6.yzwy, r6.yzwy
  rsq r7.y, r7.x
  mul r6.yzw, r6.yyzw, r7.yyyy
  div r6.x, r6.x, r3.w
  min r6.x, r6.x, l(1.000000)
  add r6.x, -r6.x, l(1.000000)
  dp3 r5.y, r5.yzwy, r3.xyzx
  mad_sat r5.y, r5.y, l(0.585800), l(0.585800)
  lt r5.z, l(0.000000), cb3[r5.x + 0].x
  sqrt r5.w, r7.x
  add r5.w, r5.w, l(1.000000)
  mul r5.w, r5.w, r5.w
  div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
  movc r5.z, r5.z, r5.w, r7.x
  mad_sat r5.z, r5.z, cb3[r5.x + 0].y, cb3[r5.x + 0].z
  dp3 r5.w, -r6.yzwy, cb3[r5.x + 8].xyzx
  mad_sat r6.y, r5.w, cb3[r5.x + 16].x, cb3[r5.x + 16].y
  lt r5.w, r5.w, cb3[r5.x + 8].w
  mul r5.y, r5.z, r5.y
  mul r5.y, r6.y, r5.y
  movc r5.y, r5.w, l(0), r5.y
  mad r5.y, cb3[r5.x + 4].w, r6.x, r5.y
  mad r4.xyzw, icb[r5.x + 0].xyzw, r5.yyyy, r4.xyzw
  iadd r5.x, r5.x, l(1)
endloop 
dp4 r3.x, r0.xyzw, cb1[14].xyzw
dp4 r3.y, r0.xyzw, cb1[15].xyzw
dp4_sat r0.w, r0.xyzw, cb1[16].xyzw
add r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r5.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), cb1[9].xyzx
add r3.xy, r3.xyxx, r5.xyxx
add r5.xyw, cb1[9].xyxz, l(-1.000000, -1.000000, 0.000000, -1.000000)
div r3.zw, r5.xxxy, cb1[9].xxxy
mul r3.xy, r3.zwzz, r3.xyxx
lt r5.x, l(0.000000), cb1[18].w
div_sat r5.y, r0.w, cb1[18].w
mul r5.y, r5.y, cb1[19].w
and r5.x, r5.y, r5.x
lt r5.y, cb1[18].w, l(1.000000)
add_sat r0.w, r0.w, -cb1[18].w
add r6.x, -cb1[18].w, l(1.000000)
div r0.w, r0.w, r6.x
log r0.w, r0.w
mul r0.w, r0.w, cb1[9].w
exp r0.w, r0.w
add r5.w, r5.w, -cb1[19].w
mul r0.w, r0.w, r5.w
and r0.w, r0.w, r5.y
add r0.w, r0.w, r5.x
div r5.x, r0.w, cb1[9].z
round_ni r5.y, r0.w
div r5.y, r5.y, cb1[9].z
round_pi r0.w, r0.w
div r0.w, r0.w, cb1[9].z
mov_sat r5.w, r3.y
div r5.w, r5.w, cb1[9].z
add r3.z, r5.y, r5.w
sample_l_indexable(texture2d)(float,float,float,float) r6.xy, r3.xzxx, t1.xyzw, s1, l(0.000000)
add r6.zw, -r6.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
mad r3.z, r6.w, l(0.250000), r6.y
min r3.z, r3.z, r6.z
div r5.w, r6.x, cb1[9].z
add r5.w, r5.w, r5.y
add r5.x, -r5.w, r5.x
mul r5.x, r5.x, cb1[9].z
div_sat r3.z, r5.x, r3.z
add r0.w, -r5.y, r0.w
mad r0.w, r3.z, r0.w, r5.y
add r3.w, r5.z, r0.w
sample_l_indexable(texture3d)(float,float,float,float) r5.xyzw, r3.xywx, t4.xyzw, s4, l(0.000000)
sample_l_indexable(texture3d)(float,float,float,float) r6.xyzw, r3.xywx, t3.xyzw, s3, l(0.000000)
sample_l_indexable(texture3d)(float,float,float,float) r3.xyzw, r3.xywx, t2.xyzw, s2, l(0.000000)
add r0.w, cb2[21].w, l(-30.000000)
add r7.xyz, r0.xyzx, -cb0[38].xyzx
dp2 r7.x, r7.xyxx, r7.xyxx
sqrt r7.x, r7.x
max r7.x, |r7.z|, r7.x
add r7.x, -r0.w, r7.x
add r0.w, -r0.w, cb2[21].w
div_sat r0.w, r7.x, r0.w
add r7.x, cb1[22].z, cb1[23].z
add r7.x, -r0.z, r7.x
mul_sat r7.x, r7.x, l(0.033333)
add r7.x, -r7.x, l(1.000000)
max r0.w, r0.w, r7.x
mad r7.xy, |r0.xyxx|, cb2[19].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
mul_sat r7.xy, r7.xyxx, cb2[19].zwzz
max r7.x, r7.y, r7.x
max r0.w, r0.w, r7.x
add r7.xyzw, -r5.xyzw, cb2[9].xyzw
mad r5.xyzw, r0.wwww, r7.xyzw, r5.xyzw
add r7.xyzw, -r6.xyzw, cb2[8].xyzw
mad r6.xyzw, r0.wwww, r7.xyzw, r6.xyzw
add r7.xyzw, -r3.xyzw, cb2[7].xyzw
mad r3.xyzw, r0.wwww, r7.xyzw, r3.xyzw
max r5.xyzw, r5.xyzw, cb2[5].xxxw
max r6.xyzw, r6.xyzw, cb2[5].yyyw
max r3.xyzw, r3.xywz, cb2[5].zzwz
add r5.xyz, r5.xyzx, r6.xyzx
add r5.xyz, r3.xywx, r5.xyzx
mov r3.x, r5.w
mov r3.y, r6.w
add r3.xyz, r3.xyzx, r5.xyzx
mul r5.xyz, r3.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
ge r0.w, l(0.000000), cb0[47].w
movc r0.w, r0.w, l(-10.000000), l(-10000.000000)
ge r0.w, r0.z, r0.w
add r6.xyz, r0.xyzx, -cb0[36].xyzx
dp3 r0.x, r6.xyzx, r6.xyzx
rsq r0.y, r0.x
mul r0.y, r0.y, r6.z
max r6.w, r6.z, l(0.000000)
dp3 r0.z, r6.xywx, r6.xywx
rsq r0.z, r0.z
mul r7.xyz, r0.zzzz, r6.xywx
sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, l(0.750000, 0.500000, 0.000000, 0.000000), t0.xyzw, s0, l(6.000000)
mad r0.z, r7.z, l(2.000000), l(2.000000)
div r7.xy, r7.yxyy, r0.zzzz
add r0.z, -r7.x, l(0.500000)
add_sat r7.y, r7.y, l(0.500000)
max_sat r7.x, r0.z, l(0.125000)
mad r7.z, r7.x, l(0.500000), l(0.500000)
sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r7.zyzz, t0.xyzw, s0, l(6.000000)
add r8.xyz, -r7.xyzx, r8.xyzx
mad r7.xyz, |r0.yyyy|, r8.xyzx, r7.xyzx
mul r7.xyz, r7.xyzx, cb0[50].xyzx
mul r7.xyz, r7.xyzx, cb0[49].wwww
sqrt r0.x, r0.x
mul r0.xy, r0.xxxx, cb0[48].zwzz
lt r0.z, l(0.010000), |r6.z|
mul r8.xy, r6.zzzz, l(1.000000, -1.000000, 0.000000, 0.000000)
mul r8.xy, r8.xyxx, cb0[49].xyxx
mul r8.zw, r8.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
exp r8.zw, r8.zzzw
add r8.zw, -r8.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
div r8.xy, r8.zwzz, r8.xyxx
mul r8.xy, r0.xyxx, r8.xyxx
movc r0.xy, r0.zzzz, r8.xyxx, r0.xyxx
mul r0.xy, r0.xyxx, -cb0[48].xyxx
mul r0.xy, r0.xyxx, l(1.442695, 1.442695, 0.000000, 0.000000)
exp r0.xy, r0.xyxx
add r0.xy, -r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
max r0.x, r0.y, r0.x
log r0.x, r0.x
mul r0.x, r0.x, cb0[50].w
exp r0.x, r0.x
min r7.w, r0.x, cb0[49].z
movc r0.xyzw, r0.wwww, r7.xyzw, l(0,0,0,1.000000)
mul r7.xyz, r0.wwww, r0.xyzx
add r7.w, -r0.w, l(1.000000)
mul o1.xyzw, r7.xyzw, cb0[38].wwww
mul_sat o0.xyz, r1.yzwy, cb4[6].zzzz
mul r0.xyz, r4.yyyy, cb3[5].xyzx
mad r0.xyz, cb3[4].xyzx, r4.xxxx, r0.xyzx
mad r0.xyz, cb3[6].xyzx, r4.zzzz, r0.xyzx
mad r0.xyz, r3.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r0.xyzx
div r0.xyz, r0.xyzx, cb0[39].wwww
dp3_sat r0.x, r0.xyzx, l(0.212500, 0.715400, 0.072100, 0.000000)
ge r0.yz, r0.xxxx, cb4[1].xxzx
ge r0.w, cb4[1].z, r0.x
and r0.yzw, r0.yyzw, l(0, 0x3f800000, 0x3f800000, 0x3f800000)
mul r0.y, r0.w, r0.y
add r1.yz, r0.xxxx, -cb4[1].xxzx
add r3.xy, -cb4[1].xyxx, cb4[1].zwzz
div r0.w, r1.y, r3.x
mad r0.w, r0.w, r3.y, cb4[1].y
mul r0.y, r0.w, r0.y
ge r1.yw, cb4[2].xxxz, r0.xxxx
and r1.yw, r1.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
mul r0.z, r0.z, r1.y
add r3.xy, -cb4[1].zwzz, cb4[2].xyxx
div r0.w, r1.z, r3.x
mad r0.w, r0.w, r3.y, cb4[1].w
mul r0.z, r0.w, r0.z
max r0.yz, r0.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
add r0.y, r0.z, r0.y
ge r0.zw, r0.xxxx, cb4[2].xxxz
and r0.zw, r0.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
mul r0.z, r1.w, r0.z
add r1.yz, r0.xxxx, -cb4[2].xxzx
add r3.xy, -cb4[2].xyxx, cb4[2].zwzz
div r1.y, r1.y, r3.x
mad r1.y, r1.y, r3.y, cb4[2].y
mul r0.z, r0.z, r1.y
max r0.z, r0.z, l(0.000000)
add r0.y, r0.z, r0.y
ge r1.yw, cb4[3].xxxz, r0.xxxx
and r1.yw, r1.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
mul r0.z, r0.w, r1.y
add r3.xy, -cb4[2].zwzz, cb4[3].xyxx
div r0.w, r1.z, r3.x
mad r0.w, r0.w, r3.y, cb4[2].w
mul r0.z, r0.w, r0.z
max r0.z, r0.z, l(0.000000)
add r0.y, r0.z, r0.y
ge r0.zw, r0.xxxx, cb4[3].xxxz
and r0.zw, r0.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
mul r0.z, r1.w, r0.z
add r1.yz, r0.xxxx, -cb4[3].xxzx
add r3.xy, -cb4[3].xyxx, cb4[3].zwzz
div r1.y, r1.y, r3.x
mad r1.y, r1.y, r3.y, cb4[3].y
mul r0.z, r0.z, r1.y
max r0.z, r0.z, l(0.000000)
add r0.y, r0.z, r0.y
ge r1.yw, cb4[4].xxxz, r0.xxxx
and r1.yw, r1.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
mul r0.z, r0.w, r1.y
add r3.xy, -cb4[3].zwzz, cb4[4].xyxx
div r0.w, r1.z, r3.x
mad r0.w, r0.w, r3.y, cb4[3].w
mul r0.z, r0.w, r0.z
max r0.z, r0.z, l(0.000000)
add r0.y, r0.z, r0.y
ge r0.zw, r0.xxxx, cb4[4].xxxz
and r0.zw, r0.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
mul r0.z, r1.w, r0.z
add r1.yz, r0.xxxx, -cb4[4].xxzx
add r3.xy, -cb4[4].xyxx, cb4[4].zwzz
div r1.y, r1.y, r3.x
mad r1.y, r1.y, r3.y, cb4[4].y
mul r0.z, r0.z, r1.y
max r0.z, r0.z, l(0.000000)
add r0.y, r0.z, r0.y
ge r1.yw, cb4[5].xxxz, r0.xxxx
and r1.yw, r1.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
mul r0.z, r0.w, r1.y
add r3.xy, -cb4[4].zwzz, cb4[5].xyxx
div r0.w, r1.z, r3.x
mad r0.w, r0.w, r3.y, cb4[4].w
mul r0.z, r0.w, r0.z
max r0.z, r0.z, l(0.000000)
add r0.y, r0.z, r0.y
ge r0.z, r0.x, cb4[5].x
and r0.z, r0.z, l(0x3f800000)
mul r0.z, r1.w, r0.z
add r0.x, r0.x, -cb4[5].x
add r1.yz, -cb4[5].xxyx, cb4[5].zzwz
div r0.x, r0.x, r1.y
mad r0.x, r0.x, r1.z, cb4[5].y
mul r0.x, r0.x, r0.z
max r0.x, r0.x, l(0.000000)
add r0.x, r0.x, r0.y
mul_sat o0.w, r1.x, r0.x
dp4 o3.x, r2.xyzw, cb0[20].xyzw
dp4 o3.y, r2.xyzw, cb0[21].xyzw
dp4 o3.z, r2.xyzw, cb0[23].xyzw
dp3 r0.x, cb0[37].xyzx, r6.xyzx
mul o4.w, r0.x, cb0[34].w
mov o2.xyzw, r4.xyzw
mov o3.w, v6.z
mov o4.xyz, r5.xyzx
mov o6.xyzw, r2.xyzw
ret 
// Approximately 295 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
