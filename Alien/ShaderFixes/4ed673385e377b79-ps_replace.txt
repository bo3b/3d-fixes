// If this fix is enabled, it makes NPC hair offset and transparent.
// Created because of a similar format to other fixes.
// Disabled fix for now.

cbuffer cbDefaultXSC : register(b0)
{
  float4x4 ViewProj : packoffset(c0);
  float4x4 ViewMatrix : packoffset(c4);
  float4x4 SecondaryProj : packoffset(c8);
  float4x4 SecondaryViewProj : packoffset(c12);
  float4x4 SecondaryInvViewProj : packoffset(c16);
  float4 ConstantColour : packoffset(c20);
  float4 Time : packoffset(c21);
  float4 CameraPosition : packoffset(c22);
  float4 InvProjectionParams : packoffset(c23);
  float4 SecondaryInvProjectionParams : packoffset(c24);
  float4 ShaderDebugParams : packoffset(c25);
  float4 ToneMappingDebugParams : packoffset(c26);
  float4 HDR_EncodeScale2 : packoffset(c27);
  float4 EmissiveSurfaceMultiplier : packoffset(c28);
  float4 AlphaLight_OffsetScale : packoffset(c29);
  float4 TessellationScaleFactor : packoffset(c30);
  float4 FogNearColour : packoffset(c31);
  float4 FogFarColour : packoffset(c32);
  float4 FogParams : packoffset(c33);
  float4 AdvanceEnvironmentShaderDebugParams : packoffset(c34);
  float4 SMAA_RTMetrics : packoffset(c35);
}

cbuffer cbDefaultPSC : register(b2)
{
  float4x4 AlphaLight_WorldtoClipMatrix : packoffset(c0);
  float4x4 AlphaLight_CliptoWorldMatrix : packoffset(c4);
  float4x4 ProjectorMatrix : packoffset(c8);
  float4x4 MotionBlurCurrInvViewProjection : packoffset(c12);
  float4x4 MotionBlurPrevViewProjection : packoffset(c16);
  float4x4 MotionBlurPrevSecViewProjection : packoffset(c20);
  float4x4 Spotlight0_Transform : packoffset(c24);
  float4 TextureAnimation : packoffset(c28);
  float4 AmbientDiffuse : packoffset(c29);
  float4 EnvironmentDebugParams : packoffset(c30);
  float4 ShadowFilterESMWeights : packoffset(c31);
  float4 LegacyDofParams : packoffset(c32);
  float4 OnePixelStepForS0 : packoffset(c33);
  float4 RenderTargetSize : packoffset(c34);
  float4 ModelTrackerID : packoffset(c35);
  float4 Sharpness_Bloom_Controls : packoffset(c36);
  float4 Blur_Direction : packoffset(c37);
  float4 LightMeterDebugParams : packoffset(c38);
  float4 SourceResolution : packoffset(c39);
  float4 HDR_EncodeScale : packoffset(c40);
  float4 OutputGamma : packoffset(c41);
  float4 AlphaLight_ScaleParams : packoffset(c42);
  float4 WrinkleMapWeights[6] : packoffset(c43);
  float4 RadiosityCubeMapIdx : packoffset(c49);
  float4 HairShadingParams[8] : packoffset(c50);
  float4 SkinShadingParams : packoffset(c58);
  float4 HDR_EncodeScale3 : packoffset(c59);
  float4 ScreenResolution[4] : packoffset(c60);
  float4 VelocityParams : packoffset(c64);
  float4 DeferredConstColor : packoffset(c65);
  float4 Spotlight0_Shadow_Params : packoffset(c66);
  float4 Spotlight0_ShadowMapDimensions : packoffset(c67);
  float4 ShadowFilterType : packoffset(c68);
  float4 Spotlight0_ReverseZPerspective : packoffset(c69);
  float4 SpacesuitVisorParams : packoffset(c70);
  float4 Directional_Light_Colour : packoffset(c71);
  float4 Directional_Light_Direction : packoffset(c72);
  float4 EnvironmentMap_Params : packoffset(c73);
  float4 Spotlight0_Shadow_Bias_GoboScale : packoffset(c74);
  float4 ScreenSpaceLightShaftParams1 : packoffset(c75);
  float4 ScreenSpaceLightShaftParams2 : packoffset(c76);
  float4 ScreenSpaceLightPosition : packoffset(c77);
  float4 LensAndScreenCenter : packoffset(c78);
  float4 ScaleAndScaleIn : packoffset(c79);
  float4 HmdWarpParam : packoffset(c80);
  float4 ChromAbParam : packoffset(c81);
  float4 SMAA_SubsampleIndices : packoffset(c82);
}

cbuffer cbUbershaderXSC : register(b5)
{
  float4 rp_parameter_vs[32] : packoffset(c0);
  float4 rp_parameter_ps[32] : packoffset(c32);
}
SamplerState src_image_SMP_s : register(s0);
SamplerState gbuffer1_SMP_s : register(s2);
SamplerState gbuffer2_SMP_s : register(s3);
SamplerState smp_soft_alpha_SMP_s : register(s5);
SamplerState depthSamplerReg_SMP_s : register(s8);
Texture2D<float4> src_image_TEX : register(t0);
Texture2D<float4> gbuffer1_TEX : register(t2);
Texture2D<float4> gbuffer2_TEX : register(t3);
Texture2D<float4> smp_soft_alpha_TEX : register(t5);
Texture2D<uint2> g_smp_stencil_TEX : register(t6);
Texture2D<float4> depthSamplerReg_TEX : register(t8);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  // float4 v9 : TEXCOORD9,
  // float4 v10 : TEXCOORD10,
  // float4 v11 : TEXCOORD11,
  // float4 v12 : TEXCOORD12,  
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v1.xy * ScreenSpaceLightPosition.zw + ScreenSpaceLightPosition.xy;
  r1.xyz = gbuffer1_TEX.Sample(gbuffer1_SMP_s, r0.xy).xyz;
  r2.xyz = gbuffer2_TEX.Sample(gbuffer2_SMP_s, r0.xy).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.xyz = r1.xyz * r0.zzz + -r2.xyz;
  r1.xyz = HairShadingParams[4].zzz * r1.xyz + r2.xyz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = sqrt(r0.z);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.z = saturate(r0.z + r0.z);
  r0.x = depthSamplerReg_TEX.Sample(depthSamplerReg_SMP_s, r0.xy).x;
  r0.y = r0.x < 0.000000000e+000;
  r0.w = -r0.x * SecondaryInvProjectionParams.y + SecondaryInvProjectionParams.z;
  r0.w = SecondaryInvProjectionParams.x / r0.w;
  r0.x = r0.x * InvProjectionParams.y + InvProjectionParams.z;
  r0.x = InvProjectionParams.x / r0.x;
  r0.xw = max(r0.xw, float2(0.000000e+000,0.000000e+000));
  r0.x = r0.y ? r0.w : r0.x;
  r2.xyz = r0.xxx * v2.xyz + CameraPosition.xyz;

// float4 stereo = StereoParams.Load(0);
// float4 r25;
// r2.w =1.0;

// r25.x = dot(r2.xyzw, ViewProj._m00_m10_m20_m30);
// r25.y = dot(r2.xyzw, ViewProj._m01_m11_m21_m31);
// r25.z = dot(r2.xyzw, ViewProj._m02_m12_m22_m32);
// r25.w = dot(r2.xyzw, ViewProj._m03_m13_m23_m33);

// r25.x -= stereo.x * (r25.w - stereo.y);

// r2.x = dot(r25.xyzw, v9.xyzw);
// r2.y = dot(r25.xyzw, v10.xyzw);
// r2.z = dot(r25.xyzw, v11.xyzw);
// r2.w = dot(r25.xyzw, v12.xyzw);    
// r2.xyzw /= r2.wwww;
  
  r0.y = HairShadingParams[4].w * r0.x;
  r0.y = max(r0.y, 1.000000000e+000);
  r0.y = min(r0.y, 5.000000000e+000);
  r0.y = HairShadingParams[4].y * r0.y;
  r2.w = 1.000000000e+000;
  r3.x = dot(r2.xyzw, ViewProj._m00_m10_m20_m30);
  r3.y = dot(r2.xyzw, ViewProj._m01_m11_m21_m31);
  r0.w = dot(r2.xyzw, ViewProj._m03_m13_m23_m33);
  r3.xy = r3.xy / r0.ww;
  r1.xyz = r1.xyz * r0.yyy + r2.xyz;
  r1.w = 1.000000000e+000;
  r2.x = dot(r1.xyzw, ViewProj._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, ViewProj._m01_m11_m21_m31);
  r0.y = dot(r1.xyzw, ViewProj._m03_m13_m23_m33);
  r0.yw = r2.xy / r0.yy;
  r0.yw = r0.yw + -r3.xy;
  r1.x = 1.000000000e+000 + -r0.z;
  r2.zw = float2(0.000000e+000,0.000000e+000);
  r4.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r1.yz = float2(0.000000e+000,0.000000e+000);
  while (true) {
  r1.w = (int)r1.z >= (int)8;
  if (r1.w != 0) break;
  r3.zw = (int2)r1.zz + int2(-4,1);
  r1.w = r3.z;
  r1.w = 1.250000000e-001 * r1.w;
  r5.xy = r1.ww * r0.yw + r3.xy;
  r5.xy = r5.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r5.xy = r5.xy * ScreenSpaceLightPosition.zw + ScreenSpaceLightPosition.xy;
  r3.z = r1.z != 4;
  if (r3.z != 0) {
  r3.z = depthSamplerReg_TEX.Sample(depthSamplerReg_SMP_s, r5.xy).x;
  r5.z = r3.z < 0.000000000e+000;
  r5.w = -r3.z * SecondaryInvProjectionParams.y + SecondaryInvProjectionParams.z;
  r5.w = SecondaryInvProjectionParams.x / r5.w;
  r5.w = max(r5.w, 0.000000000e+000);
  r3.z = r3.z * InvProjectionParams.y + InvProjectionParams.z;
  r3.z = InvProjectionParams.x / r3.z;
  r3.z = max(r3.z, 0.000000000e+000);
  r3.z = r5.z ? r5.w : r3.z;
  r5.zw = rp_parameter_ps[0].xy * r5.xy;
  r2.xy = (int2)r5.zw;
  r2.x = g_smp_stencil_TEX.Load(r2.xyz).y;
  r2.x = (int)r2.x & 192;
  r2.x = r2.x ? 4.999999888e-003 : -1.000000015e-001;
  r2.x = r3.z + r2.x;
  r2.x = r0.x < r2.x;
  } else {
  r2.x = -1;
  }
  if (r2.x != 0) {
  r6.xyzw = smp_soft_alpha_TEX.SampleLevel(smp_soft_alpha_SMP_s, r5.xy, 0.000000000e+000).xyzw;
  r6.xyz = Blur_Direction.xxx * r6.xyz;
  r5.xyz = src_image_TEX.SampleLevel(src_image_SMP_s, r5.xy, 0.000000000e+000).xyz;
  r5.xyz = r5.xyz * r1.xxx;
  r2.x = -r6.w * Blur_Direction.x + 1.000000000e+000;
  r5.xyz = r5.xyz * r2.xxx + r6.xyz;
  r5.w = -r0.z * r2.x + 1.000000000e+000;
  r1.w = r1.w * r1.w;
  r1.w = -4.889999866e+000 * r1.w;
  r1.w = exp2(r1.w);
  r1.y = r1.y + r1.w;
  r4.xyzw = r5.xyzw * r1.wwww + r4.xyzw;
  }
  r1.z = r3.w;
  }
  r1.xyzw = r4.xyzw / r1.yyyy;
  r0.x = -FogParams.x + r0.x;
  r0.x = max(r0.x, 0.000000000e+000);
  r0.y = saturate(r0.x / FogParams.x);
  r0.x = r0.x * r0.x;
  r0.x = FogParams.z * r0.x;
  r0.x = exp2(r0.x);
  r0.x = 1.000000e+000 / r0.x;
  r0.x = 1.000000000e+000 + -r0.x;
  r0.w = saturate(r0.y * FogParams.y + r0.x);
  r2.xyz = FogFarColour.xyz + -FogNearColour.xyz;
  r0.xyz = r0.www * r2.xyz + FogNearColour.xyz;
  r2.xyzw = r0.xyzw * r0.wwww;
  r0.xyz = r2.xyz * HDR_EncodeScale.zzz + -r1.xyz;
  o0.xyz = r2.www * r0.xyz + r1.xyz;
  r0.x = 1.000000000e+000 + -r1.w;
  r0.y = -r0.w * r0.w + 1.000000000e+000;
  o0.w = -r0.x * r0.y + 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbDefaultXSC
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64
//   float4x4 ViewMatrix;               // Offset:   64 Size:    64 [unused]
//   float4x4 SecondaryProj;            // Offset:  128 Size:    64 [unused]
//   float4x4 SecondaryViewProj;        // Offset:  192 Size:    64 [unused]
//   float4x4 SecondaryInvViewProj;     // Offset:  256 Size:    64 [unused]
//   float4 ConstantColour;             // Offset:  320 Size:    16 [unused]
//   float4 Time;                       // Offset:  336 Size:    16 [unused]
//   float4 CameraPosition;             // Offset:  352 Size:    16
//   float4 InvProjectionParams;        // Offset:  368 Size:    16
//   float4 SecondaryInvProjectionParams;// Offset:  384 Size:    16
//   float4 ShaderDebugParams;          // Offset:  400 Size:    16 [unused]
//   float4 ToneMappingDebugParams;     // Offset:  416 Size:    16 [unused]
//   float4 HDR_EncodeScale2;           // Offset:  432 Size:    16 [unused]
//   float4 EmissiveSurfaceMultiplier;  // Offset:  448 Size:    16 [unused]
//   float4 AlphaLight_OffsetScale;     // Offset:  464 Size:    16 [unused]
//   float4 TessellationScaleFactor;    // Offset:  480 Size:    16 [unused]
//   float4 FogNearColour;              // Offset:  496 Size:    16
//   float4 FogFarColour;               // Offset:  512 Size:    16
//   float4 FogParams;                  // Offset:  528 Size:    16
//   float4 AdvanceEnvironmentShaderDebugParams;// Offset:  544 Size:    16 [unused]
//   float4 SMAA_RTMetrics;             // Offset:  560 Size:    16 [unused]
//
// }
//
// cbuffer cbDefaultPSC
// {
//
//   float4x4 AlphaLight_WorldtoClipMatrix;// Offset:    0 Size:    64 [unused]
//   float4x4 AlphaLight_CliptoWorldMatrix;// Offset:   64 Size:    64 [unused]
//   float4x4 ProjectorMatrix;          // Offset:  128 Size:    64 [unused]
//   float4x4 MotionBlurCurrInvViewProjection;// Offset:  192 Size:    64 [unused]
//   float4x4 MotionBlurPrevViewProjection;// Offset:  256 Size:    64 [unused]
//   float4x4 MotionBlurPrevSecViewProjection;// Offset:  320 Size:    64 [unused]
//   float4x4 Spotlight0_Transform;     // Offset:  384 Size:    64 [unused]
//   float4 TextureAnimation;           // Offset:  448 Size:    16 [unused]
//   float4 AmbientDiffuse;             // Offset:  464 Size:    16 [unused]
//   float4 EnvironmentDebugParams;     // Offset:  480 Size:    16 [unused]
//   float4 ShadowFilterESMWeights;     // Offset:  496 Size:    16 [unused]
//   float4 LegacyDofParams;            // Offset:  512 Size:    16 [unused]
//   float4 OnePixelStepForS0;          // Offset:  528 Size:    16 [unused]
//   float4 RenderTargetSize;           // Offset:  544 Size:    16 [unused]
//   float4 ModelTrackerID;             // Offset:  560 Size:    16 [unused]
//   float4 Sharpness_Bloom_Controls;   // Offset:  576 Size:    16 [unused]
//   float4 Blur_Direction;             // Offset:  592 Size:    16
//   float4 LightMeterDebugParams;      // Offset:  608 Size:    16 [unused]
//   float4 SourceResolution;           // Offset:  624 Size:    16 [unused]
//   float4 HDR_EncodeScale;            // Offset:  640 Size:    16
//   float4 OutputGamma;                // Offset:  656 Size:    16 [unused]
//   float4 AlphaLight_ScaleParams;     // Offset:  672 Size:    16 [unused]
//   float4 WrinkleMapWeights[6];       // Offset:  688 Size:    96 [unused]
//   float4 RadiosityCubeMapIdx;        // Offset:  784 Size:    16 [unused]
//   float4 HairShadingParams[8];       // Offset:  800 Size:   128
//   float4 SkinShadingParams;          // Offset:  928 Size:    16 [unused]
//   float4 HDR_EncodeScale3;           // Offset:  944 Size:    16 [unused]
//   float4 ScreenResolution[4];        // Offset:  960 Size:    64 [unused]
//   float4 VelocityParams;             // Offset: 1024 Size:    16 [unused]
//   float4 DeferredConstColor;         // Offset: 1040 Size:    16 [unused]
//   float4 Spotlight0_Shadow_Params;   // Offset: 1056 Size:    16 [unused]
//   float4 Spotlight0_ShadowMapDimensions;// Offset: 1072 Size:    16 [unused]
//   float4 ShadowFilterType;           // Offset: 1088 Size:    16 [unused]
//   float4 Spotlight0_ReverseZPerspective;// Offset: 1104 Size:    16 [unused]
//   float4 SpacesuitVisorParams;       // Offset: 1120 Size:    16 [unused]
//   float4 Directional_Light_Colour;   // Offset: 1136 Size:    16 [unused]
//   float4 Directional_Light_Direction;// Offset: 1152 Size:    16 [unused]
//   float4 EnvironmentMap_Params;      // Offset: 1168 Size:    16 [unused]
//   float4 Spotlight0_Shadow_Bias_GoboScale;// Offset: 1184 Size:    16 [unused]
//   float4 ScreenSpaceLightShaftParams1;// Offset: 1200 Size:    16 [unused]
//   float4 ScreenSpaceLightShaftParams2;// Offset: 1216 Size:    16 [unused]
//   float4 ScreenSpaceLightPosition;   // Offset: 1232 Size:    16
//   float4 LensAndScreenCenter;        // Offset: 1248 Size:    16 [unused]
//   float4 ScaleAndScaleIn;            // Offset: 1264 Size:    16 [unused]
//   float4 HmdWarpParam;               // Offset: 1280 Size:    16 [unused]
//   float4 ChromAbParam;               // Offset: 1296 Size:    16 [unused]
//   float4 SMAA_SubsampleIndices;      // Offset: 1312 Size:    16 [unused]
//
// }
//
// cbuffer cbUbershaderXSC
// {
//
//   float4 rp_parameter_vs[32];        // Offset:    0 Size:   512 [unused]
//   float4 rp_parameter_ps[32];        // Offset:  512 Size:   512
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// src_image_SMP                     sampler      NA          NA    0        1
// gbuffer1_SMP                      sampler      NA          NA    2        1
// gbuffer2_SMP                      sampler      NA          NA    3        1
// smp_soft_alpha_SMP                sampler      NA          NA    5        1
// depthSamplerReg_SMP               sampler      NA          NA    8        1
// src_image_TEX                     texture  float4          2d    0        1
// gbuffer1_TEX                      texture  float4          2d    2        1
// gbuffer2_TEX                      texture  float4          2d    3        1
// smp_soft_alpha_TEX                texture  float4          2d    5        1
// g_smp_stencil_TEX                 texture   uint2          2d    6        1
// depthSamplerReg_TEX               texture  float4          2d    8        1
// cbDefaultXSC                      cbuffer      NA          NA    0        1
// cbDefaultPSC                      cbuffer      NA          NA    2        1
// cbUbershaderXSC                   cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb2[78], immediateIndexed
dcl_constantbuffer cb5[33], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s5, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (uint,uint,uint,uint) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 7
mad r0.xy, v1.xyxx, cb2[77].zwzz, cb2[77].xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t3.xyzw, s3
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r1.xyz, r1.xyzx, r0.zzzz, -r2.xyzx
mad r1.xyz, cb2[54].zzzz, r1.xyzx, r2.xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
dp3 r0.z, r2.xyzx, r2.xyzx
sqrt r0.z, r0.z
add r0.z, -r0.z, l(1.000000)
add_sat r0.z, r0.z, r0.z
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t8.xyzw, s8
lt r0.y, r0.x, l(0.000000)
mad r0.w, -r0.x, cb0[24].y, cb0[24].z
div r0.w, cb0[24].x, r0.w
mad r0.x, r0.x, cb0[23].y, cb0[23].z
div r0.x, cb0[23].x, r0.x
max r0.xw, r0.xxxw, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.x, r0.y, r0.w, r0.x
mad r2.xyz, r0.xxxx, v2.xyzx, cb0[22].xyzx
mul r0.y, r0.x, cb2[54].w
max r0.y, r0.y, l(1.000000)
min r0.y, r0.y, l(5.000000)
mul r0.y, r0.y, cb2[54].y
mov r2.w, l(1.000000)
dp4 r3.x, r2.xyzw, cb0[0].xyzw
dp4 r3.y, r2.xyzw, cb0[1].xyzw
dp4 r0.w, r2.xyzw, cb0[3].xyzw
div r3.xy, r3.xyxx, r0.wwww
mad r1.xyz, r1.xyzx, r0.yyyy, r2.xyzx
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, cb0[0].xyzw
dp4 r2.y, r1.xyzw, cb0[1].xyzw
dp4 r0.y, r1.xyzw, cb0[3].xyzw
div r0.yw, r2.xxxy, r0.yyyy
add r0.yw, -r3.xxxy, r0.yyyw
add r1.x, -r0.z, l(1.000000)
mov r2.zw, l(0,0,0,0)
mov r4.xyzw, l(0,0,0,0)
mov r1.yz, l(0,0,0,0)
loop 
  ige r1.w, r1.z, l(8)
  breakc_nz r1.w
  iadd r3.zw, r1.zzzz, l(0, 0, -4, 1)
  itof r1.w, r3.z
  mul r1.w, r1.w, l(0.125000)
  mad r5.xy, r1.wwww, r0.ywyy, r3.xyxx
  mad r5.xy, r5.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r5.xy, r5.xyxx, cb2[77].zwzz, cb2[77].xyxx
  ine r3.z, r1.z, l(4)
  if_nz r3.z
    sample_indexable(texture2d)(float,float,float,float) r3.z, r5.xyxx, t8.yzxw, s8
    lt r5.z, r3.z, l(0.000000)
    mad r5.w, -r3.z, cb0[24].y, cb0[24].z
    div r5.w, cb0[24].x, r5.w
    max r5.w, r5.w, l(0.000000)
    mad r3.z, r3.z, cb0[23].y, cb0[23].z
    div r3.z, cb0[23].x, r3.z
    max r3.z, r3.z, l(0.000000)
    movc r3.z, r5.z, r5.w, r3.z
    mul r5.zw, r5.xxxy, cb5[32].xxxy
    ftoi r2.xy, r5.zwzz
    ld_indexable(texture2d)(uint,uint,uint,uint) r2.x, r2.xyzw, t6.yxzw
    and r2.x, r2.x, l(192)
    movc r2.x, r2.x, l(0.005000), l(-0.100000)
    add r2.x, r2.x, r3.z
    lt r2.x, r0.x, r2.x
  else 
    mov r2.x, l(-1)
  endif 
  if_nz r2.x
    sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t5.xyzw, s5, l(0.000000)
    mul r6.xyz, r6.xyzx, cb2[37].xxxx
    sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t0.xyzw, s0, l(0.000000)
    mul r5.xyz, r1.xxxx, r5.xyzx
    mad r2.x, -r6.w, cb2[37].x, l(1.000000)
    mad r5.xyz, r5.xyzx, r2.xxxx, r6.xyzx
    mad r5.w, -r0.z, r2.x, l(1.000000)
    mul r1.w, r1.w, r1.w
    mul r1.w, r1.w, l(-4.890000)
    exp r1.w, r1.w
    add r1.y, r1.w, r1.y
    mad r4.xyzw, r5.xyzw, r1.wwww, r4.xyzw
  endif 
  mov r1.z, r3.w
endloop 
div r1.xyzw, r4.xyzw, r1.yyyy
add r0.x, r0.x, -cb0[33].x
max r0.x, r0.x, l(0.000000)
div_sat r0.y, r0.x, cb0[33].x
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, cb0[33].z
exp r0.x, r0.x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.x, -r0.x, l(1.000000)
mad_sat r0.w, r0.y, cb0[33].y, r0.x
add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
mad r0.xyz, r0.wwww, r2.xyzx, cb0[31].xyzx
mul r2.xyzw, r0.wwww, r0.xyzw
mad r0.xyz, r2.xyzx, cb2[40].zzzz, -r1.xyzx
mad o0.xyz, r2.wwww, r0.xyzx, r1.xyzx
add r0.x, -r1.w, l(1.000000)
mad r0.y, -r0.w, r0.w, l(1.000000)
mad o0.w, -r0.x, r0.y, l(1.000000)
ret 
// Approximately 110 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
