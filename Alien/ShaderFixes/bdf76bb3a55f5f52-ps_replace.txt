//Fix by mike_ar69
cbuffer cbDefaultVSC: register (b1)
{
  float4x4 ProjMatrix : packoffset(c0);
  float4x4 TextureTransform : packoffset(c4);
  float4x4 InvViewProj : packoffset(c8);
  float4x4 PrevViewProj : packoffset(c12);
  float4x4 PrevSecViewProj : packoffset(c16);
  float4 TextureScaleBias : packoffset(c20);
  float4 RenderTargetSizeVS : packoffset(c21);
  float4 RenderTargetResolutionVS : packoffset(c22);
  float4 MorphTargetParams : packoffset(c23);
  float4 OnePixelStepForS0VS : packoffset(c24);
  float4 ScreenRes[2] : packoffset(c25);
  float4 ClearSurfaceColor : packoffset(c27);
  float4 ClearSurfaceDepth : packoffset(c28);
  float4 VertexDepthClamp : packoffset(c29);
  float4 FlareScreenAspect : packoffset(c30);
  float4 DecalParams : packoffset(c31);
  float4 UserClipPlane0 : packoffset(c32);
  float4 UserClipPlane1 : packoffset(c33);
  float4 UserClipPlane2 : packoffset(c34);
  float4 UserClipPlane3 : packoffset(c35);
  float4 DecalScaleParams : packoffset(c36);
  float4 MipLevel : packoffset(c37);
}

cbuffer cbDefaultXSC : register(b0)
{
float4x4 ViewProj : packoffset(c0);
float4x4 ViewMatrix : packoffset(c4);
float4x4 SecondaryProj : packoffset(c8);
float4x4 SecondaryViewProj : packoffset(c12);
float4x4 SecondaryInvViewProj : packoffset(c16);
float4 ConstantColour : packoffset(c20);
float4 Time : packoffset(c21);
float4 CameraPosition : packoffset(c22);
float4 InvProjectionParams : packoffset(c23);
float4 SecondaryInvProjectionParams : packoffset(c24);
float4 ShaderDebugParams : packoffset(c25);
float4 ToneMappingDebugParams : packoffset(c26);
float4 HDR_EncodeScale2 : packoffset(c27);
float4 EmissiveSurfaceMultiplier : packoffset(c28);
float4 AlphaLight_OffsetScale : packoffset(c29);
float4 TessellationScaleFactor : packoffset(c30);
float4 FogNearColour : packoffset(c31);
float4 FogFarColour : packoffset(c32);
float4 FogParams : packoffset(c33);
float4 AdvanceEnvironmentShaderDebugParams : packoffset(c34);
float4 SMAA_RTMetrics : packoffset(c35);
}

cbuffer cbDefaultPSC : register(b2)
{
float4x4 AlphaLight_WorldtoClipMatrix : packoffset(c0);
float4x4 AlphaLight_CliptoWorldMatrix : packoffset(c4);
float4x4 ProjectorMatrix : packoffset(c8);
float4x4 MotionBlurCurrInvViewProjection : packoffset(c12);
float4x4 MotionBlurPrevViewProjection : packoffset(c16);
float4x4 MotionBlurPrevSecViewProjection : packoffset(c20);
float4x4 Spotlight0_Transform : packoffset(c24);
float4 TextureAnimation : packoffset(c28);
float4 AmbientDiffuse : packoffset(c29);
float4 EnvironmentDebugParams : packoffset(c30);
float4 ShadowFilterESMWeights : packoffset(c31);
float4 LegacyDofParams : packoffset(c32);
float4 OnePixelStepForS0 : packoffset(c33);
float4 RenderTargetSize : packoffset(c34);
float4 ModelTrackerID : packoffset(c35);
float4 Sharpness_Bloom_Controls : packoffset(c36);
float4 Blur_Direction : packoffset(c37);
float4 LightMeterDebugParams : packoffset(c38);
float4 SourceResolution : packoffset(c39);
float4 HDR_EncodeScale : packoffset(c40);
float4 OutputGamma : packoffset(c41);
float4 AlphaLight_ScaleParams : packoffset(c42);
float4 WrinkleMapWeights[6] : packoffset(c43);
float4 RadiosityCubeMapIdx : packoffset(c49);
float4 HairShadingParams[8] : packoffset(c50);
float4 SkinShadingParams : packoffset(c58);
float4 HDR_EncodeScale3 : packoffset(c59);
float4 ScreenResolution[4] : packoffset(c60);
float4 VelocityParams : packoffset(c64);
float4 DeferredConstColor : packoffset(c65);
float4 Spotlight0_Shadow_Params : packoffset(c66);
float4 Spotlight0_ShadowMapDimensions : packoffset(c67);
float4 ShadowFilterType : packoffset(c68);
float4 Spotlight0_ReverseZPerspective : packoffset(c69);
float4 SpacesuitVisorParams : packoffset(c70);
float4 Directional_Light_Colour : packoffset(c71);
float4 Directional_Light_Direction : packoffset(c72);
float4 EnvironmentMap_Params : packoffset(c73);
float4 Spotlight0_Shadow_Bias_GoboScale : packoffset(c74);
float4 ScreenSpaceLightShaftParams1 : packoffset(c75);
float4 ScreenSpaceLightShaftParams2 : packoffset(c76);
float4 ScreenSpaceLightPosition : packoffset(c77);
float4 LensAndScreenCenter : packoffset(c78);
float4 ScaleAndScaleIn : packoffset(c79);
float4 HmdWarpParam : packoffset(c80);
float4 ChromAbParam : packoffset(c81);
float4 SMAA_SubsampleIndices : packoffset(c82);
}
SamplerState frameSamplerReg_SMP_s : register(s7);
SamplerState depthSamplerReg_SMP_s : register(s8);
SamplerState emissiveSamplerReg_SMP_s : register(s11);
SamplerState normalSamplerReg_SMP_s : register(s12);
SamplerState specularSamplerReg_SMP_s : register(s13);
SamplerState spotlight0ProjectiveReg_SMP_s : register(s15);
Texture2D<float4> frameSamplerReg_TEX : register(t7);
Texture2D<float4> depthSamplerReg_TEX : register(t8);
Texture2D<float4> emissiveSamplerReg_TEX : register(t11);
Texture2D<float4> normalSamplerReg_TEX : register(t12);
Texture2D<float4> specularSamplerReg_TEX : register(t13);
Texture2D<float4> spotlight0ProjectiveReg_TEX : register(t15);

Texture2D<float4> StereoParams : register(t125);

void main(
float4 v0 : TEXCOORD0,
float4 v1 : TEXCOORD1,
float4 v2 : TEXCOORD2,
float4 v3 : TEXCOORD3,
float4 v4 : TEXCOORD4,
float4 v5 : TEXCOORD5,
float4 v6 : TEXCOORD6,
float4 v7 : TEXCOORD7,
out float4 o0 : SV_Target0)
{
float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
uint4 bitmask;
r0.xy = HairShadingParams[1].xy * HairShadingParams[1].xy;
r0.xy = float2(6.092348e-004,6.092348e-004) * r0.xy;
r0.z = 1.000000e+000 / v3.w;
r1.xy = v4.xy * r0.zz;
r2.xyz = v2.yzw * r0.zzz;
r0.z = depthSamplerReg_TEX.Sample(depthSamplerReg_SMP_s, r1.xy).x;
r0.w = -r0.z * SecondaryInvProjectionParams.y + SecondaryInvProjectionParams.z;
r0.w = SecondaryInvProjectionParams.x / r0.w;
r0.w = max(r0.w, 0.000000000e+000);
r1.z = r0.z * InvProjectionParams.y + InvProjectionParams.z;
r0.z = r0.z < 0.000000000e+000;
r1.z = InvProjectionParams.x / r1.z;
r1.z = max(r1.z, 0.000000000e+000);
r0.z = r0.z ? r0.w : r1.z;

r2.xyz = r2.xyz * r0.zzz + CameraPosition.xyz;

float4 stereo = StereoParams.Load(0);
float4 r25;
r2.w =1.0e+000;
r25.x = dot(r2.xyzw, ViewProj._m00_m10_m20_m30);
r25.y = dot(r2.xyzw, ViewProj._m01_m11_m21_m31);
r25.z = dot(r2.xyzw, ViewProj._m02_m12_m22_m32);
r25.w = dot(r2.xyzw, ViewProj._m03_m13_m23_m33);
r25.x -= stereo.x * (r25.w - stereo.y);
r2.x = dot(r25.xyzw, InvViewProj._m00_m10_m20_m30);
r2.y = dot(r25.xyzw, InvViewProj._m01_m11_m21_m31);
r2.z = dot(r25.xyzw, InvViewProj._m02_m12_m22_m32);
r2.w = dot(r25.xyzw, InvViewProj._m03_m13_m23_m33);
r2.xyzw /= r2.wwww;


r3.xyz = v0.xyz + -r2.xyz;
r0.z = dot(r3.xyz, r3.xyz);
r0.w = rsqrt(r0.z);
r3.xyz = r3.xyz * r0.www;
r4.xyzw = frameSamplerReg_TEX.Sample(frameSamplerReg_SMP_s, r1.xy).xywz;
r5.xyz = r4.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
r0.w = dot(r5.xyz, r5.xyz);
r0.w = rsqrt(r0.w);
r5.xyz = r5.xyz * r0.www;
r0.w = dot(r3.xyz, r5.xyz);
r1.z = max(r0.w, -1.000000000e+000);
r1.z = min(r1.z, 1.000000000e+000);
r1.w = abs(r1.z) * -1.872929931e-002 + 7.426100224e-002;
r1.w = r1.w * abs(r1.z) + -2.121143937e-001;
r1.w = r1.w * abs(r1.z) + 1.570728779e+000;
r3.w = 1.000000000e+000 + -abs(-r1.z);
r1.z = r1.z < -r1.z;
r3.w = sqrt(r3.w);
r4.w = r3.w * r1.w;
r4.w = r4.w * -2.000000000e+000 + 3.141592741e+000;
r1.z = r1.z ? r4.w : 0;
r1.z = r1.w * r3.w + r1.z;
r1.z = 1.570796371e+000 + -r1.z;
r1.w = dot(v6.xyz, v6.xyz);
r1.w = rsqrt(r1.w);
r6.xyz = v6.xyz * r1.www;
r1.w = dot(r6.xyz, r5.xyz);
r6.xyz = -r1.www * r5.xyz + r6.xyz;
r1.w = max(r1.w, -1.000000000e+000);
r1.w = min(r1.w, 1.000000000e+000);
r5.xyz = -r0.www * r5.xyz + r3.xyz;
r0.w = r0.w * r0.w;
r0.w = min(r0.w, 1.000000000e+000);
r0.w = 1.000000000e+000 + -r0.w;
r0.zw = sqrt(r0.zw);
r0.w = 8.000000000e+000 * r0.w;
r0.w = max(r0.w, 9.999999747e-005);
r3.w = abs(r1.w) * -1.872929931e-002 + 7.426100224e-002;
r3.w = r3.w * abs(r1.w) + -2.121143937e-001;
r3.w = r3.w * abs(r1.w) + 1.570728779e+000;
r4.w = 1.000000000e+000 + -abs(-r1.w);
r1.w = r1.w < -r1.w;
r4.w = sqrt(r4.w);
r5.w = r4.w * r3.w;
r5.w = r5.w * -2.000000000e+000 + 3.141592741e+000;
r1.w = r1.w ? r5.w : 0;
r1.w = r3.w * r4.w + r1.w;
r1.z = -r1.w + r1.z;
r1.z = 1.570796371e+000 + r1.z;
r7.xyzw = float4(-1.745329e-002,2.617994e-002,4.374892e-002,4.374892e-002) * HairShadingParams[1].zzxy;
r1.zw = r1.zz * float2(5.000000e-001,5.000000e-001) + -r7.xy;
r7.xy = float2(1.000000e+000,1.000000e+000) / r7.zw;
r1.zw = -r1.zw * r1.zw;
r0.xy = r1.zw / r0.xy;
r0.xy = float2(1.442695e+000,1.442695e+000) * r0.xy;
r0.xy = exp2(r0.xy);
r0.xy = r7.xy * r0.xy;
r4.x = emissiveSamplerReg_TEX.Sample(emissiveSamplerReg_SMP_s, r1.xy).w;
r7.xyzw = normalSamplerReg_TEX.Sample(normalSamplerReg_SMP_s, r1.xy).xyzw;
r1.xy = specularSamplerReg_TEX.Sample(specularSamplerReg_SMP_s, r1.xy).xy;
r4.y = r7.w;
r7.xyz = r7.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
r4.xyz = r4.xyz * r4.xyz;
r8.xyz = r4.xyz + r4.xyz;
r4.xyz = log2(r4.xyz);
r1.z = max(r8.z, r8.y);
r1.z = max(r1.z, r8.x);
r1.z = max(r1.z, 4.000000190e-003);
r8.xyz = r8.xyz / r1.zzz;
r1.y = saturate(r1.y * 2.000000000e+000 + -1.000000000e+000);
r8.xyz = r8.xyz * r1.yyy;
r1.y = HairShadingParams[0].z * r1.y;
r0.x = r1.y * r0.x;
r1.yzw = HairShadingParams[0].www * r8.xyz;
r1.yzw = r1.yzw * r0.yyy;
r0.y = dot(r6.xyz, r6.xyz);
r0.y = rsqrt(r0.y);
r6.xyz = r6.xyz * r0.yyy;
r0.y = dot(r6.xyz, r6.xyz);
r3.w = dot(r5.xyz, r5.xyz);
r3.w = rsqrt(r3.w);
r5.xyz = r5.xyz * r3.www;
r3.w = dot(r5.xyz, r5.xyz);
r4.w = dot(r6.xyz, r5.xyz);
r0.y = r3.w * r0.y;
r0.y = sqrt(r0.y);
r0.y = r4.w / r0.y;
r0.y = max(r0.y, -1.000000000e+000);
r0.y = min(r0.y, 1.000000000e+000);
r0.y = 1.000000000e+000 + r0.y;
r0.y = 5.000000000e-001 * r0.y;
r0.y = sqrt(r0.y);
r1.yzw = r1.yzw * r0.yyy;
r1.yzw = r0.xxx * r0.yyy + r1.yzw;
r0.xyw = r1.yzw / r0.www;
r1.y = dot(r7.xyz, r7.xyz);
r1.y = rsqrt(r1.y);
r1.yzw = r7.xyz * r1.yyy;
r1.y = dot(r3.xyz, r1.yzw);
r1.z = dot(r3.xyz, v5.xyz);
r1.z = saturate(-r1.z);
r1.z = -v4.z + r1.z;
r1.w = HairShadingParams[3].y + -r1.y;
r3.x = 1.000000000e+000 + -r1.x;
r1.x = max(r1.x, 0.000000000e+000);
r1.x = log2(r1.x);
r1.x = HairShadingParams[4].x * r1.x;
r1.x = exp2(r1.x);
r1.w = r3.x * HairShadingParams[3].z + r1.w;
r1.w = max(r1.w, 0.000000000e+000);
r1.w = r1.w * r1.w;
r1.w = -HairShadingParams[3].x * r1.w;
r3.y = HairShadingParams[3].w * r1.w;
r1.w = exp2(r1.w);
r1.w = HairShadingParams[1].w * r1.w;
r3.y = exp2(r3.y);
r0.xyw = r3.yyy * r0.xyw;
r0.xyw = r0.xyw * r1.xxx;
r1.x = -r1.y * r1.y + 2.000000000e+000;
r1.y = 1.000000000e+000 + -r1.y;
r1.y = max(r1.y, 0.000000000e+000);
r1.y = log2(r1.y);
r1.y = HairShadingParams[2].w * r1.y;
r1.y = exp2(r1.y);
r1.x = r1.x * r3.x;
r1.x = HairShadingParams[2].z * r1.x;
r1.x = exp2(r1.x);
r1.x = r1.x + r1.y;
r1.x = -1.000000000e+000 + r1.x;
r1.x = r1.x * HairShadingParams[2].y + HairShadingParams[2].x;
r3.xyz = r4.xyz * r1.xxx;
r3.xyz = exp2(r3.xyz);
r1.xyw = r3.xyz * r1.www;
r3.x = v4.w + -v4.z;
r3.x = 1.000000e+000 / r3.x;
r1.z = saturate(r3.x * r1.z);
r3.x = r1.z * -2.000000000e+000 + 3.000000000e+000;
r1.z = r1.z * r1.z;
r1.z = r3.x * r1.z;
r3.x = -v0.w + r0.z;
r0.z = Spotlight0_ReverseZPerspective.w * r0.z + -1.000000000e+000;
r3.x = max(r3.x, 0.000000000e+000);
r3.y = 1.000000e+000 / v1.w;
r3.y = saturate(r3.x * r3.y);
r3.x = r3.x * r3.x + v2.x;
r3.z = r3.y * -2.000000000e+000 + 3.000000000e+000;
r3.y = r3.y * r3.y;
r3.y = -r3.z * r3.y + 1.000000000e+000;
r3.x = r3.y / r3.x;
r1.z = r3.x * r1.z;
r3.xyz = v1.xyz * r1.zzz;
r1.xyz = r3.xyz * r1.xyw;
r0.xyw = r3.xyz * r0.xyw + r1.xyz;
r2.w = 1.000000000e+000;
r1.x = dot(r2.xyzw, Spotlight0_Transform._m00_m10_m20_m30);
r1.y = dot(r2.xyzw, Spotlight0_Transform._m01_m11_m21_m31);
r1.z = dot(r2.xyzw, Spotlight0_Transform._m03_m13_m23_m33);
r1.w = dot(r2.xyzw, Spotlight0_Transform._m02_m12_m22_m32);
r1.w = r1.w >= 0.000000000e+000;
r1.w = r1.w ? 1.000000 : 0;
r1.xy = r1.xy / r1.zz;
r2.x = Spotlight0_Shadow_Bias_GoboScale.y * r1.x;
r2.y = -5.000000000e-001 * r1.y;
r1.xy = float2(5.000000e-001,5.000000e-001) + r2.xy;
r1.xyz = spotlight0ProjectiveReg_TEX.SampleLevel(spotlight0ProjectiveReg_SMP_s, r1.xy, r0.z).xyz;
r2.xyz = r1.xxx + -r1.xyz;
r1.xyz = Spotlight0_Shadow_Params.zzz * r2.xyz + r1.xyz;
r1.xyz = r1.xyz * r1.xyz;
r1.xyz = r1.xyz * r1.www;
r0.xyz = r1.xyz * r0.xyw;
o0.xyz = HDR_EncodeScale.zzz * r0.xyz;
o0.w = 1.000000000e+000;
return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions:
//
// cbuffer cbDefaultXSC
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64 [unused]
//   float4x4 ViewMatrix;               // Offset:   64 Size:    64 [unused]
//   float4x4 SecondaryProj;            // Offset:  128 Size:    64 [unused]
//   float4x4 SecondaryViewProj;        // Offset:  192 Size:    64 [unused]
//   float4x4 SecondaryInvViewProj;     // Offset:  256 Size:    64 [unused]
//   float4 ConstantColour;             // Offset:  320 Size:    16 [unused]
//   float4 Time;                       // Offset:  336 Size:    16 [unused]
//   float4 CameraPosition;             // Offset:  352 Size:    16
//   float4 InvProjectionParams;        // Offset:  368 Size:    16
//   float4 SecondaryInvProjectionParams;// Offset:  384 Size:    16
//   float4 ShaderDebugParams;          // Offset:  400 Size:    16 [unused]
//   float4 ToneMappingDebugParams;     // Offset:  416 Size:    16 [unused]
//   float4 HDR_EncodeScale2;           // Offset:  432 Size:    16 [unused]
//   float4 EmissiveSurfaceMultiplier;  // Offset:  448 Size:    16 [unused]
//   float4 AlphaLight_OffsetScale;     // Offset:  464 Size:    16 [unused]
//   float4 TessellationScaleFactor;    // Offset:  480 Size:    16 [unused]
//   float4 FogNearColour;              // Offset:  496 Size:    16 [unused]
//   float4 FogFarColour;               // Offset:  512 Size:    16 [unused]
//   float4 FogParams;                  // Offset:  528 Size:    16 [unused]
//   float4 AdvanceEnvironmentShaderDebugParams;// Offset:  544 Size:    16 [unused]
//   float4 SMAA_RTMetrics;             // Offset:  560 Size:    16 [unused]
//
// }
//
// cbuffer cbDefaultPSC
// {
//
//   float4x4 AlphaLight_WorldtoClipMatrix;// Offset:    0 Size:    64 [unused]
//   float4x4 AlphaLight_CliptoWorldMatrix;// Offset:   64 Size:    64 [unused]
//   float4x4 ProjectorMatrix;          // Offset:  128 Size:    64 [unused]
//   float4x4 MotionBlurCurrInvViewProjection;// Offset:  192 Size:    64 [unused]
//   float4x4 MotionBlurPrevViewProjection;// Offset:  256 Size:    64 [unused]
//   float4x4 MotionBlurPrevSecViewProjection;// Offset:  320 Size:    64 [unused]
//   float4x4 Spotlight0_Transform;     // Offset:  384 Size:    64
//   float4 TextureAnimation;           // Offset:  448 Size:    16 [unused]
//   float4 AmbientDiffuse;             // Offset:  464 Size:    16 [unused]
//   float4 EnvironmentDebugParams;     // Offset:  480 Size:    16 [unused]
//   float4 ShadowFilterESMWeights;     // Offset:  496 Size:    16 [unused]
//   float4 LegacyDofParams;            // Offset:  512 Size:    16 [unused]
//   float4 OnePixelStepForS0;          // Offset:  528 Size:    16 [unused]
//   float4 RenderTargetSize;           // Offset:  544 Size:    16 [unused]
//   float4 ModelTrackerID;             // Offset:  560 Size:    16 [unused]
//   float4 Sharpness_Bloom_Controls;   // Offset:  576 Size:    16 [unused]
//   float4 Blur_Direction;             // Offset:  592 Size:    16 [unused]
//   float4 LightMeterDebugParams;      // Offset:  608 Size:    16 [unused]
//   float4 SourceResolution;           // Offset:  624 Size:    16 [unused]
//   float4 HDR_EncodeScale;            // Offset:  640 Size:    16
//   float4 OutputGamma;                // Offset:  656 Size:    16 [unused]
//   float4 AlphaLight_ScaleParams;     // Offset:  672 Size:    16 [unused]
//   float4 WrinkleMapWeights[6];       // Offset:  688 Size:    96 [unused]
//   float4 RadiosityCubeMapIdx;        // Offset:  784 Size:    16 [unused]
//   float4 HairShadingParams[8];       // Offset:  800 Size:   128
//   float4 SkinShadingParams;          // Offset:  928 Size:    16 [unused]
//   float4 HDR_EncodeScale3;           // Offset:  944 Size:    16 [unused]
//   float4 ScreenResolution[4];        // Offset:  960 Size:    64 [unused]
//   float4 VelocityParams;             // Offset: 1024 Size:    16 [unused]
//   float4 DeferredConstColor;         // Offset: 1040 Size:    16 [unused]
//   float4 Spotlight0_Shadow_Params;   // Offset: 1056 Size:    16
//   float4 Spotlight0_ShadowMapDimensions;// Offset: 1072 Size:    16 [unused]
//   float4 ShadowFilterType;           // Offset: 1088 Size:    16 [unused]
//   float4 Spotlight0_ReverseZPerspective;// Offset: 1104 Size:    16
//   float4 SpacesuitVisorParams;       // Offset: 1120 Size:    16 [unused]
//   float4 Directional_Light_Colour;   // Offset: 1136 Size:    16 [unused]
//   float4 Directional_Light_Direction;// Offset: 1152 Size:    16 [unused]
//   float4 EnvironmentMap_Params;      // Offset: 1168 Size:    16 [unused]
//   float4 Spotlight0_Shadow_Bias_GoboScale;// Offset: 1184 Size:    16
//   float4 ScreenSpaceLightShaftParams1;// Offset: 1200 Size:    16 [unused]
//   float4 ScreenSpaceLightShaftParams2;// Offset: 1216 Size:    16 [unused]
//   float4 ScreenSpaceLightPosition;   // Offset: 1232 Size:    16 [unused]
//   float4 LensAndScreenCenter;        // Offset: 1248 Size:    16 [unused]
//   float4 ScaleAndScaleIn;            // Offset: 1264 Size:    16 [unused]
//   float4 HmdWarpParam;               // Offset: 1280 Size:    16 [unused]
//   float4 ChromAbParam;               // Offset: 1296 Size:    16 [unused]
//   float4 SMAA_SubsampleIndices;      // Offset: 1312 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// frameSamplerReg_SMP               sampler      NA          NA    7        1
// depthSamplerReg_SMP               sampler      NA          NA    8        1
// emissiveSamplerReg_SMP            sampler      NA          NA   11        1
// normalSamplerReg_SMP              sampler      NA          NA   12        1
// specularSamplerReg_SMP            sampler      NA          NA   13        1
// spotlight0ProjectiveReg_SMP       sampler      NA          NA   15        1
// frameSamplerReg_TEX               texture  float4          2d    7        1
// depthSamplerReg_TEX               texture  float4          2d    8        1
// emissiveSamplerReg_TEX            texture  float4          2d   11        1
// normalSamplerReg_TEX              texture  float4          2d   12        1
// specularSamplerReg_TEX            texture  float4          2d   13        1
// spotlight0ProjectiveReg_TEX       texture  float4          2d   15        1
// cbDefaultXSC                      cbuffer      NA          NA    0        1
// cbDefaultPSC                      cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float      w
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float   xyz
// TEXCOORD                 7   xyzw        7     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb2[75], immediateIndexed
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s11, mode_default
dcl_sampler s12, mode_default
dcl_sampler s13, mode_default
dcl_sampler s15, mode_default
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.w
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 9
mul r0.xy, cb2[51].xyxx, cb2[51].xyxx
mul r0.xy, r0.xyxx, l(0.000609, 0.000609, 0.000000, 0.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), v3.w
mul r1.xy, r0.zzzz, v4.xyxx
mul r2.xyz, r0.zzzz, v2.yzwy
sample_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t8.yzxw, s8
mad r0.w, -r0.z, cb0[24].y, cb0[24].z
div r0.w, cb0[24].x, r0.w
max r0.w, r0.w, l(0.000000)
mad r1.z, r0.z, cb0[23].y, cb0[23].z
lt r0.z, r0.z, l(0.000000)
div r1.z, cb0[23].x, r1.z
max r1.z, r1.z, l(0.000000)
movc r0.z, r0.z, r0.w, r1.z
mad r2.xyz, r2.xyzx, r0.zzzz, cb0[22].xyzx
add r3.xyz, -r2.xyzx, v0.xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.w, r0.z
mul r3.xyz, r0.wwww, r3.xyzx
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyxx, t7.xywz, s7
mad r5.xyz, r4.xywx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx
dp3 r0.w, r3.xyzx, r5.xyzx
max r1.z, r0.w, l(-1.000000)
min r1.z, r1.z, l(1.000000)
mad r1.w, |r1.z|, l(-0.018729), l(0.074261)
mad r1.w, r1.w, |r1.z|, l(-0.212114)
mad r1.w, r1.w, |r1.z|, l(1.570729)
add r3.w, -|r1.z|, l(1.000000)
lt r1.z, r1.z, -r1.z
sqrt r3.w, r3.w
mul r4.w, r1.w, r3.w
mad r4.w, r4.w, l(-2.000000), l(3.141593)
and r1.z, r1.z, r4.w
mad r1.z, r1.w, r3.w, r1.z
add r1.z, -r1.z, l(1.570796)
dp3 r1.w, v6.xyzx, v6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, v6.xyzx
dp3 r1.w, r6.xyzx, r5.xyzx
mad r6.xyz, -r1.wwww, r5.xyzx, r6.xyzx
max r1.w, r1.w, l(-1.000000)
min r1.w, r1.w, l(1.000000)
mad r5.xyz, -r0.wwww, r5.xyzx, r3.xyzx
mul r0.w, r0.w, r0.w
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
sqrt r0.zw, r0.zzzw
mul r0.w, r0.w, l(8.000000)
max r0.w, r0.w, l(0.000100)
mad r3.w, |r1.w|, l(-0.018729), l(0.074261)
mad r3.w, r3.w, |r1.w|, l(-0.212114)
mad r3.w, r3.w, |r1.w|, l(1.570729)
add r4.w, -|r1.w|, l(1.000000)
lt r1.w, r1.w, -r1.w
sqrt r4.w, r4.w
mul r5.w, r3.w, r4.w
mad r5.w, r5.w, l(-2.000000), l(3.141593)
and r1.w, r1.w, r5.w
mad r1.w, r3.w, r4.w, r1.w
add r1.z, r1.z, -r1.w
add r1.z, r1.z, l(1.570796)
mul r7.xyzw, cb2[51].zzxy, l(-0.017453, 0.026180, 0.043749, 0.043749)
mad r1.zw, r1.zzzz, l(0.000000, 0.000000, 0.500000, 0.500000), -r7.xxxy
div r7.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r7.zwzz
mul r1.zw, r1.zzzw, -r1.zzzw
div r0.xy, r1.zwzz, r0.xyxx
mul r0.xy, r0.xyxx, l(1.442695, 1.442695, 0.000000, 0.000000)
exp r0.xy, r0.xyxx
mul r0.xy, r0.xyxx, r7.xyxx
sample_indexable(texture2d)(float,float,float,float) r4.x, r1.xyxx, t11.wxyz, s11
sample_indexable(texture2d)(float,float,float,float) r7.xyzw, r1.xyxx, t12.xyzw, s12
sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t13.xyzw, s13
mov r4.y, r7.w
mad r7.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r4.xyzx
add r8.xyz, r4.xyzx, r4.xyzx
log r4.xyz, r4.xyzx
max r1.z, r8.z, r8.y
max r1.z, r1.z, r8.x
max r1.z, r1.z, l(0.004000)
div r8.xyz, r8.xyzx, r1.zzzz
mad_sat r1.y, r1.y, l(2.000000), l(-1.000000)
mul r8.xyz, r1.yyyy, r8.xyzx
mul r1.y, r1.y, cb2[50].z
mul r0.x, r0.x, r1.y
mul r1.yzw, r8.xxyz, cb2[50].wwww
mul r1.yzw, r0.yyyy, r1.yyzw
dp3 r0.y, r6.xyzx, r6.xyzx
rsq r0.y, r0.y
mul r6.xyz, r0.yyyy, r6.xyzx
dp3 r0.y, r6.xyzx, r6.xyzx
dp3 r3.w, r5.xyzx, r5.xyzx
rsq r3.w, r3.w
mul r5.xyz, r3.wwww, r5.xyzx
dp3 r3.w, r5.xyzx, r5.xyzx
dp3 r4.w, r6.xyzx, r5.xyzx
mul r0.y, r0.y, r3.w
sqrt r0.y, r0.y
div r0.y, r4.w, r0.y
max r0.y, r0.y, l(-1.000000)
min r0.y, r0.y, l(1.000000)
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, l(0.500000)
sqrt r0.y, r0.y
mul r1.yzw, r0.yyyy, r1.yyzw
mad r1.yzw, r0.xxxx, r0.yyyy, r1.yyzw
div r0.xyw, r1.yzyw, r0.wwww
dp3 r1.y, r7.xyzx, r7.xyzx
rsq r1.y, r1.y
mul r1.yzw, r1.yyyy, r7.xxyz
dp3 r1.y, r3.xyzx, r1.yzwy
dp3 r1.z, r3.xyzx, v5.xyzx
mov_sat r1.z, -r1.z
add r1.z, r1.z, -v4.z
add r1.w, -r1.y, cb2[53].y
add r3.x, -r1.x, l(1.000000)
max r1.x, r1.x, l(0.000000)
log r1.x, r1.x
mul r1.x, r1.x, cb2[54].x
exp r1.x, r1.x
mad r1.w, r3.x, cb2[53].z, r1.w
max r1.w, r1.w, l(0.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, -cb2[53].x
mul r3.y, r1.w, cb2[53].w
exp r1.w, r1.w
mul r1.w, r1.w, cb2[51].w
exp r3.y, r3.y
mul r0.xyw, r0.xyxw, r3.yyyy
mul r0.xyw, r1.xxxx, r0.xyxw
mad r1.x, -r1.y, r1.y, l(2.000000)
add r1.y, -r1.y, l(1.000000)
max r1.y, r1.y, l(0.000000)
log r1.y, r1.y
mul r1.y, r1.y, cb2[52].w
exp r1.y, r1.y
mul r1.x, r3.x, r1.x
mul r1.x, r1.x, cb2[52].z
exp r1.x, r1.x
add r1.x, r1.y, r1.x
add r1.x, r1.x, l(-1.000000)
mad r1.x, r1.x, cb2[52].y, cb2[52].x
mul r3.xyz, r1.xxxx, r4.xyzx
exp r3.xyz, r3.xyzx
mul r1.xyw, r1.wwww, r3.xyxz
add r3.x, -v4.z, v4.w
div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
mul_sat r1.z, r1.z, r3.x
mad r3.x, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r3.x
add r3.x, r0.z, -v0.w
mad r0.z, cb2[69].w, r0.z, l(-1.000000)
max r3.x, r3.x, l(0.000000)
div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), v1.w
mul_sat r3.y, r3.y, r3.x
mad r3.x, r3.x, r3.x, v2.x
mad r3.z, r3.y, l(-2.000000), l(3.000000)
mul r3.y, r3.y, r3.y
mad r3.y, -r3.z, r3.y, l(1.000000)
div r3.x, r3.y, r3.x
mul r1.z, r1.z, r3.x
mul r3.xyz, r1.zzzz, v1.xyzx
mul r1.xyz, r1.xywx, r3.xyzx
mad r0.xyw, r3.xyxz, r0.xyxw, r1.xyxz
mov r2.w, l(1.000000)
dp4 r1.x, r2.xyzw, cb2[24].xyzw
dp4 r1.y, r2.xyzw, cb2[25].xyzw
dp4 r1.z, r2.xyzw, cb2[27].xyzw
dp4 r1.w, r2.xyzw, cb2[26].xyzw
ge r1.w, r1.w, l(0.000000)
and r1.w, r1.w, l(0x3f800000)
div r1.xy, r1.xyxx, r1.zzzz
mul r2.x, r1.x, cb2[74].y
mul r2.y, r1.y, l(-0.500000)
add r1.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t15.xyzw, s15, r0.z
add r2.xyz, -r1.xyzx, r1.xxxx
mad r1.xyz, cb2[66].zzzz, r2.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, r1.xyzx
mul r1.xyz, r1.wwww, r1.xyzx
mul r0.xyz, r0.xywx, r1.xyzx
mul o0.xyz, r0.xyzx, cb2[40].zzzz
mov o0.w, l(1.000000)
ret
// Approximately 188 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
