
cbuffer cbDefaultXSC : register(b0)
{
  float4x4 ViewProj : packoffset(c0);
  float4x4 ViewMatrix : packoffset(c4);
  float4x4 SecondaryProj : packoffset(c8);
  float4x4 SecondaryViewProj : packoffset(c12);
  float4x4 SecondaryInvViewProj : packoffset(c16);
  float4 ConstantColour : packoffset(c20);
  float4 Time : packoffset(c21);
  float4 CameraPosition : packoffset(c22);
  float4 InvProjectionParams : packoffset(c23);
  float4 SecondaryInvProjectionParams : packoffset(c24);
  float4 ShaderDebugParams : packoffset(c25);
  float4 ToneMappingDebugParams : packoffset(c26);
  float4 HDR_EncodeScale2 : packoffset(c27);
  float4 EmissiveSurfaceMultiplier : packoffset(c28);
  float4 AlphaLight_OffsetScale : packoffset(c29);
  float4 TessellationScaleFactor : packoffset(c30);
  float4 FogNearColour : packoffset(c31);
  float4 FogFarColour : packoffset(c32);
  float4 FogParams : packoffset(c33);
  float4 AdvanceEnvironmentShaderDebugParams : packoffset(c34);
  float4 SMAA_RTMetrics : packoffset(c35);
}

cbuffer cbModelVSC : register(b4)
{
  float4 VertexScale : packoffset(c0);
}

cbuffer cbUbershaderXSC : register(b5)
{
  float4 rp_parameter_vs[32] : packoffset(c0);
  float4 rp_parameter_ps[32] : packoffset(c32);
}

cbuffer cbInstanceXSC : register(b10)
{
  float4x4 WorldMatrix : packoffset(c0);
  float4 LightmapTransform : packoffset(c4);
  float4 RInstConstants[6] : packoffset(c5);
  float4 RadiosityProbeTexcoordAndScale : packoffset(c11);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : NORMAL0,
  float4 v3 : COLOR0,
  float2 v4 : TEXCOORD2,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : COLOR0,
  out float4 o6 : SV_Position0)
{
  float4 r0,r1;
  uint4 bitmask;
  o0.x = dot(v2.xyz, WorldMatrix._m00_m10_m20);
  o0.y = dot(v2.xyz, WorldMatrix._m01_m11_m21);
  o0.z = dot(v2.xyz, WorldMatrix._m02_m12_m22);
  o0.w = 0.000000000e+000;
  r0.xy = v1.xy * float2(1.600000e+001,1.600000e+001) + RInstConstants[4].zw;
  o1.xy = RInstConstants[3].zw * r0.xy + RInstConstants[3].xy;
  r0.xy = v4.xy * LightmapTransform.xy + LightmapTransform.zw;
  o1.zw = float2(3.906250e-003,3.906250e-003) * r0.xy;
  o2.xyzw = RInstConstants[1].xyzw;
  r0.xyz = VertexScale.xxx * v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, WorldMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, WorldMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, WorldMatrix._m02_m12_m22_m32);
  o3.xyz = CameraPosition.xyz + -r1.xyz;
  r1.w = 1.000000000e+000;
  r0.x = dot(r1.xyzw, ViewProj._m03_m13_m23_m33);
  o3.w = r0.x;
  o6.w = r0.x;
  r0.x = -v3.z * RInstConstants[0].z + 1.000000000e+000;
  r0.yzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -rp_parameter_vs[0].xyz;
  o4.xyz = -r0.xxx * r0.yzw + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  o4.w = 0.000000000e+000;
  r0.xyzw = RInstConstants[0].xyzw * v3.xyzw;
  r0.x = saturate(r0.x + r0.y);
  o5.zw = r0.zw;
  r0.y = -5.000000000e-001 + r0.x;
  o5.x = r0.x;
  r0.x = -abs(-r0.y) * 2.000000000e+000 + 1.000000000e+000;
  o5.y = rp_parameter_vs[1].x * r0.x;
  o6.x = dot(r1.xyzw, ViewProj._m00_m10_m20_m30);
  o6.y = dot(r1.xyzw, ViewProj._m01_m11_m21_m31);
  o6.z = dot(r1.xyzw, ViewProj._m02_m12_m22_m32);
  
float4 stereo = StereoParams.Load(0);

// o6.x -= stereo.x * (o6.w - stereo.y); 
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbDefaultXSC
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64
//   float4x4 ViewMatrix;               // Offset:   64 Size:    64 [unused]
//   float4x4 SecondaryProj;            // Offset:  128 Size:    64 [unused]
//   float4x4 SecondaryViewProj;        // Offset:  192 Size:    64 [unused]
//   float4x4 SecondaryInvViewProj;     // Offset:  256 Size:    64 [unused]
//   float4 ConstantColour;             // Offset:  320 Size:    16 [unused]
//   float4 Time;                       // Offset:  336 Size:    16 [unused]
//   float4 CameraPosition;             // Offset:  352 Size:    16
//   float4 InvProjectionParams;        // Offset:  368 Size:    16 [unused]
//   float4 SecondaryInvProjectionParams;// Offset:  384 Size:    16 [unused]
//   float4 ShaderDebugParams;          // Offset:  400 Size:    16 [unused]
//   float4 ToneMappingDebugParams;     // Offset:  416 Size:    16 [unused]
//   float4 HDR_EncodeScale2;           // Offset:  432 Size:    16 [unused]
//   float4 EmissiveSurfaceMultiplier;  // Offset:  448 Size:    16 [unused]
//   float4 AlphaLight_OffsetScale;     // Offset:  464 Size:    16 [unused]
//   float4 TessellationScaleFactor;    // Offset:  480 Size:    16 [unused]
//   float4 FogNearColour;              // Offset:  496 Size:    16 [unused]
//   float4 FogFarColour;               // Offset:  512 Size:    16 [unused]
//   float4 FogParams;                  // Offset:  528 Size:    16 [unused]
//   float4 AdvanceEnvironmentShaderDebugParams;// Offset:  544 Size:    16 [unused]
//   float4 SMAA_RTMetrics;             // Offset:  560 Size:    16 [unused]
//
// }
//
// cbuffer cbModelVSC
// {
//
//   float4 VertexScale;                // Offset:    0 Size:    16
//
// }
//
// cbuffer cbUbershaderXSC
// {
//
//   float4 rp_parameter_vs[32];        // Offset:    0 Size:   512
//   float4 rp_parameter_ps[32];        // Offset:  512 Size:   512 [unused]
//
// }
//
// cbuffer cbInstanceXSC
// {
//
//   float4x4 WorldMatrix;              // Offset:    0 Size:    64
//   float4 LightmapTransform;          // Offset:   64 Size:    16
//   float4 RInstConstants[6];          // Offset:   80 Size:    96
//   float4 RadiosityProbeTexcoordAndScale;// Offset:  176 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbDefaultXSC                      cbuffer      NA          NA    0        1
// cbModelVSC                        cbuffer      NA          NA    4        1
// cbUbershaderXSC                   cbuffer      NA          NA    5        1
// cbInstanceXSC                     cbuffer      NA          NA   10        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
// COLOR                    0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_constantbuffer cb5[2], immediateIndexed
dcl_constantbuffer cb10[10], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 2
dp3 o0.x, v2.xyzx, cb10[0].xyzx
dp3 o0.y, v2.xyzx, cb10[1].xyzx
dp3 o0.z, v2.xyzx, cb10[2].xyzx
mov o0.w, l(0)
mad r0.xy, v1.xyxx, l(16.000000, 16.000000, 0.000000, 0.000000), cb10[9].zwzz
mad o1.xy, cb10[8].zwzz, r0.xyxx, cb10[8].xyxx
mad r0.xy, v4.xyxx, cb10[4].xyxx, cb10[4].zwzz
mul o1.zw, r0.xxxy, l(0.000000, 0.000000, 0.003906, 0.003906)
mov o2.xyzw, cb10[6].xyzw
mul r0.xyz, v0.xyzx, cb4[0].xxxx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb10[0].xyzw
dp4 r1.y, r0.xyzw, cb10[1].xyzw
dp4 r1.z, r0.xyzw, cb10[2].xyzw
add o3.xyz, -r1.xyzx, cb0[22].xyzx
mov r1.w, l(1.000000)
dp4 r0.x, r1.xyzw, cb0[3].xyzw
mov o3.w, r0.x
mov o6.w, r0.x
mad r0.x, -v3.z, cb10[5].z, l(1.000000)
add r0.yzw, -cb5[0].xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
mad o4.xyz, -r0.xxxx, r0.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o4.w, l(0)
mul r0.xyzw, v3.xyzw, cb10[5].xyzw
add_sat r0.x, r0.y, r0.x
mov o5.zw, r0.zzzw
add r0.y, r0.x, l(-0.500000)
mov o5.x, r0.x
mad r0.x, -|r0.y|, l(2.000000), l(1.000000)
mul o5.y, r0.x, cb5[1].x
dp4 o6.x, r1.xyzw, cb0[0].xyzw
dp4 o6.y, r1.xyzw, cb0[1].xyzw
dp4 o6.z, r1.xyzw, cb0[2].xyzw
ret 
// Approximately 34 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
