
cbuffer cbDefaultXSC : register(b0)
{
  float4x4 ViewProj : packoffset(c0);
  float4x4 ViewMatrix : packoffset(c4);
  float4x4 SecondaryProj : packoffset(c8);
  float4x4 SecondaryViewProj : packoffset(c12);
  float4x4 SecondaryInvViewProj : packoffset(c16);
  float4 ConstantColour : packoffset(c20);
  float4 Time : packoffset(c21);
  float4 CameraPosition : packoffset(c22);
  float4 InvProjectionParams : packoffset(c23);
  float4 SecondaryInvProjectionParams : packoffset(c24);
  float4 ShaderDebugParams : packoffset(c25);
  float4 ToneMappingDebugParams : packoffset(c26);
  float4 HDR_EncodeScale2 : packoffset(c27);
  float4 EmissiveSurfaceMultiplier : packoffset(c28);
  float4 AlphaLight_OffsetScale : packoffset(c29);
  float4 TessellationScaleFactor : packoffset(c30);
  float4 FogNearColour : packoffset(c31);
  float4 FogFarColour : packoffset(c32);
  float4 FogParams : packoffset(c33);
  float4 AdvanceEnvironmentShaderDebugParams : packoffset(c34);
  float4 SMAA_RTMetrics : packoffset(c35);
}

cbuffer cbUbershaderXSC : register(b5)
{
  float4 rp_parameter_vs[32] : packoffset(c0);
  float4 rp_parameter_ps[32] : packoffset(c32);
}
SamplerState TEXTURE_MAP_SAMPLER_SMP_s : register(s0);
SamplerState SPARKLE_MAP_SAMPLER_SMP_s : register(s1);
SamplerState depthSamplerReg_SMP_s : register(s8);
SamplerState normalSamplerReg_SMP_s : register(s12);
Texture2D<float4> TEXTURE_MAP_SAMPLER_TEX : register(t0);
Texture2D<float4> SPARKLE_MAP_SAMPLER_TEX : register(t1);
Texture2D<float4> depthSamplerReg_TEX : register(t8);
Texture2D<float4> normalSamplerReg_TEX : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  float4 v9 : TEXCOORD9,
  float4 v10 : TEXCOORD10,
  float4 v11 : TEXCOORD11,
  float4 v12 : TEXCOORD12,  
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  r0.xy = v2.xy / v1.ww;
  r0.z = depthSamplerReg_TEX.Sample(depthSamplerReg_SMP_s, r0.xy).x;
  r0.xyw = normalSamplerReg_TEX.Sample(normalSamplerReg_SMP_s, r0.xy).xyz;
  r0.xyw = r0.xyw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.x = -r0.z * SecondaryInvProjectionParams.y + SecondaryInvProjectionParams.z;
  r1.x = SecondaryInvProjectionParams.x / r1.x;
  r1.y = r0.z * InvProjectionParams.y + InvProjectionParams.z;
  r0.z = r0.z < 0.000000000e+000;
  r1.y = InvProjectionParams.x / r1.y;
  r1.xy = max(r1.xy, float2(0.000000e+000,0.000000e+000));
  r0.z = r0.z ? r1.x : r1.y;
  r1.xyz = v0.xyz / v1.www;

float4 stereo = StereoParams.Load(0);
float4 r25, r11;
r11.xyz = r1.xyz * r0.zzz + CameraPosition.xyz;
r11.w =1.0;

r25.x = dot(r11.xyzw, ViewProj._m00_m10_m20_m30);
r25.y = dot(r11.xyzw, ViewProj._m01_m11_m21_m31);
r25.z = dot(r11.xyzw, ViewProj._m02_m12_m22_m32);
r25.w = dot(r11.xyzw, ViewProj._m03_m13_m23_m33);

r25.x -= stereo.x * (r25.w - stereo.y);

r11.x = dot(r25.xyzw, v9.xyzw);
r11.y = dot(r25.xyzw, v10.xyzw);
r11.z = dot(r25.xyzw, v11.xyzw);
r11.w = dot(r25.xyzw, v12.xyzw);    
r11.xyzw /= r11.wwww;    

r1.xyz = (r11.xyz - CameraPosition.xyz)/r0.zzz;

  
  r2.xyzw = r1.zyzx * r0.zzzz + CameraPosition.zyzx;
  
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = sqrt(r0.z);
  r0.z = 2.000000030e-001 * r0.z;
  r0.z = min(r0.z, 1.000000000e+000);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.z = 5.000000000e-001 * r0.z;
  r1.xyzw = rp_parameter_ps[3].yyzz * r2.xyzw;
  r3.xyzw = TEXTURE_MAP_SAMPLER_TEX.Sample(TEXTURE_MAP_SAMPLER_SMP_s, r1.zw).xyzw;
  r1.xyzw = TEXTURE_MAP_SAMPLER_TEX.Sample(TEXTURE_MAP_SAMPLER_SMP_s, r1.xy).xyzw;
  r3.xyz = r3.xyz * r3.xyz;
  r2.x = dot(r0.xyw, r0.xyw);
  r2.x = rsqrt(r2.x);
  r4.xyz = r2.xxx * r0.xyw;
  r0.x = r0.y * r2.x + rp_parameter_ps[2].x;
  r5.xyz = float3(-2.000000e-001,-2.000000e-001,-2.000000e-001) + abs(r4.xyz);
  r5.xyz = float3(7.000000e+000,7.000000e+000,7.000000e+000) * r5.xyz;
  r6.xyz = r5.xyz * r5.xyz;
  r5.xyz = r6.xyz * r5.xyz;
  r5.xyz = max(r5.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r0.y = r5.x + r5.y;
  r0.y = r0.y + r5.z;
  r5.xyz = r5.xyz / r0.yyy;
  r3.xyzw = r5.yyyy * r3.xyzw;
  r1.xyz = r1.xyz * r1.xyz;
  r1.xyzw = r1.xyzw * r5.xxxx + r3.xyzw;
  r0.yw = rp_parameter_ps[3].ww * r2.wy;
  r3.xyzw = TEXTURE_MAP_SAMPLER_TEX.Sample(TEXTURE_MAP_SAMPLER_SMP_s, r0.yw).xyzw;
  r3.xyz = r3.xyz * r3.xyz;
  r1.xyzw = r3.xyzw * r5.zzzz + r1.xyzw;
  r3.xyz = -v3.xyz + r2.wyz;
  r0.yw = r2.zy * float2(2.000000e+000,2.000000e+000) + r2.ww;
  r0.yw = float2(1.000000e+001,1.000000e+001) * abs(r0.yw);
  r2.xyz = SPARKLE_MAP_SAMPLER_TEX.Sample(SPARKLE_MAP_SAMPLER_SMP_s, r0.yw).xyz;
  r5.x = dot(v4.xyz, r3.xyz);
  r5.y = dot(v5.xyz, r3.xyz);
  r5.z = dot(v6.xyz, r3.xyz);
  r3.xyz = r5.xyz / rp_parameter_ps[5].xyz;
  r3.xyz = min(abs(r3.xyz), float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r3.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r3.xyz;
  r3.xyz = saturate(r3.xyz / rp_parameter_ps[4].yzw);
  r0.y = r3.x * r3.y;
  r0.y = r0.y * r3.z;
  r0.y = rp_parameter_ps[0].w * r0.y;
  r0.w = 1.000000000e+000 + rp_parameter_ps[2].x;
  r0.x = saturate(r0.x / r0.w);
  r0.w = -r0.y * r0.x + 1.000000000e+000;
  r0.y = r0.y * r0.x;
  r0.x = 1.000000000e+000 + -r0.x;
  r0.x = -r0.x * r0.x + 1.000000000e+000;
  r0.y = saturate(r0.y);
  r0.w = saturate(r1.w + -r0.w);
  r2.w = r0.w * -2.000000000e+000 + 3.000000000e+000;
  r0.w = r0.w * r0.w;
  r0.w = r2.w * r0.w;
  r1.w = min(r0.w, 1.000000000e+000);
  r3.xyzw = r1.xyzw * r0.xxxx;
  r0.x = rp_parameter_ps[1].w * r3.w;
  r0.x = v0.w * r0.x;
  o0.w = r0.x;
  o0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r0.w = dot(r2.xyz, r4.xyz);
  r0.w = abs(r0.w) >= 9.950000048e-001;
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.w * r0.z;
  r0.z = r0.z * r1.w;
  r0.zw = float2(1.000000e-001,5.000000e+000) * r0.zz;
  r1.xyzw = r2.xxyz * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = r2.x * 4.000000060e-001 + r0.z;
  r0.z = rp_parameter_ps[2].z * r0.z;
  o3.x = -r0.z * 1.500000060e-001 + 1.000000000e+000;
  r1.yzw = rp_parameter_ps[2].zzz * r1.yzw;
  r1.yzw = r1.yzw * float3(2.500000e-001,2.500000e-001,2.500000e-001) + r4.xyz;
  r0.z = dot(r1.yzw, r1.yzw);
  r0.z = rsqrt(r0.z);
  r1.yzw = r1.yzw * r0.zzz + -r4.xyz;
  r1.yzw = r0.www * r1.yzw + r4.xyz;
  o1.xyz = r1.yzw * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o3.w = rp_parameter_ps[3].x * r0.x;
  o1.w = r0.x;
  o2.w = r0.x;
  r0.xzw = -rp_parameter_ps[1].xyz + rp_parameter_ps[0].xyz;
  r0.xyz = r0.yyy * r0.xzw + rp_parameter_ps[1].xyz;
  r0.w = 2.000000030e-001 * rp_parameter_ps[2].y;
  r0.w = saturate(r0.w * r1.x);
  r0.xyz = r0.xyz * r3.xyz + r0.www;
  r0.xyz = float3(1.000000e-019,1.000000e-019,1.000000e-019) + r0.xyz;
  r0.xyz = saturate(float3(5.000000e-001,5.000000e-001,5.000000e-001) * r0.xyz);
  o2.xyz = sqrt(r0.xyz);
  r0.x = 1.000000000e+000 + -rp_parameter_ps[2].w;
  r0.x = sqrt(r0.x);
  r0.x = -r0.x * 5.000000000e-001 + 5.000000000e-001;
  o3.y = rp_parameter_ps[2].w * 5.000000000e-001 + r0.x;
  o3.z = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbDefaultXSC
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64 [unused]
//   float4x4 ViewMatrix;               // Offset:   64 Size:    64 [unused]
//   float4x4 SecondaryProj;            // Offset:  128 Size:    64 [unused]
//   float4x4 SecondaryViewProj;        // Offset:  192 Size:    64 [unused]
//   float4x4 SecondaryInvViewProj;     // Offset:  256 Size:    64 [unused]
//   float4 ConstantColour;             // Offset:  320 Size:    16 [unused]
//   float4 Time;                       // Offset:  336 Size:    16 [unused]
//   float4 CameraPosition;             // Offset:  352 Size:    16
//   float4 InvProjectionParams;        // Offset:  368 Size:    16
//   float4 SecondaryInvProjectionParams;// Offset:  384 Size:    16
//   float4 ShaderDebugParams;          // Offset:  400 Size:    16 [unused]
//   float4 ToneMappingDebugParams;     // Offset:  416 Size:    16 [unused]
//   float4 HDR_EncodeScale2;           // Offset:  432 Size:    16 [unused]
//   float4 EmissiveSurfaceMultiplier;  // Offset:  448 Size:    16 [unused]
//   float4 AlphaLight_OffsetScale;     // Offset:  464 Size:    16 [unused]
//   float4 TessellationScaleFactor;    // Offset:  480 Size:    16 [unused]
//   float4 FogNearColour;              // Offset:  496 Size:    16 [unused]
//   float4 FogFarColour;               // Offset:  512 Size:    16 [unused]
//   float4 FogParams;                  // Offset:  528 Size:    16 [unused]
//   float4 AdvanceEnvironmentShaderDebugParams;// Offset:  544 Size:    16 [unused]
//   float4 SMAA_RTMetrics;             // Offset:  560 Size:    16 [unused]
//
// }
//
// cbuffer cbUbershaderXSC
// {
//
//   float4 rp_parameter_vs[32];        // Offset:    0 Size:   512 [unused]
//   float4 rp_parameter_ps[32];        // Offset:  512 Size:   512
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// TEXTURE_MAP_SAMPLER_SMP           sampler      NA          NA    0        1
// SPARKLE_MAP_SAMPLER_SMP           sampler      NA          NA    1        1
// depthSamplerReg_SMP               sampler      NA          NA    8        1
// normalSamplerReg_SMP              sampler      NA          NA   12        1
// TEXTURE_MAP_SAMPLER_TEX           texture  float4          2d    0        1
// SPARKLE_MAP_SAMPLER_TEX           texture  float4          2d    1        1
// depthSamplerReg_TEX               texture  float4          2d    8        1
// normalSamplerReg_TEX              texture  float4          2d   12        1
// cbDefaultXSC                      cbuffer      NA          NA    0        1
// cbUbershaderXSC                   cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float      w
// TEXCOORD                 2   xyzw        2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE   float   xyz 
// TEXCOORD                 4   xyzw        4     NONE   float   xyz 
// TEXCOORD                 5   xyzw        5     NONE   float   xyz 
// TEXCOORD                 6   xyzw        6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb5[38], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s8, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 7
div r0.xy, v2.xyxx, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t8.yzxw, s8
sample_indexable(texture2d)(float,float,float,float) r0.xyw, r0.xyxx, t12.xywz, s12
mad r0.xyw, r0.xyxw, l(2.000000, 2.000000, 0.000000, 2.000000), l(-1.000000, -1.000000, 0.000000, -1.000000)
mad r1.x, -r0.z, cb0[24].y, cb0[24].z
div r1.x, cb0[24].x, r1.x
mad r1.y, r0.z, cb0[23].y, cb0[23].z
lt r0.z, r0.z, l(0.000000)
div r1.y, cb0[23].x, r1.y
max r1.xy, r1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.z, r0.z, r1.x, r1.y
div r1.xyz, v0.xyzx, v1.wwww
mad r2.xyzw, r1.zyzx, r0.zzzz, cb0[22].zyzx
mul r1.xyz, r0.zzzz, r1.xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
sqrt r0.z, r0.z
mul r0.z, r0.z, l(0.200000)
min r0.z, r0.z, l(1.000000)
add r0.z, -r0.z, l(1.000000)
mul r0.z, r0.z, l(0.500000)
mul r1.xyzw, r2.xyzw, cb5[35].yyzz
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.zwzz, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xyzw, s0
mul r3.xyz, r3.xyzx, r3.xyzx
dp3 r2.x, r0.xywx, r0.xywx
rsq r2.x, r2.x
mul r4.xyz, r0.xywx, r2.xxxx
mad r0.x, r0.y, r2.x, cb5[34].x
add r5.xyz, |r4.xyzx|, l(-0.200000, -0.200000, -0.200000, 0.000000)
mul r5.xyz, r5.xyzx, l(7.000000, 7.000000, 7.000000, 0.000000)
mul r6.xyz, r5.xyzx, r5.xyzx
mul r5.xyz, r5.xyzx, r6.xyzx
max r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
add r0.y, r5.y, r5.x
add r0.y, r5.z, r0.y
div r5.xyz, r5.xyzx, r0.yyyy
mul r3.xyzw, r3.xyzw, r5.yyyy
mul r1.xyz, r1.xyzx, r1.xyzx
mad r1.xyzw, r1.xyzw, r5.xxxx, r3.xyzw
mul r0.yw, r2.wwwy, cb5[35].wwww
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.ywyy, t0.xyzw, s0
mul r3.xyz, r3.xyzx, r3.xyzx
mad r1.xyzw, r3.xyzw, r5.zzzz, r1.xyzw
add r3.xyz, r2.wyzw, -v3.xyzx
mad r0.yw, r2.zzzy, l(0.000000, 2.000000, 0.000000, 2.000000), r2.wwww
mul r0.yw, |r0.yyyw|, l(0.000000, 10.000000, 0.000000, 10.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.ywyy, t1.xyzw, s1
dp3 r5.x, v4.xyzx, r3.xyzx
dp3 r5.y, v5.xyzx, r3.xyzx
dp3 r5.z, v6.xyzx, r3.xyzx
div r3.xyz, r5.xyzx, cb5[37].xyzx
min r3.xyz, |r3.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
add r3.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
div_sat r3.xyz, r3.xyzx, cb5[36].yzwy
mul r0.y, r3.y, r3.x
mul r0.y, r3.z, r0.y
mul r0.y, r0.y, cb5[32].w
add r0.w, cb5[34].x, l(1.000000)
div_sat r0.x, r0.x, r0.w
mad r0.w, -r0.y, r0.x, l(1.000000)
mul r0.y, r0.x, r0.y
add r0.x, -r0.x, l(1.000000)
mad r0.x, -r0.x, r0.x, l(1.000000)
mov_sat r0.y, r0.y
add_sat r0.w, -r0.w, r1.w
mad r2.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r2.w
min r1.w, r0.w, l(1.000000)
mul r3.xyzw, r0.xxxx, r1.xyzw
mul r0.x, r3.w, cb5[33].w
mul r0.x, r0.x, v0.w
mov o0.w, r0.x
mov o0.xyz, l(0,0,0,0)
dp3 r0.w, r2.xyzx, r4.xyzx
ge r0.w, |r0.w|, l(0.995000)
and r0.w, r0.w, l(0x3f800000)
mul r0.z, r0.z, r0.w
mul r0.z, r1.w, r0.z
mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 0.100000, 5.000000)
mad r1.xyzw, r2.xxyz, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mad r0.z, r2.x, l(0.400000), r0.z
mul r0.z, r0.z, cb5[34].z
mad o3.x, -r0.z, l(0.150000), l(1.000000)
mul r1.yzw, r1.yyzw, cb5[34].zzzz
mad r1.yzw, r1.yyzw, l(0.000000, 0.250000, 0.250000, 0.250000), r4.xxyz
dp3 r0.z, r1.yzwy, r1.yzwy
rsq r0.z, r0.z
mad r1.yzw, r1.yyzw, r0.zzzz, -r4.xxyz
mad r1.yzw, r0.wwww, r1.yyzw, r4.xxyz
mad o1.xyz, r1.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mul o3.w, r0.x, cb5[35].x
mov o1.w, r0.x
mov o2.w, r0.x
add r0.xzw, cb5[32].xxyz, -cb5[33].xxyz
mad r0.xyz, r0.yyyy, r0.xzwx, cb5[33].xyzx
mul r0.w, cb5[34].y, l(0.200000)
mul_sat r0.w, r1.x, r0.w
mad r0.xyz, r0.xyzx, r3.xyzx, r0.wwww
add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul_sat r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
sqrt o2.xyz, r0.xyzx
add r0.x, -cb5[34].w, l(1.000000)
sqrt r0.x, r0.x
mad r0.x, -r0.x, l(0.500000), l(0.500000)
mad o3.y, cb5[34].w, l(0.500000), r0.x
mov o3.z, l(1.000000)
ret 
// Approximately 108 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
