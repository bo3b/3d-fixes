//Fix by mike_ar69
cbuffer cbDefaultVSC: register (b1)
{
  float4x4 ProjMatrix : packoffset(c0);
  float4x4 TextureTransform : packoffset(c4);
  float4x4 InvViewProj : packoffset(c8);
  float4x4 PrevViewProj : packoffset(c12);
  float4x4 PrevSecViewProj : packoffset(c16);
  float4 TextureScaleBias : packoffset(c20);
  float4 RenderTargetSizeVS : packoffset(c21);
  float4 RenderTargetResolutionVS : packoffset(c22);
  float4 MorphTargetParams : packoffset(c23);
  float4 OnePixelStepForS0VS : packoffset(c24);
  float4 ScreenRes[2] : packoffset(c25);
  float4 ClearSurfaceColor : packoffset(c27);
  float4 ClearSurfaceDepth : packoffset(c28);
  float4 VertexDepthClamp : packoffset(c29);
  float4 FlareScreenAspect : packoffset(c30);
  float4 DecalParams : packoffset(c31);
  float4 UserClipPlane0 : packoffset(c32);
  float4 UserClipPlane1 : packoffset(c33);
  float4 UserClipPlane2 : packoffset(c34);
  float4 UserClipPlane3 : packoffset(c35);
  float4 DecalScaleParams : packoffset(c36);
  float4 MipLevel : packoffset(c37);
}

cbuffer cbDefaultXSC : register(b0)
{
float4x4 ViewProj : packoffset(c0);
float4x4 ViewMatrix : packoffset(c4);
float4x4 SecondaryProj : packoffset(c8);
float4x4 SecondaryViewProj : packoffset(c12);
float4x4 SecondaryInvViewProj : packoffset(c16);
float4 ConstantColour : packoffset(c20);
float4 Time : packoffset(c21);
float4 CameraPosition : packoffset(c22);
float4 InvProjectionParams : packoffset(c23);
float4 SecondaryInvProjectionParams : packoffset(c24);
float4 ShaderDebugParams : packoffset(c25);
float4 ToneMappingDebugParams : packoffset(c26);
float4 HDR_EncodeScale2 : packoffset(c27);
float4 EmissiveSurfaceMultiplier : packoffset(c28);
float4 AlphaLight_OffsetScale : packoffset(c29);
float4 TessellationScaleFactor : packoffset(c30);
float4 FogNearColour : packoffset(c31);
float4 FogFarColour : packoffset(c32);
float4 FogParams : packoffset(c33);
float4 AdvanceEnvironmentShaderDebugParams : packoffset(c34);
float4 SMAA_RTMetrics : packoffset(c35);
}

cbuffer cbUbershaderXSC : register(b5)
{
float4 rp_parameter_vs[32] : packoffset(c0);
float4 rp_parameter_ps[32] : packoffset(c32);
}
SamplerState CAUSTIC_TEXTURE_SAMPLER_SMP_s : register(s0);
SamplerState depthSamplerReg_SMP_s : register(s8);
SamplerState normalSamplerReg_SMP_s : register(s12);
Texture3D<float4> CAUSTIC_TEXTURE_SAMPLER_TEX : register(t0);
Texture2D<float4> depthSamplerReg_TEX : register(t8);
Texture2D<float4> normalSamplerReg_TEX : register(t12);

Texture2D<float4> StereoParams : register(t125);

void main(
float4 v0 : TEXCOORD0,
float4 v1 : TEXCOORD1,
float4 v2 : TEXCOORD2,
float4 v3 : TEXCOORD3,
float4 v4 : TEXCOORD4,
float4 v5 : TEXCOORD5,
float4 v6 : TEXCOORD6,
out float4 o0 : SV_Target0)
{
float4 r0,r1,r2,r3,r4,r5;
uint4 bitmask;
r0.xy = v5.xy / v4.ww;
r1.xyz = normalSamplerReg_TEX.Sample(normalSamplerReg_SMP_s, r0.xy).xyz;
r0.x = depthSamplerReg_TEX.Sample(depthSamplerReg_SMP_s, r0.xy).x;
r0.yzw = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
r1.x = dot(r0.yzw, r0.yzw);
r1.x = rsqrt(r1.x);
r0.yzw = r1.xxx * r0.yzw;
r1.xyz = float3(-2.000000e-001,-2.000000e-001,-2.000000e-001) + abs(r0.yzw);
r0.y = dot(r0.yzw, rp_parameter_ps[2].xyz);
r0.y = rp_parameter_ps[0].z + r0.y;
r1.xyz = float3(7.000000e+000,7.000000e+000,7.000000e+000) * r1.xyz;
r2.xyz = r1.xyz * r1.xyz;
r1.xyz = r2.xyz * r1.xyz;
r1.xyz = max(r1.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
r0.z = r1.x + r1.y;
r0.z = r0.z + r1.z;
r1.xyz = r1.xyz / r0.zzz;
r0.z = -r0.x * SecondaryInvProjectionParams.y + SecondaryInvProjectionParams.z;
r0.z = SecondaryInvProjectionParams.x / r0.z;
r0.w = r0.x * InvProjectionParams.y + InvProjectionParams.z;
r0.x = r0.x < 0.000000000e+000;
r0.w = InvProjectionParams.x / r0.w;
r0.zw = max(r0.zw, float2(0.000000e+000,0.000000e+000));
r0.x = r0.x ? r0.z : r0.w;
r2.xyzw = v6.zyzx / v4.wwww;

float4 stereo = StereoParams.Load(0);
float4 r25, r11;

r11.xyz = r2.xyz * r0.xxx + CameraPosition.xyz;
r11.w =1.0;

r25.x = dot(r11.xyzw, ViewProj._m00_m10_m20_m30);
r25.y = dot(r11.xyzw, ViewProj._m01_m11_m21_m31);
r25.z = dot(r11.xyzw, ViewProj._m02_m12_m22_m32);
r25.w = dot(r11.xyzw, ViewProj._m03_m13_m23_m33);

r25.x -= stereo.x * (r25.w - stereo.y);

r11.x = dot(r25.xyzw, InvViewProj._m00_m10_m20_m30);
r11.y = dot(r25.xyzw, InvViewProj._m01_m11_m21_m31);
r11.z = dot(r25.xyzw, InvViewProj._m02_m12_m22_m32);
r11.w = dot(r25.xyzw, InvViewProj._m03_m13_m23_m33);
r11.xyzw /= r11.wwww;

r2.xyz = (r11.xyz - CameraPosition.xyz)/r0.xxx;

r2.xyzw = r2.xyzw * r0.xxxx + CameraPosition.zyzx;

r3.xyzw = rp_parameter_ps[0].xxxx * r2.xyzw;
r4.xy = r3.zw;
r3.z = rp_parameter_ps[0].w * Time.x;
r4.z = r3.z;
r3.xyzw = CAUSTIC_TEXTURE_SAMPLER_TEX.Sample(CAUSTIC_TEXTURE_SAMPLER_SMP_s, r3.xyz).xyzw;
r5.xyzw = CAUSTIC_TEXTURE_SAMPLER_TEX.Sample(CAUSTIC_TEXTURE_SAMPLER_SMP_s, r4.xyz).xyzw;
r5.xyz = r5.xyz * r5.xyz;
r5.xyzw = r5.xyzw * r1.yyyy;
r3.xyz = r3.xyz * r3.xyz;
r3.xyzw = r3.xyzw * r1.xxxx + r5.xyzw;
r4.xy = rp_parameter_ps[0].xx * r2.wy;
r0.xzw = -v0.xyz + r2.wyz;
r2.xyzw = CAUSTIC_TEXTURE_SAMPLER_TEX.Sample(CAUSTIC_TEXTURE_SAMPLER_SMP_s, r4.xyz).xyzw;
r2.xyz = r2.xyz * r2.xyz;
r1.xyzw = r2.xyzw * r1.zzzz + r3.xyzw;
r2.x = dot(v1.xyz, r0.xzw);
r2.y = dot(v2.xyz, r0.xzw);
r2.z = dot(v3.xyz, r0.xzw);
r0.xzw = r2.xyz / rp_parameter_ps[1].xyz;
r0.xzw = min(abs(r0.xzw), float3(1.000000e+000,1.000000e+000,1.000000e+000));
r0.xzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r0.xzw;
r0.x = r0.x * r0.z;
r0.x = r0.x * r0.w;
r0.x = rp_parameter_ps[0].y * r0.x;
r0.z = 1.000000000e+000 + rp_parameter_ps[0].z;
r0.y = saturate(r0.y / r0.z);
r0.x = -r0.x * r0.y + 1.000000000e+000;
r0.x = saturate(r1.w + -r0.x);
r0.y = r0.x * -2.000000000e+000 + 3.000000000e+000;
r0.x = r0.x * r0.x;
r0.x = r0.y * r0.x;
r0.x = min(r0.x, 1.000000000e+000);
o0.xyz = r1.xyz * r0.xxx;
o0.w = 1.000000000e+000;
return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions:
//
// cbuffer cbDefaultXSC
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64 [unused]
//   float4x4 ViewMatrix;               // Offset:   64 Size:    64 [unused]
//   float4x4 SecondaryProj;            // Offset:  128 Size:    64 [unused]
//   float4x4 SecondaryViewProj;        // Offset:  192 Size:    64 [unused]
//   float4x4 SecondaryInvViewProj;     // Offset:  256 Size:    64 [unused]
//   float4 ConstantColour;             // Offset:  320 Size:    16 [unused]
//   float4 Time;                       // Offset:  336 Size:    16
//   float4 CameraPosition;             // Offset:  352 Size:    16
//   float4 InvProjectionParams;        // Offset:  368 Size:    16
//   float4 SecondaryInvProjectionParams;// Offset:  384 Size:    16
//   float4 ShaderDebugParams;          // Offset:  400 Size:    16 [unused]
//   float4 ToneMappingDebugParams;     // Offset:  416 Size:    16 [unused]
//   float4 HDR_EncodeScale2;           // Offset:  432 Size:    16 [unused]
//   float4 EmissiveSurfaceMultiplier;  // Offset:  448 Size:    16 [unused]
//   float4 AlphaLight_OffsetScale;     // Offset:  464 Size:    16 [unused]
//   float4 TessellationScaleFactor;    // Offset:  480 Size:    16 [unused]
//   float4 FogNearColour;              // Offset:  496 Size:    16 [unused]
//   float4 FogFarColour;               // Offset:  512 Size:    16 [unused]
//   float4 FogParams;                  // Offset:  528 Size:    16 [unused]
//   float4 AdvanceEnvironmentShaderDebugParams;// Offset:  544 Size:    16 [unused]
//   float4 SMAA_RTMetrics;             // Offset:  560 Size:    16 [unused]
//
// }
//
// cbuffer cbUbershaderXSC
// {
//
//   float4 rp_parameter_vs[32];        // Offset:    0 Size:   512 [unused]
//   float4 rp_parameter_ps[32];        // Offset:  512 Size:   512
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CAUSTIC_TEXTURE_SAMPLER_SMP       sampler      NA          NA    0        1
// depthSamplerReg_SMP               sampler      NA          NA    8        1
// normalSamplerReg_SMP              sampler      NA          NA   12        1
// CAUSTIC_TEXTURE_SAMPLER_TEX       texture  float4          3d    0        1
// depthSamplerReg_TEX               texture  float4          2d    8        1
// normalSamplerReg_TEX              texture  float4          2d   12        1
// cbDefaultXSC                      cbuffer      NA          NA    0        1
// cbUbershaderXSC                   cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyz
// TEXCOORD                 1   xyzw        1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyz
// TEXCOORD                 3   xyzw        3     NONE   float   xyz
// TEXCOORD                 4   xyzw        4     NONE   float      w
// TEXCOORD                 5   xyzw        5     NONE   float   xy
// TEXCOORD                 6   xyzw        6     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb5[35], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s8, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v0.xyz
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.w
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 6
div r0.xy, v5.xyxx, v4.wwww
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t12.xyzw, s12
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t8.xyzw, s8
mad r0.yzw, r1.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.x, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
add r1.xyz, |r0.yzwy|, l(-0.200000, -0.200000, -0.200000, 0.000000)
dp3 r0.y, r0.yzwy, cb5[34].xyzx
add r0.y, r0.y, cb5[32].z
mul r1.xyz, r1.xyzx, l(7.000000, 7.000000, 7.000000, 0.000000)
mul r2.xyz, r1.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, r2.xyzx
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
add r0.z, r1.y, r1.x
add r0.z, r1.z, r0.z
div r1.xyz, r1.xyzx, r0.zzzz
mad r0.z, -r0.x, cb0[24].y, cb0[24].z
div r0.z, cb0[24].x, r0.z
mad r0.w, r0.x, cb0[23].y, cb0[23].z
lt r0.x, r0.x, l(0.000000)
div r0.w, cb0[23].x, r0.w
max r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.x, r0.x, r0.z, r0.w
div r2.xyzw, v6.zyzx, v4.wwww
mad r2.xyzw, r2.xyzw, r0.xxxx, cb0[22].zyzx
mul r3.xyzw, r2.xyzw, cb5[32].xxxx
mov r4.xy, r3.zwzz
mul r3.z, cb0[21].x, cb5[32].w
mov r4.z, r3.z
sample_indexable(texture3d)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0
sample_indexable(texture3d)(float,float,float,float) r5.xyzw, r4.xyzx, t0.xyzw, s0
mul r5.xyz, r5.xyzx, r5.xyzx
mul r5.xyzw, r1.yyyy, r5.xyzw
mul r3.xyz, r3.xyzx, r3.xyzx
mad r3.xyzw, r3.xyzw, r1.xxxx, r5.xyzw
mul r4.xy, r2.wyww, cb5[32].xxxx
add r0.xzw, r2.wwyz, -v0.xxyz
sample_indexable(texture3d)(float,float,float,float) r2.xyzw, r4.xyzx, t0.xyzw, s0
mul r2.xyz, r2.xyzx, r2.xyzx
mad r1.xyzw, r2.xyzw, r1.zzzz, r3.xyzw
dp3 r2.x, v1.xyzx, r0.xzwx
dp3 r2.y, v2.xyzx, r0.xzwx
dp3 r2.z, v3.xyzx, r0.xzwx
div r0.xzw, r2.xxyz, cb5[33].xxyz
min r0.xzw, |r0.xxzw|, l(1.000000, 0.000000, 1.000000, 1.000000)
add r0.xzw, -r0.xxzw, l(1.000000, 0.000000, 1.000000, 1.000000)
mul r0.x, r0.z, r0.x
mul r0.x, r0.w, r0.x
mul r0.x, r0.x, cb5[32].y
add r0.z, cb5[32].z, l(1.000000)
div_sat r0.y, r0.y, r0.z
mad r0.x, -r0.x, r0.y, l(1.000000)
add_sat r0.x, -r0.x, r1.w
mad r0.y, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.y
min r0.x, r0.x, l(1.000000)
mul o0.xyz, r0.xxxx, r1.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 61 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
