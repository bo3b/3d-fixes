
cbuffer cbDefaultXSC : register(b0)
{
  float4x4 ViewProj : packoffset(c0);
  float4x4 ViewMatrix : packoffset(c4);
  float4x4 SecondaryProj : packoffset(c8);
  float4x4 SecondaryViewProj : packoffset(c12);
  float4x4 SecondaryInvViewProj : packoffset(c16);
  float4 ConstantColour : packoffset(c20);
  float4 Time : packoffset(c21);
  float4 CameraPosition : packoffset(c22);
  float4 InvProjectionParams : packoffset(c23);
  float4 SecondaryInvProjectionParams : packoffset(c24);
  float4 ShaderDebugParams : packoffset(c25);
  float4 ToneMappingDebugParams : packoffset(c26);
  float4 HDR_EncodeScale2 : packoffset(c27);
  float4 EmissiveSurfaceMultiplier : packoffset(c28);
  float4 AlphaLight_OffsetScale : packoffset(c29);
  float4 TessellationScaleFactor : packoffset(c30);
  float4 FogNearColour : packoffset(c31);
  float4 FogFarColour : packoffset(c32);
  float4 FogParams : packoffset(c33);
  float4 AdvanceEnvironmentShaderDebugParams : packoffset(c34);
  float4 SMAA_RTMetrics : packoffset(c35);
}

cbuffer cbInstanceXSC : register(b10)
{
  float4x4 WorldMatrix : packoffset(c0);
  float4 LightmapTransform : packoffset(c4);
  float4 RInstConstants[6] : packoffset(c5);
  float4 RadiosityProbeTexcoordAndScale : packoffset(c11);
}
SamplerState SamplerParameters_SMP_s : register(s4);
StructuredBuffer<g_particles> g_particles : register(t0);
Texture2D<float4> SamplerParameters_TEX : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  uint v0 : SV_VertexID0,
  uint v1 : SV_InstanceID0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float p1 : TEXCOORD2,
  out float4 o2 : TEXCOORD1)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask;
  float4 x0[4];
  x0[0].xy = float2(-1.000000e+000,-1.000000e+000);
  x0[1].xy = float2(-1.000000e+000,1.000000e+000);
  x0[2].xy = float2(1.000000e+000,-1.000000e+000);
  x0[3].xy = float2(1.000000e+000,1.000000e+000);
  r0.x = v0.x;
  r0.xy = x0[r0.x+0].xy;
// Known bad code for instruction:
// ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xy, v1.x, l(32), t0.xyxx
r1.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r1.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r1.z = -r1.x;
  r0.z = dot(r0.yx, r1.yz);
  r0.w = dot(r0.yx, r1.xy);
  o1.xy = r0.xy * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
// Known bad code for instruction:
// ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyz, v1.x, l(16), t0.xyzx
r1.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r1.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r1.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.y = 1.000000047e-003 < r0.x;
  r1.w = sqrt(r0.x);
  r0.x = rsqrt(r0.x);
  r2.xyz = r1.zxy * r0.xxx;
  r0.x = r0.y ? r1.w : 0;
  r0.x = min(r0.x, 5.000000000e+000);
  r3.w = 1.000000000e+000;
// Known bad code for instruction:
// ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r4.xyzw, v1.x, l(0), t0.wxyz
r4.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r4.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r4.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r4.w = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r3.xyz = r1.xyz * RInstConstants[0].www + r4.yzw;
  r4.x = saturate(r4.x);
  r0.y = dot(ViewProj._m03_m13_m23_m33, r3.xyzw);
  r0.y = RInstConstants[1].z * r0.y;
// Known bad code for instruction:
// ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.x, v1.x, l(44), t0.xxxx
r1.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r1.x = r1.x;
  r1.x = r1.x * 4.000000000e+000 + 5.000000000e-001;
  r4.y = RInstConstants[3].w * r1.x;
  r1.x = SamplerParameters_TEX.SampleLevel(SamplerParameters_SMP_s, r4.xy, 0.000000000e+000, int2(0, 2)).w;
  r0.y = max(r0.y, abs(r1.x));
  r1.y = 0.000000000e+000 < r1.x;
  r1.z = r1.x < 0.000000000e+000;
  r1.y = ((int)r1.z ? -1 : 0) + ((int)r1.y ? 1 : 0);
  r1.y = r1.y;
  r0.y = r1.y * r0.y;
  r1.yz = SamplerParameters_TEX.SampleLevel(SamplerParameters_SMP_s, r4.xy, 0.000000000e+000, int2(0, 3)).xz;
  r4.xyzw = SamplerParameters_TEX.SampleLevel(SamplerParameters_SMP_s, r4.xy, 0.000000000e+000, int2(0, 1)).xyzw;
  r0.x = r0.x * r1.y + r0.y;
  p1.x = r1.z;
  r1.yzw = r2.yzx * r0.xxx;
  r1.yzw = r1.yzw * r0.zzz;
  r5.xyz = CameraPosition.yzx + -r3.yzx;
  r0.x = dot(r5.xyz, r5.xyz);
  r0.x = rsqrt(r0.x);
  r5.xyz = r5.xyz * r0.xxx;
  r6.xyz = r5.xyz * r2.xyz;
  r2.xyz = r2.zxy * r5.yzx + -r6.xyz;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r2.xyz = r2.xyz * r0.xxx;
  r2.xyz = r2.xyz * r0.yyy;
  r0.x = saturate(r1.x / r0.y);
  r4.xyzw = r4.xyzw * r0.xxxx;
  r0.xyz = -r0.www * r2.xyz + -r1.yzw;
  r0.xyz = r3.xyz + r0.xyz;
  r0.w = 1.000000000e+000;
  o0.x = dot(r0.xyzw, ViewProj._m00_m10_m20_m30);
  o0.y = dot(r0.xyzw, ViewProj._m01_m11_m21_m31);
  o0.z = dot(r0.xyzw, ViewProj._m02_m12_m22_m32);
  o0.w = dot(r0.xyzw, ViewProj._m03_m13_m23_m33);
  o2.w = saturate(r4.w);
  o2.xyz = r4.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbDefaultXSC
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64
//   float4x4 ViewMatrix;               // Offset:   64 Size:    64 [unused]
//   float4x4 SecondaryProj;            // Offset:  128 Size:    64 [unused]
//   float4x4 SecondaryViewProj;        // Offset:  192 Size:    64 [unused]
//   float4x4 SecondaryInvViewProj;     // Offset:  256 Size:    64 [unused]
//   float4 ConstantColour;             // Offset:  320 Size:    16 [unused]
//   float4 Time;                       // Offset:  336 Size:    16 [unused]
//   float4 CameraPosition;             // Offset:  352 Size:    16
//   float4 InvProjectionParams;        // Offset:  368 Size:    16 [unused]
//   float4 SecondaryInvProjectionParams;// Offset:  384 Size:    16 [unused]
//   float4 ShaderDebugParams;          // Offset:  400 Size:    16 [unused]
//   float4 ToneMappingDebugParams;     // Offset:  416 Size:    16 [unused]
//   float4 HDR_EncodeScale2;           // Offset:  432 Size:    16 [unused]
//   float4 EmissiveSurfaceMultiplier;  // Offset:  448 Size:    16 [unused]
//   float4 AlphaLight_OffsetScale;     // Offset:  464 Size:    16 [unused]
//   float4 TessellationScaleFactor;    // Offset:  480 Size:    16 [unused]
//   float4 FogNearColour;              // Offset:  496 Size:    16 [unused]
//   float4 FogFarColour;               // Offset:  512 Size:    16 [unused]
//   float4 FogParams;                  // Offset:  528 Size:    16 [unused]
//   float4 AdvanceEnvironmentShaderDebugParams;// Offset:  544 Size:    16 [unused]
//   float4 SMAA_RTMetrics;             // Offset:  560 Size:    16 [unused]
//
// }
//
// cbuffer cbInstanceXSC
// {
//
//   float4x4 WorldMatrix;              // Offset:    0 Size:    64 [unused]
//   float4 LightmapTransform;          // Offset:   64 Size:    16 [unused]
//   float4 RInstConstants[6];          // Offset:   80 Size:    96
//   float4 RadiosityProbeTexcoordAndScale;// Offset:  176 Size:    16 [unused]
//
// }
//
// Resource bind info for g_particles
// {
//
//   struct GPUParticleRenderComputeData
//   {
//       
//       float4 posAndAge;              // Offset:    0
//       float4 velAndLife;             // Offset:   16
//       float3 misc;                   // Offset:   32
//       int type;                      // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SamplerParameters_SMP             sampler      NA          NA    4        1
// g_particles                       texture  struct         r/o    0        1
// SamplerParameters_TEX             texture  float4          2d    4        1
// cbDefaultXSC                      cbuffer      NA          NA    0        1
// cbInstanceXSC                     cbuffer      NA          NA   10        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
// SV_InstanceID            0   x           1   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2     z         1     NONE   float     z 
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb10[9], immediateIndexed
dcl_sampler s4, mode_default
dcl_resource_structured t0, 48 
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_sgv v0.x, vertex_id
dcl_input_sgv v1.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.z
dcl_output o2.xyzw
dcl_temps 7
dcl_indexableTemp x0[4], 4
mov x0[0].xy, l(-1.000000,-1.000000,0,0)
mov x0[1].xy, l(-1.000000,1.000000,0,0)
mov x0[2].xy, l(1.000000,-1.000000,0,0)
mov x0[3].xy, l(1.000000,1.000000,0,0)
mov r0.x, v0.x
mov r0.xy, x0[r0.x + 0].xyxx
ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xy, v1.x, l(32), t0.xyxx
mov r1.z, -r1.x
dp2 r0.z, r0.yxyy, r1.yzyy
dp2 r0.w, r0.yxyy, r1.xyxx
mad o1.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyz, v1.x, l(16), t0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
lt r0.y, l(0.001000), r0.x
sqrt r1.w, r0.x
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r1.zxyz
and r0.x, r0.y, r1.w
min r0.x, r0.x, l(5.000000)
mov r3.w, l(1.000000)
ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r4.xyzw, v1.x, l(0), t0.wxyz
mad r3.xyz, r1.xyzx, cb10[5].wwww, r4.yzwy
mov_sat r4.x, r4.x
dp4 r0.y, cb0[3].xyzw, r3.xyzw
mul r0.y, r0.y, cb10[6].z
ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.x, v1.x, l(44), t0.xxxx
itof r1.x, r1.x
mad r1.x, r1.x, l(4.000000), l(0.500000)
mul r4.y, r1.x, cb10[8].w
sample_l_aoffimmi_indexable(0,2,0)(texture2d)(float,float,float,float) r1.x, r4.xyxx, t4.wxyz, s4, l(0.000000)
max r0.y, r0.y, |r1.x|
lt r1.y, l(0.000000), r1.x
lt r1.z, r1.x, l(0.000000)
iadd r1.y, r1.z, -r1.y
itof r1.y, r1.y
mul r0.y, r0.y, r1.y
sample_l_aoffimmi_indexable(0,3,0)(texture2d)(float,float,float,float) r1.yz, r4.xyxx, t4.yxzw, s4, l(0.000000)
sample_l_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r4.xyzw, r4.xyxx, t4.xyzw, s4, l(0.000000)
mad r0.x, r0.x, r1.y, r0.y
mov o1.z, r1.z
mul r1.yzw, r0.xxxx, r2.yyzx
mul r1.yzw, r0.zzzz, r1.yyzw
add r5.xyz, -r3.yzxy, cb0[22].yzxy
dp3 r0.x, r5.xyzx, r5.xyzx
rsq r0.x, r0.x
mul r5.xyz, r0.xxxx, r5.xyzx
mul r6.xyz, r2.xyzx, r5.xyzx
mad r2.xyz, r2.zxyz, r5.yzxy, -r6.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r2.xyzx
mul r2.xyz, r0.yyyy, r2.xyzx
div_sat r0.x, r1.x, r0.y
mul r4.xyzw, r0.xxxx, r4.xyzw
mad r0.xyz, -r0.wwww, r2.xyzx, -r1.yzwy
add r0.xyz, r0.xyzx, r3.xyzx
mov r0.w, l(1.000000)
dp4 o0.x, r0.xyzw, cb0[0].xyzw
dp4 o0.y, r0.xyzw, cb0[1].xyzw
dp4 o0.z, r0.xyzw, cb0[2].xyzw
dp4 o0.w, r0.xyzw, cb0[3].xyzw
mov_sat o2.w, r4.w
mov o2.xyz, r4.xyzx
ret 
// Approximately 64 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
