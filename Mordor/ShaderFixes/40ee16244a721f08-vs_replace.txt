//Fire explosion
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c7);

  int WorldEdit_AlphaRef : packoffset(c15) = int(0.000000e+000);
  int WorldEdit_RenderType : packoffset(c15.y) = int(2.802597e-045);
  float k_fDepthDistance : packoffset(c15.z) = float(1.500000e+001);
  float k_fDepthPower : packoffset(c15.w) = float(2.000000e+000);
  float k_fHDRScale : packoffset(c16) = float(1.600000e+001);
  float k_fOffsetNormalU : packoffset(c16.y) = float(0.000000e+000);
  float k_fOffsetNormalV : packoffset(c16.z) = float(0.000000e+000);
  float k_fPanDiffuse2U : packoffset(c16.w) = float(0.000000e+000);
  float k_fPanDiffuse2V : packoffset(c17) = float(0.000000e+000);
  float k_fPanDiffuseU : packoffset(c17.y) = float(0.000000e+000);
  float k_fPanDiffuseV : packoffset(c17.z) = float(0.000000e+000);
  float k_fPanNormalU : packoffset(c17.w) = float(0.000000e+000);
  float k_fPanNormalV : packoffset(c18) = float(0.000000e+000);
  float3 k_vDiffuse2Tile : packoffset(c18.y) = float3(1.000000e+000,1.000000e+000,0.000000e+000);
  float3 k_vDiffuseTile : packoffset(c19) = float3(1.000000e+000,1.000000e+000,0.000000e+000);
  float4 k_vModColor : packoffset(c20) = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000);
  float3 k_vNormalTile : packoffset(c21) = float3(1.000000e+000,1.000000e+000,0.000000e+000);
  float3 k_vRefractStrength : packoffset(c22) = float3(1.000000e-001,1.000000e-001,0.000000e+000);
  float k_fTime : packoffset(c22.w);
  row_major float4x4 k_mObjectToClip : packoffset(c23);
  row_major float3x4 k_mObjectToWorld : packoffset(c27);
  float4 k_vFogMieA : packoffset(c30);
  float4 k_vFogMieB : packoffset(c31);
  float4 k_vFogMieC : packoffset(c32);
  float4 k_vFogRayleigh : packoffset(c33);
  float4 k_vFogSky : packoffset(c34);
  float4 k_vFogSunColor : packoffset(c35);
  float3 k_vFogSunDir : packoffset(c36);
  float4 k_vHDRLuminanceWeights : packoffset(c37);
  float4 k_vObjectColor : packoffset(c38);
  float4 k_vObjectLightColor : packoffset(c39);
  float3 k_vObjectSpaceEyePos : packoffset(c40);
  float2 k_vScene_TexCoordScale : packoffset(c41);
}

cbuffer ModelTransforms : register(b1)
{
  float4 k_mModelObjectNodes[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  float4 v6 : BLENDWEIGHT0,
  float4 v7 : BLENDINDICES0,
  out float4 o0 : SV_POSITION0,
  out float3 o1 : TEXCOORD0,
  out float2 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : COLOR0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask;
  r0.xyz = float3(2.550020e+002,2.550020e+002,2.550020e+002) * v7.zyx;
  r0.xyz = (int3)r0.xyz;
  r1.xyz = (uint3)r0.xyz << int3(1,1,1);
  r0.xyz = mad((int3)r0.xyz, int3(2,2,2), int3(1,1,1));
  r2.xyz = v6.xyz;
  r3.w = k_mModelObjectNodes[r1.x].y * r2.x;
  r4.w = k_mModelObjectNodes[r1.y].y * r2.y;
  r0.w = k_mModelObjectNodes[r0.x].w * k_mModelObjectNodes[r0.x].x;
  r1.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + -r0.w;
  r0.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + r0.w;
  r0.w = v6.x * r0.w;
  r1.w = v6.x * r1.w;
  r2.w = 2.000000000e+000;
  r3.z = r2.w * r1.w;
  r1.w = k_mModelObjectNodes[r0.y].w * k_mModelObjectNodes[r0.y].x;
  r5.x = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + r1.w;
  r1.w = v6.y * r1.w;
  r6.y = r1.w * r2.w;
  r1.w = v6.y * r5.x;
  r4.z = r1.w * r2.w;
  r5.xyz = k_mModelObjectNodes[r0.x].wxw * k_mModelObjectNodes[r0.x].zzy;
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + r5.x;
  r1.w = v6.x * r1.w;
  r3.x = r1.w * r2.w;
  r7.xyz = k_mModelObjectNodes[r0.x].xyz * k_mModelObjectNodes[r0.x].xyz;
  r7.xyz = r7.yxx + r7.zzy;
  r7.xyz = -r7.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r3.y = r7.y * r2.x;
  r8.xyz = k_mModelObjectNodes[r0.y].wxw * k_mModelObjectNodes[r0.y].zzy;
  r1.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + r8.x;
  r1.w = v6.y * r1.w;
  r4.x = r1.w * r2.w;
  r9.xyz = k_mModelObjectNodes[r0.y].xyz * k_mModelObjectNodes[r0.y].xyz;
  r9.xyz = r9.yxx + r9.zzy;
  r9.xyz = -r9.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r4.y = r9.y * r2.y;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.w = k_mModelObjectNodes[r1.z].y * r2.z;
  r1.w = k_mModelObjectNodes[r0.z].w * k_mModelObjectNodes[r0.z].x;
  r5.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + r1.w;
  r1.w = v6.z * r1.w;
  r10.y = r1.w * r2.w;
  r1.w = v6.z * r5.w;
  r4.z = r1.w * r2.w;
  r11.xyz = k_mModelObjectNodes[r0.z].wxw * k_mModelObjectNodes[r0.z].zzy;
  r1.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + r11.x;
  r1.w = v6.z * r1.w;
  r4.x = r1.w * r2.w;
  r12.xyz = k_mModelObjectNodes[r0.z].xyz * k_mModelObjectNodes[r0.z].xyz;
  r12.xyz = r12.yxx + r12.zzy;
  r12.xyz = -r12.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r4.y = r12.y * r2.z;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyz = v0.xyz;
  r4.w = 1.000000000e+000;
  r3.y = dot(r3.xyzw, r4.xyzw);
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].z + -r5.z;
  r1.w = v6.x * r1.w;
  r13.x = r1.w * r2.w;
  r13.y = r2.w * r0.w;
  r0.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].z + -r8.z;
  r0.w = v6.y * r0.w;
  r6.x = r0.w * r2.w;
  r13.z = r7.z * r2.x;
  r7.x = r7.x * r2.x;
  r6.z = r9.z * r2.y;
  r9.x = r9.x * r2.y;
  r13.w = k_mModelObjectNodes[r1.x].z * r2.x;
  r6.w = k_mModelObjectNodes[r1.y].z * r2.y;
  r6.xyzw = r13.xyzw + r6.xyzw;
  r0.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].z + -r11.z;
  r0.w = v6.z * r0.w;
  r10.x = r0.w * r2.w;
  r10.z = r12.z * r2.z;
  r12.x = r12.x * r2.z;
  r10.w = k_mModelObjectNodes[r1.z].z * r2.z;
  r6.xyzw = r10.xyzw + r6.xyzw;
  r3.z = dot(r6.xyzw, r4.xyzw);
  r7.w = k_mModelObjectNodes[r1.x].x * r2.x;
  r9.w = k_mModelObjectNodes[r1.y].x * r2.y;
  r12.w = k_mModelObjectNodes[r1.z].x * r2.z;
  r0.x = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + -r5.x;
  r0.w = r5.y + r5.z;
  r0.xw = v6.xx * r0.xw;
  r7.yz = r0.xw * r2.ww;
  r0.x = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + -r8.x;
  r0.y = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + -r11.x;
  r0.z = r11.y + r11.z;
  r0.xyz = v6.yzz * r0.xyz;
  r12.yz = r0.yz * r2.ww;
  r0.y = r8.y + r8.z;
  r0.y = v6.y * r0.y;
  r9.yz = r0.xy * r2.ww;
  r0.xyzw = r9.xyzw + r7.xyzw;
  r0.xyzw = r0.xyzw + r12.xyzw;
  r3.x = dot(r0.xyzw, r4.xyzw);
  r3.w = 1.000000000e+000;
  r0.x = dot(k_mObjectToClip._m00_m01_m02_m03, r3.xyzw);
  r0.y = dot(k_mObjectToClip._m10_m11_m12_m13, r3.xyzw);
  r0.z = dot(k_mObjectToClip._m20_m21_m22_m23, r3.xyzw);
  r0.w = dot(k_mObjectToClip._m30_m31_m32_m33, r3.xyzw);
  r1.x = dot(k_mObjectToWorld._m10_m11_m12_m13, r3.xyzw);
  r1.yzw = k_vObjectSpaceEyePos.xyz + -r3.xyz;
  r1.x = k_vFogSky.w + r1.x;
  
float4 stereo = StereoParams.Load(0);
float4 r23, r20;
r23.xyzw = r0.xyzw;
r0.x += stereo.x * (r0.w - stereo.y); 
o0.xyzw = r23.xyzw;  
  
  // o0.xyzw = r0.xyzw;
  o1.xyz = v1.xyz;
  o2.xy = v2.xy;
  r2.xy = k_vScene_TexCoordScale.xy * r0.ww;
  r2.zw = float2(1.000000e+000,-1.000000e+000) * k_vScene_TexCoordScale.xy;
  o3.xy = r0.xy * r2.zw + r2.xy;
  o6.xyz = r0.xyz;
  o3.zw = r0.zw;
  o4.xyz = r1.yzw;
  o5.xyz = k_vObjectLightColor.xyz * k_vObjectColor.xyz;
  o5.w = k_vObjectColor.w;
  r0.x = 1.999999949e-005 * abs(r0.w);
  r0.x = min(r0.x, 1.000000000e+000);
  r0.x = 1.000000000e+000 + -r0.x;
  r2.x = dot(k_mObjectToWorld._m00_m01_m02, r1.yzw);
  r2.z = dot(k_mObjectToWorld._m20_m21_m22, r1.yzw);
  r2.y = dot(k_mObjectToWorld._m10_m11_m12, r1.yzw);
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = rsqrt(r0.y);
  r1.yzw = r2.xyz * r0.yyy;
  r0.y = -r2.y * r0.y + -1.500000060e-001;
  r0.y = saturate(1.000000000e+000 + -r0.y);
  r0.y = r0.y * r0.y;
  r0.z = dot(-r1.yzw, k_vFogSunDir.xyz);
  r1.y = -k_vFogMieB.y * r0.z + k_vFogMieB.x;
  r0.z = r0.z * r0.z + 1.000000000e+000;
  r0.z = 5.968310311e-002 * r0.z;
  r1.y = log2(abs(r1.y));
  r1.y = -1.500000000e+000 * r1.y;
  r1.y = exp2(r1.y);
  r1.z = k_vFogMieB.z * r1.y + -k_vFogMieA.z;
  r1.y = k_vFogMieB.z * r1.y;
  r1.z = max(r1.z, 0.000000000e+000);
  r0.x = -r1.z * r0.x + r1.y;
  r0.x = max(r0.x, k_vFogSunColor.w);
  r1.y = -r1.x / k_vFogMieA.x;
  r1.y = 1.442695022e+000 * r1.y;
  r1.y = exp2(r1.y);
  r1.y = k_vFogMieB.w + r1.y;
  r1.y = k_vFogMieC.y * r1.y;
  r1.y = 5.000000000e-001 * r1.y;
  r0.y = r1.y * r0.y;
  r0.y = min(r0.y, k_vFogMieA.w);
  r0.y = max(r0.y, k_vFogMieC.x);
  r0.x = r0.x * r0.y;
  r1.y = -r1.x / k_vFogRayleigh.w;
  r1.x = k_vFogSky.z + -r1.x;
  r1.x = r1.x / k_vFogMieA.y;
  r1.y = 1.442695022e+000 * r1.y;
  r1.y = exp2(r1.y);
  r2.xyz = k_vFogRayleigh.xyz * r1.yyy;
  r1.yzw = k_vFogRayleigh.xyz * r1.yyy + r0.yyy;
  r0.xyz = r2.xyz * r0.zzz + r0.xxx;
  r0.xyz = r0.xyz / r1.yzw;
  r2.xyz = -r1.yzw * r1.xxx;
  r1.xyz = -r1.yzw * abs(r0.www);
  r1.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r2.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r3.xyz = log2(k_vFogSunColor.xyz);
  r3.xyz = float3(4.545455e-001,4.545455e-001,4.545455e-001) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r2.xyz = r3.xyz * r2.xyz;
  r0.xyz = r2.xyz * r0.xyz;
  r1.yzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r1.xyz;
  o7.w = r1.x;
  r0.xyz = r0.xyz * r1.yzw + float3(-4.000000e-003,-4.000000e-003,-4.000000e-003);
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r1.xyz = r1.xyz * r0.xyz;
  r2.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(1.700000e+000,1.700000e+000,1.700000e+000);
  r0.xyz = r0.xyz * r2.xyz + float3(6.000000e-002,6.000000e-002,6.000000e-002);
  o7.xyz = r1.xyz / r0.xyz;
  o8.xyzw = v5.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//       float3 m_Normal;               // Offset:   32
//       float2 m_TexCoord;             // Offset:   48
//       float3 m_Tangent;              // Offset:   64
//       float3 m_Binormal;             // Offset:   80
//       float4 m_Color;                // Offset:   96
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    96 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:  112
//       float3 m_Normal;               // Offset:  128
//       float2 m_TexCoord;             // Offset:  144
//       float3 m_Tangent;              // Offset:  160
//       float3 m_Binormal;             // Offset:  176
//       float4 m_Color;                // Offset:  192
//       float4 m_Weights;              // Offset:  208
//       float4 m_Indices;              // Offset:  224
//
//   } MaterialVertexDef_Skeletal;      // Offset:  112 Size:   128 [unused]
//   int WorldEdit_AlphaRef;            // Offset:  240 Size:     4 [unused]
//      = 0x00000000 
//   int WorldEdit_RenderType;          // Offset:  244 Size:     4 [unused]
//      = 0x00000002 
//   float k_fDepthDistance;            // Offset:  248 Size:     4 [unused]
//      = 0x41700000 
//   float k_fDepthPower;               // Offset:  252 Size:     4 [unused]
//      = 0x40000000 
//   float k_fHDRScale;                 // Offset:  256 Size:     4 [unused]
//      = 0x41800000 
//   float k_fOffsetNormalU;            // Offset:  260 Size:     4 [unused]
//      = 0x00000000 
//   float k_fOffsetNormalV;            // Offset:  264 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanDiffuse2U;             // Offset:  268 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanDiffuse2V;             // Offset:  272 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanDiffuseU;              // Offset:  276 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanDiffuseV;              // Offset:  280 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanNormalU;               // Offset:  284 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanNormalV;               // Offset:  288 Size:     4 [unused]
//      = 0x00000000 
//   float3 k_vDiffuse2Tile;            // Offset:  292 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x00000000 
//   float3 k_vDiffuseTile;             // Offset:  304 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x00000000 
//   float4 k_vModColor;                // Offset:  320 Size:    16 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 0x3f800000 
//   float3 k_vNormalTile;              // Offset:  336 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x00000000 
//   float3 k_vRefractStrength;         // Offset:  352 Size:    12 [unused]
//      = 0x3dcccccd 0x3dcccccd 0x00000000 
//   float k_fTime;                     // Offset:  364 Size:     4 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  368 Size:    64
//   row_major float3x4 k_mObjectToWorld;// Offset:  432 Size:    48
//   float4 k_vFogMieA;                 // Offset:  480 Size:    16
//   float4 k_vFogMieB;                 // Offset:  496 Size:    16
//   float4 k_vFogMieC;                 // Offset:  512 Size:    16
//   float4 k_vFogRayleigh;             // Offset:  528 Size:    16
//   float4 k_vFogSky;                  // Offset:  544 Size:    16
//   float4 k_vFogSunColor;             // Offset:  560 Size:    16
//   float3 k_vFogSunDir;               // Offset:  576 Size:    12
//   float4 k_vHDRLuminanceWeights;     // Offset:  592 Size:    16 [unused]
//   float4 k_vObjectColor;             // Offset:  608 Size:    16
//   float4 k_vObjectLightColor;        // Offset:  624 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  640 Size:    12
//   float2 k_vScene_TexCoordScale;     // Offset:  656 Size:     8
//
// }
//
// cbuffer ModelTransforms
// {
//
//   float4 k_mModelObjectNodes[64];    // Offset:    0 Size:  1024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// ModelTransforms                   cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float       
// BINORMAL                 0   xyz         4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float   xyzw
// BLENDWEIGHT              0   xyzw        6     NONE   float   xyz 
// BLENDINDICES             0   xyzw        7     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[42], immediateIndexed
dcl_constantbuffer cb1[64], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v5.xyzw
dcl_input v6.xyz
dcl_input v7.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 14
mul r0.xyz, v7.zyxz, l(255.001953, 255.001953, 255.001953, 0.000000)
ftoi r0.xyz, r0.xyzx
ishl r1.xyz, r0.xyzx, l(1, 1, 1, 0)
imad r0.xyz, r0.xyzx, l(2, 2, 2, 0), l(1, 1, 1, 0)
mov r2.xyz, v6.xyzx
mul r3.w, r2.x, cb1[r1.x + 0].y
mul r4.w, r2.y, cb1[r1.y + 0].y
mul r0.w, cb1[r0.x + 0].x, cb1[r0.x + 0].w
mad r1.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, -r0.w
mad r0.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, r0.w
mul r0.w, r0.w, v6.x
mul r1.w, r1.w, v6.x
mov r2.w, l(2.000000)
mul r3.z, r1.w, r2.w
mul r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].w
mad r5.x, cb1[r0.y + 0].y, cb1[r0.y + 0].z, -r1.w
mad r1.w, cb1[r0.y + 0].y, cb1[r0.y + 0].z, r1.w
mul r1.w, r1.w, v6.y
mul r6.y, r2.w, r1.w
mul r1.w, r5.x, v6.y
mul r4.z, r2.w, r1.w
mul r5.xyz, cb1[r0.x + 0].zzyz, cb1[r0.x + 0].wxww
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].y, r5.x
mul r1.w, r1.w, v6.x
mul r3.x, r2.w, r1.w
mul r7.xyz, cb1[r0.x + 0].xyzx, cb1[r0.x + 0].xyzx
add r7.xyz, r7.zzyz, r7.yxxy
mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.y, r2.x, r7.y
mul r8.xyz, cb1[r0.y + 0].zzyz, cb1[r0.y + 0].wxww
mad r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].y, r8.x
mul r1.w, r1.w, v6.y
mul r4.x, r2.w, r1.w
mul r9.xyz, cb1[r0.y + 0].xyzx, cb1[r0.y + 0].xyzx
add r9.xyz, r9.zzyz, r9.yxxy
mad r9.xyz, -r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.y, r2.y, r9.y
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.w, r2.z, cb1[r1.z + 0].y
mul r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].w
mad r5.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, -r1.w
mad r1.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, r1.w
mul r1.w, r1.w, v6.z
mul r10.y, r2.w, r1.w
mul r1.w, r5.w, v6.z
mul r4.z, r2.w, r1.w
mul r11.xyz, cb1[r0.z + 0].zzyz, cb1[r0.z + 0].wxww
mad r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].y, r11.x
mul r1.w, r1.w, v6.z
mul r4.x, r2.w, r1.w
mul r12.xyz, cb1[r0.z + 0].xyzx, cb1[r0.z + 0].xyzx
add r12.xyz, r12.zzyz, r12.yxxy
mad r12.xyz, -r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.y, r2.z, r12.y
add r3.xyzw, r3.xyzw, r4.xyzw
mov r4.xyz, v0.xyzx
mov r4.w, l(1.000000)
dp4 r3.y, r3.xyzw, r4.xyzw
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].z, -r5.z
mul r1.w, r1.w, v6.x
mul r13.x, r2.w, r1.w
mul r13.y, r0.w, r2.w
mad r0.w, cb1[r0.y + 0].x, cb1[r0.y + 0].z, -r8.z
mul r0.w, r0.w, v6.y
mul r6.x, r2.w, r0.w
mul r13.z, r2.x, r7.z
mul r7.x, r2.x, r7.x
mul r6.z, r2.y, r9.z
mul r9.x, r2.y, r9.x
mul r13.w, r2.x, cb1[r1.x + 0].z
mul r6.w, r2.y, cb1[r1.y + 0].z
add r6.xyzw, r6.xyzw, r13.xyzw
mad r0.w, cb1[r0.z + 0].x, cb1[r0.z + 0].z, -r11.z
mul r0.w, r0.w, v6.z
mul r10.x, r2.w, r0.w
mul r10.z, r2.z, r12.z
mul r12.x, r2.z, r12.x
mul r10.w, r2.z, cb1[r1.z + 0].z
add r6.xyzw, r6.xyzw, r10.xyzw
dp4 r3.z, r6.xyzw, r4.xyzw
mul r7.w, r2.x, cb1[r1.x + 0].x
mul r9.w, r2.y, cb1[r1.y + 0].x
mul r12.w, r2.z, cb1[r1.z + 0].x
mad r0.x, cb1[r0.x + 0].x, cb1[r0.x + 0].y, -r5.x
add r0.w, r5.z, r5.y
mul r0.xw, r0.xxxw, v6.xxxx
mul r7.yz, r2.wwww, r0.xxwx
mad r0.x, cb1[r0.y + 0].x, cb1[r0.y + 0].y, -r8.x
mad r0.y, cb1[r0.z + 0].x, cb1[r0.z + 0].y, -r11.x
add r0.z, r11.z, r11.y
mul r0.xyz, r0.xyzx, v6.yzzy
mul r12.yz, r2.wwww, r0.yyzy
add r0.y, r8.z, r8.y
mul r0.y, r0.y, v6.y
mul r9.yz, r2.wwww, r0.xxyx
add r0.xyzw, r7.xyzw, r9.xyzw
add r0.xyzw, r12.xyzw, r0.xyzw
dp4 r3.x, r0.xyzw, r4.xyzw
mov r3.w, l(1.000000)
dp4 r0.x, cb0[23].xyzw, r3.xyzw
dp4 r0.y, cb0[24].xyzw, r3.xyzw
dp4 r0.z, cb0[25].xyzw, r3.xyzw
dp4 r0.w, cb0[26].xyzw, r3.xyzw
dp4 r1.x, cb0[28].xyzw, r3.xyzw
add r1.yzw, -r3.xxyz, cb0[40].xxyz
add r1.x, r1.x, cb0[34].w
mov o0.xyzw, r0.xyzw
mov o1.xyz, v1.xyzx
mov o2.xy, v2.xyxx
mul r2.xy, r0.wwww, cb0[41].xyxx
mul r2.zw, cb0[41].xxxy, l(0.000000, 0.000000, 1.000000, -1.000000)
mad o3.xy, r0.xyxx, r2.zwzz, r2.xyxx
mov o6.xyz, r0.xyzx
mov o3.zw, r0.zzzw
mov o4.xyz, r1.yzwy
mul o5.xyz, cb0[38].xyzx, cb0[39].xyzx
mov o5.w, cb0[38].w
mul r0.x, |r0.w|, l(0.000020)
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
dp3 r2.x, cb0[27].xyzx, r1.yzwy
dp3 r2.z, cb0[29].xyzx, r1.yzwy
dp3 r2.y, cb0[28].xyzx, r1.yzwy
dp3 r0.y, r2.xyzx, r2.xyzx
rsq r0.y, r0.y
mul r1.yzw, r0.yyyy, r2.xxyz
mad r0.y, -r2.y, r0.y, l(-0.150000)
add_sat r0.y, -r0.y, l(1.000000)
mul r0.y, r0.y, r0.y
dp3 r0.z, -r1.yzwy, cb0[36].xyzx
mad r1.y, -cb0[31].y, r0.z, cb0[31].x
mad r0.z, r0.z, r0.z, l(1.000000)
mul r0.z, r0.z, l(0.059683)
log r1.y, |r1.y|
mul r1.y, r1.y, l(-1.500000)
exp r1.y, r1.y
mad r1.z, cb0[31].z, r1.y, -cb0[30].z
mul r1.y, r1.y, cb0[31].z
max r1.z, r1.z, l(0.000000)
mad r0.x, -r1.z, r0.x, r1.y
max r0.x, r0.x, cb0[35].w
div r1.y, -r1.x, cb0[30].x
mul r1.y, r1.y, l(1.442695)
exp r1.y, r1.y
add r1.y, r1.y, cb0[31].w
mul r1.y, r1.y, cb0[32].y
mul r1.y, r1.y, l(0.500000)
mul r0.y, r0.y, r1.y
min r0.y, r0.y, cb0[30].w
max r0.y, r0.y, cb0[32].x
mul r0.x, r0.y, r0.x
div r1.y, -r1.x, cb0[33].w
add r1.x, -r1.x, cb0[34].z
div r1.x, r1.x, cb0[30].y
mul r1.y, r1.y, l(1.442695)
exp r1.y, r1.y
mul r2.xyz, r1.yyyy, cb0[33].xyzx
mad r1.yzw, cb0[33].xxyz, r1.yyyy, r0.yyyy
mad r0.xyz, r2.xyzx, r0.zzzz, r0.xxxx
div r0.xyz, r0.xyzx, r1.yzwy
mul r2.xyz, r1.xxxx, -r1.yzwy
mul r1.xyz, |r0.wwww|, -r1.yzwy
mul r1.xyz, r1.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r1.xyz, r1.xyzx
mul r2.xyz, r2.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r2.xyz, r2.xyzx
log r3.xyz, cb0[35].xyzx
mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r3.xyz, r3.xyzx
mul r2.xyz, r2.xyzx, r3.xyzx
mul r0.xyz, r0.xyzx, r2.xyzx
add r1.yzw, -r1.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
mov o7.w, r1.x
mad r0.xyz, r0.xyzx, r1.yzwy, l(-0.004000, -0.004000, -0.004000, 0.000000)
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mad r1.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mul r1.xyz, r0.xyzx, r1.xyzx
mad r2.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(1.700000, 1.700000, 1.700000, 0.000000)
mad r0.xyz, r0.xyzx, r2.xyzx, l(0.060000, 0.060000, 0.060000, 0.000000)
div o7.xyz, r1.xyzx, r0.xyzx
mov o8.xyzw, v5.xyzw
ret 
// Approximately 182 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
