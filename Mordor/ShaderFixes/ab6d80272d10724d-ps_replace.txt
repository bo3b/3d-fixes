
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float k_fInvLightRadius : packoffset(c22);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c23);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c26);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c29);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c33);
  row_major float3x4 k_mWorldToVolume : packoffset(c34);
  float3 k_vDirectional_Dir : packoffset(c37);
  float4 k_vObjectLightColor : packoffset(c38);
  float3 k_vObjectSpaceLightPos : packoffset(c39);
  float4 k_vSpecularColor : packoffset(c40);
  float4 k_vSpotProjector_ClipFar : packoffset(c41);
  float4 k_vSpotProjector_ClipNear : packoffset(c42);
  float3 k_vHalfDims : packoffset(c43);
  float4 k_vShadowMapParams : packoffset(c44);
  float4 k_vShadowMapParams2 : packoffset(c45);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c46);
  float4 k_vShadowCascadeOffsetX : packoffset(c50);
  float4 k_vShadowCascadeOffsetZ : packoffset(c51);
  float k_fStaticLightVolume_Mip : packoffset(c52);
  float4 k_vShadowSplitDistSquared : packoffset(c53);
  float4 k_vShadowSplitDistSelect : packoffset(c54);
  float4 k_vShadowMoveX : packoffset(c55);
  float4 k_vShadowMoveY : packoffset(c56);
  float4 k_vShadowMoveZ : packoffset(c57);
  float4 k_vShadowScaleXY : packoffset(c58);
  float4 k_vShadowScaleX : packoffset(c59);
  float4 k_vShadowScaleY : packoffset(c60);
  float4 k_vShadowScaleZ : packoffset(c61);
  float3 k_vLightBleed_Offset : packoffset(c62);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c63);
  float k_fLightLayer : packoffset(c64);
  row_major float3x4 k_mViewToLight : packoffset(c65);
}

//Mike
cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s1);
SamplerComparisonState sBilinear_CLAMPCLAMPCLAMP_CompareSampler_s : register(s0);
Texture2DArray<float4> tShadowMapLinear : register(t0);
Texture2D<float4> tDepthMap : register(t1);
Texture2D<float4> tDeferredSpecular : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.zw = v2.xy / v1.ww;
  r1.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.xy).x;
  r1.xy = r1.zz * r0.zw;
  
float4 stereo = StereoParams.Load(0);
r1.x -= stereo.x * (r1.z - stereo.y)*v3.z/2; //*0.187;    
  
  
  r0.x = tDeferredSpecular.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.xy).w;
  r0.x = r0.x >= 5.000000000e-001;
  r0.x = r0.x ? 1.000000 : 0;
  r0.xyz = r0.xxx * k_vLightBleed_Offset.xyz + r1.xyz;
  r1.x = (int)k_vShadowMapParams.y;
  r1.yzw = k_vShadowSplitDistSelect.xyz * r0.xyz;
  r1.y = dot(r1.yzw, r1.yzw);
  r2.x = 0.000000000e+000;
  r2.yzw = k_vShadowSplitDistSquared.xyz;
  r2.x = r1.y >= r2.x;
  r2.y = r1.y >= r2.y;
  r2.z = r1.y >= r2.z;
  r2.w = r1.y >= r2.w;
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r1.z = dot(r2.xyzw, float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000));
  r1.z = (int)r1.z;
  r1.x = (int)r1.x >= (int)r1.z;
  if (r1.x != 0) {
  r1.x = r1.y < k_vShadowSplitDistSquared.x;
  r1.y = r1.y < k_vShadowSplitDistSquared.y;
  r1.z = r1.y < k_vShadowSplitDistSquared.z;
  r1.w = r1.y < k_vShadowSplitDistSquared.w;
  r1.x = r1.x ? 1 : 0;
  r1.y = r1.y ? 1 : 0;
  r1.z = r1.z ? 1 : 0;
  r1.w = r1.w ? 1 : 0;
  r1.xyzw = r2.xyzw * r1.xyzw;
  r2.x = dot(r1.xyzw, k_vShadowScaleXY.xyzw);
  r2.y = dot(r1.xyzw, k_vShadowScaleZ.xyzw);
  r3.x = dot(r1.xyzw, k_vShadowMoveX.xyzw);
  r3.y = dot(r1.xyzw, k_vShadowMoveY.xyzw);
  r3.z = dot(r1.xyzw, k_vShadowMoveZ.xyzw);
  r0.w = 1.000000000e+000;
  r4.x = dot(k_mShadowMapMatrix._m00_m01_m02_m03, r0.xyzw);
  r4.y = dot(k_mShadowMapMatrix._m10_m11_m12_m13, r0.xyzw);
  r4.z = dot(k_mShadowMapMatrix._m20_m21_m22_m23, r0.xyzw);
  r0.x = dot(k_mShadowMapMatrix._m30_m31_m32_m33, r0.xyzw);
  r0.yzw = r4.xyz + r3.xyz;
  r0.yzw = r0.yzw * r2.xxy;
  r0.xyz = r0.yzw / r0.xxx;
  r2.xyzw = r0.xyxy * float4(5.000000e-001,-5.000000e-001,5.000000e-001,-5.000000e-001) + float4(5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001);
  r1.z = dot(r1.xyzw, k_vShadowCascadeOffsetZ.xyzw);
  r0.x = 1.000000000e+000 + -r0.z;
  r3.xyzw = k_vShadowMapParams2.zwzw * float4(-5.000000e-001,-5.000000e-001,5.000000e-001,-5.000000e-001) + r2.zwzw;
  r1.xy = r3.xy;
  r0.y = tShadowMapLinear.SampleCmpLevelZero(sBilinear_CLAMPCLAMPCLAMP_CompareSampler_s, r1.xyz, r0.x).x;
  r1.xy = r3.zw;
  r0.z = tShadowMapLinear.SampleCmpLevelZero(sBilinear_CLAMPCLAMPCLAMP_CompareSampler_s, r1.xyz, r0.x).x;
  r2.xyzw = k_vShadowMapParams2.zwzw * float4(-5.000000e-001,5.000000e-001,5.000000e-001,5.000000e-001) + r2.xyzw;
  r1.xy = r2.xy;
  r0.w = tShadowMapLinear.SampleCmpLevelZero(sBilinear_CLAMPCLAMPCLAMP_CompareSampler_s, r1.xyz, r0.x).x;
  r1.xy = r2.zw;
  r0.x = tShadowMapLinear.SampleCmpLevelZero(sBilinear_CLAMPCLAMPCLAMP_CompareSampler_s, r1.xyz, r0.x).x;
  r0.y = r0.y + r0.z;
  r0.y = r0.y + r0.w;
  r0.x = r0.y + r0.x;
  r0.x = -r0.x * 2.500000000e-001 + 1.000000000e+000;
  } else {
  r0.x = 1.000000000e+000;
  }
  o0.xyz = r0.xxx;
  o0.w = 0.000000000e+000;
  
  
  // o0=0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float k_fInvLightRadius;           // Offset:  352 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  368 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  416 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  464 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  528 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  544 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  592 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  608 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  624 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  640 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  656 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  672 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  688 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  704 Size:    16
//   float4 k_vShadowMapParams2;        // Offset:  720 Size:    16
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  736 Size:    64
//   float4 k_vShadowCascadeOffsetX;    // Offset:  800 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  816 Size:    16
//   float k_fStaticLightVolume_Mip;    // Offset:  832 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  848 Size:    16
//   float4 k_vShadowSplitDistSelect;   // Offset:  864 Size:    16
//   float4 k_vShadowMoveX;             // Offset:  880 Size:    16
//   float4 k_vShadowMoveY;             // Offset:  896 Size:    16
//   float4 k_vShadowMoveZ;             // Offset:  912 Size:    16
//   float4 k_vShadowScaleXY;           // Offset:  928 Size:    16
//   float4 k_vShadowScaleX;            // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset:  976 Size:    16
//   float3 k_vLightBleed_Offset;       // Offset:  992 Size:    12
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1008 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1024 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1040 Size:    48 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sBilinear_CLAMPCLAMPCLAMP_CompareSampler  sampler_c      NA          NA    0        1
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    1        1
// tShadowMapLinear                  texture  float4     2darray    0        1
// tDepthMap                         texture  float4          2d    1        1
// tDeferredSpecular                 texture  float4          2d    2        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[63], immediateIndexed
dcl_sampler s0, mode_comparison
dcl_sampler s1, mode_default
dcl_resource_texture2darray (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 5
div r0.xy, v1.xyxx, v1.wwww
div r0.zw, v2.xxxy, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t1.yzxw, s1
mul r1.xy, r0.zwzz, r1.zzzz
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.wxyz, s1
ge r0.x, r0.x, l(0.500000)
and r0.x, r0.x, l(0x3f800000)
mad r0.xyz, r0.xxxx, cb0[62].xyzx, r1.xyzx
ftoi r1.x, cb0[44].y
mul r1.yzw, r0.xxyz, cb0[54].xxyz
dp3 r1.y, r1.yzwy, r1.yzwy
mov r2.x, l(0)
mov r2.yzw, cb0[53].xxyz
ge r2.xyzw, r1.yyyy, r2.xyzw
and r2.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
dp4 r1.z, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
ftoi r1.z, r1.z
ige r1.x, r1.x, r1.z
if_nz r1.x
  lt r1.xyzw, r1.yyyy, cb0[53].xyzw
  and r1.xyzw, r1.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  mul r1.xyzw, r1.xyzw, r2.xyzw
  dp4 r2.x, r1.xyzw, cb0[58].xyzw
  dp4 r2.y, r1.xyzw, cb0[61].xyzw
  dp4 r3.x, r1.xyzw, cb0[55].xyzw
  dp4 r3.y, r1.xyzw, cb0[56].xyzw
  dp4 r3.z, r1.xyzw, cb0[57].xyzw
  mov r0.w, l(1.000000)
  dp4 r4.x, cb0[46].xyzw, r0.xyzw
  dp4 r4.y, cb0[47].xyzw, r0.xyzw
  dp4 r4.z, cb0[48].xyzw, r0.xyzw
  dp4 r0.x, cb0[49].xyzw, r0.xyzw
  add r0.yzw, r3.xxyz, r4.xxyz
  mul r0.yzw, r2.xxxy, r0.yyzw
  div r0.xyz, r0.yzwy, r0.xxxx
  mad r2.xyzw, r0.xyxy, l(0.500000, -0.500000, 0.500000, -0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
  dp4 r1.z, r1.xyzw, cb0[51].xyzw
  add r0.x, -r0.z, l(1.000000)
  mad r3.xyzw, cb0[45].zwzw, l(-0.500000, -0.500000, 0.500000, -0.500000), r2.zwzw
  mov r1.xy, r3.xyxx
  sample_c_lz_indexable(texture2darray)(float,float,float,float) r0.y, r1.xyzx, t0.xxxx, s0, r0.x
  mov r1.xy, r3.zwzz
  sample_c_lz_indexable(texture2darray)(float,float,float,float) r0.z, r1.xyzx, t0.xxxx, s0, r0.x
  mad r2.xyzw, cb0[45].zwzw, l(-0.500000, 0.500000, 0.500000, 0.500000), r2.xyzw
  mov r1.xy, r2.xyxx
  sample_c_lz_indexable(texture2darray)(float,float,float,float) r0.w, r1.xyzx, t0.xxxx, s0, r0.x
  mov r1.xy, r2.zwzz
  sample_c_lz_indexable(texture2darray)(float,float,float,float) r0.x, r1.xyzx, t0.xxxx, s0, r0.x
  add r0.y, r0.z, r0.y
  add r0.y, r0.w, r0.y
  add r0.x, r0.x, r0.y
  mad r0.x, -r0.x, l(0.250000), l(1.000000)
else 
  mov r0.x, l(1.000000)
endif 
mov o0.xyz, r0.xxxx
mov o0.w, l(0)
ret 
// Approximately 58 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
