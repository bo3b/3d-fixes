
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float3 k_cColorTint : packoffset(c22) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fMaxSpecularPower : packoffset(c22.w) = float(6.400000e+001);
  float k_fSpecularScale : packoffset(c23) = float(1.000000e+000);
  float k_fFresnelTerm : packoffset(c23.y) = float(1.000000e+000);
  float k_fRenderObjectID : packoffset(c23.z);
  float k_fInvLightRadius : packoffset(c23.w);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c24);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c27);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c30);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c34);
  row_major float3x4 k_mWorldToVolume : packoffset(c35);
  float3 k_vDirectional_Dir : packoffset(c38);
  float4 k_vObjectLightColor : packoffset(c39);
  float3 k_vObjectSpaceLightPos : packoffset(c40);
  float4 k_vSpecularColor : packoffset(c41);
  float4 k_vSpotProjector_ClipFar : packoffset(c42);
  float4 k_vSpotProjector_ClipNear : packoffset(c43);
  float3 k_vHalfDims : packoffset(c44);
  float4 k_vShadowMapParams : packoffset(c45);
  float4 k_vShadowMapParams2 : packoffset(c46);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c47);
  float4 k_vShadowCascadeOffsetX : packoffset(c51);
  float4 k_vShadowCascadeOffsetZ : packoffset(c52);
  float k_fStaticLightVolume_Mip : packoffset(c53);
  float4 k_vShadowSplitDistSquared : packoffset(c54);
  float4 k_vShadowSplitDistSelect : packoffset(c55);
  float4 k_vShadowMoveX : packoffset(c56);
  float4 k_vShadowMoveY : packoffset(c57);
  float4 k_vShadowMoveZ : packoffset(c58);
  float4 k_vShadowScaleXY : packoffset(c59);
  float4 k_vShadowScaleX : packoffset(c60);
  float4 k_vShadowScaleY : packoffset(c61);
  float4 k_vShadowScaleZ : packoffset(c62);
  float3 k_vLightBleed_Offset : packoffset(c63);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c64);
  float k_fLightLayer : packoffset(c65);
  row_major float3x4 k_mViewToLight : packoffset(c66);
}

cbuffer CBuffer_Bones : register(b1)
{
  float4 k_mModelObjectNodes[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  float4 v6 : BLENDWEIGHT0,
  float4 v7 : BLENDINDICES0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD2,
  out float3 o3 : TEXCOORD3,
  out float3 o4 : TEXCOORD4,
  out float4 o5 : COLOR0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask;
  r0.xyz = float3(2.550020e+002,2.550020e+002,2.550020e+002) * v7.zyx;
  r0.xyz = (int3)r0.xyz;
  r1.xyz = (uint3)r0.xyz << int3(1,1,1);
  r0.xyz = mad((int3)r0.xyz, int3(2,2,2), int3(1,1,1));
  r2.xyz = v6.xyz;
  r3.w = k_mModelObjectNodes[r1.x].y * r2.x;
  r4.w = k_mModelObjectNodes[r1.y].y * r2.y;
  r0.w = k_mModelObjectNodes[r0.x].w * k_mModelObjectNodes[r0.x].x;
  r1.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + -r0.w;
  r0.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + r0.w;
  r0.w = v6.x * r0.w;
  r1.w = v6.x * r1.w;
  r2.w = 2.000000000e+000;
  r3.z = r2.w * r1.w;
  r1.w = k_mModelObjectNodes[r0.y].w * k_mModelObjectNodes[r0.y].x;
  r5.x = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + r1.w;
  r1.w = v6.y * r1.w;
  r6.y = r1.w * r2.w;
  r1.w = v6.y * r5.x;
  r4.z = r1.w * r2.w;
  r5.xyz = k_mModelObjectNodes[r0.x].wxw * k_mModelObjectNodes[r0.x].zzy;
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + r5.x;
  r1.w = v6.x * r1.w;
  r3.x = r1.w * r2.w;
  r7.xyz = k_mModelObjectNodes[r0.x].xyz * k_mModelObjectNodes[r0.x].xyz;
  r7.xyz = r7.yxx + r7.zzy;
  r7.xyz = -r7.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r3.y = r7.y * r2.x;
  r8.xyz = k_mModelObjectNodes[r0.y].wxw * k_mModelObjectNodes[r0.y].zzy;
  r1.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + r8.x;
  r1.w = v6.y * r1.w;
  r4.x = r1.w * r2.w;
  r9.xyz = k_mModelObjectNodes[r0.y].xyz * k_mModelObjectNodes[r0.y].xyz;
  r9.xyz = r9.yxx + r9.zzy;
  r9.xyz = -r9.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r4.y = r9.y * r2.y;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.w = k_mModelObjectNodes[r1.z].y * r2.z;
  r1.w = k_mModelObjectNodes[r0.z].w * k_mModelObjectNodes[r0.z].x;
  r5.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + r1.w;
  r1.w = v6.z * r1.w;
  r10.y = r1.w * r2.w;
  r1.w = v6.z * r5.w;
  r4.z = r1.w * r2.w;
  r11.xyz = k_mModelObjectNodes[r0.z].wxw * k_mModelObjectNodes[r0.z].zzy;
  r1.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + r11.x;
  r1.w = v6.z * r1.w;
  r4.x = r1.w * r2.w;
  r12.xyz = k_mModelObjectNodes[r0.z].xyz * k_mModelObjectNodes[r0.z].xyz;
  r12.xyz = r12.yxx + r12.zzy;
  r12.xyz = -r12.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r4.y = r12.y * r2.z;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyz = v0.xyz;
  r4.w = 1.000000000e+000;
  r13.y = dot(r3.xyzw, r4.xyzw);
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].z + -r5.z;
  r1.w = v6.x * r1.w;
  r14.x = r1.w * r2.w;
  r14.y = r2.w * r0.w;
  r0.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].z + -r8.z;
  r0.w = v6.y * r0.w;
  r6.x = r0.w * r2.w;
  r14.z = r7.z * r2.x;
  r7.x = r7.x * r2.x;
  r6.z = r9.z * r2.y;
  r9.x = r9.x * r2.y;
  r14.w = k_mModelObjectNodes[r1.x].z * r2.x;
  r6.w = k_mModelObjectNodes[r1.y].z * r2.y;
  r6.xyzw = r14.xyzw + r6.xyzw;
  r0.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].z + -r11.z;
  r0.w = v6.z * r0.w;
  r10.x = r0.w * r2.w;
  r10.z = r12.z * r2.z;
  r12.x = r12.x * r2.z;
  r10.w = k_mModelObjectNodes[r1.z].z * r2.z;
  r6.xyzw = r10.xyzw + r6.xyzw;
  r13.z = dot(r6.xyzw, r4.xyzw);
  r7.w = k_mModelObjectNodes[r1.x].x * r2.x;
  r9.w = k_mModelObjectNodes[r1.y].x * r2.y;
  r12.w = k_mModelObjectNodes[r1.z].x * r2.z;
  r0.x = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + -r5.x;
  r0.w = r5.y + r5.z;
  r0.xw = v6.xx * r0.xw;
  r7.yz = r0.xw * r2.ww;
  r0.x = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + -r8.x;
  r0.y = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + -r11.x;
  r0.z = r11.y + r11.z;
  r0.xyz = v6.yzz * r0.xyz;
  r12.yz = r0.yz * r2.ww;
  r0.y = r8.y + r8.z;
  r0.y = v6.y * r0.y;
  r9.yz = r0.xy * r2.ww;
  r0.xyzw = r9.xyzw + r7.xyzw;
  r0.xyzw = r0.xyzw + r12.xyzw;
  r13.x = dot(r0.xyzw, r4.xyzw);
  r13.w = 1.000000000e+000;
  o0.x = dot(k_mObjectToClip._m00_m01_m02_m03, r13.xyzw);
  o0.y = dot(k_mObjectToClip._m10_m11_m12_m13, r13.xyzw);
  o0.z = dot(k_mObjectToClip._m20_m21_m22_m23, r13.xyzw);
  o0.w = dot(k_mObjectToClip._m30_m31_m32_m33, r13.xyzw);
  o1.xy = v2.xy;
  r1.y = dot(r3.xyz, v3.xyz);
  r1.z = dot(r6.xyz, v3.xyz);
  r1.x = dot(r0.xyz, v3.xyz);
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  o2.x = dot(k_mObjectToWorld._m00_m01_m02, r1.xyz);
  r2.y = dot(r3.xyz, v4.xyz);
  r3.y = dot(r3.xyz, v1.xyz);
  r2.z = dot(r6.xyz, v4.xyz);
  r3.z = dot(r6.xyz, v1.xyz);
  r2.x = dot(r0.xyz, v4.xyz);
  r3.x = dot(r0.xyz, v1.xyz);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx;
  o2.y = dot(k_mObjectToWorld._m00_m01_m02, r0.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  o2.z = dot(k_mObjectToWorld._m00_m01_m02, r2.xyz);
  o3.x = dot(k_mObjectToWorld._m10_m11_m12, r1.xyz);
  o4.x = dot(k_mObjectToWorld._m20_m21_m22, r1.xyz);
  o3.y = dot(k_mObjectToWorld._m10_m11_m12, r0.xyz);
  o4.y = dot(k_mObjectToWorld._m20_m21_m22, r0.xyz);
  o3.z = dot(k_mObjectToWorld._m10_m11_m12, r2.xyz);
  o4.z = dot(k_mObjectToWorld._m20_m21_m22, r2.xyz);
  r0.xyz = v5.xyz * v5.www;
  r0.w = v5.w;
  o5.xyzw = k_vObjectColor.xyzw * r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48
//   float4 k_vObjectColor;             // Offset:  160 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float3 k_cColorTint;               // Offset:  352 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float k_fMaxSpecularPower;         // Offset:  364 Size:     4 [unused]
//      = 0x42800000 
//   float k_fSpecularScale;            // Offset:  368 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fFresnelTerm;              // Offset:  372 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fRenderObjectID;           // Offset:  376 Size:     4 [unused]
//   float k_fInvLightRadius;           // Offset:  380 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  384 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  432 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  480 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  544 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  560 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  608 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  624 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  640 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  656 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  672 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  688 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  704 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  720 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  736 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  752 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  816 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  832 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  848 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  864 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  880 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  896 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  912 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  928 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  976 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset:  992 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset: 1008 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1024 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1040 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1056 Size:    48 [unused]
//
// }
//
// cbuffer CBuffer_Bones
// {
//
//   float4 k_mModelObjectNodes[64];    // Offset:    0 Size:  1024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_Bones                     cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
// BLENDWEIGHT              0   xyzw        6     NONE   float   xyz 
// BLENDINDICES             0   xyzw        7     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[11], immediateIndexed
dcl_constantbuffer cb1[64], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_input v6.xyz
dcl_input v7.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_temps 15
mul r0.xyz, v7.zyxz, l(255.001953, 255.001953, 255.001953, 0.000000)
ftoi r0.xyz, r0.xyzx
ishl r1.xyz, r0.xyzx, l(1, 1, 1, 0)
imad r0.xyz, r0.xyzx, l(2, 2, 2, 0), l(1, 1, 1, 0)
mov r2.xyz, v6.xyzx
mul r3.w, r2.x, cb1[r1.x + 0].y
mul r4.w, r2.y, cb1[r1.y + 0].y
mul r0.w, cb1[r0.x + 0].x, cb1[r0.x + 0].w
mad r1.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, -r0.w
mad r0.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, r0.w
mul r0.w, r0.w, v6.x
mul r1.w, r1.w, v6.x
mov r2.w, l(2.000000)
mul r3.z, r1.w, r2.w
mul r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].w
mad r5.x, cb1[r0.y + 0].y, cb1[r0.y + 0].z, -r1.w
mad r1.w, cb1[r0.y + 0].y, cb1[r0.y + 0].z, r1.w
mul r1.w, r1.w, v6.y
mul r6.y, r2.w, r1.w
mul r1.w, r5.x, v6.y
mul r4.z, r2.w, r1.w
mul r5.xyz, cb1[r0.x + 0].zzyz, cb1[r0.x + 0].wxww
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].y, r5.x
mul r1.w, r1.w, v6.x
mul r3.x, r2.w, r1.w
mul r7.xyz, cb1[r0.x + 0].xyzx, cb1[r0.x + 0].xyzx
add r7.xyz, r7.zzyz, r7.yxxy
mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.y, r2.x, r7.y
mul r8.xyz, cb1[r0.y + 0].zzyz, cb1[r0.y + 0].wxww
mad r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].y, r8.x
mul r1.w, r1.w, v6.y
mul r4.x, r2.w, r1.w
mul r9.xyz, cb1[r0.y + 0].xyzx, cb1[r0.y + 0].xyzx
add r9.xyz, r9.zzyz, r9.yxxy
mad r9.xyz, -r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.y, r2.y, r9.y
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.w, r2.z, cb1[r1.z + 0].y
mul r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].w
mad r5.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, -r1.w
mad r1.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, r1.w
mul r1.w, r1.w, v6.z
mul r10.y, r2.w, r1.w
mul r1.w, r5.w, v6.z
mul r4.z, r2.w, r1.w
mul r11.xyz, cb1[r0.z + 0].zzyz, cb1[r0.z + 0].wxww
mad r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].y, r11.x
mul r1.w, r1.w, v6.z
mul r4.x, r2.w, r1.w
mul r12.xyz, cb1[r0.z + 0].xyzx, cb1[r0.z + 0].xyzx
add r12.xyz, r12.zzyz, r12.yxxy
mad r12.xyz, -r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.y, r2.z, r12.y
add r3.xyzw, r3.xyzw, r4.xyzw
mov r4.xyz, v0.xyzx
mov r4.w, l(1.000000)
dp4 r13.y, r3.xyzw, r4.xyzw
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].z, -r5.z
mul r1.w, r1.w, v6.x
mul r14.x, r2.w, r1.w
mul r14.y, r0.w, r2.w
mad r0.w, cb1[r0.y + 0].x, cb1[r0.y + 0].z, -r8.z
mul r0.w, r0.w, v6.y
mul r6.x, r2.w, r0.w
mul r14.z, r2.x, r7.z
mul r7.x, r2.x, r7.x
mul r6.z, r2.y, r9.z
mul r9.x, r2.y, r9.x
mul r14.w, r2.x, cb1[r1.x + 0].z
mul r6.w, r2.y, cb1[r1.y + 0].z
add r6.xyzw, r6.xyzw, r14.xyzw
mad r0.w, cb1[r0.z + 0].x, cb1[r0.z + 0].z, -r11.z
mul r0.w, r0.w, v6.z
mul r10.x, r2.w, r0.w
mul r10.z, r2.z, r12.z
mul r12.x, r2.z, r12.x
mul r10.w, r2.z, cb1[r1.z + 0].z
add r6.xyzw, r6.xyzw, r10.xyzw
dp4 r13.z, r6.xyzw, r4.xyzw
mul r7.w, r2.x, cb1[r1.x + 0].x
mul r9.w, r2.y, cb1[r1.y + 0].x
mul r12.w, r2.z, cb1[r1.z + 0].x
mad r0.x, cb1[r0.x + 0].x, cb1[r0.x + 0].y, -r5.x
add r0.w, r5.z, r5.y
mul r0.xw, r0.xxxw, v6.xxxx
mul r7.yz, r2.wwww, r0.xxwx
mad r0.x, cb1[r0.y + 0].x, cb1[r0.y + 0].y, -r8.x
mad r0.y, cb1[r0.z + 0].x, cb1[r0.z + 0].y, -r11.x
add r0.z, r11.z, r11.y
mul r0.xyz, r0.xyzx, v6.yzzy
mul r12.yz, r2.wwww, r0.yyzy
add r0.y, r8.z, r8.y
mul r0.y, r0.y, v6.y
mul r9.yz, r2.wwww, r0.xxyx
add r0.xyzw, r7.xyzw, r9.xyzw
add r0.xyzw, r12.xyzw, r0.xyzw
dp4 r13.x, r0.xyzw, r4.xyzw
mov r13.w, l(1.000000)
dp4 o0.x, cb0[0].xyzw, r13.xyzw
dp4 o0.y, cb0[1].xyzw, r13.xyzw
dp4 o0.z, cb0[2].xyzw, r13.xyzw
dp4 o0.w, cb0[3].xyzw, r13.xyzw
mov o1.xy, v2.xyxx
dp3 r1.y, r3.xyzx, v3.xyzx
dp3 r1.z, r6.xyzx, v3.xyzx
dp3 r1.x, r0.xyzx, v3.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 o2.x, cb0[7].xyzx, r1.xyzx
dp3 r2.y, r3.xyzx, v4.xyzx
dp3 r3.y, r3.xyzx, v1.xyzx
dp3 r2.z, r6.xyzx, v4.xyzx
dp3 r3.z, r6.xyzx, v1.xyzx
dp3 r2.x, r0.xyzx, v4.xyzx
dp3 r3.x, r0.xyzx, v1.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
dp3 o2.y, cb0[7].xyzx, r0.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r3.xyzx
dp3 o2.z, cb0[7].xyzx, r2.xyzx
dp3 o3.x, cb0[8].xyzx, r1.xyzx
dp3 o4.x, cb0[9].xyzx, r1.xyzx
dp3 o3.y, cb0[8].xyzx, r0.xyzx
dp3 o4.y, cb0[9].xyzx, r0.xyzx
dp3 o3.z, cb0[8].xyzx, r2.xyzx
dp3 o4.z, cb0[9].xyzx, r2.xyzx
mul r0.xyz, v5.wwww, v5.xyzx
mov r0.w, v5.w
mul o5.xyzw, r0.xyzw, cb0[10].xyzw
ret 
// Approximately 135 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
