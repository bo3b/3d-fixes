
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float k_fTileEmissiveU : packoffset(c22) = float(1.000000e+000);
  float k_fTileEmissiveV : packoffset(c22.y) = float(1.000000e+000);
  float k_fPanEmissiveU : packoffset(c22.z) = float(0.000000e+000);
  float k_fPanEmissiveV : packoffset(c22.w) = float(0.000000e+000);
  float3 k_cEmissiveColor : packoffset(c23) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fEmissiveIntensity : packoffset(c23.w) = float(1.000000e+000);
  float k_fMaxSpecularPower : packoffset(c24) = float(6.400000e+001);
  float k_fRenderObjectID : packoffset(c24.y);
  int k_bRendersEmissive : packoffset(c24.z) = int(1.401298e-045);
  float k_fInvLightRadius : packoffset(c24.w);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c25);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c28);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c31);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c35);
  row_major float3x4 k_mWorldToVolume : packoffset(c36);
  float3 k_vDirectional_Dir : packoffset(c39);
  float4 k_vObjectLightColor : packoffset(c40);
  float3 k_vObjectSpaceLightPos : packoffset(c41);
  float4 k_vSpecularColor : packoffset(c42);
  float4 k_vSpotProjector_ClipFar : packoffset(c43);
  float4 k_vSpotProjector_ClipNear : packoffset(c44);
  float3 k_vHalfDims : packoffset(c45);
  float4 k_vShadowMapParams : packoffset(c46);
  float4 k_vShadowMapParams2 : packoffset(c47);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c48);
  float4 k_vShadowCascadeOffsetX : packoffset(c52);
  float4 k_vShadowCascadeOffsetZ : packoffset(c53);
  float k_fStaticLightVolume_Mip : packoffset(c54);
  float4 k_vShadowSplitDistSquared : packoffset(c55);
  float4 k_vShadowSplitDistSelect : packoffset(c56);
  float4 k_vShadowMoveX : packoffset(c57);
  float4 k_vShadowMoveY : packoffset(c58);
  float4 k_vShadowMoveZ : packoffset(c59);
  float4 k_vShadowScaleXY : packoffset(c60);
  float4 k_vShadowScaleX : packoffset(c61);
  float4 k_vShadowScaleY : packoffset(c62);
  float4 k_vShadowScaleZ : packoffset(c63);
  float3 k_vLightBleed_Offset : packoffset(c64);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c65);
  float k_fLightLayer : packoffset(c66);
  row_major float3x4 k_mViewToLight : packoffset(c67);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s0);
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tEmissiveMap : register(t0);
Texture2D<float4> tDiffuseMap : register(t1);
Texture2D<float4> tNormalMap : register(t2);
Texture2D<float4> tSpecularMap : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD2,
  float3 v3 : TEXCOORD3,
  float3 v4 : TEXCOORD4,
  float4 v5 : COLOR0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xy = k_fTime * k_fPanEmissiveU;
  r0.xy = v1.xy * k_fTileEmissiveU + r0.xy;
  r0.xyz = tEmissiveMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).xyz;
  r1.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyzw;
  r0.w = saturate(1.000000000e+000 + -r1.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = k_cEmissiveColor.xyz * r0.xyz;
  r0.xyz = k_vHDRLuminanceWeights.www * r0.xyz;
  o0.xyz = k_fEmissiveIntensity * r0.xyz;
  o0.w = 1.000000000e+000;
  r0.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).yw;
  r0.zw = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.xy = r0.xy + r0.xy;
  r0.x = -r0.z * r0.z + 1.000000000e+000;
  r0.x = -r0.w * r0.w + r0.x;
  r2.z = sqrt(r0.x);
  r0.xyz = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + r2.xyz;
  r0.xyz = r1.www * r0.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r2.x = dot(v2.xyz, r0.xyz);
  r2.y = dot(v3.xyz, r0.xyz);
  r2.z = dot(v4.xyz, r0.xyz);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx;
  o1.xyz = r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o1.w = k_fRenderObjectID;
  o2.xyz = v5.xyz * r1.xyz;
  o2.w = r1.w;
  r0.xyz = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyz;
  o3.y = r1.w * r0.y;
  o3.w = 0.000000000e+000;
  o3.x = k_fMaxSpecularPower * r0.z;
  o3.z = r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float k_fTileEmissiveU;            // Offset:  352 Size:     4
//      = 0x3f800000 
//   float k_fTileEmissiveV;            // Offset:  356 Size:     4
//      = 0x3f800000 
//   float k_fPanEmissiveU;             // Offset:  360 Size:     4
//      = 0x00000000 
//   float k_fPanEmissiveV;             // Offset:  364 Size:     4
//      = 0x00000000 
//   float3 k_cEmissiveColor;           // Offset:  368 Size:    12
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float k_fEmissiveIntensity;        // Offset:  380 Size:     4
//      = 0x3f800000 
//   float k_fMaxSpecularPower;         // Offset:  384 Size:     4
//      = 0x42800000 
//   float k_fRenderObjectID;           // Offset:  388 Size:     4
//   int k_bRendersEmissive;            // Offset:  392 Size:     4 [unused]
//      = 0x00000001 
//   float k_fInvLightRadius;           // Offset:  396 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  400 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  448 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  496 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  560 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  576 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  624 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  640 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  656 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  672 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  688 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  704 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  720 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  736 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  752 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  768 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  832 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  848 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  864 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  880 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  896 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  912 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  928 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  976 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  992 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset: 1008 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset: 1024 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1040 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1056 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1072 Size:    48 [unused]
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// tEmissiveMap                      texture  float4          2d    0        1
// tDiffuseMap                       texture  float4          2d    1        1
// tNormalMap                        texture  float4          2d    2        1
// tSpecularMap                      texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb12[28], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
mul r0.xy, cb0[22].zwzz, cb13[1].xxxx
mad r0.xy, v1.xyxx, cb0[22].xyxx, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s1
add_sat r0.w, -r1.w, l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, cb0[23].xyzx
mul r0.xyz, r0.xyzx, cb12[27].wwww
mul o0.xyz, r0.xyzx, cb0[23].wwww
mov o0.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t2.ywxz, s0
mad r0.zw, r0.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
add r2.xy, r0.xyxx, r0.xyxx
mad r0.x, -r0.z, r0.z, l(1.000000)
mad r0.x, -r0.w, r0.w, r0.x
sqrt r2.z, r0.x
add r0.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r0.xyz, r1.wwww, r0.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
dp3 r2.x, v2.xyzx, r0.xyzx
dp3 r2.y, v3.xyzx, r0.xyzx
dp3 r2.z, v4.xyzx, r0.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o1.w, cb0[24].y
mul o2.xyz, r1.xyzx, v5.xyzx
mov o2.w, r1.w
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t3.xyzw, s0
mul o3.y, r0.y, r1.w
mov o3.w, l(0)
mul o3.x, r0.z, cb0[24].x
mov o3.z, r0.x
ret 
// Approximately 34 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
