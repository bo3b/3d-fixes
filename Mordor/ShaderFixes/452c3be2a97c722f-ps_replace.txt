
cbuffer _Globals : register(b0)
{
  float3 k_cEmissiveRampColor : packoffset(c0) = float3(0.000000e+000,1.000000e+000,1.000000e+000);
  float k_fEmissiveRampBrightness : packoffset(c0.w) = float(2.000000e+000);
  row_major float4x4 k_mObjectToClip : packoffset(c1);
  row_major float3x4 k_mObjectToView : packoffset(c5);
  row_major float3x4 k_mObjectToWorld : packoffset(c8);
  float4 k_vObjectColor : packoffset(c11);
  float3 k_vObjectSpaceEyePos : packoffset(c12);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c13);
  row_major float3x4 k_mPrevObjectToView : packoffset(c17);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c20);
  float k_fRevealValue : packoffset(c23) = float(1.000000e+000);
  float k_fRevealWidth : packoffset(c23.y) = float(1.000000e-001);
  float k_fEmissiveRampPower : packoffset(c23.z) = float(2.000000e+000);
  float k_fDiffuseAlpha : packoffset(c23.w) = float(1.000000e+000);
  float k_fMaxSpecularPower : packoffset(c24) = float(6.400000e+001);
  int k_bRendersEmissive : packoffset(c24.y) = int(1.401298e-045);
  int k_nSolidSortIndex : packoffset(c24.z) = int(1.121039e-044);
}
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tDiffuseMap : register(t0);
Texture2D<float4> tNormalMap : register(t1);
Texture2D<float4> tSpecularMap : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  float4 v6 : COLOR0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.x = 1.000000000e+000 + k_fRevealWidth;
  r0.yz = float2(1.000000e+000,9.950000e-001) + -v6.ww;
  r0.x = k_fRevealValue * r0.x + r0.y;
  r0.y = saturate(ceil(r0.z));
  r0.x = -1.000000000e+000 + r0.x;
  r0.z = 1.000000e+000 / k_fRevealWidth;
  r0.x = saturate(r0.x * r0.z);
  r0.z = r0.x * -2.000000000e+000 + 3.000000000e+000;
  r0.x = r0.x * r0.x;
  r0.x = r0.z * r0.x;
  r0.z = -r0.y * r0.x + 1.000000000e+000;
  r0.x = r0.y * r0.x;
  r0.y = log2(r0.z);
  r0.y = k_fEmissiveRampPower * r0.y;
  r0.y = exp2(r0.y);
  r0.y = k_fEmissiveRampBrightness * r0.y;
  o0.xyz = k_cEmissiveRampColor.xyz * r0.yyy;
  r1.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, v2.xy).xyzw;
  r0.y = k_fDiffuseAlpha * r1.w;
  o2.xyz = r1.xyz;
  r0.x = r0.y * r0.x;
  o0.w = r0.x;
  o1.w = r0.x;
  r0.yz = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v2.xy).yw;
  r1.xy = r0.yz * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.y = -r1.x * r1.x + 1.000000000e+000;
  r0.y = -r1.y * r1.y + r0.y;
  r1.z = sqrt(r0.y);
  r2.x = dot(v3.xyz, r1.xyz);
  r2.y = dot(v4.xyz, r1.xyz);
  r2.z = dot(v5.xyz, r1.xyz);
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = r2.xyz * r0.yyy;
  o1.xyz = r0.yzw * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o2.w = r0.x;
  o3.w = r0.x;
  r0.xyz = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v2.xy).xyz;
  o3.x = k_fMaxSpecularPower * r0.z;
  o3.yz = r0.yx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 k_cEmissiveRampColor;       // Offset:    0 Size:    12
//      = 0x00000000 0x3f800000 0x3f800000 
//   float k_fEmissiveRampBrightness;   // Offset:   12 Size:     4
//      = 0x40000000 
//   row_major float4x4 k_mObjectToClip;// Offset:   16 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   80 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  128 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  176 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  192 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  208 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  272 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  320 Size:    48 [unused]
//   float k_fRevealValue;              // Offset:  368 Size:     4
//      = 0x3f800000 
//   float k_fRevealWidth;              // Offset:  372 Size:     4
//      = 0x3dcccccd 
//   float k_fEmissiveRampPower;        // Offset:  376 Size:     4
//      = 0x40000000 
//   float k_fDiffuseAlpha;             // Offset:  380 Size:     4
//      = 0x3f800000 
//   float k_fMaxSpecularPower;         // Offset:  384 Size:     4
//      = 0x42800000 
//   int k_bRendersEmissive;            // Offset:  388 Size:     4 [unused]
//      = 0x00000001 
//   int k_nSolidSortIndex;             // Offset:  392 Size:     4 [unused]
//      = 0x00000008 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// tDiffuseMap                       texture  float4          2d    0        1
// tNormalMap                        texture  float4          2d    1        1
// tSpecularMap                      texture  float4          2d    2        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float       
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// COLOR                    0   xyzw        6     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.w
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
add r0.x, cb0[23].y, l(1.000000)
add r0.yz, -v6.wwww, l(0.000000, 1.000000, 0.995000, 0.000000)
mad r0.x, cb0[23].x, r0.x, r0.y
round_pi_sat r0.y, r0.z
add r0.x, r0.x, l(-1.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[23].y
mul_sat r0.x, r0.z, r0.x
mad r0.z, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.z
mad r0.z, -r0.y, r0.x, l(1.000000)
mul r0.x, r0.x, r0.y
log r0.y, r0.z
mul r0.y, r0.y, cb0[23].z
exp r0.y, r0.y
mul r0.y, r0.y, cb0[0].w
mul o0.xyz, r0.yyyy, cb0[0].xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.y, r1.w, cb0[23].w
mov o2.xyz, r1.xyzx
mul r0.x, r0.x, r0.y
mov o0.w, r0.x
mov o1.w, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.yz, v2.xyxx, t1.xywz, s1
mad r1.xy, r0.yzyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.y, -r1.x, r1.x, l(1.000000)
mad r0.y, -r1.y, r1.y, r0.y
sqrt r1.z, r0.y
dp3 r2.x, v3.xyzx, r1.xyzx
dp3 r2.y, v4.xyzx, r1.xyzx
dp3 r2.z, v5.xyzx, r1.xyzx
dp3 r0.y, r2.xyzx, r2.xyzx
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, r2.xxyz
mad o1.xyz, r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o2.w, r0.x
mov o3.w, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t2.xyzw, s1
mul o3.x, r0.z, cb0[24].x
mov o3.yz, r0.yyxy
ret 
// Approximately 41 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
