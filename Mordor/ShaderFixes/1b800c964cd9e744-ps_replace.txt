
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float2 k_vTimeLagR : packoffset(c22) = float2(-2.500000e-001,-1.000000e-001);
  float k_fWindBlend : packoffset(c22.z) = float(1.000000e+000);
  float k_fWindPhase : packoffset(c22.w) = float(1.000000e+003);
  float k_fBendability : packoffset(c23) = float(0.000000e+000);
  float4 k_vWindFreqCalm : packoffset(c24) = float4(5.000000e+000,1.000000e+000,5.000000e+000,1.500000e+000);
  float4 k_vWindFreqGust : packoffset(c25) = float4(1.500000e+001,1.000000e+000,3.000000e+001,1.500000e+000);
  float3 k_vInteraction : packoffset(c26) = float3(2.500000e+001,2.500000e+001,7.000000e+000);
  float2 k_vFadeDistance : packoffset(c27) = float2(1.000000e+003,1.000000e+003);
  float k_fEdgeFadePower : packoffset(c27.z) = float(1.000000e+000);
  float k_fNumBillboards : packoffset(c27.w) = float(1.000000e+000);
  float3 k_vParallaxDepth : packoffset(c28) = float3(3.000000e-001,0.000000e+000,0.000000e+000);
  float k_fLightBleed : packoffset(c28.w) = float(1.000000e+000);
  float k_fMaxSpecularPower : packoffset(c29) = float(6.400000e+001);
  int k_fVertexAnimation : packoffset(c29.y) = int(1.401298e-045);
}
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tDiffuseMap : register(t0);
Texture2D<float4> tNormalMap : register(t1);
Texture2D<float4> tSpecularMap : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float3 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD2,
  float3 v3 : TEXCOORD3,
  float3 v4 : TEXCOORD4,
  float4 v5 : COLOR0,
  float3 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  uint v8 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.x = dot(v6.xyz, v6.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyzw = v6.xyxy * r0.xxxx;
  r1.xyzw = sin(v7.xyxy);
  r2.x = 1.000000000e+000 + -v1.y;
  r1.xyzw = r2.xxxx * r1.xyzw;
  r0.xyzw = r1.xyzw * r0.xyzw;
  r1.xz = v7.zz;
  r1.yw = float2(1.000000e+000,1.000000e+000);
  r0.xyzw = r1.xyzw * r0.xyzw;
  r1.x = v7.z;
  r1.y = 0.000000000e+000;
  r1.xy = v1.xy + r1.xy;
  r0.xy = -r0.xy * k_vParallaxDepth.xx + r1.xy;
  r0.zw = r0.zw * k_vParallaxDepth.yy + v1.xy;
  r1.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, r0.xy).xyzw;
  r2.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, r0.zw).xyzw;
  r1.w = max(r1.w, r2.w);
  r1.w = v1.z * r1.w + -3.764705956e-001;
  r1.w = r1.w < 0.000000000e+000;
  if (r1.w != 0) discard;
  r1.w = 3.764705956e-001 >= r2.w;
  r1.xyz = r1.www ? r1.xyz : r2.xyz;
  r0.xy = r1.ww ? r0.xy : r0.zw;
  o1.xyz = v5.xyz * r1.xyz;
  r0.zw = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).yw;
  r1.xyzw = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).xyzw;
  r0.xy = r0.zw * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.z = sqrt(r0.w);
  r2.x = dot(v2.xyz, r0.xyz);
  r2.y = dot(v3.xyz, r0.xyz);
  r2.z = dot(v4.xyz, r0.xyz);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx;
  r0.xyz = v8.xxx ? r0.xyz : -r0.xyz;
  o0.xyz = r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o0.w = 5.058820248e-001;
  o1.w = r1.w;
  o2.x = k_fMaxSpecularPower * r1.z;
  o2.yz = r1.yx;
  o2.w = k_fLightBleed;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float2 k_vTimeLagR;                // Offset:  352 Size:     8 [unused]
//      = 0xbe800000 0xbdcccccd 
//   float k_fWindBlend;                // Offset:  360 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fWindPhase;                // Offset:  364 Size:     4 [unused]
//      = 0x447a0000 
//   float k_fBendability;              // Offset:  368 Size:     4 [unused]
//      = 0x00000000 
//   float4 k_vWindFreqCalm;            // Offset:  384 Size:    16 [unused]
//      = 0x40a00000 0x3f800000 0x40a00000 0x3fc00000 
//   float4 k_vWindFreqGust;            // Offset:  400 Size:    16 [unused]
//      = 0x41700000 0x3f800000 0x41f00000 0x3fc00000 
//   float3 k_vInteraction;             // Offset:  416 Size:    12 [unused]
//      = 0x41c80000 0x41c80000 0x40e00000 
//   float2 k_vFadeDistance;            // Offset:  432 Size:     8 [unused]
//      = 0x447a0000 0x447a0000 
//   float k_fEdgeFadePower;            // Offset:  440 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fNumBillboards;            // Offset:  444 Size:     4 [unused]
//      = 0x3f800000 
//   float3 k_vParallaxDepth;           // Offset:  448 Size:    12
//      = 0x3e99999a 0x00000000 0x00000000 
//   float k_fLightBleed;               // Offset:  460 Size:     4
//      = 0x3f800000 
//   float k_fMaxSpecularPower;         // Offset:  464 Size:     4
//      = 0x42800000 
//   int k_fVertexAnimation;            // Offset:  468 Size:     4 [unused]
//      = 0x00000001 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// tDiffuseMap                       texture  float4          2d    0        1
// tNormalMap                        texture  float4          2d    1        1
// tSpecularMap                      texture  float4          2d    2        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyz 
// SV_IsFrontFace           0   x           8    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[30], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps_sgv v8.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 3
dp3 r0.x, v6.xyzx, v6.xyzx
rsq r0.x, r0.x
mul r0.xyzw, r0.xxxx, v6.xyxy
sincos r1.xyzw, null, v7.xyxy
add r2.x, -v1.y, l(1.000000)
mul r1.xyzw, r1.xyzw, r2.xxxx
mul r0.xyzw, r0.xyzw, r1.xyzw
mov r1.xz, v7.zzzz
mov r1.yw, l(0,1.000000,0,1.000000)
mul r0.xyzw, r0.xyzw, r1.xyzw
mov r1.x, v7.z
mov r1.y, l(0)
add r1.xy, r1.xyxx, v1.xyxx
mad r0.xy, -r0.xyxx, cb0[28].xxxx, r1.xyxx
mad r0.zw, r0.zzzw, cb0[28].yyyy, v1.xxxy
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.zwzz, t0.xyzw, s0
max r1.w, r1.w, r2.w
mad r1.w, v1.z, r1.w, l(-0.376471)
lt r1.w, r1.w, l(0.000000)
discard_nz r1.w
ge r1.w, l(0.376471), r2.w
movc r1.xyz, r1.wwww, r1.xyzx, r2.xyzx
movc r0.xy, r1.wwww, r0.xyxx, r0.zwzz
mul o1.xyz, r1.xyzx, v5.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.zw, r0.xyxx, t1.xzyw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t2.xyzw, s1
mad r0.xy, r0.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.z, r0.w
dp3 r2.x, v2.xyzx, r0.xyzx
dp3 r2.y, v3.xyzx, r0.xyzx
dp3 r2.z, v4.xyzx, r0.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
movc r0.xyz, v8.xxxx, r0.xyzx, -r0.xyzx
mad o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0.505882)
mov o1.w, r1.w
mul o2.x, r1.z, cb0[29].x
mov o2.yz, r1.yyxy
mov o2.w, cb0[28].w
ret 
// Approximately 45 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
