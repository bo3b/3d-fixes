
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float2 k_vTessellation : packoffset(c22) = float2(1.500000e+001,6.300000e+001);
  float2 k_vFade : packoffset(c22.z) = float2(4.000000e+003,4.000000e+003);
  float3 k_vDisplacement : packoffset(c23) = float3(5.000000e+001,5.000000e+001,5.000000e+001);
  float3 k_vOffset : packoffset(c24) = float3(-2.500000e-001,-2.500000e-001,-2.500000e-001);
  float2 k_vMipRange : packoffset(c25) = float2(0.000000e+000,1.000000e+003);
  float k_fScaleLayer0 : packoffset(c25.z) = float(1.000000e+000);
  float k_fScaleLayer1 : packoffset(c25.w) = float(1.000000e+000);
  float k_fScaleLayer2 : packoffset(c26) = float(1.000000e+000);
  float k_fBlendSmoothness0 : packoffset(c26.y) = float(1.000000e-002);
  float k_fBlendSmoothness1 : packoffset(c26.z) = float(1.000000e-002);
  float3 k_vSpecularPower3 : packoffset(c27) = float3(1.600000e+001,1.600000e+001,1.600000e+001);
  float k_fMacroTextureBrightness : packoffset(c27.w) = float(0.000000e+000);
  float k_fMacroTextureContrast : packoffset(c28) = float(1.000000e+000);
  float k_fMacroTextureScale : packoffset(c28.y) = float(1.000000e+000);
  float k_fRenderObjectID : packoffset(c28.z);
  int WorldPacker_Context : packoffset(c28.w) = int(0.000000e+000);
}
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s0);
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tMacroNormalMap : register(t0);
Texture2D<float4> tLayer_0_Specular : register(t1);
Texture2D<float4> tLayer_2_Specular : register(t2);
Texture2D<float4> tLayer_0_Diffuse : register(t3);
Texture2D<float4> tLayer_2_Diffuse : register(t4);
Texture2D<float4> tLayer_0_Normal : register(t5);
Texture2D<float4> tLayer_2_Normal : register(t6);
Texture2D<float4> tMacroDiffuseMap : register(t7);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask;
  r0.xy = k_fScaleLayer2 * v1.xy;
  r0.zw = tLayer_2_Normal.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).yw;
  r1.xy = r0.zw * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.z = -r1.x * r1.x + 1.000000000e+000;
  r0.z = -r1.y * r1.y + r0.z;
  r1.z = sqrt(r0.z);
  r0.zw = k_fScaleLayer0 * v1.xy;
  r2.xy = tLayer_0_Normal.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.zw).yw;
  r2.xy = r2.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r1.w = -r2.x * r2.x + 1.000000000e+000;
  r1.w = -r2.y * r2.y + r1.w;
  r2.z = sqrt(r1.w);
  r1.xyz = -r2.xyz + r1.xyz;
  r3.xyzw = tLayer_0_Specular.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.zw).xyzw;
  r4.xyzw = tLayer_0_Diffuse.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, r0.zw).xyzw;
  r5.x = r3.w;
  r6.xyzw = tLayer_2_Specular.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).xyzw;
  r0.xyzw = tLayer_2_Diffuse.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, r0.xy).xyzw;
  r0.xyzw = r0.xyzw + -r4.xyzw;
  r5.y = r6.w;
  r6.xyz = r6.xyz + -r3.xyz;
  r5.xy = float2(1.000000e-003,1.000000e-003) + r5.xy;
  r1.w = 1.000100017e+000 + -v2.y;
  r2.w = r5.x * r1.w;
  r2.w = r5.y * v2.y + -r2.w;
  r5.x = saturate(k_fBlendSmoothness0);
  r1.w = r5.x * r1.w;
  r1.w = saturate(r2.w / r1.w);
  r1.xyz = r1.www * r1.xyz + r2.xyz;
  r2.xy = tMacroNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).yw;
  r2.xz = r2.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r5.x = -r2.x * r2.x + 1.000000000e+000;
  r5.x = -r2.z * r2.z + r5.x;
  r2.y = sqrt(r5.x);
  r5.xyz = r2.xyz * r1.zzz;
  r2.xz = -r2.xz;
  r7.z = 0.000000000e+000;
  r1.z = dot(r2.xy, r2.xy);
  r1.z = rsqrt(r1.z);
  r7.xy = r2.yx * r1.zz;
  r5.xyz = r1.xxx * r7.xyz + r5.xyz;
  r1.x = dot(r2.yz, r2.yz);
  r1.x = rsqrt(r1.x);
  r2.w = 0.000000000e+000;
  r2.xyz = r2.wzy * r1.xxx;
  r1.xyz = r1.yyy * r2.xyz + r5.xyz;
  r2.x = dot(r1.xyz, r1.xyz);
  r2.x = rsqrt(r2.x);
  r1.xyz = r2.xxx * r1.xyz;
  o0.xyz = r1.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o0.w = k_fRenderObjectID;
  r0.xyzw = r1.wwww * r0.xyzw + r4.xyzw;
  r1.xy = k_fMacroTextureScale * v1.xy;
  r1.xyz = tMacroDiffuseMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r1.xy).xyz;
  r1.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r1.xyz;
  r1.xyz = r1.xyz * k_fMacroTextureContrast + k_fMacroTextureBrightness;
  o1.xyz = r1.xyz + r0.xyz;
  o1.w = r0.w;
  r3.w = k_vSpecularPower3.x;
  r6.w = k_vSpecularPower3.z + -r3.w;
  r0.xyzw = r1.wwww * r6.xyzw + r3.xyzw;
  o2.x = r0.z * r0.w;
  o2.yz = r0.yx;
  o2.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float2 k_vTessellation;            // Offset:  352 Size:     8 [unused]
//      = 0x41700000 0x427c0000 
//   float2 k_vFade;                    // Offset:  360 Size:     8 [unused]
//      = 0x457a0000 0x457a0000 
//   float3 k_vDisplacement;            // Offset:  368 Size:    12 [unused]
//      = 0x42480000 0x42480000 0x42480000 
//   float3 k_vOffset;                  // Offset:  384 Size:    12 [unused]
//      = 0xbe800000 0xbe800000 0xbe800000 
//   float2 k_vMipRange;                // Offset:  400 Size:     8 [unused]
//      = 0x00000000 0x447a0000 
//   float k_fScaleLayer0;              // Offset:  408 Size:     4
//      = 0x3f800000 
//   float k_fScaleLayer1;              // Offset:  412 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fScaleLayer2;              // Offset:  416 Size:     4
//      = 0x3f800000 
//   float k_fBlendSmoothness0;         // Offset:  420 Size:     4
//      = 0x3c23d70a 
//   float k_fBlendSmoothness1;         // Offset:  424 Size:     4 [unused]
//      = 0x3c23d70a 
//   float3 k_vSpecularPower3;          // Offset:  432 Size:    12
//      = 0x41800000 0x41800000 0x41800000 
//   float k_fMacroTextureBrightness;   // Offset:  444 Size:     4
//      = 0x00000000 
//   float k_fMacroTextureContrast;     // Offset:  448 Size:     4
//      = 0x3f800000 
//   float k_fMacroTextureScale;        // Offset:  452 Size:     4
//      = 0x3f800000 
//   float k_fRenderObjectID;           // Offset:  456 Size:     4
//   int WorldPacker_Context;           // Offset:  460 Size:     4 [unused]
//      = 0x00000000 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// tMacroNormalMap                   texture  float4          2d    0        1
// tLayer_0_Specular                 texture  float4          2d    1        1
// tLayer_2_Specular                 texture  float4          2d    2        1
// tLayer_0_Diffuse                  texture  float4          2d    3        1
// tLayer_2_Diffuse                  texture  float4          2d    4        1
// tLayer_0_Normal                   texture  float4          2d    5        1
// tLayer_2_Normal                   texture  float4          2d    6        1
// tMacroDiffuseMap                  texture  float4          2d    7        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float    y  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[29], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.y
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 8
mul r0.xy, v1.xyxx, cb0[26].xxxx
sample_indexable(texture2d)(float,float,float,float) r0.zw, r0.xyxx, t6.xzyw, s0
mad r1.xy, r0.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.z, -r1.x, r1.x, l(1.000000)
mad r0.z, -r1.y, r1.y, r0.z
sqrt r1.z, r0.z
mul r0.zw, v1.xxxy, cb0[25].zzzz
sample_indexable(texture2d)(float,float,float,float) r2.xy, r0.zwzz, t5.ywxz, s0
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r1.w, -r2.x, r2.x, l(1.000000)
mad r1.w, -r2.y, r2.y, r1.w
sqrt r2.z, r1.w
add r1.xyz, r1.xyzx, -r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.zwzz, t1.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.zwzz, t3.xyzw, s1
mov r5.x, r3.w
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r0.xyxx, t2.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t4.xyzw, s1
add r0.xyzw, -r4.xyzw, r0.xyzw
mov r5.y, r6.w
add r6.xyz, -r3.xyzx, r6.xyzx
add r5.xy, r5.xyxx, l(0.001000, 0.001000, 0.000000, 0.000000)
add r1.w, -v2.y, l(1.000100)
mul r2.w, r1.w, r5.x
mad r2.w, r5.y, v2.y, -r2.w
mov_sat r5.x, cb0[26].y
mul r1.w, r1.w, r5.x
div_sat r1.w, r2.w, r1.w
mad r1.xyz, r1.wwww, r1.xyzx, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xy, v1.xyxx, t0.ywxz, s0
mad r2.xz, r2.xxyx, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
mad r5.x, -r2.x, r2.x, l(1.000000)
mad r5.x, -r2.z, r2.z, r5.x
sqrt r2.y, r5.x
mul r5.xyz, r1.zzzz, r2.xyzx
mov r2.xz, -r2.xxzx
mov r7.z, l(0)
dp2 r1.z, r2.xyxx, r2.xyxx
rsq r1.z, r1.z
mul r7.xy, r1.zzzz, r2.yxyy
mad r5.xyz, r1.xxxx, r7.xyzx, r5.xyzx
dp2 r1.x, r2.yzyy, r2.yzyy
rsq r1.x, r1.x
mov r2.w, l(0)
mul r2.xyz, r1.xxxx, r2.wzyw
mad r1.xyz, r1.yyyy, r2.xyzx, r5.xyzx
dp3 r2.x, r1.xyzx, r1.xyzx
rsq r2.x, r2.x
mul r1.xyz, r1.xyzx, r2.xxxx
mad o0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, cb0[28].z
mad r0.xyzw, r1.wwww, r0.xyzw, r4.xyzw
mul r1.xy, v1.xyxx, cb0[28].yyyy
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t7.xyzw, s0
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r1.xyz, r1.xyzx, cb0[28].xxxx, cb0[27].wwww
add o1.xyz, r0.xyzx, r1.xyzx
mov o1.w, r0.w
mov r3.w, cb0[27].x
add r6.w, -r3.w, cb0[27].z
mad r0.xyzw, r1.wwww, r6.xyzw, r3.xyzw
mul o2.x, r0.w, r0.z
mov o2.yz, r0.yyxy
mov o2.w, l(0)
ret 
// Approximately 65 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
