
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float2 m_Position;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float2 m_Position;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c2);

  bool bHalfPrecision : packoffset(c5) = bool(0.000000e+000);
  float k_fDepthScale : packoffset(c5.y) = float(5.773500e-001);
  float k_fMaxDistanceInner : packoffset(c5.z) = float(3.000000e+001);
  float k_fMaxDistanceOuter : packoffset(c5.w) = float(6.000000e+001);
  float k_fOcclusionWeight : packoffset(c6) = float(1.000000e+000);
  float k_fRadiusInner : packoffset(c6.y) = float(1.500000e+001);
  float k_fRadiusMax : packoffset(c6.z) = float(7.000000e-002);
  float k_fRadiusOuter : packoffset(c6.w) = float(3.000000e+001);
  float2 k_vScene_ScreenRes : packoffset(c7);
  float2 k_vScene_TexCoordScale : packoffset(c7.z);
}
SamplerState sDownscaledDepthMapSampler_s : register(s0);
SamplerState sSSAORandomVectorSampler_s : register(s1);
Texture2D<float4> tDownscaledDepthMap : register(t0);
Texture2D<float4> tSSAORandomVector : register(t1);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  float4 x0[6];
  float4 x1[2];
  float4 x2[2];
  float4 x3[2];
  float4 x4[2];
  r0.xy = tSSAORandomVector.Sample(sSSAORandomVectorSampler_s, v1.zw).xy;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.z = dot(r0.xy, r0.xy);
  r0.z = rsqrt(r0.z);
  r0.xy = r0.xy * r0.zz;
  r0.w = k_vScene_ScreenRes.y / k_vScene_ScreenRes.x;
  x0[0].xyzw = float4(1.388890e-001,2.405630e-001,5.204834e-001,8.513900e-002);
  x0[1].xyzw = float4(2.027780e-001,-3.512210e-001,5.470037e-001,8.416000e-002);
  x0[2].xyzw = float4(5.333330e-001,1.000000e-006,5.910829e-001,7.784700e-002);
  x0[3].xyzw = float4(5.725400e-001,-3.305550e-001,6.664107e-001,7.866400e-002);
  x0[4].xyzw = float4(6.831980e-001,3.944450e-001,8.136227e-001,7.700200e-002);
  x0[5].xyzw = float4(0.000000e+000,9.166670e-001,1.251087e+000,6.784200e-002);
  r1.xy = float2(1.000000e+000,1.000000e+000) / bHalfPrecision;
  x1[0].x = r1.x;
  x1[1].x = r1.y;
  x2[0].x = k_fRadiusInner;
  x2[1].x = k_fRadiusOuter;
  r1.xy = float2(1.000000e+000,1.000000e+000) / k_fRadiusInner;
  x3[0].x = r1.x;
  x3[1].x = r1.y;
  r1.x = tDownscaledDepthMap.Sample(sDownscaledDepthMapSampler_s, v1.xy).x;
  x4[0].x = 2.934649959e-002;
  x4[1].x = 2.934649959e-002;
  r1.y = bHalfPrecision * r1.x;
  r0.z = -r0.x;
  r1.z = 0.000000000e+000;
  while (true) {
  r1.w = (int)r1.z >= (int)2;
  if (r1.w != 0) break;
  r1.w = x2[r1.z+0].x;
  r1.w = r1.w / r1.y;
  r1.w = min(r1.w, k_fRadiusMax);
  r2.x = x3[r1.z+0].x;
  r2.y = x1[r1.z+0].x;
  r2.z = 0.000000000e+000;
  while (true) {
  r2.w = (int)r2.z >= (int)6;
  if (r2.w != 0) break;
  r3.xy = x0[r2.z+0].xy;
  r2.w = x0[r2.z+0].z;
  r3.z = x0[r2.z+0].w;
  r3.w = dot(r0.yx, r3.xy);
  r3.y = dot(r0.zy, r3.xy);
  r3.x = r3.w * r0.w;
  r2.w = r2.w * r2.x;
  r4.xy = r3.xy * r1.ww + v1.xy;
  r4.x = tDownscaledDepthMap.Sample(sDownscaledDepthMapSampler_s, r4.xy).x;
  r3.xy = -r3.xy * r1.ww + v1.xy;
  r4.y = tDownscaledDepthMap.Sample(sDownscaledDepthMapSampler_s, r3.xy).x;
  r3.xy = -r4.xy + r1.xx;
  r4.xy = saturate(r3.xy * r2.ww + float2(5.000000e-001,5.000000e-001));
  r3.xy = saturate(-r3.xy * r2.yy + float2(1.000000e+000,1.000000e+000));
  r3.xy = r3.xy + r3.xy;
  r3.xy = min(r3.xy, float2(1.000000e+000,1.000000e+000));
  r4.zw = float2(5.000000e-001,5.000000e-001) + -r4.yx;
  r4.zw = r3.yx * r4.zw + float2(5.000000e-001,5.000000e-001);
  r4.xy = r4.xy + -r4.zw;
  r3.xy = r3.xy * r4.xy + r4.zw;
  r2.w = x4[r1.z+0].x;
  r2.w = r3.x * r3.z + r2.w;
  x4[r1.z+0].x = r2.w;
  r2.w = r3.y * r3.z + r2.w;
  x4[r1.z+0].x = r2.w;
  r2.z = (int)r2.z + 1;
  }
  r1.w = x4[r1.z+0].x;
  r1.w = -5.000000000e-001 + r1.w;
  r1.w = saturate(r1.w + r1.w);
  x4[r1.z+0].x = r1.w;
  r1.z = (int)r1.z + 1;
  }
  r0.x = x4[0].x;
  r0.y = x4[1].x;
  r0.x = saturate(r0.x + r0.y);
  r0.x = saturate(k_fOcclusionWeight * r0.x);
  o0.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r0.xxx;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float2 m_Position;             // Offset:   16
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:     8 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float2 m_Position;             // Offset:   32
//       float4 m_Weights;              // Offset:   48
//       float4 m_Indices;              // Offset:   64
//
//   } MaterialVertexDef_Skeletal;      // Offset:   32 Size:    48 [unused]
//   bool bHalfPrecision;               // Offset:   80 Size:     4 [unused]
//      = 0x00000000 
//   float k_fDepthScale;               // Offset:   84 Size:     4
//      = 0x3f13cd36 
//   float k_fMaxDistanceInner;         // Offset:   88 Size:     4
//      = 0x41f00000 
//   float k_fMaxDistanceOuter;         // Offset:   92 Size:     4
//      = 0x42700000 
//   float k_fOcclusionWeight;          // Offset:   96 Size:     4
//      = 0x3f800000 
//   float k_fRadiusInner;              // Offset:  100 Size:     4
//      = 0x41700000 
//   float k_fRadiusMax;                // Offset:  104 Size:     4
//      = 0x3d8f5c29 
//   float k_fRadiusOuter;              // Offset:  108 Size:     4
//      = 0x41f00000 
//   float2 k_vScene_ScreenRes;         // Offset:  112 Size:     8
//   float2 k_vScene_TexCoordScale;     // Offset:  120 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sDownscaledDepthMapSampler        sampler      NA          NA    0        1
// sSSAORandomVectorSampler          sampler      NA          NA    1        1
// tDownscaledDepthMap               texture  float4          2d    0        1
// tSSAORandomVector                 texture  float4          2d    1        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyzw
dcl_output o0.xyzw
dcl_temps 5
dcl_indexableTemp x0[6], 4
dcl_indexableTemp x1[2], 4
dcl_indexableTemp x2[2], 4
dcl_indexableTemp x3[2], 4
dcl_indexableTemp x4[2], 4
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.zwzz, t1.xyzw, s1
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.z, r0.xyxx, r0.xyxx
rsq r0.z, r0.z
mul r0.xy, r0.zzzz, r0.xyxx
div r0.w, cb0[7].y, cb0[7].x
mov x0[0].xyzw, l(0.138889,0.240563,0.520483,0.085139)
mov x0[1].xyzw, l(0.202778,-0.351221,0.547004,0.084160)
mov x0[2].xyzw, l(0.533333,0.000001,0.591083,0.077847)
mov x0[3].xyzw, l(0.572540,-0.330555,0.666411,0.078664)
mov x0[4].xyzw, l(0.683198,0.394445,0.813623,0.077002)
mov x0[5].xyzw, l(0,0.916667,1.251087,0.067842)
div r1.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[5].zwzz
mov x1[0].x, r1.x
mov x1[1].x, r1.y
mov x2[0].x, cb0[6].y
mov x2[1].x, cb0[6].w
div r1.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[6].ywyy
mov x3[0].x, r1.x
mov x3[1].x, r1.y
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t0.xyzw, s0
mov x4[0].x, l(0.029346)
mov x4[1].x, l(0.029346)
mul r1.y, r1.x, cb0[5].y
mov r0.z, -r0.x
mov r1.z, l(0)
loop 
  ige r1.w, r1.z, l(2)
  breakc_nz r1.w
  mov r1.w, x2[r1.z + 0].x
  div r1.w, r1.w, r1.y
  min r1.w, r1.w, cb0[6].z
  mov r2.x, x3[r1.z + 0].x
  mov r2.y, x1[r1.z + 0].x
  mov r2.z, l(0)
  loop 
    ige r2.w, r2.z, l(6)
    breakc_nz r2.w
    mov r3.xy, x0[r2.z + 0].xyxx
    mov r2.w, x0[r2.z + 0].z
    mov r3.z, x0[r2.z + 0].w
    dp2 r3.w, r0.yxyy, r3.xyxx
    dp2 r3.y, r0.zyzz, r3.xyxx
    mul r3.x, r0.w, r3.w
    mul r2.w, r2.x, r2.w
    mad r4.xy, r3.xyxx, r1.wwww, v1.xyxx
    sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t0.xyzw, s0
    mad r3.xy, -r3.xyxx, r1.wwww, v1.xyxx
    sample_indexable(texture2d)(float,float,float,float) r4.y, r3.xyxx, t0.yxzw, s0
    add r3.xy, r1.xxxx, -r4.xyxx
    mad_sat r4.xy, r3.xyxx, r2.wwww, l(0.500000, 0.500000, 0.000000, 0.000000)
    mad_sat r3.xy, -r3.xyxx, r2.yyyy, l(1.000000, 1.000000, 0.000000, 0.000000)
    add r3.xy, r3.xyxx, r3.xyxx
    min r3.xy, r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    add r4.zw, -r4.yyyx, l(0.000000, 0.000000, 0.500000, 0.500000)
    mad r4.zw, r3.yyyx, r4.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
    add r4.xy, -r4.zwzz, r4.xyxx
    mad r3.xy, r3.xyxx, r4.xyxx, r4.zwzz
    mov r2.w, x4[r1.z + 0].x
    mad r2.w, r3.x, r3.z, r2.w
    mov x4[r1.z + 0].x, r2.w
    mad r2.w, r3.y, r3.z, r2.w
    mov x4[r1.z + 0].x, r2.w
    iadd r2.z, r2.z, l(1)
  endloop 
  mov r1.w, x4[r1.z + 0].x
  add r1.w, r1.w, l(-0.500000)
  add_sat r1.w, r1.w, r1.w
  mov x4[r1.z + 0].x, r1.w
  iadd r1.z, r1.z, l(1)
endloop 
mov r0.x, x4[0].x
mov r0.y, x4[1].x
add_sat r0.x, r0.y, r0.x
mul_sat r0.x, r0.x, cb0[6].x
add o0.xyz, -r0.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 78 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
