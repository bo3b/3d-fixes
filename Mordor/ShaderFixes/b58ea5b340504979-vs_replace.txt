
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float k_fDepthAdjust : packoffset(c22) = float(1.000500e+000);
  float4 k_vObjectLightColor : packoffset(c23);
  int k_fSortBias : packoffset(c24) = int(-1.0e+000);
  // int k_fSortBias : packoffset(c24) = int(-1.#QNAN0e+000);
  float3 k_cObjColor : packoffset(c24.y) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fRimStart : packoffset(c25) = float(0.000000e+000);
  float k_fFalloffPower : packoffset(c25.y) = float(2.000000e+000);
  float k_fFalloffAmt : packoffset(c25.z) = float(1.000000e+000);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5,
  out float4 o7 : COLOR0)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToClip._m20_m21_m22_m23, r0.xyzw);
  r1.z = k_fDepthAdjust * r1.x;
  r1.x = dot(k_mObjectToClip._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(k_mObjectToClip._m10_m11_m12_m13, r0.xyzw);
  r1.w = dot(k_mObjectToClip._m30_m31_m32_m33, r0.xyzw);


//Mike_ar69 - Stereo Shift
float4 r23;
float4 stereo = StereoParams.Load(0);
r23.xyzw = r1.xyzw;
r1.x += stereo.x * (r1.w - stereo.y);
o0.xyzw = r23.xyzw;


  o2.zw = r1.zw;
  r0.xy = k_vScene_TexCoordScale.xy * r1.ww;
  o1.xy = v2.xy;
  r0.zw = k_vScene_TexCoordScale.xy * float2(1.000000e+000,-1.000000e+000);
  o2.xy = r1.xy * r0.zw + r0.xy;
  r0.xyz = k_vObjectSpaceEyePos.xyz + -v0.xyz;
  o3.x = dot(k_mObjectToWorld._m00_m01_m02, r0.xyz);
  o3.y = dot(k_mObjectToWorld._m10_m11_m12, r0.xyz);
  o3.z = dot(k_mObjectToWorld._m20_m21_m22, r0.xyz);
  o4.x = dot(k_mObjectToWorld._m00_m01_m02, v3.xyz);
  o4.y = dot(k_mObjectToWorld._m00_m01_m02, v4.xyz);
  o4.z = dot(k_mObjectToWorld._m00_m01_m02, v1.xyz);
  o5.x = dot(k_mObjectToWorld._m10_m11_m12, v3.xyz);
  o5.y = dot(k_mObjectToWorld._m10_m11_m12, v4.xyz);
  o5.z = dot(k_mObjectToWorld._m10_m11_m12, v1.xyz);
  o6.x = dot(k_mObjectToWorld._m20_m21_m22, v3.xyz);
  o6.y = dot(k_mObjectToWorld._m20_m21_m22, v4.xyz);
  o6.z = dot(k_mObjectToWorld._m20_m21_m22, v1.xyz);
  r0.xyzw = k_vObjectColor.xyzw * v5.xyzw;
  o7.xyz = k_vObjectLightColor.xyz * r0.xyz;
  o7.w = r0.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48
//   float4 k_vObjectColor;             // Offset:  160 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float k_fDepthAdjust;              // Offset:  352 Size:     4
//      = 0x3f801062 
//   float4 k_vObjectLightColor;        // Offset:  368 Size:    16
//   int k_fSortBias;                   // Offset:  384 Size:     4 [unused]
//      = 0xffffff9c 
//   float3 k_cObjColor;                // Offset:  388 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float k_fRimStart;                 // Offset:  400 Size:     4 [unused]
//      = 0x00000000 
//   float k_fFalloffPower;             // Offset:  404 Size:     4 [unused]
//      = 0x40000000 
//   float k_fFalloffAmt;               // Offset:  408 Size:     4 [unused]
//      = 0x3f800000 
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[24], immediateIndexed
dcl_constantbuffer cb12[25], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_temps 2
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[2].xyzw, r0.xyzw
mul r1.z, r1.x, cb0[22].x
dp4 r1.x, cb0[0].xyzw, r0.xyzw
dp4 r1.y, cb0[1].xyzw, r0.xyzw
dp4 r1.w, cb0[3].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw
mov o2.zw, r1.zzzw
mul r0.xy, r1.wwww, cb12[24].xyxx
mov o1.xy, v2.xyxx
mul r0.zw, l(0.000000, 0.000000, 1.000000, -1.000000), cb12[24].xxxy
mad o2.xy, r1.xyxx, r0.zwzz, r0.xyxx
add r0.xyz, -v0.xyzx, cb0[11].xyzx
dp3 o3.x, cb0[7].xyzx, r0.xyzx
dp3 o3.y, cb0[8].xyzx, r0.xyzx
dp3 o3.z, cb0[9].xyzx, r0.xyzx
dp3 o4.x, cb0[7].xyzx, v3.xyzx
dp3 o4.y, cb0[7].xyzx, v4.xyzx
dp3 o4.z, cb0[7].xyzx, v1.xyzx
dp3 o5.x, cb0[8].xyzx, v3.xyzx
dp3 o5.y, cb0[8].xyzx, v4.xyzx
dp3 o5.z, cb0[8].xyzx, v1.xyzx
dp3 o6.x, cb0[9].xyzx, v3.xyzx
dp3 o6.y, cb0[9].xyzx, v4.xyzx
dp3 o6.z, cb0[9].xyzx, v1.xyzx
mul r0.xyzw, v5.xyzw, cb0[10].xyzw
mul o7.xyz, r0.xyzx, cb0[23].xyzx
mov o7.w, r0.w
ret 
// Approximately 30 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
