//The white outline on characters when press "V"
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c7);

  int k_fSortBias : packoffset(c15) = int(1.401298e-043);
  float3 k_cWraithColor : packoffset(c15.y) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fMaxWraithDist : packoffset(c16) = float(2.000000e+003);
  float k_fObjIDOffset : packoffset(c16.y) = float(0.000000e+000);
  float k_fOpacity : packoffset(c16.z) = float(1.000000e+000);
  float k_fUseWraithColor : packoffset(c16.w) = float(0.000000e+000);
  row_major float4x4 k_mObjectToWorld_3DSMAX_ : packoffset(c17);
  float k_fRenderObjectID : packoffset(c21);
  row_major float4x4 k_mObjectToClip : packoffset(c22);
  row_major float3x4 k_mObjectToWorld : packoffset(c26);
  float4 k_vObjectColor : packoffset(c29);
  float3 k_vObjectSpaceEyePos : packoffset(c30);
  float2 k_vScene_TexCoordScale : packoffset(c31);
}

cbuffer ModelTransforms : register(b1)
{
  float4 k_mModelObjectNodes[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  float4 v6 : BLENDWEIGHT0,
  float4 v7 : BLENDINDICES0,
  out float4 o0 : SV_POSITION0,
  out float3 o1 : TEXCOORD0,
  out float2 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5,
  out float3 o7 : TEXCOORD6,
  out float4 o8 : COLOR0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask;
  r0.xyz = float3(2.550020e+002,2.550020e+002,2.550020e+002) * v7.zyx;
  r0.xyz = (int3)r0.xyz;
  r1.xyz = (uint3)r0.xyz << int3(1,1,1);
  r0.xyz = mad((int3)r0.xyz, int3(2,2,2), int3(1,1,1));
  r2.xyz = v6.xyz;
  r3.w = k_mModelObjectNodes[r1.x].y * r2.x;
  r4.w = k_mModelObjectNodes[r1.y].y * r2.y;
  r0.w = k_mModelObjectNodes[r0.x].w * k_mModelObjectNodes[r0.x].x;
  r1.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + -r0.w;
  r0.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + r0.w;
  r0.w = v6.x * r0.w;
  r1.w = v6.x * r1.w;
  r2.w = 2.000000000e+000;
  r3.z = r2.w * r1.w;
  r1.w = k_mModelObjectNodes[r0.y].w * k_mModelObjectNodes[r0.y].x;
  r5.x = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + r1.w;
  r1.w = v6.y * r1.w;
  r6.y = r1.w * r2.w;
  r1.w = v6.y * r5.x;
  r4.z = r1.w * r2.w;
  r5.xyz = k_mModelObjectNodes[r0.x].wxw * k_mModelObjectNodes[r0.x].zzy;
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + r5.x;
  r1.w = v6.x * r1.w;
  r3.x = r1.w * r2.w;
  r7.xyz = k_mModelObjectNodes[r0.x].xyz * k_mModelObjectNodes[r0.x].xyz;
  r7.xyz = r7.yxx + r7.zzy;
  r7.xyz = -r7.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r3.y = r7.y * r2.x;
  r8.xyz = k_mModelObjectNodes[r0.y].wxw * k_mModelObjectNodes[r0.y].zzy;
  r1.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + r8.x;
  r1.w = v6.y * r1.w;
  r4.x = r1.w * r2.w;
  r9.xyz = k_mModelObjectNodes[r0.y].xyz * k_mModelObjectNodes[r0.y].xyz;
  r9.xyz = r9.yxx + r9.zzy;
  r9.xyz = -r9.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r4.y = r9.y * r2.y;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.w = k_mModelObjectNodes[r1.z].y * r2.z;
  r1.w = k_mModelObjectNodes[r0.z].w * k_mModelObjectNodes[r0.z].x;
  r5.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + r1.w;
  r1.w = v6.z * r1.w;
  r10.y = r1.w * r2.w;
  r1.w = v6.z * r5.w;
  r4.z = r1.w * r2.w;
  r11.xyz = k_mModelObjectNodes[r0.z].wxw * k_mModelObjectNodes[r0.z].zzy;
  r1.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + r11.x;
  r1.w = v6.z * r1.w;
  r4.x = r1.w * r2.w;
  r12.xyz = k_mModelObjectNodes[r0.z].xyz * k_mModelObjectNodes[r0.z].xyz;
  r12.xyz = r12.yxx + r12.zzy;
  r12.xyz = -r12.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r4.y = r12.y * r2.z;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r4.xyz = v0.xyz;
  r4.w = 1.000000000e+000;
  r13.y = dot(r3.xyzw, r4.xyzw);
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].z + -r5.z;
  r1.w = v6.x * r1.w;
  r14.x = r1.w * r2.w;
  r14.y = r2.w * r0.w;
  r0.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].z + -r8.z;
  r0.w = v6.y * r0.w;
  r6.x = r0.w * r2.w;
  r14.z = r7.z * r2.x;
  r7.x = r7.x * r2.x;
  r6.z = r9.z * r2.y;
  r9.x = r9.x * r2.y;
  r14.w = k_mModelObjectNodes[r1.x].z * r2.x;
  r6.w = k_mModelObjectNodes[r1.y].z * r2.y;
  r6.xyzw = r14.xyzw + r6.xyzw;
  r0.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].z + -r11.z;
  r0.w = v6.z * r0.w;
  r10.x = r0.w * r2.w;
  r10.z = r12.z * r2.z;
  r12.x = r12.x * r2.z;
  r10.w = k_mModelObjectNodes[r1.z].z * r2.z;
  r6.xyzw = r10.xyzw + r6.xyzw;
  r13.z = dot(r6.xyzw, r4.xyzw);
  r7.w = k_mModelObjectNodes[r1.x].x * r2.x;
  r9.w = k_mModelObjectNodes[r1.y].x * r2.y;
  r12.w = k_mModelObjectNodes[r1.z].x * r2.z;
  r0.x = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + -r5.x;
  r0.w = r5.y + r5.z;
  r0.xw = v6.xx * r0.xw;
  r7.yz = r0.xw * r2.ww;
  r0.x = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + -r8.x;
  r0.y = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + -r11.x;
  r0.z = r11.y + r11.z;
  r0.xyz = v6.yzz * r0.xyz;
  r12.yz = r0.yz * r2.ww;
  r0.y = r8.y + r8.z;
  r0.y = v6.y * r0.y;
  r9.yz = r0.xy * r2.ww;
  r0.xyzw = r9.xyzw + r7.xyzw;
  r0.xyzw = r0.xyzw + r12.xyzw;
  r13.x = dot(r0.xyzw, r4.xyzw);
  r13.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToClip._m00_m01_m02_m03, r13.xyzw);
  r1.y = dot(k_mObjectToClip._m10_m11_m12_m13, r13.xyzw);
  r1.w = dot(k_mObjectToClip._m30_m31_m32_m33, r13.xyzw);
  r0.w = dot(k_mObjectToClip._m20_m21_m22_m23, r13.xyzw);
  r2.xyz = k_vObjectSpaceEyePos.xyz + -r13.xyz;
  
float4 stereo = StereoParams.Load(0);
float4 r23, r20;
r23.xyzw = r1.xyzw;
r1.x += stereo.x * (r1.w - stereo.y); 
o0.xyzw = r23.xyzw;   
  
  // o0.xyw = r1.xyw;
  r1.z = 2.000000000e+001 * r0.w;
  o3.z = r0.w;
  o0.z = min(r1.w, r1.z);
  r4.y = dot(r3.xyz, v1.xyz);
  r4.z = dot(r6.xyz, v1.xyz);
  r4.x = dot(r0.xyz, v1.xyz);
  o1.xyz = r4.xyz;
  o2.xy = v2.xy;
  r5.xy = k_vScene_TexCoordScale.xy * r1.ww;
  o3.w = r1.w;
  r1.zw = float2(1.000000e+000,-1.000000e+000) * k_vScene_TexCoordScale.xy;
  o3.xy = r1.xy * r1.zw + r5.xy;
  o4.x = dot(k_mObjectToWorld._m00_m01_m02, r2.xyz);
  o4.y = dot(k_mObjectToWorld._m10_m11_m12, r2.xyz);
  o4.z = dot(k_mObjectToWorld._m20_m21_m22, r2.xyz);
  r1.y = dot(r3.xyz, v3.xyz);
  r2.y = dot(r3.xyz, v4.xyz);
  r1.z = dot(r6.xyz, v3.xyz);
  r2.z = dot(r6.xyz, v4.xyz);
  r1.x = dot(r0.xyz, v3.xyz);
  r2.x = dot(r0.xyz, v4.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  o5.x = dot(k_mObjectToWorld._m00_m01_m02, r0.xyz);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r2.xyz * r0.www;
  o5.y = dot(k_mObjectToWorld._m00_m01_m02, r1.xyz);
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r4.xyz * r0.www;
  o5.z = dot(k_mObjectToWorld._m00_m01_m02, r2.xyz);
  o6.x = dot(k_mObjectToWorld._m10_m11_m12, r0.xyz);
  o7.x = dot(k_mObjectToWorld._m20_m21_m22, r0.xyz);
  o6.y = dot(k_mObjectToWorld._m10_m11_m12, r1.xyz);
  o7.y = dot(k_mObjectToWorld._m20_m21_m22, r1.xyz);
  o6.z = dot(k_mObjectToWorld._m10_m11_m12, r2.xyz);
  o7.z = dot(k_mObjectToWorld._m20_m21_m22, r2.xyz);
  o8.xyzw = k_vObjectColor.xyzw * v5.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//       float3 m_Normal;               // Offset:   32
//       float2 m_TexCoord;             // Offset:   48
//       float3 m_Tangent;              // Offset:   64
//       float3 m_Binormal;             // Offset:   80
//       float4 m_Color;                // Offset:   96
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    96 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:  112
//       float3 m_Normal;               // Offset:  128
//       float2 m_TexCoord;             // Offset:  144
//       float3 m_Tangent;              // Offset:  160
//       float3 m_Binormal;             // Offset:  176
//       float4 m_Color;                // Offset:  192
//       float4 m_Weights;              // Offset:  208
//       float4 m_Indices;              // Offset:  224
//
//   } MaterialVertexDef_Skeletal;      // Offset:  112 Size:   128 [unused]
//   int k_fSortBias;                   // Offset:  240 Size:     4 [unused]
//      = 0x00000064 
//   float3 k_cWraithColor;             // Offset:  244 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float k_fMaxWraithDist;            // Offset:  256 Size:     4 [unused]
//      = 0x44fa0000 
//   float k_fObjIDOffset;              // Offset:  260 Size:     4 [unused]
//      = 0x00000000 
//   float k_fOpacity;                  // Offset:  264 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fUseWraithColor;           // Offset:  268 Size:     4 [unused]
//      = 0x00000000 
//   row_major float4x4 k_mObjectToWorld_3DSMAX_;// Offset:  272 Size:    64 [unused]
//   float k_fRenderObjectID;           // Offset:  336 Size:     4 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  352 Size:    64
//   row_major float3x4 k_mObjectToWorld;// Offset:  416 Size:    48
//   float4 k_vObjectColor;             // Offset:  464 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  480 Size:    12
//   float2 k_vScene_TexCoordScale;     // Offset:  496 Size:     8
//
// }
//
// cbuffer ModelTransforms
// {
//
//   float4 k_mModelObjectNodes[64];    // Offset:    0 Size:  1024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// ModelTransforms                   cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
// BLENDWEIGHT              0   xyzw        6     NONE   float   xyz 
// BLENDINDICES             0   xyzw        7     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[64], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_input v6.xyz
dcl_input v7.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_output o8.xyzw
dcl_temps 15
mul r0.xyz, v7.zyxz, l(255.001953, 255.001953, 255.001953, 0.000000)
ftoi r0.xyz, r0.xyzx
ishl r1.xyz, r0.xyzx, l(1, 1, 1, 0)
imad r0.xyz, r0.xyzx, l(2, 2, 2, 0), l(1, 1, 1, 0)
mov r2.xyz, v6.xyzx
mul r3.w, r2.x, cb1[r1.x + 0].y
mul r4.w, r2.y, cb1[r1.y + 0].y
mul r0.w, cb1[r0.x + 0].x, cb1[r0.x + 0].w
mad r1.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, -r0.w
mad r0.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, r0.w
mul r0.w, r0.w, v6.x
mul r1.w, r1.w, v6.x
mov r2.w, l(2.000000)
mul r3.z, r1.w, r2.w
mul r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].w
mad r5.x, cb1[r0.y + 0].y, cb1[r0.y + 0].z, -r1.w
mad r1.w, cb1[r0.y + 0].y, cb1[r0.y + 0].z, r1.w
mul r1.w, r1.w, v6.y
mul r6.y, r2.w, r1.w
mul r1.w, r5.x, v6.y
mul r4.z, r2.w, r1.w
mul r5.xyz, cb1[r0.x + 0].zzyz, cb1[r0.x + 0].wxww
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].y, r5.x
mul r1.w, r1.w, v6.x
mul r3.x, r2.w, r1.w
mul r7.xyz, cb1[r0.x + 0].xyzx, cb1[r0.x + 0].xyzx
add r7.xyz, r7.zzyz, r7.yxxy
mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.y, r2.x, r7.y
mul r8.xyz, cb1[r0.y + 0].zzyz, cb1[r0.y + 0].wxww
mad r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].y, r8.x
mul r1.w, r1.w, v6.y
mul r4.x, r2.w, r1.w
mul r9.xyz, cb1[r0.y + 0].xyzx, cb1[r0.y + 0].xyzx
add r9.xyz, r9.zzyz, r9.yxxy
mad r9.xyz, -r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.y, r2.y, r9.y
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.w, r2.z, cb1[r1.z + 0].y
mul r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].w
mad r5.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, -r1.w
mad r1.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, r1.w
mul r1.w, r1.w, v6.z
mul r10.y, r2.w, r1.w
mul r1.w, r5.w, v6.z
mul r4.z, r2.w, r1.w
mul r11.xyz, cb1[r0.z + 0].zzyz, cb1[r0.z + 0].wxww
mad r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].y, r11.x
mul r1.w, r1.w, v6.z
mul r4.x, r2.w, r1.w
mul r12.xyz, cb1[r0.z + 0].xyzx, cb1[r0.z + 0].xyzx
add r12.xyz, r12.zzyz, r12.yxxy
mad r12.xyz, -r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.y, r2.z, r12.y
add r3.xyzw, r3.xyzw, r4.xyzw
mov r4.xyz, v0.xyzx
mov r4.w, l(1.000000)
dp4 r13.y, r3.xyzw, r4.xyzw
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].z, -r5.z
mul r1.w, r1.w, v6.x
mul r14.x, r2.w, r1.w
mul r14.y, r0.w, r2.w
mad r0.w, cb1[r0.y + 0].x, cb1[r0.y + 0].z, -r8.z
mul r0.w, r0.w, v6.y
mul r6.x, r2.w, r0.w
mul r14.z, r2.x, r7.z
mul r7.x, r2.x, r7.x
mul r6.z, r2.y, r9.z
mul r9.x, r2.y, r9.x
mul r14.w, r2.x, cb1[r1.x + 0].z
mul r6.w, r2.y, cb1[r1.y + 0].z
add r6.xyzw, r6.xyzw, r14.xyzw
mad r0.w, cb1[r0.z + 0].x, cb1[r0.z + 0].z, -r11.z
mul r0.w, r0.w, v6.z
mul r10.x, r2.w, r0.w
mul r10.z, r2.z, r12.z
mul r12.x, r2.z, r12.x
mul r10.w, r2.z, cb1[r1.z + 0].z
add r6.xyzw, r6.xyzw, r10.xyzw
dp4 r13.z, r6.xyzw, r4.xyzw
mul r7.w, r2.x, cb1[r1.x + 0].x
mul r9.w, r2.y, cb1[r1.y + 0].x
mul r12.w, r2.z, cb1[r1.z + 0].x
mad r0.x, cb1[r0.x + 0].x, cb1[r0.x + 0].y, -r5.x
add r0.w, r5.z, r5.y
mul r0.xw, r0.xxxw, v6.xxxx
mul r7.yz, r2.wwww, r0.xxwx
mad r0.x, cb1[r0.y + 0].x, cb1[r0.y + 0].y, -r8.x
mad r0.y, cb1[r0.z + 0].x, cb1[r0.z + 0].y, -r11.x
add r0.z, r11.z, r11.y
mul r0.xyz, r0.xyzx, v6.yzzy
mul r12.yz, r2.wwww, r0.yyzy
add r0.y, r8.z, r8.y
mul r0.y, r0.y, v6.y
mul r9.yz, r2.wwww, r0.xxyx
add r0.xyzw, r7.xyzw, r9.xyzw
add r0.xyzw, r12.xyzw, r0.xyzw
dp4 r13.x, r0.xyzw, r4.xyzw
mov r13.w, l(1.000000)
dp4 r1.x, cb0[22].xyzw, r13.xyzw
dp4 r1.y, cb0[23].xyzw, r13.xyzw
dp4 r1.w, cb0[25].xyzw, r13.xyzw
dp4 r0.w, cb0[24].xyzw, r13.xyzw
add r2.xyz, -r13.xyzx, cb0[30].xyzx
mov o0.xyw, r1.xyxw
mul r1.z, r0.w, l(20.000000)
mov o3.z, r0.w
min o0.z, r1.w, r1.z
dp3 r4.y, r3.xyzx, v1.xyzx
dp3 r4.z, r6.xyzx, v1.xyzx
dp3 r4.x, r0.xyzx, v1.xyzx
mov o1.xyz, r4.xyzx
mov o2.xy, v2.xyxx
mul r5.xy, r1.wwww, cb0[31].xyxx
mov o3.w, r1.w
mul r1.zw, cb0[31].xxxy, l(0.000000, 0.000000, 1.000000, -1.000000)
mad o3.xy, r1.xyxx, r1.zwzz, r5.xyxx
dp3 o4.x, cb0[26].xyzx, r2.xyzx
dp3 o4.y, cb0[27].xyzx, r2.xyzx
dp3 o4.z, cb0[28].xyzx, r2.xyzx
dp3 r1.y, r3.xyzx, v3.xyzx
dp3 r2.y, r3.xyzx, v4.xyzx
dp3 r1.z, r6.xyzx, v3.xyzx
dp3 r2.z, r6.xyzx, v4.xyzx
dp3 r1.x, r0.xyzx, v3.xyzx
dp3 r2.x, r0.xyzx, v4.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
dp3 o5.x, cb0[26].xyzx, r0.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r2.xyzx
dp3 o5.y, cb0[26].xyzx, r1.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r4.xyzx
dp3 o5.z, cb0[26].xyzx, r2.xyzx
dp3 o6.x, cb0[27].xyzx, r0.xyzx
dp3 o7.x, cb0[28].xyzx, r0.xyzx
dp3 o6.y, cb0[27].xyzx, r1.xyzx
dp3 o7.y, cb0[28].xyzx, r1.xyzx
dp3 o6.z, cb0[27].xyzx, r2.xyzx
dp3 o7.z, cb0[28].xyzx, r2.xyzx
mul o8.xyzw, v5.xyzw, cb0[29].xyzw
ret 
// Approximately 146 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
