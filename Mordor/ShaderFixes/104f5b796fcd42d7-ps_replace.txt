//swampy marsh
cbuffer _Globals : register(b0)
{
  float4 k_vWashingMachine : packoffset(c0) = float4(8.000000e+000,1.000000e-002,2.926120e+000,2.172630e+000);
  row_major float4x4 k_mObjectToClip : packoffset(c1);
  row_major float3x4 k_mObjectToView : packoffset(c5);
  row_major float3x4 k_mObjectToWorld : packoffset(c8);
  float4 k_vObjectColor : packoffset(c11);
  float3 k_vObjectSpaceEyePos : packoffset(c12);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c13);
  row_major float3x4 k_mPrevObjectToView : packoffset(c17);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c20);
  float2 k_vTessellation : packoffset(c23) = float2(1.500000e+001,6.300000e+001);
  float4 k_vFade : packoffset(c24) = float4(5.000000e+003,1.000000e+004,1.000000e+003,5.000000e+003);
  float4 k_vDisplacement : packoffset(c25) = float4(3.000000e+001,1.500000e+003,1.280000e+002,1.000000e+001);
  float k_fOffset : packoffset(c26) = float(-2.500000e-001);
  float2 k_vMipRange : packoffset(c26.y) = float2(0.000000e+000,1.000000e+003);
  float2 k_vDispTileRate : packoffset(c27) = float2(1.000000e+000,1.000000e+000);
  float4 k_vWaveMotion : packoffset(c28) = float4(1.000000e-002,1.500000e-002,2.000000e+000,2.500000e+000);
  float4 k_vDistPanTile : packoffset(c29) = float4(1.792300e-002,3.175000e-003,5.000000e-001,2.500000e-001);
  float2 k_fTileNormalMapUV : packoffset(c30) = float2(1.000000e+000,1.000000e+000);
  float2 k_fPanNormalMapUV : packoffset(c30.z) = float2(0.000000e+000,0.000000e+000);
  float k_fNormalMapFade : packoffset(c31) = float(0.000000e+000);
  float k_fRefractScale : packoffset(c31.y) = float(5.000000e+001);
  float k_fEnvMapStrength : packoffset(c31.z) = float(1.000000e+000);
  float3 k_cFogColor : packoffset(c32) = float3(0.000000e+000,4.000000e-003,1.180000e-002);
  float4 k_vLightFilterClarity : packoffset(c33) = float4(9.950000e-001,9.980000e-001,1.000000e+000,5.000000e+002);
  float2 k_vFoamTileRate : packoffset(c34) = float2(3.000000e+000,2.000000e+000);
  float2 k_vFoamPanRate : packoffset(c34.z) = float2(1.000000e-001,1.000000e-001);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}
SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
SamplerState sAniso4X_MIRRORMIRRORCLAMP_Sampler_s : register(s1);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s2);
SamplerState sAniso4X_CLAMPCLAMPCLAMP_Sampler_s : register(s3);
Texture2D<float4> tDepthMap : register(t0);
Texture2D<float4> tFarNormMap : register(t1);
Texture2D<float4> tDetailNormalMap : register(t2);
Texture2D<float4> tCurFrameMap : register(t3);
TextureCube<float4> tReflectionMap : register(t4);
Texture2D<float4> tFoamMap : register(t5);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : COLOR0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  
float4 r24;
r24.xyzw = v2.xyzw;
float4 stereo = StereoParams.Load(0);  
r24.x += stereo.x * (r24.w - stereo.y)*0.5;

  r0.x = saturate(1.000000000e+000 + -v4.w);
  r0.x = r0.x * 1.000000000e+001 + k_fNormalMapFade;
  r0.yz = k_fTime * k_fPanNormalMapUV.xy;
  r0.yz = k_fTileNormalMapUV.xy * v1.xy + r0.yz;
  r0.yz = tDetailNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.yz).yw;
  r1.xy = r0.yz * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.y = -r1.x * r1.x + 1.000000000e+000;
  r0.y = -r1.y * r1.y + r0.y;
  r0.y = sqrt(r0.y);
  r1.z = r0.y + r0.x;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  r0.z = v5.y * 5.000000000e+000 + r0.z;
  r1.xy = k_fTime * k_vDistPanTile.xy + v1.xy;
  r1.xy = k_vDistPanTile.zz * r1.xy;
  r1.xy = tFarNormMap.Sample(sAniso4X_MIRRORMIRRORCLAMP_Sampler_s, r1.xy).yw;
  r1.zw = k_vDistPanTile.ww * v1.xy;
  r1.zw = tFarNormMap.Sample(sAniso4X_MIRRORMIRRORCLAMP_Sampler_s, r1.zw).yw;
  r1.xy = r1.xy + r1.zw;
  r1.xy = float2(-1.000000e+000,-1.000000e+000) + r1.xy;
  r0.w = 1.000000000e+000 + -v5.z;
  r1.z = 2.000000000e+000;
  r1.xyz = r1.xyz * r0.www + v4.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = r1.xzy * r0.zzz;
  r1.w = -r1.x;
  r0.z = dot(r1.zw, r1.zw);
  r0.z = rsqrt(r0.z);
  r3.x = r1.z * r0.z;
  r3.y = -r1.x * r0.z;
  r1.yz = float2(-1.000000e+000,1.000000e+000) * r1.yz;
  r3.z = 0.000000000e+000;
  r0.xzw = r0.xxx * r3.xyz + r2.xyz;
  r1.w = dot(r1.yz, r1.yz);
  r1.w = rsqrt(r1.w);
  r1.x = 0.000000000e+000;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r0.yyy * r1.xyz + r0.xzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v3.xyz * r0.www;
  r0.w = dot(-r1.xyz, r0.xyz);
  r0.w = r0.w + r0.w;
  r2.xyz = r0.xyz * -r0.www + -r1.xyz;
  r0.y = saturate(dot(r1.xyz, r0.xyz));
  r0.y = 1.000000000e+000 + -r0.y;
  r1.xyz = tReflectionMap.Sample(sAniso4X_CLAMPCLAMPCLAMP_Sampler_s, r2.xyz).xyz;
  r0.w = r0.y * r0.y;
  r0.w = r0.w * r0.w;
  r0.y = r0.y * r0.w;
  r0.y = r0.y * 8.999999762e-001 + 1.000000015e-001;
  r1.xyz = r0.yyy * r1.xyz;
  r1.xyz = k_fEnvMapStrength * r1.xyz;
  r2.xy = r24.xy / v2.ww; //v2.xy / v2.ww;
  r2.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r2.xy).x;
  r0.y = -v2.w + r2.z;
  r0.y = saturate(9.999999776e-003 * r0.y);
  r0.y = max(r0.y, 1.000000015e-001);
  r0.y = k_fRefractScale * r0.y;
  r0.yw = r0.xz * r0.yy;
  r0.x = abs(r0.x) + abs(r0.z);
  r0.x = v5.y * r0.x;
  r0.yz = r0.yw / v2.ww;
  r3.xy = r2.xy + r0.yz;
  r3.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r3.xy).x;
  r0.y = r3.z < v2.w;
  r0.yzw = r0.yyy ? r2.xyz : r3.xyz;
  r0.w = -v2.w + r0.w;
  r2.xyz = tCurFrameMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.yz).xyz;
  r3.xyz = log2(abs(k_vLightFilterClarity.xyz));
  r3.xyz = r3.xyz * r0.www;
  r3.xyz = exp2(r3.xyz);
  r0.y = sqrt(r0.w);
  r0.z = saturate(1.000000015e-001 * r0.w);
  r0.y = saturate(r0.y / k_vLightFilterClarity.w);
  r4.xyz = k_cFogColor.xyz * r0.yyy;
  r3.xyz = r2.xyz * r3.xyz + r4.xyz;
  r1.xyz = v5.xxx * r1.xyz + r3.xyz;
  r0.yw = k_fTime * k_vFoamPanRate.xy;
  r0.yw = v1.xy * k_vFoamTileRate.xy + r0.yw;
  r0.yw = tFoamMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.yw).xy;
  r0.yw = v5.zw * r0.yw;
  r0.x = r0.y * 5.000000000e-001 + r0.x;
  r0.y = tFoamMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).w;
  r0.y = v4.w * r0.y;
  r0.x = r0.x * r0.y + r0.w;
  r0.xyw = r1.xyz + r0.xxx;
  r0.xyw = r0.xyw + -r2.xyz;
  r0.xyz = r0.zzz * r0.xyw + r2.xyz;
  o0.w = dot(r0.xyz, k_vHDRLuminanceWeights.xyz);
  o0.xyz = r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 k_vWashingMachine;          // Offset:    0 Size:    16 [unused]
//      = 0x41000000 0x3c23d70a 0x403b458d 0x400b0c5f 
//   row_major float4x4 k_mObjectToClip;// Offset:   16 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   80 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  128 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  176 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  192 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  208 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  272 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  320 Size:    48 [unused]
//   float2 k_vTessellation;            // Offset:  368 Size:     8 [unused]
//      = 0x41700000 0x427c0000 
//   float4 k_vFade;                    // Offset:  384 Size:    16 [unused]
//      = 0x459c4000 0x461c4000 0x447a0000 0x459c4000 
//   float4 k_vDisplacement;            // Offset:  400 Size:    16 [unused]
//      = 0x41f00000 0x44bb8000 0x43000000 0x41200000 
//   float k_fOffset;                   // Offset:  416 Size:     4 [unused]
//      = 0xbe800000 
//   float2 k_vMipRange;                // Offset:  420 Size:     8 [unused]
//      = 0x00000000 0x447a0000 
//   float2 k_vDispTileRate;            // Offset:  432 Size:     8 [unused]
//      = 0x3f800000 0x3f800000 
//   float4 k_vWaveMotion;              // Offset:  448 Size:    16 [unused]
//      = 0x3c23d70a 0x3c75c28f 0x40000000 0x40200000 
//   float4 k_vDistPanTile;             // Offset:  464 Size:    16
//      = 0x3c92d341 0x3b5013a9 0x3f000000 0x3e800000 
//   float2 k_fTileNormalMapUV;         // Offset:  480 Size:     8
//      = 0x3f800000 0x3f800000 
//   float2 k_fPanNormalMapUV;          // Offset:  488 Size:     8
//      = 0x00000000 0x00000000 
//   float k_fNormalMapFade;            // Offset:  496 Size:     4
//      = 0x00000000 
//   float k_fRefractScale;             // Offset:  500 Size:     4
//      = 0x42480000 
//   float k_fEnvMapStrength;           // Offset:  504 Size:     4
//      = 0x3f800000 
//   float3 k_cFogColor;                // Offset:  512 Size:    12
//      = 0x00000000 0x3b83126f 0x3c4154ca 
//   float4 k_vLightFilterClarity;      // Offset:  528 Size:    16
//      = 0x3f7eb852 0x3f7f7cee 0x3f800000 0x43fa0000 
//   float2 k_vFoamTileRate;            // Offset:  544 Size:     8
//      = 0x40400000 0x40000000 
//   float2 k_vFoamPanRate;             // Offset:  552 Size:     8
//      = 0x3dcccccd 0x3dcccccd 
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso4X_MIRRORMIRRORCLAMP_Sampler    sampler      NA          NA    1        1
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    2        1
// sAniso4X_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    3        1
// tDepthMap                         texture  float4          2d    0        1
// tFarNormMap                       texture  float4          2d    1        1
// tDetailNormalMap                  texture  float4          2d    2        1
// tCurFrameMap                      texture  float4          2d    3        1
// tReflectionMap                    texture  float4        cube    4        1
// tFoamMap                          texture  float4          2d    5        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb12[28], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_output o0.xyzw
dcl_temps 5
add_sat r0.x, -v4.w, l(1.000000)
mad r0.x, r0.x, l(10.000000), cb0[31].x
mul r0.yz, cb0[30].zzwz, cb13[1].xxxx
mad r0.yz, cb0[30].xxyx, v1.xxyx, r0.yyzy
sample_indexable(texture2d)(float,float,float,float) r0.yz, r0.yzyy, t2.xywz, s2
mad r1.xy, r0.yzyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.y, -r1.x, r1.x, l(1.000000)
mad r0.y, -r1.y, r1.y, r0.y
sqrt r0.y, r0.y
add r1.z, r0.x, r0.y
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
mad r0.z, v5.y, l(5.000000), r0.z
mad r1.xy, cb13[1].xxxx, cb0[29].xyxx, v1.xyxx
mul r1.xy, r1.xyxx, cb0[29].zzzz
sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t1.ywxz, s1
mul r1.zw, v1.xxxy, cb0[29].wwww
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t1.xzyw, s1
add r1.xy, r1.zwzz, r1.xyxx
add r1.xy, r1.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
add r0.w, -v5.z, l(1.000000)
mov r1.z, l(2.000000)
mad r1.xyz, r1.xyzx, r0.wwww, v4.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mul r2.xyz, r0.zzzz, r1.xzyx
mov r1.w, -r1.x
dp2 r0.z, r1.zwzz, r1.zwzz
rsq r0.z, r0.z
mul r3.x, r0.z, r1.z
mul r3.y, r0.z, -r1.x
mul r1.yz, r1.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
mov r3.z, l(0)
mad r0.xzw, r0.xxxx, r3.xxyz, r2.xxyz
dp2 r1.w, r1.yzyy, r1.yzyy
rsq r1.w, r1.w
mov r1.x, l(0)
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r0.yyyy, r1.xyzx, r0.xzwx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v3.xyzx
dp3 r0.w, -r1.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r2.xyz, r0.xyzx, -r0.wwww, -r1.xyzx
dp3_sat r0.y, r1.xyzx, r0.xyzx
add r0.y, -r0.y, l(1.000000)
sample_indexable(texturecube)(float,float,float,float) r1.xyz, r2.xyzx, t4.xyzw, s3
mul r0.w, r0.y, r0.y
mul r0.w, r0.w, r0.w
mul r0.y, r0.w, r0.y
mad r0.y, r0.y, l(0.900000), l(0.100000)
mul r1.xyz, r1.xyzx, r0.yyyy
mul r1.xyz, r1.xyzx, cb0[31].zzzz
div r2.xy, v2.xyxx, v2.wwww
sample_indexable(texture2d)(float,float,float,float) r2.z, r2.xyxx, t0.yzxw, s0
add r0.y, r2.z, -v2.w
mul_sat r0.y, r0.y, l(0.010000)
max r0.y, r0.y, l(0.100000)
mul r0.y, r0.y, cb0[31].y
mul r0.yw, r0.yyyy, r0.xxxz
add r0.x, |r0.z|, |r0.x|
mul r0.x, r0.x, v5.y
div r0.yz, r0.yywy, v2.wwww
add r3.xy, r0.yzyy, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r3.z, r3.xyxx, t0.yzxw, s0
lt r0.y, r3.z, v2.w
movc r0.yzw, r0.yyyy, r2.xxyz, r3.xxyz
add r0.w, r0.w, -v2.w
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.yzyy, t3.xyzw, s0
log r3.xyz, |cb0[33].xyzx|
mul r3.xyz, r0.wwww, r3.xyzx
exp r3.xyz, r3.xyzx
sqrt r0.y, r0.w
mul_sat r0.z, r0.w, l(0.100000)
div_sat r0.y, r0.y, cb0[33].w
mul r4.xyz, r0.yyyy, cb0[32].xyzx
mad r3.xyz, r2.xyzx, r3.xyzx, r4.xyzx
mad r1.xyz, v5.xxxx, r1.xyzx, r3.xyzx
mul r0.yw, cb0[34].zzzw, cb13[1].xxxx
mad r0.yw, v1.xxxy, cb0[34].xxxy, r0.yyyw
sample_indexable(texture2d)(float,float,float,float) r0.yw, r0.ywyy, t5.zxwy, s2
mul r0.yw, r0.yyyw, v5.zzzw
mad r0.x, r0.y, l(0.500000), r0.x
sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t5.xwyz, s2
mul r0.y, r0.y, v4.w
mad r0.x, r0.x, r0.y, r0.w
add r0.xyw, r0.xxxx, r1.xyxz
add r0.xyw, -r2.xyxz, r0.xyxw
mad r0.xyz, r0.zzzz, r0.xywx, r2.xyzx
dp3 o0.w, r0.xyzx, cb12[27].xyzx
mov o0.xyz, r0.xyzx
ret 
// Approximately 98 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
