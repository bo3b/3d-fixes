
cbuffer _Globals : register(b0)
{
  float k_fTowerHeightOffset : packoffset(c0) = float(0.000000e+000);
  row_major float4x4 k_mObjectToClip : packoffset(c1);
  row_major float3x4 k_mObjectToView : packoffset(c5);
  row_major float3x4 k_mObjectToWorld : packoffset(c8);
  float4 k_vObjectColor : packoffset(c11);
  float3 k_vObjectSpaceEyePos : packoffset(c12);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c13);
  row_major float3x4 k_mPrevObjectToView : packoffset(c17);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c20);
  float k_fTowerHeight : packoffset(c23) = float(3.500000e+003);
  float k_fPlayerRevealRadius : packoffset(c23.y) = float(2.000000e+003);
  float2 k_vMaskScaleUV : packoffset(c23.z) = float2(1.000000e+000,1.000000e+000);
  float2 k_vMaskPanUV : packoffset(c24) = float2(5.000000e-001,1.000000e-001);
  float k_fMaskOpacity : packoffset(c24.z) = float(1.000000e+000);
  float k_fMaskPow : packoffset(c24.w) = float(2.000000e+000);
  float k_fMaskOffset : packoffset(c25) = float(5.000000e-002);
  float k_fRevealValue : packoffset(c25.y) = float(1.000000e+000);
  float k_fRevealWidth : packoffset(c25.z) = float(1.000000e+000);
  float3 k_cEmissiveColor : packoffset(c26) = float3(1.000000e-001,1.000000e-001,6.000000e-001);
  float k_fBrightness : packoffset(c26.w) = float(1.000000e+000);
  float k_fBrightnessPow : packoffset(c27) = float(2.000000e+000);
  float k_fMaxSpecularPower : packoffset(c27.y) = float(6.400000e+001);
  float k_fRenderObjectID : packoffset(c27.z);
  int k_bRendersEmissive : packoffset(c27.w) = int(1.401298e-045);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s0);
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tEmissiveMask : register(t0);
Texture2D<float4> tEmissiveMap : register(t1);
Texture2D<float4> tNormalMap : register(t2);
Texture2D<float4> tDiffuseMap : register(t3);
Texture2D<float4> tSpecularMap : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD2,
  float3 v3 : TEXCOORD3,
  float3 v4 : TEXCOORD4,
  float4 v5 : COLOR0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.x = max(abs(v5.x), abs(v5.z));
  r0.x = 1.000000e+000 / r0.x;
  r0.y = min(abs(v5.x), abs(v5.z));
  r0.x = r0.y * r0.x;
  r0.y = r0.x * r0.x;
  r0.z = r0.y * 2.083509974e-002 + -8.513300121e-002;
  r0.z = r0.y * r0.z + 1.801410019e-001;
  r0.z = r0.y * r0.z + -3.302994967e-001;
  r0.y = r0.y * r0.z + 9.998660088e-001;
  r0.z = r0.x * r0.y;
  r0.z = r0.z * -2.000000000e+000 + 1.570796371e+000;
  r0.w = abs(v5.x) < abs(v5.z);
  r0.z = r0.w ? r0.z : 0;
  r0.x = r0.x * r0.y + r0.z;
  r0.y = v5.x < -v5.x;
  r0.y = r0.y ? -3.141593 : 0;
  r0.x = r0.x + r0.y;
  r0.y = min(v5.x, v5.z);
  r0.y = r0.y < -r0.y;
  r0.z = max(v5.x, v5.z);
  r0.z = r0.z >= -r0.z;
  r0.y = r0.z ? r0.y : 0;
  r0.x = r0.y ? -r0.x : r0.x;
  r0.x = k_vMaskScaleUV.x * r0.x;
  r0.z = 1.000000e+000 / k_vMaskScaleUV.y;
  r0.y = v5.y * r0.z;
  r0.xy = k_vMaskPanUV.xy * k_fTime + r0.xy;
  r0.x = tEmissiveMask.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).x;
  r0.x = k_fMaskOpacity * r0.x;
  r0.x = log2(r0.x);
  r0.x = k_fMaskPow * r0.x;
  r0.x = exp2(r0.x);
  r0.x = saturate(k_fMaskOffset + r0.x);
  r0.x = r0.x * r0.x;
  r0.x = 3.000000119e-001 * r0.x;
  r1.xyz = v5.xyz;
  r1.w = 1.000000000e+000;
  r2.x = dot(k_mObjectToWorld._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(k_mObjectToWorld._m10_m11_m12_m13, r1.xyzw);
  r2.z = dot(k_mObjectToWorld._m20_m21_m22_m23, r1.xyzw);
  r0.yzw = k_vVegetationForce1.xyz + -r2.xyz;
  r0.y = dot(r0.yzw, r0.yzw);
  r0.z = k_fPlayerRevealRadius * k_fPlayerRevealRadius;
  r0.y = r0.y / r0.z;
  r0.y = min(r0.y, 1.000000000e+000);
  r0.z = k_fTowerHeightOffset + v5.y;
  r0.z = saturate(r0.z / k_fTowerHeight);
  r0.x = r0.z * r0.y + r0.x;
  r0.x = min(r0.x, 1.000000000e+000);
  r0.y = k_fRevealValue + -k_fRevealWidth;
  r0.x = r0.x + -r0.y;
  r0.y = k_fRevealValue + -r0.y;
  r0.x = saturate(r0.x / r0.y);
  r0.y = 9.499999881e-001 + -r0.x;
  r0.y = r0.y < 0.000000000e+000;
  if (r0.y != 0) discard;
  r0.y = tEmissiveMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).x;
  r0.y = log2(r0.y);
  r0.y = k_fBrightnessPow * r0.y;
  r0.y = exp2(r0.y);
  r0.y = k_fBrightness * r0.y;
  r0.yzw = k_cEmissiveColor.xyz * r0.yyy;
  o0.xyz = r0.xxx * k_cEmissiveColor.xyz + r0.yzw;
  o0.w = 1.000000000e+000;
  r0.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).yw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.z = sqrt(r0.w);
  r1.x = dot(v2.xyz, r0.xyz);
  r1.y = dot(v3.xyz, r0.xyz);
  r1.z = dot(v4.xyz, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  o1.xyz = r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o1.w = k_fRenderObjectID;
  o2.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyzw;
  o3.w = 0.000000000e+000;
  r0.xyz = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyz;
  o3.x = k_fMaxSpecularPower * r0.z;
  o3.yz = r0.yx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fTowerHeightOffset;        // Offset:    0 Size:     4
//      = 0x00000000 
//   row_major float4x4 k_mObjectToClip;// Offset:   16 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   80 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  128 Size:    48
//   float4 k_vObjectColor;             // Offset:  176 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  192 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  208 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  272 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  320 Size:    48 [unused]
//   float k_fTowerHeight;              // Offset:  368 Size:     4
//      = 0x455ac000 
//   float k_fPlayerRevealRadius;       // Offset:  372 Size:     4
//      = 0x44fa0000 
//   float2 k_vMaskScaleUV;             // Offset:  376 Size:     8
//      = 0x3f800000 0x3f800000 
//   float2 k_vMaskPanUV;               // Offset:  384 Size:     8
//      = 0x3f000000 0x3dcccccd 
//   float k_fMaskOpacity;              // Offset:  392 Size:     4
//      = 0x3f800000 
//   float k_fMaskPow;                  // Offset:  396 Size:     4
//      = 0x40000000 
//   float k_fMaskOffset;               // Offset:  400 Size:     4
//      = 0x3d4ccccd 
//   float k_fRevealValue;              // Offset:  404 Size:     4
//      = 0x3f800000 
//   float k_fRevealWidth;              // Offset:  408 Size:     4
//      = 0x3f800000 
//   float3 k_cEmissiveColor;           // Offset:  416 Size:    12
//      = 0x3dcccccd 0x3dcccccd 0x3f19999a 
//   float k_fBrightness;               // Offset:  428 Size:     4
//      = 0x3f800000 
//   float k_fBrightnessPow;            // Offset:  432 Size:     4
//      = 0x40000000 
//   float k_fMaxSpecularPower;         // Offset:  436 Size:     4
//      = 0x42800000 
//   float k_fRenderObjectID;           // Offset:  440 Size:     4
//   int k_bRendersEmissive;            // Offset:  444 Size:     4 [unused]
//      = 0x00000001 
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// tEmissiveMask                     texture  float4          2d    0        1
// tEmissiveMap                      texture  float4          2d    1        1
// tNormalMap                        texture  float4          2d    2        1
// tDiffuseMap                       texture  float4          2d    3        1
// tSpecularMap                      texture  float4          2d    4        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[28], immediateIndexed
dcl_constantbuffer cb12[32], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
max r0.x, |v5.x|, |v5.z|
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
min r0.y, |v5.x|, |v5.z|
mul r0.x, r0.x, r0.y
mul r0.y, r0.x, r0.x
mad r0.z, r0.y, l(0.020835), l(-0.085133)
mad r0.z, r0.y, r0.z, l(0.180141)
mad r0.z, r0.y, r0.z, l(-0.330299)
mad r0.y, r0.y, r0.z, l(0.999866)
mul r0.z, r0.y, r0.x
mad r0.z, r0.z, l(-2.000000), l(1.570796)
lt r0.w, |v5.x|, |v5.z|
and r0.z, r0.w, r0.z
mad r0.x, r0.x, r0.y, r0.z
lt r0.y, v5.x, -v5.x
and r0.y, r0.y, l(0xc0490fdb)
add r0.x, r0.y, r0.x
min r0.y, v5.x, v5.z
lt r0.y, r0.y, -r0.y
max r0.z, v5.x, v5.z
ge r0.z, r0.z, -r0.z
and r0.y, r0.z, r0.y
movc r0.x, r0.y, -r0.x, r0.x
mul r0.x, r0.x, cb0[23].z
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[23].w
mul r0.y, r0.z, v5.y
mad r0.xy, cb0[24].xyxx, cb13[1].xxxx, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0
mul r0.x, r0.x, cb0[24].z
log r0.x, r0.x
mul r0.x, r0.x, cb0[24].w
exp r0.x, r0.x
add_sat r0.x, r0.x, cb0[25].x
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, l(0.300000)
mov r1.xyz, v5.xyzx
mov r1.w, l(1.000000)
dp4 r2.x, cb0[8].xyzw, r1.xyzw
dp4 r2.y, cb0[9].xyzw, r1.xyzw
dp4 r2.z, cb0[10].xyzw, r1.xyzw
add r0.yzw, -r2.xxyz, cb12[31].xxyz
dp3 r0.y, r0.yzwy, r0.yzwy
mul r0.z, cb0[23].y, cb0[23].y
div r0.y, r0.y, r0.z
min r0.y, r0.y, l(1.000000)
add r0.z, v5.y, cb0[0].x
div_sat r0.z, r0.z, cb0[23].x
mad r0.x, r0.z, r0.y, r0.x
min r0.x, r0.x, l(1.000000)
add r0.y, -cb0[25].z, cb0[25].y
add r0.x, -r0.y, r0.x
add r0.y, -r0.y, cb0[25].y
div_sat r0.x, r0.x, r0.y
add r0.y, -r0.x, l(0.950000)
lt r0.y, r0.y, l(0.000000)
discard_nz r0.y
sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t1.yxzw, s0
log r0.y, r0.y
mul r0.y, r0.y, cb0[27].x
exp r0.y, r0.y
mul r0.y, r0.y, cb0[26].w
mul r0.yzw, r0.yyyy, cb0[26].xxyz
mad o0.xyz, r0.xxxx, cb0[26].xyzx, r0.yzwy
mov o0.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t2.ywxz, s0
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.z, r0.w
dp3 r1.x, v2.xyzx, r0.xyzx
dp3 r1.y, v3.xyzx, r0.xyzx
dp3 r1.z, v4.xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o1.w, cb0[27].z
sample_indexable(texture2d)(float,float,float,float) o2.xyzw, v1.xyxx, t3.xyzw, s1
mov o3.w, l(0)
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t4.xyzw, s0
mul o3.x, r0.z, cb0[27].y
mov o3.yz, r0.yyxy
ret 
// Approximately 83 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
