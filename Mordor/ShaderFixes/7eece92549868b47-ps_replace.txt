
cbuffer _Globals : register(b0)
{
  float k_fSpecularPower : packoffset(c0) = float(1.000000e+003);
  float k_fSpecularScale : packoffset(c0.y) = float(5.000000e-001);
  float k_fSpecularFresnel : packoffset(c0.z) = float(1.000000e-001);
  float k_fAnimSpecularPower : packoffset(c0.w) = float(1.000000e+003);
  float k_fAnimSpecularScale : packoffset(c1) = float(5.000000e-001);
  float k_fAnimSpecularFresnel : packoffset(c1.y) = float(0.000000e+000);
  float k_fMaxBlend : packoffset(c1.z) = float(8.000000e-001);
  float k_fMinBlend : packoffset(c1.w) = float(1.000000e-001);
  float k_fRange : packoffset(c2) = float(1.000000e+004);
  row_major float4x4 k_mObjectToClip : packoffset(c3);
  row_major float3x4 k_mObjectToView : packoffset(c7);
  row_major float3x4 k_mObjectToWorld : packoffset(c10);
  float4 k_vObjectColor : packoffset(c13);
  float3 k_vObjectSpaceEyePos : packoffset(c14);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c15);
  row_major float3x4 k_mPrevObjectToView : packoffset(c19);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c22);
  float k_fNormalStrength : packoffset(c25) = float(4.000000e+000);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}
SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s2);
SamplerComparisonState sBilinear_BORDERBORDERCLAMP_CompareSampler_s : register(s1);
Texture2D<float4> tDepthMap : register(t0);
Texture2D<float> tSkyShadowMap : register(t1);
Texture2D<float4> tForcedCurFrameMap : register(t2);
Texture2D<float4> tNormalMap : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.xyzw = tForcedCurFrameMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, v1.xy).xyzw;
  r0.xyz = r0.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r1.y = r0.y * r1.x + -8.000000119e-001;
  r2.xyz = r1.xxx * r0.xyz;
  r0.x = 5.000000000e+000 * r1.y;
  r0.y = 4.980392158e-001 >= r0.w;
  r0.z = r0.w < 5.019608140e-001;
  r0.y = r0.y ? 1.000000 : 0;
  r0.x = r0.x * r0.y;
  r0.y = k_fMinBlend + -k_fMaxBlend;
  r1.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, v1.xy).x;
  r0.w = saturate(r1.z / k_fRange);
  r0.y = r0.w * r0.y + k_fMaxBlend;
  r0.x = r0.y * r0.x;
  r1.xy = v2.xy * r1.zz;
  r1.w = 1.000000000e+000;
  
float4 stereo = StereoParams.Load(0);
r1.x -= stereo.x * (r1.z - stereo.y)*k_vFullViewPlane.z/2; //*0.187; 

  r3.x = dot(k_mSkyShadowMapMatrix._m00_m01_m02_m03, r1.xyzw);
  r3.y = dot(k_mSkyShadowMapMatrix._m10_m11_m12_m13, r1.xyzw);
  r3.z = dot(k_mSkyShadowMapMatrix._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(k_mSkyShadowMapMatrix._m30_m31_m32_m33, r1.xyzw);
  r3.xyz = r3.xyz / r0.www;
  r3.xy = r3.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.w = 1.000000000e+000 + -r3.z;
  r0.w = tSkyShadowMap.SampleCmpLevelZero(sBilinear_BORDERBORDERCLAMP_CompareSampler_s, r3.xy, r0.w).x;
  r0.w = 1.000000000e+000 + -r0.w;
  o0.w = r0.x * r0.w;
  o1.w = r0.y * r0.w;
  r0.x = dot(k_mViewToWorld._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(k_mViewToWorld._m20_m21_m22_m23, r1.xyzw);
  r0.xy = float2(1.000000e-002,1.000000e-002) * r0.xy;
  r0.xy = tNormalMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, r0.xy).yw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.w = -r2.z;
  r1.xy = float2(-1.000000e+000,1.000000e+000) * r2.zx;
  r0.w = dot(r2.wx, r1.xy);
  r0.w = rsqrt(r0.w);
  r1.x = -r2.z * r0.w;
  r1.z = r2.x * r0.w;
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.w = sqrt(r0.w);
  r0.w = k_fNormalStrength * r0.w;
  r3.xyz = r0.www * r2.xyz;
  r2.yz = float2(-1.000000e+000,1.000000e+000) * r2.zy;
  r1.y = 0.000000000e+000;
  r1.xyz = r0.xxx * r1.xyz + r3.xyz;
  r0.x = dot(r2.yz, r2.yz);
  r0.x = rsqrt(r0.x);
  r2.x = 0.000000000e+000;
  r2.xyz = r2.xyz * r0.xxx;
  r0.xyw = r0.yyy * r2.xyz + r1.xyz;
  r1.x = dot(r0.xyw, r0.xyw);
  r1.x = rsqrt(r1.x);
  r0.xyw = r1.xxx * r0.xyw;
  o0.xyz = r0.xyw * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o1.x = r0.z ? k_fSpecularPower : k_fAnimSpecularPower;
  o1.y = r0.z ? k_fSpecularScale : k_fAnimSpecularScale;
  o1.z = r0.z ? k_fSpecularScale : k_fAnimSpecularScale;
  
  
  // o0=0;
  // o1=0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fSpecularPower;            // Offset:    0 Size:     4
//      = 0x447a0000 
//   float k_fSpecularScale;            // Offset:    4 Size:     4
//      = 0x3f000000 
//   float k_fSpecularFresnel;          // Offset:    8 Size:     4
//      = 0x3dcccccd 
//   float k_fAnimSpecularPower;        // Offset:   12 Size:     4
//      = 0x447a0000 
//   float k_fAnimSpecularScale;        // Offset:   16 Size:     4
//      = 0x3f000000 
//   float k_fAnimSpecularFresnel;      // Offset:   20 Size:     4
//      = 0x00000000 
//   float k_fMaxBlend;                 // Offset:   24 Size:     4
//      = 0x3f4ccccd 
//   float k_fMinBlend;                 // Offset:   28 Size:     4
//      = 0x3dcccccd 
//   float k_fRange;                    // Offset:   32 Size:     4
//      = 0x461c4000 
//   row_major float4x4 k_mObjectToClip;// Offset:   48 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:  112 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  160 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  208 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  224 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  240 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  304 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  352 Size:    48 [unused]
//   float k_fNormalStrength;           // Offset:  400 Size:     4
//      = 0x40800000 
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// sBilinear_BORDERBORDERCLAMP_CompareSampler  sampler_c      NA          NA    1        1
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    2        1
// tDepthMap                         texture  float4          2d    0        1
// tSkyShadowMap                     texture   float          2d    1        1
// tForcedCurFrameMap                texture  float4          2d    2        1
// tNormalMap                        texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[26], immediateIndexed
dcl_constantbuffer cb12[38], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t2.xyzw, s0
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.x, r1.x
mad r1.y, r0.y, r1.x, l(-0.800000)
mul r2.xyz, r0.xyzx, r1.xxxx
mul r0.x, r1.y, l(5.000000)
ge r0.y, l(0.498039), r0.w
lt r0.z, r0.w, l(0.501961)
and r0.y, r0.y, l(0x3f800000)
mul r0.x, r0.y, r0.x
add r0.y, -cb0[1].z, cb0[1].w
sample_indexable(texture2d)(float,float,float,float) r1.z, v1.xyxx, t0.yzxw, s0
div_sat r0.w, r1.z, cb0[2].x
mad r0.y, r0.w, r0.y, cb0[1].z
mul r0.x, r0.x, r0.y
mul r1.xy, r1.zzzz, v2.xyxx
mov r1.w, l(1.000000)
dp4 r3.x, cb12[34].xyzw, r1.xyzw
dp4 r3.y, cb12[35].xyzw, r1.xyzw
dp4 r3.z, cb12[36].xyzw, r1.xyzw
dp4 r0.w, cb12[37].xyzw, r1.xyzw
div r3.xyz, r3.xyzx, r0.wwww
mad r3.xy, r3.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
add r0.w, -r3.z, l(1.000000)
sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t1.xxxx, s1, r0.w
add r0.w, -r0.w, l(1.000000)
mul o0.w, r0.w, r0.x
mul o1.w, r0.w, r0.y
dp4 r0.x, cb12[4].xyzw, r1.xyzw
dp4 r0.y, cb12[6].xyzw, r1.xyzw
mul r0.xy, r0.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t3.ywxz, s2
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mov r2.w, -r2.z
mul r1.xy, r2.zxzz, l(-1.000000, 1.000000, 0.000000, 0.000000)
dp2 r0.w, r2.wxww, r1.xyxx
rsq r0.w, r0.w
mul r1.x, r0.w, -r2.z
mul r1.z, r0.w, r2.x
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.w, r0.w
mul r0.w, r0.w, cb0[25].x
mul r3.xyz, r2.xyzx, r0.wwww
mul r2.yz, r2.zzyz, l(0.000000, -1.000000, 1.000000, 0.000000)
mov r1.y, l(0)
mad r1.xyz, r0.xxxx, r1.xyzx, r3.xyzx
dp2 r0.x, r2.yzyy, r2.yzyy
rsq r0.x, r0.x
mov r2.x, l(0)
mul r2.xyz, r0.xxxx, r2.xyzx
mad r0.xyw, r0.yyyy, r2.xyxz, r1.xyxz
dp3 r1.x, r0.xywx, r0.xywx
rsq r1.x, r1.x
mul r0.xyw, r0.xyxw, r1.xxxx
mad o0.xyz, r0.xywx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
movc o1.x, r0.z, cb0[0].x, cb0[0].w
movc o1.yz, r0.zzzz, cb0[0].yyzy, cb0[1].xxyx
ret 
// Approximately 60 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
