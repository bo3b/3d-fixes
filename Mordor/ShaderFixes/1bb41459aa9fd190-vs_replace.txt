//Haloing - Blue light when dominate creatures
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c7);

  int WorldEdit_AlphaRef : packoffset(c15) = int(0.000000e+000);
  int WorldEdit_RenderType : packoffset(c15.y) = int(2.802597e-045);
  float k_fDepthAdjust : packoffset(c15.z) = float(1.000000e+000);
  float k_fDepthDistance : packoffset(c15.w) = float(1.500000e+001);
  float k_fDepthPower : packoffset(c16) = float(2.000000e+000);
  float k_fHDRScale : packoffset(c16.y) = float(1.600000e+001);
  float k_fOffsetNormalU : packoffset(c16.z) = float(0.000000e+000);
  float k_fOffsetNormalV : packoffset(c16.w) = float(0.000000e+000);
  float k_fPanNormalU : packoffset(c17) = float(0.000000e+000);
  float k_fPanNormalV : packoffset(c17.y) = float(0.000000e+000);
  row_major float4x4 k_mObjectToWorld_3DSMAX_ : packoffset(c18);
  float3 k_vDiffuseTile : packoffset(c22) = float3(1.000000e+000,1.000000e+000,0.000000e+000);
  float3 k_vNormalTile : packoffset(c23) = float3(1.000000e+000,1.000000e+000,0.000000e+000);
  float3 k_vRefractStrength : packoffset(c24) = float3(1.000000e-001,1.000000e-001,0.000000e+000);
  float k_fTime : packoffset(c24.w);
  row_major float4x4 k_mObjectToClip : packoffset(c25);
  row_major float3x4 k_mObjectToWorld : packoffset(c29);
  float4 k_vHDRLuminanceWeights : packoffset(c32);
  float3 k_vObjectSpaceEyePos : packoffset(c33);
  float2 k_vScene_TexCoordScale : packoffset(c34);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float3 o1 : TEXCOORD0,
  out float2 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3,
  out float4 o5 : COLOR0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToClip._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(k_mObjectToClip._m10_m11_m12_m13, r0.xyzw);
  r1.w = dot(k_mObjectToClip._m30_m31_m32_m33, r0.xyzw);
  r0.z = dot(k_mObjectToClip._m20_m21_m22_m23, r0.xyzw);
  
  float4 stereo = StereoParams.Load(0);
  float4 r23 = r1;
  r1.x += stereo.x * (r1.w - stereo.y);
  o0.xyzw = r23.xyzw;
  
  //o0.xyw = r1.xyw;
  o0.z = k_fDepthAdjust * r0.z;
  o1.xyz = v1.xyz;
  o2.xy = v2.xy;
  r2.xy = k_vScene_TexCoordScale.xy * r1.ww;
  r2.zw = float2(1.000000e+000,-1.000000e+000) * k_vScene_TexCoordScale.xy;
  r0.xy = r1.xy * r2.zw + r2.xy;
  o3.xyz = r0.xyz / r1.www;
  o3.w = r1.w;
  o4.xyz = k_vObjectSpaceEyePos.xyz + -v0.xyz;
  o5.xyzw = v5.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//       float3 m_Normal;               // Offset:   32
//       float2 m_TexCoord;             // Offset:   48
//       float3 m_Tangent;              // Offset:   64
//       float3 m_Binormal;             // Offset:   80
//       float4 m_Color;                // Offset:   96
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    96 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:  112
//       float3 m_Normal;               // Offset:  128
//       float2 m_TexCoord;             // Offset:  144
//       float3 m_Tangent;              // Offset:  160
//       float3 m_Binormal;             // Offset:  176
//       float4 m_Color;                // Offset:  192
//       float4 m_Weights;              // Offset:  208
//       float4 m_Indices;              // Offset:  224
//
//   } MaterialVertexDef_Skeletal;      // Offset:  112 Size:   128 [unused]
//   int WorldEdit_AlphaRef;            // Offset:  240 Size:     4 [unused]
//      = 0x00000000 
//   int WorldEdit_RenderType;          // Offset:  244 Size:     4 [unused]
//      = 0x00000002 
//   float k_fDepthAdjust;              // Offset:  248 Size:     4
//      = 0x3f800000 
//   float k_fDepthDistance;            // Offset:  252 Size:     4 [unused]
//      = 0x41700000 
//   float k_fDepthPower;               // Offset:  256 Size:     4 [unused]
//      = 0x40000000 
//   float k_fHDRScale;                 // Offset:  260 Size:     4 [unused]
//      = 0x41800000 
//   float k_fOffsetNormalU;            // Offset:  264 Size:     4 [unused]
//      = 0x00000000 
//   float k_fOffsetNormalV;            // Offset:  268 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanNormalU;               // Offset:  272 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanNormalV;               // Offset:  276 Size:     4 [unused]
//      = 0x00000000 
//   row_major float4x4 k_mObjectToWorld_3DSMAX_;// Offset:  288 Size:    64 [unused]
//   float3 k_vDiffuseTile;             // Offset:  352 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x00000000 
//   float3 k_vNormalTile;              // Offset:  368 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x00000000 
//   float3 k_vRefractStrength;         // Offset:  384 Size:    12 [unused]
//      = 0x3dcccccd 0x3dcccccd 0x00000000 
//   float k_fTime;                     // Offset:  396 Size:     4 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  400 Size:    64
//   row_major float3x4 k_mObjectToWorld;// Offset:  464 Size:    48 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  512 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  528 Size:    12
//   float2 k_vScene_TexCoordScale;     // Offset:  544 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float       
// BINORMAL                 0   xyz         4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[35], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_temps 3
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[25].xyzw, r0.xyzw
dp4 r1.y, cb0[26].xyzw, r0.xyzw
dp4 r1.w, cb0[28].xyzw, r0.xyzw
dp4 r0.z, cb0[27].xyzw, r0.xyzw
mov o0.xyw, r1.xyxw
mul o0.z, r0.z, cb0[15].z
mov o1.xyz, v1.xyzx
mov o2.xy, v2.xyxx
mul r2.xy, r1.wwww, cb0[34].xyxx
mul r2.zw, cb0[34].xxxy, l(0.000000, 0.000000, 1.000000, -1.000000)
mad r0.xy, r1.xyxx, r2.zwzz, r2.xyxx
div o3.xyz, r0.xyzx, r1.wwww
mov o3.w, r1.w
add o4.xyz, -v0.xyzx, cb0[33].xyzx
mov o5.xyzw, v5.xyzw
ret 
// Approximately 18 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
