
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float2 m_Position;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float2 m_Position;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c2);

  bool bHalfPrecision : packoffset(c5) = bool(0.000000e+000);
  bool bUsePS3CompilerArgs : packoffset(c5.y) = bool(-1.0e+000);
  // bool bUsePS3CompilerArgs : packoffset(c5.y) = bool(-1.#QNAN0e+000);
  float k_fMaxLuminance : packoffset(c5.z) = float(6.553500e+004);
  float4 k_vSourceBufferSize : packoffset(c6) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
}
SamplerState sSourceBufferSampler_s : register(s0);
Texture2D<float4> tSourceBuffer : register(t0);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float2 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyz = tSourceBuffer.Sample(sSourceBufferSampler_s, v3.xy).xyz;
  r0.x = dot(r0.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.yzw = tSourceBuffer.Sample(sSourceBufferSampler_s, v3.zw).xyz;
  r0.y = dot(r0.yzw, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.z = r0.x < r0.y;
  r0.z = r0.z ? r0.x : r0.y;
  r1.xyz = tSourceBuffer.Sample(sSourceBufferSampler_s, v2.zw).xyz;
  r0.w = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.x = r0.w >= r0.y;
  r0.z = r1.x ? r0.w : r0.z;
  r1.x = r0.x >= r0.y;
  r1.x = r1.x ? r0.x : r0.y;
  r0.x = r0.w < r0.x;
  r0.y = r0.w < r0.y;
  r0.y = r0.y ? r0.w : r1.x;
  r0.x = r0.x ? r0.z : r0.y;
  r0.yzw = tSourceBuffer.Sample(sSourceBufferSampler_s, v4.zw).xyz;
  r0.y = dot(r0.yzw, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.xyz = tSourceBuffer.Sample(sSourceBufferSampler_s, v5.xy).xyz;
  r0.z = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r0.w = r0.y < r0.z;
  r0.w = r0.w ? r0.y : r0.z;
  r1.xyz = tSourceBuffer.Sample(sSourceBufferSampler_s, v4.xy).xyz;
  r1.x = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.y = r1.x >= r0.z;
  r0.w = r1.y ? r1.x : r0.w;
  r1.y = r0.y >= r0.z;
  r1.y = r1.y ? r0.y : r0.z;
  r0.y = r1.x < r0.y;
  r0.z = r1.x < r0.z;
  r0.z = r0.z ? r1.x : r1.y;
  r0.y = r0.y ? r0.w : r0.z;
  r0.z = r0.x < r0.y;
  r0.z = r0.z ? r0.x : r0.y;
  r1.xyz = tSourceBuffer.Sample(sSourceBufferSampler_s, v1.zw).xyz;
  r0.w = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.xyz = tSourceBuffer.Sample(sSourceBufferSampler_s, v2.xy).xyz;
  r1.x = dot(r1.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.y = r0.w < r1.x;
  r1.y = r1.y ? r0.w : r1.x;
  r2.xyz = tSourceBuffer.Sample(sSourceBufferSampler_s, v1.xy).xyz;
  r1.z = dot(r2.xyz, float3(3.000000e-001,5.900000e-001,1.100000e-001));
  r1.w = r1.z >= r1.x;
  r1.y = r1.w ? r1.z : r1.y;
  r1.w = r0.w >= r1.x;
  r1.w = r1.w ? r0.w : r1.x;
  r0.w = r1.z < r0.w;
  r1.x = r1.z < r1.x;
  r1.x = r1.x ? r1.z : r1.w;
  r0.w = r0.w ? r1.y : r1.x;
  r1.x = r0.w >= r0.y;
  r0.z = r1.x ? r0.w : r0.z;
  r1.x = r0.x >= r0.y;
  r1.x = r1.x ? r0.x : r0.y;
  r0.x = r0.w < r0.x;
  r0.y = r0.w < r0.y;
  r0.y = r0.y ? r0.w : r1.x;
  r0.x = r0.x ? r0.z : r0.y;
  o0.xyzw = min(r0.xxxx, bHalfPrecision);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float2 m_Position;             // Offset:   16
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:     8 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float2 m_Position;             // Offset:   32
//       float4 m_Weights;              // Offset:   48
//       float4 m_Indices;              // Offset:   64
//
//   } MaterialVertexDef_Skeletal;      // Offset:   32 Size:    48 [unused]
//   bool bHalfPrecision;               // Offset:   80 Size:     4 [unused]
//      = 0x00000000 
//   bool bUsePS3CompilerArgs;          // Offset:   84 Size:     4 [unused]
//      = 0xffffffff 
//   float k_fMaxLuminance;             // Offset:   88 Size:     4
//      = 0x477fff00 
//   float4 k_vSourceBufferSize;        // Offset:   96 Size:    16 [unused]
//      = 0x00000000 0x00000000 0x00000000 0x00000000 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sSourceBufferSampler              sampler      NA          NA    0        1
// tSourceBuffer                     texture  float4          2d    0        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xy          5     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xy
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
dp3 r0.x, r0.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v3.zwzz, t0.wxyz, s0
dp3 r0.y, r0.yzwy, l(0.300000, 0.590000, 0.110000, 0.000000)
lt r0.z, r0.x, r0.y
movc r0.z, r0.z, r0.x, r0.y
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.zwzz, t0.xyzw, s0
dp3 r0.w, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
ge r1.x, r0.w, r0.y
movc r0.z, r1.x, r0.w, r0.z
ge r1.x, r0.x, r0.y
movc r1.x, r1.x, r0.x, r0.y
lt r0.xy, r0.wwww, r0.xyxx
movc r0.y, r0.y, r0.w, r1.x
movc r0.x, r0.x, r0.z, r0.y
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v4.zwzz, t0.wxyz, s0
dp3 r0.y, r0.yzwy, l(0.300000, 0.590000, 0.110000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v5.xyxx, t0.xyzw, s0
dp3 r0.z, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
lt r0.w, r0.y, r0.z
movc r0.w, r0.w, r0.y, r0.z
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t0.xyzw, s0
dp3 r1.x, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
ge r1.y, r1.x, r0.z
movc r0.w, r1.y, r1.x, r0.w
ge r1.y, r0.y, r0.z
movc r1.y, r1.y, r0.y, r0.z
lt r0.yz, r1.xxxx, r0.yyzy
movc r0.z, r0.z, r1.x, r1.y
movc r0.y, r0.y, r0.w, r0.z
lt r0.z, r0.x, r0.y
movc r0.z, r0.z, r0.x, r0.y
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.zwzz, t0.xyzw, s0
dp3 r0.w, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t0.xyzw, s0
dp3 r1.x, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
lt r1.y, r0.w, r1.x
movc r1.y, r1.y, r0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t0.xyzw, s0
dp3 r1.z, r2.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
ge r1.w, r1.z, r1.x
movc r1.y, r1.w, r1.z, r1.y
ge r1.w, r0.w, r1.x
movc r1.w, r1.w, r0.w, r1.x
lt r0.w, r1.z, r0.w
lt r1.x, r1.z, r1.x
movc r1.x, r1.x, r1.z, r1.w
movc r0.w, r0.w, r1.y, r1.x
ge r1.x, r0.w, r0.y
movc r0.z, r1.x, r0.w, r0.z
ge r1.x, r0.x, r0.y
movc r1.x, r1.x, r0.x, r0.y
lt r0.xy, r0.wwww, r0.xyxx
movc r0.y, r0.y, r0.w, r1.x
movc r0.x, r0.x, r0.z, r0.y
min o0.xyzw, r0.xxxx, cb0[5].zzzz
ret 
// Approximately 57 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

