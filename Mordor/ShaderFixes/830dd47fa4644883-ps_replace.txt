//Rings in Saurons Army Selection
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c2);

  float k_fIntensityScale : packoffset(c5) = float(1.000000e+000);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c6);
  row_major float4x4 k_mObjectToClip : packoffset(c9);
  row_major float3x4 k_mObjectToWorld : packoffset(c13);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c16);
  float4 k_vFullViewPlane : packoffset(c20);
  float4 k_vHDRLuminanceWeights : packoffset(c21);
  float3 k_vHalfDims : packoffset(c22);
  float4 k_vObjectColor : packoffset(c23);
  float4 k_vObjectLightColor : packoffset(c24);
  float3 k_vObjectSpaceEyePos : packoffset(c25);
  float2 k_vPerspOrthoMask : packoffset(c26);
  float2 k_vScene_TexCoordScale : packoffset(c26.z);
  float4 k_vShadowCascadeOffsetZ : packoffset(c27);
  float4 k_vShadowMapParams2 : packoffset(c28);
}
SamplerState sAttenuationTextureSampler_s : register(s0);
SamplerState sProjectedTextureSampler_s : register(s1);
SamplerState sDeferredNormalsSampler_s : register(s2);
SamplerState sDepthMapSampler_s : register(s3);
Texture2D<float4> tAttenuationTexture : register(t0);
Texture2D<float4> tProjectedTexture : register(t1);
Texture2D<float4> tDeferredNormals : register(t2);
Texture2D<float4> tDepthMap : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float2 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.z = tDeferredNormals.Sample(sDeferredNormalsSampler_s, r0.xy).w;
  r1.z = tDepthMap.Sample(sDepthMapSampler_s, r0.xy).x;
  r0.x = -5.019608140e-001 + r0.z;
  r0.x = -r0.x < 0.000000000e+000;
  if (r0.x != 0) discard;
  r0.xy = v3.xy / v1.ww;
  r1.w = 1.000000000e+000;
  r0.z = dot(r1.zw, k_vPerspOrthoMask.xy);
  r1.xy = r0.zz * r0.xy;
  
float4 stereo = StereoParams.Load(0);
r1.x -= stereo.x * (r1.z - stereo.y)*v4.z/2; //*0.187; 
  
  r0.x = saturate(dot(k_mDirectional_ObjectToTex._m00_m01_m02_m03, r1.xyzw));
  r0.y = saturate(dot(k_mDirectional_ObjectToTex._m10_m11_m12_m13, r1.xyzw));
  r0.z = saturate(dot(k_mDirectional_ObjectToTex._m20_m21_m22_m23, r1.xyzw));
  r1.xyzw = tProjectedTexture.Sample(sProjectedTextureSampler_s, r0.xy).xyzw;
  r0.w = 0.000000000e+000;
  r0.xyzw = tAttenuationTexture.Sample(sAttenuationTextureSampler_s, r0.wz).xyzw;
  r0.xyzw = r1.xyzw * r0.xyzw;
  r0.xyz = k_vObjectColor.xyz * r0.xyz;
  r0.xyz = k_vObjectColor.www * r0.xyz;
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = k_fIntensityScale * r0.xyz;
  o0.w = dot(r0.xyz, k_vHDRLuminanceWeights.xyz);
  o0.xyz = r0.xyz;
  
  
  // o0=0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    12 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:   32
//       float4 m_Weights;              // Offset:   48
//       float4 m_Indices;              // Offset:   64
//
//   } MaterialVertexDef_Skeletal;      // Offset:   32 Size:    48 [unused]
//   float k_fIntensityScale;           // Offset:   80 Size:     4
//      = 0x3f800000 
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:   96 Size:    48
//   row_major float4x4 k_mObjectToClip;// Offset:  144 Size:    64 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  208 Size:    48 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  256 Size:    64 [unused]
//   float4 k_vFullViewPlane;           // Offset:  320 Size:    16 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  336 Size:    16
//   float3 k_vHalfDims;                // Offset:  352 Size:    12 [unused]
//   float4 k_vObjectColor;             // Offset:  368 Size:    16
//   float4 k_vObjectLightColor;        // Offset:  384 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  400 Size:    12 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  416 Size:     8
//   float2 k_vScene_TexCoordScale;     // Offset:  424 Size:     8 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  432 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  448 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAttenuationTextureSampler        sampler      NA          NA    0        1
// sProjectedTextureSampler          sampler      NA          NA    1        1
// sDeferredNormalsSampler           sampler      NA          NA    2        1
// sDepthMapSampler                  sampler      NA          NA    3        1
// tAttenuationTexture               texture  float4          2d    0        1
// tProjectedTexture                 texture  float4          2d    1        1
// tDeferredNormals                  texture  float4          2d    2        1
// tDepthMap                         texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[27], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyw
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_temps 2
div r0.xy, v1.xyxx, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t2.xywz, s2
sample_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t3.yzxw, s3
add r0.x, r0.z, l(-0.501961)
lt r0.x, -r0.x, l(0.000000)
discard_nz r0.x
div r0.xy, v3.xyxx, v1.wwww
mov r1.w, l(1.000000)
dp2 r0.z, r1.zwzz, cb0[26].xyxx
mul r1.xy, r0.xyxx, r0.zzzz
dp4_sat r0.x, cb0[6].xyzw, r1.xyzw
dp4_sat r0.y, cb0[7].xyzw, r1.xyzw
dp4_sat r0.z, cb0[8].xyzw, r1.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t1.xyzw, s1
mov r0.w, l(0)
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.wzww, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, r1.xyzw
mul r0.xyz, r0.xyzx, cb0[23].xyzx
mul r0.xyz, r0.xyzx, cb0[23].wwww
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, cb0[5].xxxx
dp3 o0.w, r0.xyzx, cb0[21].xyzx
mov o0.xyz, r0.xyzx
ret 
// Approximately 24 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
