
cbuffer _Globals : register(b0)
{
  float k_fNumBillboards : packoffset(c0) = float(2.000000e+000);
  row_major float4x4 k_mObjectToClip : packoffset(c1);
  row_major float3x4 k_mObjectToView : packoffset(c5);
  row_major float3x4 k_mObjectToWorld : packoffset(c8);
  float4 k_vObjectColor : packoffset(c11);
  float3 k_vObjectSpaceEyePos : packoffset(c12);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c13);
  row_major float3x4 k_mPrevObjectToView : packoffset(c17);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c20);
  float k_fWindBlend : packoffset(c23) = float(1.000000e+000);
  float3 k_vWindPhase : packoffset(c23.y) = float3(2.000000e+001,3.000000e+000,2.000000e+000);
  float k_fBendability : packoffset(c24) = float(1.000000e+000);
  float3 k_vFadeRange : packoffset(c24.y) = float3(1.500000e+003,5.000000e+002,0.000000e+000);
  float2 k_vTintMapRange : packoffset(c25) = float2(1.000000e+003,1.000000e+003);
  float k_fTintMapMinFade : packoffset(c25.z) = float(1.000000e+000);
  bool k_bUseWorldTintMap : packoffset(c25.w) = bool(0.000000e+000);
  float k_fMaxSpecularPower : packoffset(c26) = float(6.400000e+001);
  int k_fVertexAnimation : packoffset(c26.y) = int(1.401298e-045);
}
SamplerState sTrilinear_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
Texture2D<float4> tDiffuseMap : register(t0);
Texture2D<float4> tNormalMap : register(t1);
Texture2D<float4> tSpecularMap : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : COLOR0,
  uint v8 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.xyzw = tDiffuseMap.Sample(sTrilinear_CLAMPCLAMPCLAMP_Sampler_s, v1.xy).xyzw;
  r0.w = r0.w * v6.w + -3.764705956e-001;
  r0.xyz = -v7.xyz + r0.xyz;
  o1.xyz = v7.www * r0.xyz + v7.xyz;
  r0.x = r0.w < 0.000000000e+000;
  if (r0.x != 0) discard;
  r0.xy = tNormalMap.Sample(sTrilinear_CLAMPCLAMPCLAMP_Sampler_s, v1.xy).yw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.z = sqrt(r0.w);
  r1.x = dot(v3.xyz, r0.xyz);
  r1.y = dot(v4.xyz, r0.xyz);
  r1.z = dot(v5.xyz, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  r0.xz = v8.xx ? r0.xz : -r0.xz;
  o0.xyz = r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o0.w = 5.058820248e-001;
  o1.w = 1.000000000e+000;
  r0.xyzw = tSpecularMap.Sample(sTrilinear_CLAMPCLAMPCLAMP_Sampler_s, v1.xy).xyzw;
  o2.x = k_fMaxSpecularPower * r0.z;
  o2.yzw = r0.yxw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fNumBillboards;            // Offset:    0 Size:     4 [unused]
//      = 0x40000000 
//   row_major float4x4 k_mObjectToClip;// Offset:   16 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   80 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  128 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  176 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  192 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  208 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  272 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  320 Size:    48 [unused]
//   float k_fWindBlend;                // Offset:  368 Size:     4 [unused]
//      = 0x3f800000 
//   float3 k_vWindPhase;               // Offset:  372 Size:    12 [unused]
//      = 0x41a00000 0x40400000 0x40000000 
//   float k_fBendability;              // Offset:  384 Size:     4 [unused]
//      = 0x3f800000 
//   float3 k_vFadeRange;               // Offset:  388 Size:    12 [unused]
//      = 0x44bb8000 0x43fa0000 0x00000000 
//   float2 k_vTintMapRange;            // Offset:  400 Size:     8 [unused]
//      = 0x447a0000 0x447a0000 
//   float k_fTintMapMinFade;           // Offset:  408 Size:     4 [unused]
//      = 0x3f800000 
//   bool k_bUseWorldTintMap;           // Offset:  412 Size:     4 [unused]
//      = 0x00000000 
//   float k_fMaxSpecularPower;         // Offset:  416 Size:     4
//      = 0x42800000 
//   int k_fVertexAnimation;            // Offset:  420 Size:     4 [unused]
//      = 0x00000001 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sTrilinear_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// tDiffuseMap                       texture  float4          2d    0        1
// tNormalMap                        texture  float4          2d    1        1
// tSpecularMap                      texture  float4          2d    2        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float      w
// COLOR                    0   xyzw        7     NONE   float   xyzw
// SV_IsFrontFace           0   x           8    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[27], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.w
dcl_input_ps linear v7.xyzw
dcl_input_ps_sgv v8.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r0.w, r0.w, v6.w, l(-0.376471)
add r0.xyz, r0.xyzx, -v7.xyzx
mad o1.xyz, v7.wwww, r0.xyzx, v7.xyzx
lt r0.x, r0.w, l(0.000000)
discard_nz r0.x
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t1.ywxz, s0
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.z, r0.w
dp3 r1.x, v3.xyzx, r0.xyzx
dp3 r1.y, v4.xyzx, r0.xyzx
dp3 r1.z, v5.xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
movc r0.xz, v8.xxxx, r0.xxzx, -r0.xxzx
mad o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0.505882)
mov o1.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t2.xyzw, s0
mul o2.x, r0.z, cb0[26].x
mov o2.yzw, r0.yyxw
ret 
// Approximately 25 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
