
cbuffer _Globals : register(b0)
{
  float k_fInvLightRadius : packoffset(c0);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c1);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c4);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c7);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c11);
  row_major float3x4 k_mWorldToVolume : packoffset(c12);
  float3 k_vDirectional_Dir : packoffset(c15);
  float4 k_vObjectLightColor : packoffset(c16);
  float3 k_vObjectSpaceLightPos : packoffset(c17);
  float4 k_vSpecularColor : packoffset(c18);
  float4 k_vSpotProjector_ClipFar : packoffset(c19);
  float4 k_vSpotProjector_ClipNear : packoffset(c20);
  float3 k_vHalfDims : packoffset(c21);
  float4 k_vShadowMapParams : packoffset(c22);
  float4 k_vShadowMapParams2 : packoffset(c23);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c24);
  float4 k_vShadowCascadeOffsetX : packoffset(c28);
  float4 k_vShadowCascadeOffsetZ : packoffset(c29);
  float k_fStaticLightVolume_Mip : packoffset(c30);
  float4 k_vShadowSplitDistSquared : packoffset(c31);
  float4 k_vShadowSplitDistSelect : packoffset(c32);
  float4 k_vShadowMoveX : packoffset(c33);
  float4 k_vShadowMoveY : packoffset(c34);
  float4 k_vShadowMoveZ : packoffset(c35);
  float4 k_vShadowScaleXY : packoffset(c36);
  float4 k_vShadowScaleX : packoffset(c37);
  float4 k_vShadowScaleY : packoffset(c38);
  float4 k_vShadowScaleZ : packoffset(c39);
  float3 k_vLightBleed_Offset : packoffset(c40);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c41);
  float k_fLightLayer : packoffset(c42);
  row_major float3x4 k_mViewToLight : packoffset(c43);
  row_major float4x4 k_mObjectToClip : packoffset(c46);
  row_major float3x4 k_mObjectToView : packoffset(c50);
  row_major float3x4 k_mObjectToWorld : packoffset(c53);
  float4 k_vObjectColor : packoffset(c56);
  float3 k_vObjectSpaceEyePos : packoffset(c57);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c58);
  row_major float3x4 k_mPrevObjectToView : packoffset(c62);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c65);
  float2 k_vNormalTile : packoffset(c68) = float2(1.000000e+000,1.000000e+000);
  float3 k_vAnimatedRippleU : packoffset(c69) = float3(1.500000e-003,1.000000e+001,2.000000e+001);
  float3 k_vAnimatedRippleV : packoffset(c70) = float3(1.500000e-003,1.000000e+001,2.000000e+001);
  float k_fFresnelTerm : packoffset(c70.w) = float(1.000000e+000);
  float k_fSiltScale : packoffset(c71) = float(0.000000e+000);
  float k_fFalloffStrength : packoffset(c71.y) = float(2.000000e+000);
  float k_fSlopeCull : packoffset(c71.z) = float(0.000000e+000);
  float3 k_cSiltColor : packoffset(c72) = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  float k_fMaxSpecularPower : packoffset(c72.w) = float(6.400000e+001);
  float k_fSpecularScale : packoffset(c73) = float(1.000000e+000);
  int k_bRendersEmissive : packoffset(c73.y) = int(1.401298e-045);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}


cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}
SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s1);
SamplerState sAniso4X_CLAMPCLAMPCLAMP_Sampler_s : register(s2);
SamplerState sAniso8X_CLAMPCLAMPCLAMP_Sampler_s : register(s3);
Texture2D<float4> tDepthMap : register(t0);
Texture2D<float4> tNormalMap : register(t1);
Texture2D<float4> tEnvironmentMapMask : register(t2);
Texture2D<float4> tFisheyeMap : register(t3);
Texture2D<float4> tCurFrameMap : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.xy = v2.xy / v1.ww;
  r0.zw = v1.xy / v1.ww;
  r1.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.zw).x;
  r2.xyz = tCurFrameMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.zw).xyz;
  r2.xyz = r2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.xy = r1.zz * r0.xy;
  
float4 stereo = StereoParams.Load(0);
r1.x -= stereo.x * (r1.z - stereo.y)*v4.z/2; //*k_vFullViewPlane.z/2; //*0.187;   
  
  r1.w = 1.000000000e+000;
  r0.x = dot(k_mDirectional_ObjectToTex._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(k_mDirectional_ObjectToTex._m10_m11_m12_m13, r1.xyzw);
  r0.zw = tEnvironmentMapMask.Sample(sAniso4X_CLAMPCLAMPCLAMP_Sampler_s, r0.xy).xz;
  r0.z = 5.000000000e-001 + r0.z;
  r1.y = k_vObjectColor.w * r0.w;
  r0.w = k_vAnimatedRippleU.z * r0.y;
  r1.zw = k_vNormalTile.xy * r0.xy;
  r0.x = k_vAnimatedRippleV.z * r0.x;
  r0.xy = r0.xw * r0.zz;
  r0.y = k_fTime * k_vAnimatedRippleU.y + r0.y;
  r0.x = k_fTime * k_vAnimatedRippleV.y + r0.x;
  r0.xy = sin(r0.xy);
  r0.zw = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r1.zw).yw;
  r0.zw = r0.zw * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r3.x = k_vAnimatedRippleU.x * r0.y + r0.z;
  r3.y = k_vAnimatedRippleV.x * r0.x + r0.w;
  r0.x = -r0.z * r0.z + 1.000000000e+000;
  r0.x = -r0.w * r0.w + r0.x;
  r0.x = sqrt(r0.x);
  r3.z = -r0.x;
  r0.x = dot(k_mObjectToWorld._m00_m01_m02, r3.xyz);
  r0.y = dot(k_mObjectToWorld._m10_m11_m12, r3.xyz);
  r0.z = dot(k_mObjectToWorld._m20_m21_m22, r3.xyz);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v3.xyz * r0.www;
  r0.w = dot(-r3.xyz, r0.xyz);
  r0.w = r0.w + r0.w;
  r1.zw = r0.xz * -r0.ww + -r3.xz;
  r0.w = saturate(dot(r3.xyz, r0.xyz));
  o1.xyz = r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r0.x = 1.000000000e+000 + -r0.w;
  r0.yz = saturate(r1.zw * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001));
  r0.yzw = tFisheyeMap.Sample(sAniso8X_CLAMPCLAMPCLAMP_Sampler_s, r0.yz).xyz;
  r1.z = r0.x * r0.x;
  r1.z = r1.z * r1.z;
  r0.x = r1.z * r0.x;
  r1.z = 1.000000000e+000 + -k_fFresnelTerm;
  r0.x = r1.z * r0.x + k_fFresnelTerm;
  o0.xyz = r0.xxx * r0.yzw;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx;
  r2.x = dot(k_mObjectToWorld._m00_m01_m02, k_vDirectional_Dir.xyz);
  r2.y = dot(k_mObjectToWorld._m10_m11_m12, k_vDirectional_Dir.xyz);
  r2.z = dot(k_mObjectToWorld._m20_m21_m22, k_vDirectional_Dir.xyz);
  r0.x = dot(r0.xyz, r2.xyz);
  r0.x = saturate(k_fFalloffStrength * -r0.x);
  r0.x = r0.x >= k_fSlopeCull;
  r0.x = r0.x ? 1.000000 : 0;
  r1.x = k_fSiltScale * r1.y;
  r0.xw = r1.xy * r0.xx;
  o2.w = r0.x;
  o0.w = r0.w;
  o1.w = r0.w;
  o3.w = r0.w;
  o2.xyz = k_cSiltColor.xyz * k_vObjectColor.xyz;
  o3.x = k_fMaxSpecularPower;
  o3.y = k_fSpecularScale;
  o3.z = k_fFresnelTerm;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fInvLightRadius;           // Offset:    0 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:   16 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:   64 Size:    48
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  112 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  176 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  192 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  240 Size:    12
//   float4 k_vObjectLightColor;        // Offset:  256 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  272 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  288 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  304 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  320 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  336 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  352 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  368 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  384 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  448 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  464 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  480 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  496 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  512 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  528 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  544 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  560 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  576 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  592 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  608 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset:  624 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset:  640 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset:  656 Size:    16 [unused]
//   float k_fLightLayer;               // Offset:  672 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset:  688 Size:    48 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  736 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:  800 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  848 Size:    48
//   float4 k_vObjectColor;             // Offset:  896 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  912 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  928 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  992 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset: 1040 Size:    48 [unused]
//   float2 k_vNormalTile;              // Offset: 1088 Size:     8
//      = 0x3f800000 0x3f800000 
//   float3 k_vAnimatedRippleU;         // Offset: 1104 Size:    12
//      = 0x3ac49ba6 0x41200000 0x41a00000 
//   float3 k_vAnimatedRippleV;         // Offset: 1120 Size:    12
//      = 0x3ac49ba6 0x41200000 0x41a00000 
//   float k_fFresnelTerm;              // Offset: 1132 Size:     4
//      = 0x3f800000 
//   float k_fSiltScale;                // Offset: 1136 Size:     4
//      = 0x00000000 
//   float k_fFalloffStrength;          // Offset: 1140 Size:     4
//      = 0x40000000 
//   float k_fSlopeCull;                // Offset: 1144 Size:     4
//      = 0x00000000 
//   float3 k_cSiltColor;               // Offset: 1152 Size:    12
//      = 0x00000000 0x00000000 0x00000000 
//   float k_fMaxSpecularPower;         // Offset: 1164 Size:     4
//      = 0x42800000 
//   float k_fSpecularScale;            // Offset: 1168 Size:     4
//      = 0x3f800000 
//   int k_bRendersEmissive;            // Offset: 1172 Size:     4 [unused]
//      = 0x00000001 
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// sAniso4X_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    2        1
// sAniso8X_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    3        1
// tDepthMap                         texture  float4          2d    0        1
// tNormalMap                        texture  float4          2d    1        1
// tEnvironmentMapMask               texture  float4          2d    2        1
// tFisheyeMap                       texture  float4          2d    3        1
// tCurFrameMap                      texture  float4          2d    4        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[74], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 4
div r0.xy, v2.xyxx, v1.wwww
div r0.zw, v1.xxxy, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r1.z, r0.zwzz, t0.yzxw, s0
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.zwzz, t4.xyzw, s0
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r1.xy, r0.xyxx, r1.zzzz
mov r1.w, l(1.000000)
dp4 r0.x, cb0[4].xyzw, r1.xyzw
dp4 r0.y, cb0[5].xyzw, r1.xyzw
sample_indexable(texture2d)(float,float,float,float) r0.zw, r0.xyxx, t2.ywxz, s2
add r0.z, r0.z, l(0.500000)
mul r1.y, r0.w, cb0[56].w
mul r0.w, r0.y, cb0[69].z
mul r1.zw, r0.xxxy, cb0[68].xxxy
mul r0.x, r0.x, cb0[70].z
mul r0.xy, r0.zzzz, r0.xwxx
mad r0.y, cb13[1].x, cb0[69].y, r0.y
mad r0.x, cb13[1].x, cb0[70].y, r0.x
sincos r0.xy, null, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.zw, r1.zwzz, t1.xzyw, s1
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mad r3.x, cb0[69].x, r0.y, r0.z
mad r3.y, cb0[70].x, r0.x, r0.w
mad r0.x, -r0.z, r0.z, l(1.000000)
mad r0.x, -r0.w, r0.w, r0.x
sqrt r0.x, r0.x
mov r3.z, -r0.x
dp3 r0.x, cb0[53].xyzx, r3.xyzx
dp3 r0.y, cb0[54].xyzx, r3.xyzx
dp3 r0.z, cb0[55].xyzx, r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v3.xyzx
dp3 r0.w, -r3.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r1.zw, r0.xxxz, -r0.wwww, -r3.xxxz
dp3_sat r0.w, r3.xyzx, r0.xyzx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.x, -r0.w, l(1.000000)
mad_sat r0.yz, r1.zzwz, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.yzw, r0.yzyy, t3.wxyz, s3
mul r1.z, r0.x, r0.x
mul r1.z, r1.z, r1.z
mul r0.x, r0.x, r1.z
add r1.z, -cb0[70].w, l(1.000000)
mad r0.x, r1.z, r0.x, cb0[70].w
mul o0.xyz, r0.yzwy, r0.xxxx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
dp3 r2.x, cb0[53].xyzx, cb0[15].xyzx
dp3 r2.y, cb0[54].xyzx, cb0[15].xyzx
dp3 r2.z, cb0[55].xyzx, cb0[15].xyzx
dp3 r0.x, r0.xyzx, r2.xyzx
mul_sat r0.x, -r0.x, cb0[71].y
ge r0.x, r0.x, cb0[71].z
and r0.x, r0.x, l(0x3f800000)
mul r1.x, r1.y, cb0[71].x
mul r0.xw, r0.xxxx, r1.xxxy
mov o2.w, r0.x
mov o0.w, r0.w
mov o1.w, r0.w
mov o3.w, r0.w
mul o2.xyz, cb0[56].xyzx, cb0[72].xyzx
mov o3.x, cb0[72].w
mov o3.y, cb0[73].x
mov o3.z, cb0[70].w
ret 
// Approximately 71 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
