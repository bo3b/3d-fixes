// Purple pants on some Uruks.
// Because of decompile problem with cb0[25] of k_fGTintAmount

cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float2 k_vTessellation : packoffset(c22) = float2(1.500000e+001,6.300000e+001);
  float2 k_vFade : packoffset(c22.z) = float2(4.000000e+003,4.000000e+003);
  float k_fDisplacement : packoffset(c23) = float(2.500000e+001);
  float k_fOffset : packoffset(c23.y) = float(-2.500000e-001);
  float2 k_vMipRange : packoffset(c23.z) = float2(0.000000e+000,1.000000e+003);
  float3 k_cRTintColor : packoffset(c24) = float3(6.392000e-001,6.470000e-001,4.867000e-001);
  float k_fRTintAmount : packoffset(c24.w) = float(1.000000e+000);
  float k_fGTintAmount : packoffset(c25) = float(1.000000e+000);
  float k_fBTintAmount : packoffset(c25.y) = float(1.000000e+000);
  float k_fATintAmount : packoffset(c25.z) = float(1.000000e+000);
  float3 k_cGTintColor : packoffset(c26) = float3(6.392000e-001,6.470000e-001,4.867000e-001);
  float3 k_cBTintColor : packoffset(c27) = float3(6.392000e-001,6.470000e-001,4.867000e-001);
  float3 k_cATintColor : packoffset(c28) = float3(6.392000e-001,6.470000e-001,4.867000e-001);
  float k_fMaxSpecularPower : packoffset(c28.w) = float(6.400000e+001);
  float k_fBloodMax : packoffset(c29) = float(5.000000e-001);
  float3 k_cBloodImpactColor : packoffset(c29.y) = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  float k_fBloodImpactAlpha : packoffset(c30) = float(1.000000e+000);
  float3 k_cBloodFlowMaxColor : packoffset(c30.y) = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  float3 k_cBloodFlowMinColor : packoffset(c31) = float3(1.000000e-001,1.000000e-001,0.000000e+000);
  float k_fBloodFlowAlpha : packoffset(c31.w) = float(1.000000e+000);
  float3 k_cBloodSpecularColor : packoffset(c32) = float3(5.000000e-001,5.000000e-001,5.000000e-001);
  float k_fBloodSpecularPower : packoffset(c32.w) = float(1.024000e+003);
  float k_fBloodSpecularAlpha : packoffset(c33) = float(1.000000e+000);
  float k_fLightBleed : packoffset(c33.y) = float(0.000000e+000);
  float k_fRenderObjectID : packoffset(c33.z);
  int k_nSolidSortIndex : packoffset(c33.w) = int(8.407791e-045);
  float k_fInvLightRadius : packoffset(c34);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c35);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c38);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c41);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c45);
  row_major float3x4 k_mWorldToVolume : packoffset(c46);
  float3 k_vDirectional_Dir : packoffset(c49);
  float4 k_vObjectLightColor : packoffset(c50);
  float3 k_vObjectSpaceLightPos : packoffset(c51);
  float4 k_vSpecularColor : packoffset(c52);
  float4 k_vSpotProjector_ClipFar : packoffset(c53);
  float4 k_vSpotProjector_ClipNear : packoffset(c54);
  float3 k_vHalfDims : packoffset(c55);
  float4 k_vShadowMapParams : packoffset(c56);
  float4 k_vShadowMapParams2 : packoffset(c57);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c58);
  float4 k_vShadowCascadeOffsetX : packoffset(c62);
  float4 k_vShadowCascadeOffsetZ : packoffset(c63);
  float k_fStaticLightVolume_Mip : packoffset(c64);
  float4 k_vShadowSplitDistSquared : packoffset(c65);
  float4 k_vShadowSplitDistSelect : packoffset(c66);
  float4 k_vShadowMoveX : packoffset(c67);
  float4 k_vShadowMoveY : packoffset(c68);
  float4 k_vShadowMoveZ : packoffset(c69);
  float4 k_vShadowScaleXY : packoffset(c70);
  float4 k_vShadowScaleX : packoffset(c71);
  float4 k_vShadowScaleY : packoffset(c72);
  float4 k_vShadowScaleZ : packoffset(c73);
  float3 k_vLightBleed_Offset : packoffset(c74);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c75);
  float k_fLightLayer : packoffset(c76);
  row_major float3x4 k_mViewToLight : packoffset(c77);
}
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s1);
SamplerState sAniso4X_CLAMPCLAMPCLAMP_Sampler_s : register(s2);
Texture2D<float4> tDiffuseMap : register(t0);
Texture2D<float4> tTintMaskMap : register(t1);
Texture2D<float4> tNormalMap : register(t2);
Texture2D<float4> tSpecularMap : register(t3);
Texture2D<float4> tBloodMap : register(t4);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float4 v5 : COLOR0,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xyzw = tTintMaskMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyzw;
  r0.x = k_fRTintAmount * r0.x;
// Decompile bug, doesn't handle independent vars here.
// manual fix
//r0.yzw = k_fGTintAmount * r0.yzw;
r0.y = k_fGTintAmount * r0.y;
r0.z = k_fBTintAmount * r0.z;
r0.w = k_fATintAmount * r0.w;
  r1.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyzw;
  r2.xyz = k_cRTintColor.xyz * r1.xyz;
  r2.w = r1.w;
  r3.xyzw = r2.xyzw + -r1.xyzw;
  r3.xyzw = r0.xxxx * r3.xyzw + r1.xyzw;
  r2.xyz = k_cGTintColor.xyz * r1.xyz;
  r4.xyzw = r2.xyzw + -r3.xyzw;
  r3.xyzw = r0.yyyy * r4.xyzw + r3.xyzw;
  r2.xyz = k_cBTintColor.xyz * r1.xyz;
  r4.xyzw = r2.xyzw + -r3.xyzw;
  r3.xyzw = r0.zzzz * r4.xyzw + r3.xyzw;
  r2.xyz = k_cATintColor.xyz * r1.xyz;
  r1.xyzw = r2.xyzw + -r3.xyzw;
  r0.xyzw = r0.wwww * r1.xyzw + r3.xyzw;
  r0.w = -3.764705956e-001 + r0.w;
  r0.w = r0.w < 0.000000000e+000;
  if (r0.w != 0) discard;
  r1.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).yw;
  r1.xy = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r1.x * r1.x + 1.000000000e+000;
  r0.w = -r1.y * r1.y + r0.w;
  r1.z = sqrt(r0.w);
  r2.x = dot(v2.xyz, r1.xyz);
  r2.y = dot(v3.xyz, r1.xyz);
  r2.z = dot(v4.xyz, r1.xyz);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r2.xyz * r0.www;
  r1.xyz = v6.xxx ? r1.xyz : -r1.xyz;
  o0.xyz = r1.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o0.w = k_fRenderObjectID;
  r0.w = 1.000000e+000 / k_fBloodMax;
  r1.xy = tBloodMap.Sample(sAniso4X_CLAMPCLAMPCLAMP_Sampler_s, v1.xy).xy;
  r1.z = max(r1.y, r1.x);
  r0.w = saturate(r1.z * r0.w);
  r1.z = r0.w * -2.000000000e+000 + 3.000000000e+000;
  r0.w = r0.w * r0.w;
  r0.w = r1.z * r0.w;
  r1.z = k_fBloodFlowAlpha * r0.w;
  r2.xyz = -k_cBloodFlowMinColor.xyz + k_cBloodFlowMaxColor.xyz;
  r2.xyz = r1.xxx * r2.xyz + k_cBloodFlowMinColor.xyz;
  r1.xzw = r2.xyz * r1.zzz;
  r2.x = -r0.w * k_fBloodFlowAlpha + 1.000000000e+000;
  r0.w = k_fBloodSpecularAlpha * r0.w;
  r0.xyz = r0.xyz * r2.xxx + r1.xzw;
  r1.x = k_fBloodImpactAlpha * r1.y;
  r1.y = -r1.y * k_fBloodImpactAlpha + 1.000000000e+000;
  r1.xzw = k_cBloodImpactColor.xyz * r1.xxx;
  r0.xyz = r0.xyz * r1.yyy + r1.xzw;
  o1.xyz = v5.xyz * r0.xyz;
  r1.xyzw = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyzw;
  o1.w = r1.w;
  r0.x = k_fMaxSpecularPower * r1.z;
  r0.y = r1.y;
  o2.z = r1.x;
  r1.xy = k_fBloodSpecularPower + -r0.xy;
  o2.xy = r0.ww * r1.xy + r0.xy;
  o2.w = k_fLightBleed;
  return;
}



/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float2 k_vTessellation;            // Offset:  352 Size:     8 [unused]
//      = 0x41700000 0x427c0000 
//   float2 k_vFade;                    // Offset:  360 Size:     8 [unused]
//      = 0x457a0000 0x457a0000 
//   float k_fDisplacement;             // Offset:  368 Size:     4 [unused]
//      = 0x41c80000 
//   float k_fOffset;                   // Offset:  372 Size:     4 [unused]
//      = 0xbe800000 
//   float2 k_vMipRange;                // Offset:  376 Size:     8 [unused]
//      = 0x00000000 0x447a0000 
//   float3 k_cRTintColor;              // Offset:  384 Size:    12
//      = 0x3f23a29c 0x3f25a1cb 0x3ef930be 
//   float k_fRTintAmount;              // Offset:  396 Size:     4
//      = 0x3f800000 
//   float k_fGTintAmount;              // Offset:  400 Size:     4
//      = 0x3f800000 
//   float k_fBTintAmount;              // Offset:  404 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fATintAmount;              // Offset:  408 Size:     4 [unused]
//      = 0x3f800000 
//   float3 k_cGTintColor;              // Offset:  416 Size:    12
//      = 0x3f23a29c 0x3f25a1cb 0x3ef930be 
//   float3 k_cBTintColor;              // Offset:  432 Size:    12
//      = 0x3f23a29c 0x3f25a1cb 0x3ef930be 
//   float3 k_cATintColor;              // Offset:  448 Size:    12
//      = 0x3f23a29c 0x3f25a1cb 0x3ef930be 
//   float k_fMaxSpecularPower;         // Offset:  460 Size:     4
//      = 0x42800000 
//   float k_fBloodMax;                 // Offset:  464 Size:     4
//      = 0x3f000000 
//   float3 k_cBloodImpactColor;        // Offset:  468 Size:    12
//      = 0x00000000 0x00000000 0x00000000 
//   float k_fBloodImpactAlpha;         // Offset:  480 Size:     4
//      = 0x3f800000 
//   float3 k_cBloodFlowMaxColor;       // Offset:  484 Size:    12
//      = 0x00000000 0x00000000 0x00000000 
//   float3 k_cBloodFlowMinColor;       // Offset:  496 Size:    12
//      = 0x3dcccccd 0x3dcccccd 0x00000000 
//   float k_fBloodFlowAlpha;           // Offset:  508 Size:     4
//      = 0x3f800000 
//   float3 k_cBloodSpecularColor;      // Offset:  512 Size:    12 [unused]
//      = 0x3f000000 0x3f000000 0x3f000000 
//   float k_fBloodSpecularPower;       // Offset:  524 Size:     4
//      = 0x44800000 
//   float k_fBloodSpecularAlpha;       // Offset:  528 Size:     4
//      = 0x3f800000 
//   float k_fLightBleed;               // Offset:  532 Size:     4
//      = 0x00000000 
//   float k_fRenderObjectID;           // Offset:  536 Size:     4
//   int k_nSolidSortIndex;             // Offset:  540 Size:     4 [unused]
//      = 0x00000000 
//   float k_fInvLightRadius;           // Offset:  544 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  560 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  608 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  656 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  720 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  736 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  784 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  800 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  816 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  832 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  848 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  864 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  880 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  896 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  912 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  928 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  992 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset: 1008 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset: 1024 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset: 1040 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset: 1056 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset: 1072 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset: 1088 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset: 1104 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset: 1120 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset: 1136 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset: 1152 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset: 1168 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset: 1184 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1200 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1216 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1232 Size:    48 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAniso8X_WRAPWRAPCLAMP_Sampler_s    sampler      NA          NA    0        1
// sAniso4X_WRAPWRAPCLAMP_Sampler_s    sampler      NA          NA    1        1
// sAniso4X_CLAMPCLAMPCLAMP_Sampler_s    sampler      NA          NA    2        1
// tDiffuseMap                       texture  float4          2d    0        1
// tTintMaskMap                      texture  float4          2d    1        1
// tNormalMap                        texture  float4          2d    2        1
// tSpecularMap                      texture  float4          2d    3        1
// tBloodMap                         texture  float4          2d    4        1
// _Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyz 
// SV_IsFrontFace           0   x           6    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[34], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps_sgv v6.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t1.xyzw, s0
mul r0.x, r0.x, cb0[24].w
mul r0.yzw, r0.yyzw, cb0[25].xxxx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mad r2.xyz, cb0[24].xyzx, r1.xyzx, -r1.xyzx
mov r2.w, l(0)
mad r2.xyzw, r0.xxxx, r2.xyzw, r1.xyzw
mul r3.xyz, r1.xyzx, cb0[26].xyzx
mov r3.w, r1.w
add r4.xyzw, -r2.xyzw, r3.xyzw
mad r2.xyzw, r0.yyyy, r4.xyzw, r2.xyzw
mul r3.xyz, r1.xyzx, cb0[27].xyzx
add r4.xyzw, -r2.xyzw, r3.xyzw
mad r2.xyzw, r0.zzzz, r4.xyzw, r2.xyzw
mul r3.xyz, r1.xyzx, cb0[28].xyzx
add r1.xyzw, -r2.xyzw, r3.xyzw
mad r0.xyzw, r0.wwww, r1.xyzw, r2.xyzw
add r0.w, r0.w, l(-0.376471)
lt r0.w, r0.w, l(0.000000)
discard_nz r0.w
sample_indexable(texture2d)(float,float,float,float) r1.xy, v1.xyxx, t2.ywxz, s1
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r1.x, r1.x, l(1.000000)
mad r0.w, -r1.y, r1.y, r0.w
sqrt r1.z, r0.w
dp3 r2.x, v2.xyzx, r1.xyzx
dp3 r2.y, v3.xyzx, r1.xyzx
dp3 r2.z, v4.xyzx, r1.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r2.xyzx
movc r1.xyz, v6.xxxx, r1.xyzx, -r1.xyzx
mad o0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[29].x
sample_indexable(texture2d)(float,float,float,float) r1.xy, v1.xyxx, t4.xyzw, s2
max r1.z, r1.x, r1.y
mul_sat r0.w, r0.w, r1.z
mad r1.z, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.z
mul r1.z, r0.w, cb0[31].w
add r2.xyz, cb0[30].yzwy, -cb0[31].xyzx
mad r2.xyz, r1.xxxx, r2.xyzx, cb0[31].xyzx
mul r1.xzw, r1.zzzz, r2.xxyz
mad r2.x, -r0.w, cb0[31].w, l(1.000000)
mul r0.w, r0.w, cb0[33].x
mad r0.xyz, r0.xyzx, r2.xxxx, r1.xzwx
mul r1.x, r1.y, cb0[30].x
mad r1.y, -r1.y, cb0[30].x, l(1.000000)
mul r1.xzw, r1.xxxx, cb0[29].yyzw
mad r0.xyz, r0.xyzx, r1.yyyy, r1.xzwx
mul o1.xyz, r0.xyzx, v5.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t3.xyzw, s1
mul r0.x, r1.z, cb0[28].w
mov r0.y, r1.y
add r1.yz, -r0.xxyx, cb0[32].wwww
mad o2.xy, r0.wwww, r1.yzyy, r0.xyxx
mov o0.w, cb0[33].z
mov o1.w, r1.w
mov o2.z, r1.x
mov o2.w, cb0[33].y
ret 
// Approximately 62 instruction slots used
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
