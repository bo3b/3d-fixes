
cbuffer _Globals : register(b0)
{
  float k_fInvLightRadius : packoffset(c0);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c1);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c4);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c7);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c11);
  row_major float3x4 k_mWorldToVolume : packoffset(c12);
  float3 k_vDirectional_Dir : packoffset(c15);
  float4 k_vObjectLightColor : packoffset(c16);
  float3 k_vObjectSpaceLightPos : packoffset(c17);
  float4 k_vSpecularColor : packoffset(c18);
  float4 k_vSpotProjector_ClipFar : packoffset(c19);
  float4 k_vSpotProjector_ClipNear : packoffset(c20);
  float3 k_vHalfDims : packoffset(c21);
  float4 k_vShadowMapParams : packoffset(c22);
  float4 k_vShadowMapParams2 : packoffset(c23);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c24);
  float4 k_vShadowCascadeOffsetX : packoffset(c28);
  float4 k_vShadowCascadeOffsetZ : packoffset(c29);
  float k_fStaticLightVolume_Mip : packoffset(c30);
  float4 k_vShadowSplitDistSquared : packoffset(c31);
  float4 k_vShadowSplitDistSelect : packoffset(c32);
  float4 k_vShadowMoveX : packoffset(c33);
  float4 k_vShadowMoveY : packoffset(c34);
  float4 k_vShadowMoveZ : packoffset(c35);
  float4 k_vShadowScaleXY : packoffset(c36);
  float4 k_vShadowScaleX : packoffset(c37);
  float4 k_vShadowScaleY : packoffset(c38);
  float4 k_vShadowScaleZ : packoffset(c39);
  float3 k_vLightBleed_Offset : packoffset(c40);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c41);
  float k_fLightLayer : packoffset(c42);
  row_major float3x4 k_mViewToLight : packoffset(c43);
  row_major float4x4 k_mObjectToClip : packoffset(c46);
  row_major float3x4 k_mObjectToView : packoffset(c50);
  row_major float3x4 k_mObjectToWorld : packoffset(c53);
  float4 k_vObjectColor : packoffset(c56);
  float3 k_vObjectSpaceEyePos : packoffset(c57);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c58);
  row_major float3x4 k_mPrevObjectToView : packoffset(c62);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c65);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}
SamplerState sBilinear_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tDirectional_Attenuation : register(t0);
TextureCube<float4> tCubeProjector_LightMap : register(t1);
Texture2D<float4> tDepthMap : register(t2);
Texture2D<float4> tDeferredDiffuse : register(t3);
Texture2D<float4> tDeferredNormals : register(t4);
Texture2D<float4> tDeferredSpecular : register(t5);
Texture2D<float4> tAmbientOcclusion : register(t6);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask;
  r0.xy = v1.xy / v1.ww;
  r0.zw = v2.xy / v1.ww;
  r1.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.xy).x;
  r1.xy = r1.zz * r0.zw;
  
float4 stereo = StereoParams.Load(0);
r1.x -= stereo.x * (r1.z - stereo.y)*k_vFullViewPlane.z/2; //*0.187; 
  
  r1.xyz = k_vObjectSpaceLightPos.xyz + -r1.xyz;
  r1.xyz = k_fInvLightRadius * r1.xyz;
  



  r2.x = dot(k_mViewToWorld._m00_m01_m02, r1.xyz);
  r2.y = dot(k_mViewToWorld._m10_m11_m12, r1.xyz);
  r2.z = dot(k_mViewToWorld._m20_m21_m22, r1.xyz);
  r0.z = dot(r2.xyz, r2.xyz);
  r3.y = sqrt(r0.z);
  r3.x = 0.000000000e+000;
  r3.xyz = tDirectional_Attenuation.SampleLevel(sBilinear_CLAMPCLAMPCLAMP_Sampler_s, r3.xy, 0.000000000e+000).xyz;
  r4.x = dot(k_mCubeProjector_LightTransform._m00_m01_m02, r1.xyz);
  r4.y = dot(k_mCubeProjector_LightTransform._m10_m11_m12, r1.xyz);
  r4.z = dot(k_mCubeProjector_LightTransform._m20_m21_m22, r1.xyz);
  r1.xyzw = tCubeProjector_LightMap.SampleLevel(sBilinear_CLAMPCLAMPCLAMP_Sampler_s, r4.xyz, 0.000000000e+000).xyzw;
  r1.xyz = k_vObjectLightColor.xyz * r1.xyz;
  r4.xyzw = tDeferredDiffuse.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.xy).xyzw;
  r5.xyz = r4.xyz * r1.xyz;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r6.xyzw = tDeferredNormals.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.xy).xyzw;
  r6.xyz = r6.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.w = dot(r6.xyz, r6.xyz);
  r2.w = rsqrt(r2.w);
  r6.xyz = r6.xyz * r2.www;
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r7.xyzw = tDeferredSpecular.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.xy).xyzw;
  r8.xyz = k_vSpecularColor.xyz * r1.www;
  r0.z = r7.x * r7.x;
  r0.xy = tAmbientOcclusion.SampleLevel(sBilinear_CLAMPCLAMPCLAMP_Sampler_s, r0.xy, 0.000000000e+000).xy;
  r9.xyz = v3.xyz * r0.www + r2.xyz;
  r0.w = dot(r9.xyz, r9.xyz);
  r0.w = rsqrt(r0.w);
  r9.xyz = r9.xyz * r0.www;
  r0.w = saturate(dot(r6.xyz, r9.xyz));
  r10.xy = r0.zz * float2(4.096000e+003,4.096000e+003) + float2(4.000000e-003,2.004000e+000);
  r0.z = 1.250000000e-001 * r10.y;
  r0.w = log2(r0.w);
  r0.w = r10.x * r0.w;
  r0.w = exp2(r0.w);
  r0.z = r0.z * r0.w;
  r0.w = 1.000000000e+000 + -r7.z;
  r1.w = saturate(dot(r2.xyz, r9.xyz));
  r1.w = 1.000000000e+000 + -r1.w;
  r2.w = r1.w * r1.w;
  r2.w = r2.w * r2.w;
  r1.w = r2.w * r1.w;
  r0.w = r0.w * r1.w + r7.z;
  r0.z = r0.z * r0.w;
  r8.xyz = r0.xxx * r8.xyz;
  r7.xyz = r8.xyz * r7.yyy;
  r0.x = dot(r6.xyz, r2.xyz);
  r0.w = r0.x + r4.w;
  r0.w = -1.000000000e+000 + r0.w;
  r0.w = saturate(r0.w / r4.w);
  r2.xyz = r7.xyz * r0.zzz + r5.xyz;
  r2.xyz = r2.xyz * r0.www;
  r0.z = 0.000000000e+000 < r7.w;
  if (r0.z != 0) {
  r0.z = r6.w < 5.098039508e-001;
  r5.xyz = r5.xyz + r5.xyz;
  r0.w = max(r4.z, r4.y);
  r0.w = max(r0.w, r4.x);
  r4.xyz = saturate(r4.xyz / r0.www);
  r1.xyz = saturate(r1.xyz);
  r4.xyz = r4.xyz * r4.xyz;
  r1.xyz = r4.xyz * r1.xyz;
  r1.xyz = float3(1.500000e-001,1.500000e-001,1.500000e-001) * r1.xyz;
  r1.xyz = r0.zzz ? r5.xyz : r1.xyz;
  r0.z = saturate(-5.000000000e-001 + r7.w);
  r4.xyz = r1.xyz * r0.zzz;
  r0.zw = saturate(float2(2.500000e-001,1.000000e+000) + -r0.xx); 
  r4.xyz = r4.xyz * r0.zzz + r2.xyz;
  r0.z = min(r7.w, 5.000000000e-001);
  r1.xyz = r1.xyz * r0.zzz;
  r1.xyz = r1.xyz * r0.www;
  r0.x = saturate(2.500000000e-001 + r0.x);
  r2.xyz = r1.xyz * r0.xxx + r4.xyz;
  }
  r0.xzw = r3.xyz * r2.xyz;
  o0.xyz = r0.xzw * r0.yyy;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fInvLightRadius;           // Offset:    0 Size:     4
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:   16 Size:    48
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:   64 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  112 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  176 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  192 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  240 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  256 Size:    16
//   float3 k_vObjectSpaceLightPos;     // Offset:  272 Size:    12
//   float4 k_vSpecularColor;           // Offset:  288 Size:    16
//   float4 k_vSpotProjector_ClipFar;   // Offset:  304 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  320 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  336 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  352 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  368 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  384 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  448 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  464 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  480 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  496 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  512 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  528 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  544 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  560 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  576 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  592 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  608 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset:  624 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset:  640 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset:  656 Size:    16 [unused]
//   float k_fLightLayer;               // Offset:  672 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset:  688 Size:    48 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  736 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:  800 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  848 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  896 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  912 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  928 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  992 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset: 1040 Size:    48 [unused]
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sBilinear_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    1        1
// tDirectional_Attenuation          texture  float4          2d    0        1
// tCubeProjector_LightMap           texture  float4        cube    1        1
// tDepthMap                         texture  float4          2d    2        1
// tDeferredDiffuse                  texture  float4          2d    3        1
// tDeferredNormals                  texture  float4          2d    4        1
// tDeferredSpecular                 texture  float4          2d    5        1
// tAmbientOcclusion                 texture  float4          2d    6        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb12[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 11
div r0.xy, v1.xyxx, v1.wwww
div r0.zw, v2.xxxy, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t2.yzxw, s1
mul r1.xy, r0.zwzz, r1.zzzz
add r1.xyz, -r1.xyzx, cb0[17].xyzx
mul r1.xyz, r1.xyzx, cb0[0].xxxx
dp3 r2.x, cb12[4].xyzx, r1.xyzx
dp3 r2.y, cb12[5].xyzx, r1.xyzx
dp3 r2.z, cb12[6].xyzx, r1.xyzx
dp3 r0.z, r2.xyzx, r2.xyzx
sqrt r3.y, r0.z
mov r3.x, l(0)
sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t0.xyzw, s0, l(0.000000)
dp3 r4.x, cb0[1].xyzx, r1.xyzx
dp3 r4.y, cb0[2].xyzx, r1.xyzx
dp3 r4.z, cb0[3].xyzx, r1.xyzx
sample_l_indexable(texturecube)(float,float,float,float) r1.xyzw, r4.xyzx, t1.xyzw, s0, l(0.000000)
mul r1.xyz, r1.xyzx, cb0[16].xyzx
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyxx, t3.xyzw, s1
mul r5.xyz, r1.xyzx, r4.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r0.xyxx, t4.xyzw, s1
mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r2.w, r6.xyzx, r6.xyzx
rsq r2.w, r2.w
mul r6.xyz, r2.wwww, r6.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r7.xyzw, r0.xyxx, t5.xyzw, s1
mul r8.xyz, r1.wwww, cb0[18].xyzx
mul r0.z, r7.x, r7.x
sample_l_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t6.xyzw, s0, l(0.000000)
mad r9.xyz, v3.xyzx, r0.wwww, r2.xyzx
dp3 r0.w, r9.xyzx, r9.xyzx
rsq r0.w, r0.w
mul r9.xyz, r0.wwww, r9.xyzx
dp3_sat r0.w, r6.xyzx, r9.xyzx
mad r10.xy, r0.zzzz, l(4096.000000, 4096.000000, 0.000000, 0.000000), l(0.004000, 2.004000, 0.000000, 0.000000)
mul r0.z, r10.y, l(0.125000)
log r0.w, r0.w
mul r0.w, r0.w, r10.x
exp r0.w, r0.w
mul r0.z, r0.w, r0.z
add r0.w, -r7.z, l(1.000000)
dp3_sat r1.w, r2.xyzx, r9.xyzx
add r1.w, -r1.w, l(1.000000)
mul r2.w, r1.w, r1.w
mul r2.w, r2.w, r2.w
mul r1.w, r1.w, r2.w
mad r0.w, r0.w, r1.w, r7.z
mul r0.z, r0.w, r0.z
mul r8.xyz, r8.xyzx, r0.xxxx
mul r7.xyz, r7.yyyy, r8.xyzx
dp3 r0.x, r6.xyzx, r2.xyzx
add r0.w, r4.w, r0.x
add r0.w, r0.w, l(-1.000000)
div_sat r0.w, r0.w, r4.w
mad r2.xyz, r7.xyzx, r0.zzzz, r5.xyzx
mul r2.xyz, r0.wwww, r2.xyzx
lt r0.z, l(0.000000), r7.w
if_nz r0.z
  lt r0.z, r6.w, l(0.509804)
  add r5.xyz, r5.xyzx, r5.xyzx
  max r0.w, r4.z, r4.y
  max r0.w, r0.w, r4.x
  div_sat r4.xyz, r4.xyzx, r0.wwww
  mov_sat r1.xyz, r1.xyzx
  mul r4.xyz, r4.xyzx, r4.xyzx
  mul r1.xyz, r1.xyzx, r4.xyzx
  mul r1.xyz, r1.xyzx, l(0.150000, 0.150000, 0.150000, 0.000000)
  movc r1.xyz, r0.zzzz, r5.xyzx, r1.xyzx
  add_sat r0.z, r7.w, l(-0.500000)
  mul r4.xyz, r0.zzzz, r1.xyzx
  add_sat r0.zw, -r0.xxxx, l(0.000000, 0.000000, 0.250000, 1.000000)
  mad r4.xyz, r4.xyzx, r0.zzzz, r2.xyzx
  min r0.z, r7.w, l(0.500000)
  mul r1.xyz, r0.zzzz, r1.xyzx
  mul r1.xyz, r0.wwww, r1.xyzx
  add_sat r0.x, r0.x, l(0.250000)
  mad r2.xyz, r1.xyzx, r0.xxxx, r4.xyzx
endif 
mul r0.xzw, r2.xxyz, r3.xxyz
mul o0.xyz, r0.yyyy, r0.xzwx
mov o0.w, l(1.000000)
ret 
// Approximately 86 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
