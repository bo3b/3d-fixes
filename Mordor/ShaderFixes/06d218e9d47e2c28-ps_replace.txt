
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float3 k_vVertDisplace : packoffset(c22) = float3(0.000000e+000,1.000000e+000,1.000000e+002);
  float4 k_vObjectLightColor : packoffset(c23);
  float2 k_fTileNormalMapUV : packoffset(c24) = float2(1.000000e+000,1.000000e+000);
  float2 k_fPanNormalMapUV : packoffset(c24.z) = float2(0.000000e+000,0.000000e+000);
  float k_fNormalMapFade : packoffset(c25) = float(0.000000e+000);
  float k_fRefractScale : packoffset(c25.y) = float(5.000000e+001);
  float3 k_cFogColor : packoffset(c26) = float3(0.000000e+000,4.000000e-003,1.180000e-002);
  float4 k_vLightFilterClarity : packoffset(c27) = float4(9.950000e-001,9.980000e-001,1.000000e+000,5.000000e+002);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}
SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s1);
SamplerState sAniso8X_CLAMPCLAMPCLAMP_Sampler_s : register(s2);
Texture2D<float4> tDepthMap : register(t0);
Texture2D<float4> tNormalMap : register(t1);
Texture2D<float3> tCurFrameMap : register(t2);
Texture2D<float4> tFisheyeMap : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD1,
  float3 v4 : TEXCOORD3,
  float4 v5 : COLOR0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xy = k_fTileNormalMapUV.xy * v1.xy;
  r0.zw = k_fTime * k_fPanNormalMapUV.xy + r0.xy;
  r0.xy = k_fTime * -k_fPanNormalMapUV.xy + r0.xy;
  r0.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).yw;
  r1.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.zw).yw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.z = sqrt(r0.w);
  r0.w = -r1.x * r1.x + 1.000000000e+000;
  r0.w = -r1.y * r1.y + r0.w;
  r1.z = sqrt(r0.w);
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = k_fNormalMapFade + r0.z;
  r0.z = dot(r0.xyw, r0.xyw);
  r0.z = rsqrt(r0.z);
  r0.xyz = r0.xwy * r0.zzz;
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v4.xyz * r0.www;
  r0.w = dot(-r1.xyz, r0.xyz);
  r0.w = r0.w + r0.w;
  r2.xy = r0.xz * -r0.ww + -r1.xz;
  r0.y = saturate(dot(r1.xyz, r0.xyz));
  r0.y = 1.000000000e+000 + -r0.y;
  r1.xy = saturate(r2.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001));
  r1.xyz = tFisheyeMap.Sample(sAniso8X_CLAMPCLAMPCLAMP_Sampler_s, r1.xy).xyz;
  r2.xy = v3.xy / v3.ww;
  r2.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r2.xy).x;
  r0.w = -v3.w + r2.z;
  r0.w = saturate(9.999999776e-003 * r0.w);
  r0.w = max(r0.w, 1.000000015e-001);
  r0.w = k_fRefractScale * r0.w;
  r0.xz = r0.xz * r0.ww;
  r0.xz = r0.xz / v3.ww;
  r3.xy = r2.xy + r0.xz;
  r3.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r3.xy).x;
  r0.x = r3.z < v3.w;
  r0.xzw = r0.xxx ? r2.xyz : r3.xyz;
  r0.w = -v3.w + r0.w;
  r2.xyz = tCurFrameMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.xz).xyz;
  r3.xyz = log2(abs(k_vLightFilterClarity.xyz));
  r3.xyz = r3.xyz * r0.www;
  r3.xyz = exp2(r3.xyz);
  r0.x = sqrt(r0.w);
  r0.z = saturate(1.000000015e-001 * r0.w);
  r0.x = saturate(r0.x / k_vLightFilterClarity.w);
  r4.xyz = k_cFogColor.xyz * r0.xxx;
  r3.xyz = r2.xyz * r3.xyz + r4.xyz;
  r0.x = r0.y * r0.y;
  r0.x = r0.x * r0.x;
  r0.x = r0.y * r0.x;
  r0.x = r0.x * 9.499999881e-001 + 5.000000075e-002;
  r0.xyw = r0.xxx * r1.xyz + r3.xyz;
  r0.xyw = r0.xyw + -r2.xyz;
  o0.xyz = r0.zzz * r0.xyw + r2.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float3 k_vVertDisplace;            // Offset:  352 Size:    12 [unused]
//      = 0x00000000 0x3f800000 0x42c80000 
//   float4 k_vObjectLightColor;        // Offset:  368 Size:    16 [unused]
//   float2 k_fTileNormalMapUV;         // Offset:  384 Size:     8
//      = 0x3f800000 0x3f800000 
//   float2 k_fPanNormalMapUV;          // Offset:  392 Size:     8
//      = 0x00000000 0x00000000 
//   float k_fNormalMapFade;            // Offset:  400 Size:     4
//      = 0x00000000 
//   float k_fRefractScale;             // Offset:  404 Size:     4
//      = 0x42480000 
//   float3 k_cFogColor;                // Offset:  416 Size:    12
//      = 0x00000000 0x3b83126f 0x3c4154ca 
//   float4 k_vLightFilterClarity;      // Offset:  432 Size:    16
//      = 0x3f7eb852 0x3f7f7cee 0x3f800000 0x43fa0000 
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// sAniso8X_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    2        1
// tDepthMap                         texture  float4          2d    0        1
// tNormalMap                        texture  float4          2d    1        1
// tCurFrameMap                      texture  float3          2d    2        1
// tFisheyeMap                       texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyzw        2     NONE   float       
// TEXCOORD                 1   xyzw        3     NONE   float   xy w
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[28], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyw
dcl_input_ps linear v4.xyz
dcl_output o0.xyzw
dcl_temps 5
mul r0.xy, v1.xyxx, cb0[24].xyxx
mad r0.zw, cb13[1].xxxx, cb0[24].zzzw, r0.xxxy
mad r0.xy, cb13[1].xxxx, -cb0[24].zwzz, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t1.ywxz, s1
mad r1.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.zwzz, t1.ywxz, s1
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.z, r0.w
mad r0.w, -r1.x, r1.x, l(1.000000)
mad r0.w, -r1.y, r1.y, r0.w
sqrt r1.z, r0.w
add r0.xyz, r0.xyzx, r1.xyzx
add r0.w, r0.z, cb0[25].x
dp3 r0.z, r0.xywx, r0.xywx
rsq r0.z, r0.z
mul r0.xyz, r0.zzzz, r0.xwyx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v4.xyzx
dp3 r0.w, -r1.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r2.xy, r0.xzxx, -r0.wwww, -r1.xzxx
dp3_sat r0.y, r1.xyzx, r0.xyzx
add r0.y, -r0.y, l(1.000000)
mad_sat r1.xy, r2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t3.xyzw, s2
div r2.xy, v3.xyxx, v3.wwww
sample_indexable(texture2d)(float,float,float,float) r2.z, r2.xyxx, t0.yzxw, s0
add r0.w, r2.z, -v3.w
mul_sat r0.w, r0.w, l(0.010000)
max r0.w, r0.w, l(0.100000)
mul r0.w, r0.w, cb0[25].y
mul r0.xz, r0.wwww, r0.xxzx
div r0.xz, r0.xxzx, v3.wwww
add r3.xy, r0.xzxx, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r3.z, r3.xyxx, t0.yzxw, s0
lt r0.x, r3.z, v3.w
movc r0.xzw, r0.xxxx, r2.xxyz, r3.xxyz
add r0.w, r0.w, -v3.w
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xzxx, t2.xyzw, s0
log r3.xyz, |cb0[27].xyzx|
mul r3.xyz, r0.wwww, r3.xyzx
exp r3.xyz, r3.xyzx
sqrt r0.x, r0.w
mul_sat r0.z, r0.w, l(0.100000)
div_sat r0.x, r0.x, cb0[27].w
mul r4.xyz, r0.xxxx, cb0[26].xyzx
mad r3.xyz, r2.xyzx, r3.xyzx, r4.xyzx
mul r0.x, r0.y, r0.y
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.y
mad r0.x, r0.x, l(0.950000), l(0.050000)
mad r0.xyw, r0.xxxx, r1.xyxz, r3.xyxz
add r0.xyw, -r2.xyxz, r0.xyxw
mad o0.xyz, r0.zzzz, r0.xywx, r2.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 59 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
