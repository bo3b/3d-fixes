//Lighting
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float4 k_vObjectLightColor : packoffset(c22);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD1,
  out float4 o5 : TEXCOORD3,
  out float4 o4 : COLOR0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  
o5.xyzw = k_vFullViewPlane.xyzw;

  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToClip._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(k_mObjectToClip._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(k_mObjectToClip._m20_m21_m22_m23, r0.xyzw);
  r1.w = dot(k_mObjectToClip._m30_m31_m32_m33, r0.xyzw);
  r0.x = dot(k_mObjectToWorld._m10_m11_m12_m13, r0.xyzw);
  r0.x = k_vFogSky.w + r0.x;
  
float4 stereo = StereoParams.Load(0);
float4 r23;
r23.xyzw = r1.xyzw;
r1.x += stereo.x * (r1.w - stereo.y); 
  
  o0.xyzw = r23.xyzw;
  o3.zw = r1.zw;
  o1.xy = v2.xy;
  r0.y = 1.999999949e-005 * abs(r1.w);
  r0.y = min(r0.y, 1.000000000e+000);
  r0.y = 1.000000000e+000 + -r0.y;
  r2.xyz = k_vObjectSpaceEyePos.xyz + -v0.xyz;
  r3.x = dot(k_mObjectToWorld._m00_m01_m02, r2.xyz);
  r3.z = dot(k_mObjectToWorld._m20_m21_m22, r2.xyz);
  r3.y = dot(k_mObjectToWorld._m10_m11_m12, r2.xyz);
  r0.z = dot(r3.xyz, r3.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r3.xyz * r0.zzz;
  r0.z = -r3.y * r0.z + -1.500000060e-001;
  r0.z = saturate(1.000000000e+000 + -r0.z);
  r0.z = r0.z * r0.z;
  r0.w = dot(-r2.xyz, k_vFogSunDir.xyz);
  r1.z = -k_vFogMieB.y * r0.w + k_vFogMieB.x;
  r0.w = r0.w * r0.w + 1.000000000e+000;
  r0.w = 5.968310311e-002 * r0.w;
  r1.z = log2(abs(r1.z));
  r1.z = -1.500000000e+000 * r1.z;
  r1.z = exp2(r1.z);
  r2.x = k_vFogMieB.z * r1.z + -k_vFogMieA.z;
  r1.z = k_vFogMieB.z * r1.z;
  r2.x = max(r2.x, 0.000000000e+000);
  r0.y = -r2.x * r0.y + r1.z;
  r0.y = max(r0.y, k_vFogSunColor.w);
  r1.z = max(r0.x, 0.000000000e+000);
  r0.x = k_vFogSky.z + -r0.x;
  r0.x = r0.x / k_vFogMieA.y;
  r2.x = -r1.z / k_vFogMieA.x;
  r1.z = -r1.z / k_vFogRayleigh.w;
  r1.z = 1.442695022e+000 * r1.z;
  r1.z = exp2(r1.z);
  r2.x = 1.442695022e+000 * r2.x;
  r2.x = exp2(r2.x);
  r2.x = k_vFogMieB.w + r2.x;
  r2.x = k_vFogMieC.y * r2.x;
  r2.x = 5.000000000e-001 * r2.x;
  r0.z = r2.x * r0.z;
  r0.z = min(r0.z, k_vFogMieA.w);
  r0.z = max(r0.z, k_vFogMieC.x);
  r0.y = r0.y * r0.z;
  r2.xyz = k_vFogRayleigh.xyz * r1.zzz + r0.zzz;
  r3.xyz = k_vFogRayleigh.xyz * r1.zzz;
  r0.yzw = r3.xyz * r0.www + r0.yyy;
  r0.yzw = r0.yzw / r2.xyz;
  r3.xyz = -r2.xyz * r0.xxx;
  r2.xyz = -r2.xyz * abs(r1.www);
  r1.zw = k_vScene_TexCoordScale.xy * r1.ww;
  r2.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r3.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r4.xyz = log2(k_vFogSunColor.xyz);
  r4.xyz = float3(4.545455e-001,4.545455e-001,4.545455e-001) * r4.xyz;
  r4.xyz = exp2(r4.xyz);
  r3.xyz = r4.xyz * r3.xyz;
  r0.xyz = r3.xyz * r0.yzw;
  r2.yzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r2.xyz;
  o2.w = r2.x;
  r0.xyz = r0.xyz * r2.yzw + float3(-4.000000e-003,-4.000000e-003,-4.000000e-003);
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r2.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r2.xyz = r2.xyz * r0.xyz;
  r3.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(1.700000e+000,1.700000e+000,1.700000e+000);
  r0.xyz = r0.xyz * r3.xyz + float3(6.000000e-002,6.000000e-002,6.000000e-002);
  o2.xyz = r2.xyz / r0.xyz;
  r0.xy = k_vScene_TexCoordScale.xy * float2(1.000000e+000,-1.000000e+000);
  o3.xy = r1.xy * r0.xy + r1.zw;
  r0.xyzw = k_vObjectColor.xyzw * v5.xyzw;
  o4.xyz = k_vObjectLightColor.xyz * r0.xyz;
  o4.w = r0.w;
  
  
  // o0=0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48
//   float4 k_vObjectColor;             // Offset:  160 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float4 k_vObjectLightColor;        // Offset:  352 Size:    16
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16
//   float4 k_vFogSky;                  // Offset:  288 Size:    16
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float       
// BINORMAL                 0   xyz         4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb12[25], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xy
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[0].xyzw, r0.xyzw
dp4 r1.y, cb0[1].xyzw, r0.xyzw
dp4 r1.z, cb0[2].xyzw, r0.xyzw
dp4 r1.w, cb0[3].xyzw, r0.xyzw
dp4 r0.x, cb0[8].xyzw, r0.xyzw
add r0.x, r0.x, cb12[18].w
mov o0.xyzw, r1.xyzw
mov o3.zw, r1.zzzw
mov o1.xy, v2.xyxx
mul r0.y, |r1.w|, l(0.000020)
min r0.y, r0.y, l(1.000000)
add r0.y, -r0.y, l(1.000000)
add r2.xyz, -v0.xyzx, cb0[11].xyzx
dp3 r3.x, cb0[7].xyzx, r2.xyzx
dp3 r3.z, cb0[9].xyzx, r2.xyzx
dp3 r3.y, cb0[8].xyzx, r2.xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r3.xyzx
mad r0.z, -r3.y, r0.z, l(-0.150000)
add_sat r0.z, -r0.z, l(1.000000)
mul r0.z, r0.z, r0.z
dp3 r0.w, -r2.xyzx, cb12[20].xyzx
mad r1.z, -cb12[16].y, r0.w, cb12[16].x
mad r0.w, r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.059683)
log r1.z, |r1.z|
mul r1.z, r1.z, l(-1.500000)
exp r1.z, r1.z
mad r2.x, cb12[16].z, r1.z, -cb12[15].z
mul r1.z, r1.z, cb12[16].z
max r2.x, r2.x, l(0.000000)
mad r0.y, -r2.x, r0.y, r1.z
max r0.y, r0.y, cb12[19].w
max r1.z, r0.x, l(0.000000)
add r0.x, -r0.x, cb12[18].z
div r0.x, r0.x, cb12[15].y
div r2.x, -r1.z, cb12[15].x
div r1.z, -r1.z, cb12[14].w
mul r1.z, r1.z, l(1.442695)
exp r1.z, r1.z
mul r2.x, r2.x, l(1.442695)
exp r2.x, r2.x
add r2.x, r2.x, cb12[16].w
mul r2.x, r2.x, cb12[17].y
mul r2.x, r2.x, l(0.500000)
mul r0.z, r0.z, r2.x
min r0.z, r0.z, cb12[15].w
max r0.z, r0.z, cb12[17].x
mul r0.y, r0.z, r0.y
mad r2.xyz, cb12[14].xyzx, r1.zzzz, r0.zzzz
mul r3.xyz, r1.zzzz, cb12[14].xyzx
mad r0.yzw, r3.xxyz, r0.wwww, r0.yyyy
div r0.yzw, r0.yyzw, r2.xxyz
mul r3.xyz, r0.xxxx, -r2.xyzx
mul r2.xyz, |r1.wwww|, -r2.xyzx
mul r1.zw, r1.wwww, cb12[24].xxxy
mul r2.xyz, r2.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r2.xyz, r2.xyzx
mul r3.xyz, r3.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r3.xyz, r3.xyzx
log r4.xyz, cb12[19].xyzx
mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r4.xyz, r4.xyzx
mul r3.xyz, r3.xyzx, r4.xyzx
mul r0.xyz, r0.yzwy, r3.xyzx
add r2.yzw, -r2.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
mov o2.w, r2.x
mad r0.xyz, r0.xyzx, r2.yzwy, l(-0.004000, -0.004000, -0.004000, 0.000000)
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mad r2.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mul r2.xyz, r0.xyzx, r2.xyzx
mad r3.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(1.700000, 1.700000, 1.700000, 0.000000)
mad r0.xyz, r0.xyzx, r3.xyzx, l(0.060000, 0.060000, 0.060000, 0.000000)
div o2.xyz, r2.xyzx, r0.xyzx
mul r0.xy, l(1.000000, -1.000000, 0.000000, 0.000000), cb12[24].xyxx
mad o3.xy, r1.xyxx, r0.xyxx, r1.zwzz
mul r0.xyzw, v5.xyzw, cb0[10].xyzw
mul o4.xyz, r0.xyzx, cb0[22].xyzx
mov o4.w, r0.w
ret 
// Approximately 83 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
