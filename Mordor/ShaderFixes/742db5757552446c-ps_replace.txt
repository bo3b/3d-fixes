
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float2 m_Position;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float2 m_Position;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c2);

  bool bHalfPrecision : packoffset(c5) = bool(0.000000e+000);
  bool bUsePS3CompilerArgs : packoffset(c5.y) = bool(-1.0e+000);
  // bool bUsePS3CompilerArgs : packoffset(c5.y) = bool(-1.#QNAN0e+000);
  float4 k_vSourceBufferSize : packoffset(c6) = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  float4 k_vHDRBloomParams : packoffset(c7);
}
SamplerState sSourceScreenSampler_s : register(s0);
Texture2D<float4> tSourceScreen : register(t0);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v1.zw).xyzw;
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = k_vHDRBloomParams.xxx * r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v1.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v2.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v2.zw).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v3.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = k_vHDRBloomParams.xxx * r1.xyz;
  r0.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v4.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v4.zw).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v5.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v5.zw).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v6.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v6.zw).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v7.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v7.zw).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v8.xy).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r1.xyzw = tSourceScreen.Sample(sSourceScreenSampler_s, v8.zw).xyzw;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r1.xyz * k_vHDRBloomParams.xxx + r0.xyz;
  r0.xyz = float3(6.250000e-002,6.250000e-002,6.250000e-002) * r0.xyz;
  r0.w = max(r0.y, r0.x);
  r0.w = max(r0.z, r0.w);
  r0.w = k_vHDRBloomParams.y * r0.w;
  r0.w = 2.550000000e+002 * r0.w;
  r0.w = ceil(r0.w);
  r0.w = max(r0.w, 1.000000000e+000);
  r0.w = 3.921568859e-003 * r0.w;
  r1.x = k_vHDRBloomParams.x * r0.w;
  o0.w = r0.w;
  o0.xyz = r0.xyz / r1.xxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float2 m_Position;             // Offset:   16
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:     8 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float2 m_Position;             // Offset:   32
//       float4 m_Weights;              // Offset:   48
//       float4 m_Indices;              // Offset:   64
//
//   } MaterialVertexDef_Skeletal;      // Offset:   32 Size:    48 [unused]
//   bool bHalfPrecision;               // Offset:   80 Size:     4 [unused]
//      = 0x00000000 
//   bool bUsePS3CompilerArgs;          // Offset:   84 Size:     4 [unused]
//      = 0xffffffff 
//   float4 k_vSourceBufferSize;        // Offset:   96 Size:    16 [unused]
//      = 0x00000000 0x00000000 0x00000000 0x00000000 
//   float4 k_vHDRBloomParams;          // Offset:  112 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sSourceScreenSampler              sampler      NA          NA    0        1
// tSourceScreen                     texture  float4          2d    0        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xy  
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.zwzz, t0.xyzw, s0
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.xyz, r0.xyzx, cb0[7].xxxx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.zwzz, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v3.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mul r1.xyz, r1.xyzx, cb0[7].xxxx
mad r0.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.zwzz, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v5.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v5.zwzz, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v6.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v6.zwzz, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v7.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v7.zwzz, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v8.xyxx, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v8.zwzz, t0.xyzw, s0
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[7].xxxx, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000)
max r0.w, r0.y, r0.x
max r0.w, r0.z, r0.w
mul r0.w, r0.w, cb0[7].y
mul r0.w, r0.w, l(255.000000)
round_pi r0.w, r0.w
max r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.003922)
mul r1.x, r0.w, cb0[7].x
mov o0.w, r0.w
div o0.xyz, r0.xyzx, r1.xxxx
ret 
// Approximately 58 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
