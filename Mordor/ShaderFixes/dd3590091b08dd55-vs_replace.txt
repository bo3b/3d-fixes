
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
    float4 m_Quaternion;
    float3 m_Offset0;
    float3 m_Offset1;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float4 m_Quaternion;
    float3 m_Offset0;
    float3 m_Offset1;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c5);

  float k_fConeAngle : packoffset(c11) = float(2.000000e+001);
  float k_fConeOffset : packoffset(c11.y) = float(0.000000e+000);
  float k_fDensity : packoffset(c11.z) = float(1.000000e+000);
  float k_fHDRScale : packoffset(c11.w) = float(1.600000e+001);
  float k_fTextureDimensionsX : packoffset(c12) = float(1.024000e+003);
  float k_fTextureDimensionsY : packoffset(c12.y) = float(1.024000e+003);
  row_major float4x4 k_mObjectToWorld_3DSMAX_ : packoffset(c13);
  bool k_bOITFastVolumetricApprox : packoffset(c17);
  row_major float4x4 k_mObjectToClip : packoffset(c18);
  row_major float3x4 k_mObjectToWorld : packoffset(c22);
  float4 k_vHDRLuminanceWeights : packoffset(c25);
  float4 k_vObjectLightColor : packoffset(c26);
  float3 k_vObjectSpaceEyePos : packoffset(c27);
  float2 k_vScene_TexCoordScale : packoffset(c28);
  float3 k_vScene_ZRange : packoffset(c29);
  float3 k_vWorldSpaceCameraDir : packoffset(c30);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToClip._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(k_mObjectToClip._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(k_mObjectToClip._m20_m21_m22_m23, r0.xyzw);
  r1.w = dot(k_mObjectToClip._m30_m31_m32_m33, r0.xyzw);
  
float4 stereo = StereoParams.Load(0);
float4 r23;
r23.xyzw = r1.xyzw;
r1.x += stereo.x * (r1.w - stereo.y); 

  o0.xyzw = r23.xyzw;
  o1.zw = r1.zw;
  r0.xy = k_vScene_TexCoordScale.xy * r1.ww;
  r0.zw = float2(1.000000e+000,-1.000000e+000) * k_vScene_TexCoordScale.xy;
  o1.xy = r1.xy * r0.zw + r0.xy;
  r0.xyz = k_vWorldSpaceCameraDir.yyy * k_mObjectToWorld._m10_m11_m12;
  r0.xyz = k_mObjectToWorld._m00_m01_m02 * k_vWorldSpaceCameraDir.xxx + r0.xyz;
  r0.xyz = k_mObjectToWorld._m20_m21_m22 * k_vWorldSpaceCameraDir.zzz + r0.xyz;
  r0.w = v1.y * r0.y;
  r0.w = r0.x * -v1.x + -r0.w;
  r0.w = -r0.z * v1.z + r0.w;
  r1.x = -v1.x * r0.w;
  r1.y = dot(r0.zx, v1.yw);
  r1.y = -r0.y * v1.z + r1.y;
  r1.x = r1.y * v1.w + r1.x;
  r1.yz = -v1.zy * r1.yy;
  r1.w = v1.x * r0.z;
  r1.w = r0.y * v1.w + -r1.w;
  r1.w = r0.x * v1.z + r1.w;
  r1.x = r1.w * -v1.z + r1.x;
  r0.y = dot(r0.yz, v1.xw);
  r0.x = -r0.x * v1.y + r0.y;
  r2.x = -r0.x * -v1.y + r1.x;
  r0.y = r0.w * -v1.y + -r1.y;
  r0.z = r0.w * -v1.z + r1.z;
  r0.z = -r1.w * -v1.x + r0.z;
  r0.y = r1.w * v1.w + r0.y;
  r2.y = r0.x * -v1.x + r0.y;
  r2.z = r0.x * v1.w + r0.z;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  o2.xyz = r2.xyz * r0.xxx;
  r0.xyz = -k_vObjectSpaceEyePos.xyz + v0.xyz;
  r0.w = v1.y * r0.y;
  r0.w = r0.x * -v1.x + -r0.w;
  r0.w = -r0.z * v1.z + r0.w;
  r1.x = -v1.x * r0.w;
  r1.y = dot(r0.zx, v1.yw);
  r1.y = -r0.y * v1.z + r1.y;
  r1.x = r1.y * v1.w + r1.x;
  r1.yz = -v1.zy * r1.yy;
  r1.w = v1.x * r0.z;
  r1.w = r0.y * v1.w + -r1.w;
  r1.w = r0.x * v1.z + r1.w;
  r1.x = r1.w * -v1.z + r1.x;
  r0.y = dot(r0.yz, v1.xw);
  r0.x = -r0.x * v1.y + r0.y;
  r2.x = -r0.x * -v1.y + r1.x;
  r0.y = r0.w * -v1.y + -r1.y;
  r0.z = r0.w * -v1.z + r1.z;
  r0.z = -r1.w * -v1.x + r0.z;
  r0.y = r1.w * v1.w + r0.y;
  r2.y = r0.x * -v1.x + r0.y;
  r2.z = r0.x * v1.w + r0.z;
  o3.xyz = r2.xyz;
  r0.xyz = v0.xyz + -r2.xyz;
  o4.xyz = v2.xyz;
  o5.xyz = v3.xyz;
  r1.xy = v3.xy + v0.xy;
  r2.xyz = v2.xyz + v0.xyz;
  r1.xy = -r2.xy + r1.xy;
  r1.xy = r1.xy * float2(5.000000e-001,5.000000e-001) + r2.xy;
  r1.z = k_fConeOffset + r2.z;
  o6.xyz = r1.xyz + -r0.xyz;
  r0.x = 8.726646192e-003 * k_fConeAngle;
  r0.x = cos(r0.x);
  o6.w = r0.x * r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//       float4 m_Quaternion;           // Offset:   32
//       float3 m_Offset0;              // Offset:   48
//       float3 m_Offset1;              // Offset:   64
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    60 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:   80
//       float4 m_Quaternion;           // Offset:   96
//       float3 m_Offset0;              // Offset:  112
//       float3 m_Offset1;              // Offset:  128
//       float4 m_Weights;              // Offset:  144
//       float4 m_Indices;              // Offset:  160
//
//   } MaterialVertexDef_Skeletal;      // Offset:   80 Size:    96 [unused]
//   float k_fConeAngle;                // Offset:  176 Size:     4
//      = 0x41a00000 
//   float k_fConeOffset;               // Offset:  180 Size:     4
//      = 0x00000000 
//   float k_fDensity;                  // Offset:  184 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fHDRScale;                 // Offset:  188 Size:     4 [unused]
//      = 0x41800000 
//   float k_fTextureDimensionsX;       // Offset:  192 Size:     4 [unused]
//      = 0x44800000 
//   float k_fTextureDimensionsY;       // Offset:  196 Size:     4 [unused]
//      = 0x44800000 
//   row_major float4x4 k_mObjectToWorld_3DSMAX_;// Offset:  208 Size:    64 [unused]
//   bool k_bOITFastVolumetricApprox;   // Offset:  272 Size:     4 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  288 Size:    64
//   row_major float3x4 k_mObjectToWorld;// Offset:  352 Size:    48
//   float4 k_vHDRLuminanceWeights;     // Offset:  400 Size:    16 [unused]
//   float4 k_vObjectLightColor;        // Offset:  416 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  432 Size:    12
//   float2 k_vScene_TexCoordScale;     // Offset:  448 Size:     8
//   float3 k_vScene_ZRange;            // Offset:  464 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  480 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[31], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_temps 3
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[18].xyzw, r0.xyzw
dp4 r1.y, cb0[19].xyzw, r0.xyzw
dp4 r1.z, cb0[20].xyzw, r0.xyzw
dp4 r1.w, cb0[21].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw
mov o1.zw, r1.zzzw
mul r0.xy, r1.wwww, cb0[28].xyxx
mul r0.zw, cb0[28].xxxy, l(0.000000, 0.000000, 1.000000, -1.000000)
mad o1.xy, r1.xyxx, r0.zwzz, r0.xyxx
mul r0.xyz, cb0[23].xyzx, cb0[30].yyyy
mad r0.xyz, cb0[22].xyzx, cb0[30].xxxx, r0.xyzx
mad r0.xyz, cb0[24].xyzx, cb0[30].zzzz, r0.xyzx
mul r0.w, r0.y, v1.y
mad r0.w, r0.x, -v1.x, -r0.w
mad r0.w, -r0.z, v1.z, r0.w
mul r1.x, r0.w, -v1.x
dp2 r1.y, r0.zxzz, v1.ywyy
mad r1.y, -r0.y, v1.z, r1.y
mad r1.x, r1.y, v1.w, r1.x
mul r1.yz, r1.yyyy, -v1.zzyz
mul r1.w, r0.z, v1.x
mad r1.w, r0.y, v1.w, -r1.w
mad r1.w, r0.x, v1.z, r1.w
mad r1.x, r1.w, -v1.z, r1.x
dp2 r0.y, r0.yzyy, v1.xwxx
mad r0.x, -r0.x, v1.y, r0.y
mad r2.x, -r0.x, -v1.y, r1.x
mad r0.y, r0.w, -v1.y, -r1.y
mad r0.z, r0.w, -v1.z, r1.z
mad r0.z, -r1.w, -v1.x, r0.z
mad r0.y, r1.w, v1.w, r0.y
mad r2.y, r0.x, -v1.x, r0.y
mad r2.z, r0.x, v1.w, r0.z
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul o2.xyz, r0.xxxx, r2.xyzx
add r0.xyz, v0.xyzx, -cb0[27].xyzx
mul r0.w, r0.y, v1.y
mad r0.w, r0.x, -v1.x, -r0.w
mad r0.w, -r0.z, v1.z, r0.w
mul r1.x, r0.w, -v1.x
dp2 r1.y, r0.zxzz, v1.ywyy
mad r1.y, -r0.y, v1.z, r1.y
mad r1.x, r1.y, v1.w, r1.x
mul r1.yz, r1.yyyy, -v1.zzyz
mul r1.w, r0.z, v1.x
mad r1.w, r0.y, v1.w, -r1.w
mad r1.w, r0.x, v1.z, r1.w
mad r1.x, r1.w, -v1.z, r1.x
dp2 r0.y, r0.yzyy, v1.xwxx
mad r0.x, -r0.x, v1.y, r0.y
mad r2.x, -r0.x, -v1.y, r1.x
mad r0.y, r0.w, -v1.y, -r1.y
mad r0.z, r0.w, -v1.z, r1.z
mad r0.z, -r1.w, -v1.x, r0.z
mad r0.y, r1.w, v1.w, r0.y
mad r2.y, r0.x, -v1.x, r0.y
mad r2.z, r0.x, v1.w, r0.z
mov o3.xyz, r2.xyzx
add r0.xyz, -r2.xyzx, v0.xyzx
mov o4.xyz, v2.xyzx
mov o5.xyz, v3.xyzx
add r1.xy, v0.xyxx, v3.xyxx
add r2.xyz, v0.xyzx, v2.xyzx
add r1.xy, r1.xyxx, -r2.xyxx
mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), r2.xyxx
add r1.z, r2.z, cb0[11].y
add o6.xyz, -r0.xyzx, r1.xyzx
mul r0.x, cb0[11].x, l(0.008727)
sincos null, r0.x, r0.x
mul o6.w, r0.x, r0.x
ret 
// Approximately 74 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
