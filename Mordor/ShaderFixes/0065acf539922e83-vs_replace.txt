
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float k_fWindBlend : packoffset(c22) = float(1.000000e+000);
  float k_fAuthoredWidth : packoffset(c22.y) = float(1.000000e+001);
  float k_fFinalWidth : packoffset(c22.z) = float(1.000000e+001);
  float k_fTexVTile : packoffset(c22.w) = float(1.000000e+001);
  float k_fEndCapBlend : packoffset(c23) = float(1.000000e-001);
  float k_fLightBleed : packoffset(c23.y) = float(0.000000e+000);
  float k_fMaxSpecularPower : packoffset(c23.z) = float(6.400000e+001);
  float k_fRenderObjectID : packoffset(c23.w);
  float k_fInvLightRadius : packoffset(c24);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c25);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c28);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c31);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c35);
  row_major float3x4 k_mWorldToVolume : packoffset(c36);
  float3 k_vDirectional_Dir : packoffset(c39);
  float4 k_vObjectLightColor : packoffset(c40);
  float3 k_vObjectSpaceLightPos : packoffset(c41);
  float4 k_vSpecularColor : packoffset(c42);
  float4 k_vSpotProjector_ClipFar : packoffset(c43);
  float4 k_vSpotProjector_ClipNear : packoffset(c44);
  float3 k_vHalfDims : packoffset(c45);
  float4 k_vShadowMapParams : packoffset(c46);
  float4 k_vShadowMapParams2 : packoffset(c47);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c48);
  float4 k_vShadowCascadeOffsetX : packoffset(c52);
  float4 k_vShadowCascadeOffsetZ : packoffset(c53);
  float k_fStaticLightVolume_Mip : packoffset(c54);
  float4 k_vShadowSplitDistSquared : packoffset(c55);
  float4 k_vShadowSplitDistSelect : packoffset(c56);
  float4 k_vShadowMoveX : packoffset(c57);
  float4 k_vShadowMoveY : packoffset(c58);
  float4 k_vShadowMoveZ : packoffset(c59);
  float4 k_vShadowScaleXY : packoffset(c60);
  float4 k_vShadowScaleX : packoffset(c61);
  float4 k_vShadowScaleY : packoffset(c62);
  float4 k_vShadowScaleZ : packoffset(c63);
  float3 k_vLightBleed_Offset : packoffset(c64);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c65);
  float k_fLightLayer : packoffset(c66);
  row_major float3x4 k_mViewToLight : packoffset(c67);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : TEXCOORD1,
  out float3 o2 : TEXCOORD2,
  out float3 o3 : TEXCOORD3,
  out float3 o4 : TEXCOORD4,
  out float4 o5 : COLOR0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.x = dot(k_vWindDirection.xyz, v4.xyz);
  r0.x = 1.000000000e+000 + -abs(-r0.x);
  r0.x = v5.y * r0.x;
  r1.xyzw = k_vWindDirection.wxyz + float4(-1.000000e+000,0.000000e+000,5.000000e-001,0.000000e+000);
  r0.y = k_fWindBlend * r1.x;
  r0.y = max(r0.y, 0.000000000e+000);
  r0.z = k_fWindBlend * r1.x + 1.000000000e+000;
  r0.w = max(r0.z, 1.000000000e+000);
  r2.xy = float2(3.000000e+000,5.000000e-001) * r0.zz;
  r0.z = min(r0.w, 2.000000000e+000);
  r0.w = -5.000000000e-001 + v2.x;
  r3.xyz = v3.xyz * r0.www;
  r3.xyz = -r3.xyz * k_fAuthoredWidth + v0.xyz;
  r1.x = dot(k_vWindDirection.xyz, r3.xyz);
  r2.z = 1.999999955e-002 * r1.x;
  r0.z = k_fTime * r0.z + r2.z;
  r0.z = sin(r0.z);
  r0.z = r0.z * r2.x;
  r0.y = r0.y * r2.x + r0.z;
  r0.z = 5.000000075e-002 * r3.y;
  r0.z = k_fTime * r2.x + r0.z;
  r0.z = r1.x * 1.999999955e-002 + r0.z;
  r0.z = sin(r0.z);
  r0.y = r0.z * r2.y + r0.y;
  r0.x = r0.x * r0.y;
  r0.xyz = r0.xxx * r1.yzw + r3.xyz;
  r1.xyz = k_vObjectSpaceEyePos.yzx + -r0.yzx;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = v4.zxy * r1.xyz;
  r1.xyz = v4.yzx * r1.yzx + -r2.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = r1.xyz * r0.www;
  r2.xyz = r2.xyz * k_fFinalWidth + r0.xyz;
  r2.w = 1.000000000e+000;
  o0.x = dot(k_mObjectToClip._m00_m01_m02_m03, r2.xyzw);
  o0.y = dot(k_mObjectToClip._m10_m11_m12_m13, r2.xyzw);
  o0.z = dot(k_mObjectToClip._m20_m21_m22_m23, r2.xyzw);
  o0.w = dot(k_mObjectToClip._m30_m31_m32_m33, r2.xyzw);
  r0.x = k_fEndCapBlend / k_fTexVTile;
  r0.y = 1.000000000e+000 + -r0.x;
  r0.y = v2.y + -r0.y;
  p1.y = r0.y / r0.x;
  o1.y = k_fTexVTile * v2.y;
  //o1.xz = v2.xx;
  o1.x = v2.x;
  p1.x = v2.x;
  
  r0.x = 0.000000000e+000 < r0.w;
  r0.y = r0.w < 0.000000000e+000;
  r0.x = ((int)r0.x ? -1 : 0) + ((int)r0.y ? 1 : 0);
  r0.x = r0.x;
  r0.xyz = r0.xxx * r1.xyz;
  r2.xyz = v4.yzx * r1.zxy;
  r1.xyz = r1.yzx * v4.zxy + -r2.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r1.xyz * r0.www + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  o2.z = dot(k_mObjectToWorld._m00_m01_m02, r0.xyz);
  r1.xyz = v4.zxy * r0.yzx;
  r1.xyz = v4.yzx * r0.zxy + -r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  o2.x = dot(k_mObjectToWorld._m00_m01_m02, r1.xyz);
  o2.y = dot(k_mObjectToWorld._m00_m01_m02, v4.xyz);
  o3.z = dot(k_mObjectToWorld._m10_m11_m12, r0.xyz);
  o4.z = dot(k_mObjectToWorld._m20_m21_m22, r0.xyz);
  o3.x = dot(k_mObjectToWorld._m10_m11_m12, r1.xyz);
  o4.x = dot(k_mObjectToWorld._m20_m21_m22, r1.xyz);
  o3.y = dot(k_mObjectToWorld._m10_m11_m12, v4.xyz);
  o4.y = dot(k_mObjectToWorld._m20_m21_m22, v4.xyz);
  o5.xyzw = k_vObjectColor.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48
//   float4 k_vObjectColor;             // Offset:  160 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float k_fWindBlend;                // Offset:  352 Size:     4
//      = 0x3f800000 
//   float k_fAuthoredWidth;            // Offset:  356 Size:     4
//      = 0x41200000 
//   float k_fFinalWidth;               // Offset:  360 Size:     4
//      = 0x41200000 
//   float k_fTexVTile;                 // Offset:  364 Size:     4
//      = 0x41200000 
//   float k_fEndCapBlend;              // Offset:  368 Size:     4
//      = 0x3dcccccd 
//   float k_fLightBleed;               // Offset:  372 Size:     4 [unused]
//      = 0x00000000 
//   float k_fMaxSpecularPower;         // Offset:  376 Size:     4 [unused]
//      = 0x42800000 
//   float k_fRenderObjectID;           // Offset:  380 Size:     4 [unused]
//   float k_fInvLightRadius;           // Offset:  384 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  400 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  448 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  496 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  560 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  576 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  624 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  640 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  656 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  672 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  688 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  704 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  720 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  736 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  752 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  768 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  832 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  848 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  864 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  880 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  896 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  912 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  928 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  976 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  992 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset: 1008 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset: 1024 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1040 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1056 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1072 Size:    48 [unused]
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float    y  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[24], immediateIndexed
dcl_constantbuffer cb12[31], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.y
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_temps 4
dp3 r0.x, cb12[30].xyzx, v4.xyzx
add r0.x, -|r0.x|, l(1.000000)
mul r0.x, r0.x, v5.y
add r1.xyzw, l(-1.000000, 0.000000, 0.500000, 0.000000), cb12[30].wxyz
mul r0.y, r1.x, cb0[22].x
max r0.y, r0.y, l(0.000000)
mad r0.z, cb0[22].x, r1.x, l(1.000000)
max r0.w, r0.z, l(1.000000)
mul r2.xy, r0.zzzz, l(3.000000, 0.500000, 0.000000, 0.000000)
min r0.z, r0.w, l(2.000000)
add r0.w, v2.x, l(-0.500000)
mul r3.xyz, r0.wwww, v3.xyzx
mad r3.xyz, -r3.xyzx, cb0[22].yyyy, v0.xyzx
dp3 r1.x, cb12[30].xyzx, r3.xyzx
mul r2.z, r1.x, l(0.020000)
mad r0.z, cb13[1].x, r0.z, r2.z
sincos r0.z, null, r0.z
mul r0.z, r2.x, r0.z
mad r0.y, r0.y, r2.x, r0.z
mul r0.z, r3.y, l(0.050000)
mad r0.z, cb13[1].x, r2.x, r0.z
mad r0.z, r1.x, l(0.020000), r0.z
sincos r0.z, null, r0.z
mad r0.y, r0.z, r2.y, r0.y
mul r0.x, r0.y, r0.x
mad r0.xyz, r0.xxxx, r1.yzwy, r3.xyzx
add r1.xyz, -r0.yzxy, cb0[11].yzxy
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r2.xyz, r1.xyzx, v4.zxyz
mad r1.xyz, v4.yzxy, r1.yzxy, -r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r2.xyz, r0.wwww, r1.xyzx
mad r2.xyz, r2.xyzx, cb0[22].zzzz, r0.xyzx
mov r2.w, l(1.000000)
dp4 o0.x, cb0[0].xyzw, r2.xyzw
dp4 o0.y, cb0[1].xyzw, r2.xyzw
dp4 o0.z, cb0[2].xyzw, r2.xyzw
dp4 o0.w, cb0[3].xyzw, r2.xyzw
div r0.x, cb0[23].x, cb0[22].w
add r0.y, -r0.x, l(1.000000)
add r0.y, -r0.y, v2.y
div o1.w, r0.y, r0.x
mul o1.y, v2.y, cb0[22].w
mov o1.xz, v2.xxxx
lt r0.x, l(0.000000), r0.w
lt r0.y, r0.w, l(0.000000)
iadd r0.x, -r0.x, r0.y
itof r0.x, r0.x
mul r0.xyz, r1.xyzx, r0.xxxx
mul r2.xyz, r1.zxyz, v4.yzxy
mad r1.xyz, r1.yzxy, v4.zxyz, -r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 o2.z, cb0[7].xyzx, r0.xyzx
mul r1.xyz, r0.yzxy, v4.zxyz
mad r1.xyz, v4.yzxy, r0.zxyz, -r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 o2.x, cb0[7].xyzx, r1.xyzx
dp3 o2.y, cb0[7].xyzx, v4.xyzx
dp3 o3.z, cb0[8].xyzx, r0.xyzx
dp3 o4.z, cb0[9].xyzx, r0.xyzx
dp3 o3.x, cb0[8].xyzx, r1.xyzx
dp3 o4.x, cb0[9].xyzx, r1.xyzx
dp3 o3.y, cb0[8].xyzx, v4.xyzx
dp3 o4.y, cb0[9].xyzx, v4.xyzx
mov o5.xyzw, cb0[10].xyzw
ret 
// Approximately 77 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
