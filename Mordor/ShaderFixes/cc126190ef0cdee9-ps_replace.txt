
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float2 k_vFadeDistance : packoffset(c22) = float2(1.000000e+003,5.000000e+002);
  float k_fDitherScale : packoffset(c22.z) = float(1.000000e-002);
  float2 k_vTintMapRange : packoffset(c23) = float2(1.000000e+003,1.000000e+003);
  float k_fTintMapMinFade : packoffset(c23.z) = float(1.000000e+000);
  bool k_bUseWorldTintMap : packoffset(c23.w) = bool(0.000000e+000);
  float k_fMaxSpecularPower : packoffset(c24) = float(6.400000e+001);
  float k_fRenderObjectID : packoffset(c24.y);
  float k_fInvLightRadius : packoffset(c24.z);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c25);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c28);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c31);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c35);
  row_major float3x4 k_mWorldToVolume : packoffset(c36);
  float3 k_vDirectional_Dir : packoffset(c39);
  float4 k_vObjectLightColor : packoffset(c40);
  float3 k_vObjectSpaceLightPos : packoffset(c41);
  float4 k_vSpecularColor : packoffset(c42);
  float4 k_vSpotProjector_ClipFar : packoffset(c43);
  float4 k_vSpotProjector_ClipNear : packoffset(c44);
  float3 k_vHalfDims : packoffset(c45);
  float4 k_vShadowMapParams : packoffset(c46);
  float4 k_vShadowMapParams2 : packoffset(c47);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c48);
  float4 k_vShadowCascadeOffsetX : packoffset(c52);
  float4 k_vShadowCascadeOffsetZ : packoffset(c53);
  float k_fStaticLightVolume_Mip : packoffset(c54);
  float4 k_vShadowSplitDistSquared : packoffset(c55);
  float4 k_vShadowSplitDistSelect : packoffset(c56);
  float4 k_vShadowMoveX : packoffset(c57);
  float4 k_vShadowMoveY : packoffset(c58);
  float4 k_vShadowMoveZ : packoffset(c59);
  float4 k_vShadowScaleXY : packoffset(c60);
  float4 k_vShadowScaleX : packoffset(c61);
  float4 k_vShadowScaleY : packoffset(c62);
  float4 k_vShadowScaleZ : packoffset(c63);
  float3 k_vLightBleed_Offset : packoffset(c64);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c65);
  float k_fLightLayer : packoffset(c66);
  row_major float3x4 k_mViewToLight : packoffset(c67);
}
SamplerState sPoint_WRAPWRAPWRAP_Sampler_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s1);
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s2);
Texture3D<float4> tNoiseMap3D : register(t0);
Texture2D<float4> tNormalMap : register(t1);
Texture2D<float4> tDiffuseMap : register(t2);
Texture2D<float4> tSpecularMap : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD2,
  float3 v3 : TEXCOORD3,
  float3 v4 : TEXCOORD4,
  float4 v5 : COLOR0,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.x = tNoiseMap3D.SampleLevel(sPoint_WRAPWRAPWRAP_Sampler_s, v5.xyz, 0.000000000e+000).x;
  r0.x = -v5.w + r0.x;
  r0.x = r0.x < 0.000000000e+000;
  if (r0.x != 0) discard;
  r0.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).yw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.z = sqrt(r0.w);
  r1.x = dot(v2.xyz, r0.xyz);
  r1.z = dot(v4.xyz, r0.xyz);
  r1.y = dot(v3.xyz, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.yzw = r1.xyz * r0.xxx;
  r0.x = saturate(r1.y * r0.x + -2.500000000e-001);
  r0.x = saturate(v6.w + r0.x);
  o0.xyz = r0.yzw * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o0.w = k_fRenderObjectID;
  r1.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyzw;
  r0.yzw = -v6.xyz + r1.xyz;
  o1.w = r1.w;
  o1.xyz = r0.xxx * r0.yzw + v6.xyz;
  o2.w = 0.000000000e+000;
  r0.xyz = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyz;
  o2.x = k_fMaxSpecularPower * r0.z;
  o2.yz = r0.yx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float2 k_vFadeDistance;            // Offset:  352 Size:     8 [unused]
//      = 0x447a0000 0x43fa0000 
//   float k_fDitherScale;              // Offset:  360 Size:     4 [unused]
//      = 0x3c23d70a 
//   float2 k_vTintMapRange;            // Offset:  368 Size:     8 [unused]
//      = 0x447a0000 0x447a0000 
//   float k_fTintMapMinFade;           // Offset:  376 Size:     4 [unused]
//      = 0x3f800000 
//   bool k_bUseWorldTintMap;           // Offset:  380 Size:     4 [unused]
//      = 0x00000000 
//   float k_fMaxSpecularPower;         // Offset:  384 Size:     4
//      = 0x42800000 
//   float k_fRenderObjectID;           // Offset:  388 Size:     4
//   float k_fInvLightRadius;           // Offset:  392 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  400 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  448 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  496 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  560 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  576 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  624 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  640 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  656 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  672 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  688 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  704 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  720 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  736 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  752 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  768 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  832 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  848 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  864 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  880 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  896 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  912 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  928 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  976 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  992 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset: 1008 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset: 1024 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1040 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1056 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1072 Size:    48 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sPoint_WRAPWRAPWRAP_Sampler       sampler      NA          NA    0        1
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    2        1
// tNoiseMap3D                       texture  float4          3d    0        1
// tNormalMap                        texture  float4          2d    1        1
// tDiffuseMap                       texture  float4          2d    2        1
// tSpecularMap                      texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 2
sample_l_indexable(texture3d)(float,float,float,float) r0.x, v5.xyzx, t0.xyzw, s0, l(0.000000)
add r0.x, r0.x, -v5.w
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t1.ywxz, s1
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.z, r0.w
dp3 r1.x, v2.xyzx, r0.xyzx
dp3 r1.z, v4.xyzx, r0.xyzx
dp3 r1.y, v3.xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.yzw, r0.xxxx, r1.xxyz
mad_sat r0.x, r1.y, r0.x, l(-0.250000)
add_sat r0.x, r0.x, v6.w
mad o0.xyz, r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, cb0[24].y
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t2.xyzw, s2
add r0.yzw, r1.xxyz, -v6.xxyz
mov o1.w, r1.w
mad o1.xyz, r0.xxxx, r0.yzwy, v6.xyzx
mov o2.w, l(0)
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t3.xyzw, s1
mul o2.x, r0.z, cb0[24].x
mov o2.yz, r0.yyxy
ret 
// Approximately 28 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
