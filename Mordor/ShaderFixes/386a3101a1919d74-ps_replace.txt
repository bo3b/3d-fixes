//Fog
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float k_fInvLightRadius : packoffset(c22);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c23);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c26);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c29);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c33);
  row_major float3x4 k_mWorldToVolume : packoffset(c34);
  float3 k_vDirectional_Dir : packoffset(c37);
  float4 k_vObjectLightColor : packoffset(c38);
  float3 k_vObjectSpaceLightPos : packoffset(c39);
  float4 k_vSpecularColor : packoffset(c40);
  float4 k_vSpotProjector_ClipFar : packoffset(c41);
  float4 k_vSpotProjector_ClipNear : packoffset(c42);
  float3 k_vHalfDims : packoffset(c43);
  float4 k_vShadowMapParams : packoffset(c44);
  float4 k_vShadowMapParams2 : packoffset(c45);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c46);
  float4 k_vShadowCascadeOffsetX : packoffset(c50);
  float4 k_vShadowCascadeOffsetZ : packoffset(c51);
  float k_fStaticLightVolume_Mip : packoffset(c52);
  float4 k_vShadowSplitDistSquared : packoffset(c53);
  float4 k_vShadowSplitDistSelect : packoffset(c54);
  float4 k_vShadowMoveX : packoffset(c55);
  float4 k_vShadowMoveY : packoffset(c56);
  float4 k_vShadowMoveZ : packoffset(c57);
  float4 k_vShadowScaleXY : packoffset(c58);
  float4 k_vShadowScaleX : packoffset(c59);
  float4 k_vShadowScaleY : packoffset(c60);
  float4 k_vShadowScaleZ : packoffset(c61);
  float3 k_vLightBleed_Offset : packoffset(c62);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c63);
  float k_fLightLayer : packoffset(c64);
  row_major float3x4 k_mViewToLight : packoffset(c65);
  float k_fNoiseStrength : packoffset(c68) = float(4.000000e+001);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}
SamplerState sBilinear_WRAPWRAPWRAP_Sampler_s : register(s0);
SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s1);
Texture3D<float4> tNoiseMap3D : register(t0);
Texture2D<float4> tDepthMap : register(t1);
Texture2D<float4> tForcedCurFrameMap : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.x = k_vFogRayleigh.w + 6.371000320e+008;
  r0.y = k_vFogSky.w + k_vObjectSpaceEyePos.y;
  r0.z = 6.371000320e+008 + r0.y;
  r1.y = -r0.z;
  r1.xz = -k_vObjectSpaceEyePos.xz;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v3.yxz * r0.www;
  r0.w = dot(r1.yxz, r2.xyz);
  r0.z = -r0.w * r0.w + r0.z;
  r0.x = r0.x * r0.x + -r0.z;
  r0.x = sqrt(r0.x);
  r0.x = r0.w + r0.x;
  r0.z = max(r2.x, 9.999999776e-003);
  r0.w = r0.z * r0.x;
  r1.x = r0.w * 5.000000000e-001 + r0.y;
  r3.w = 1.000000000e+000;
  r0.yw = v2.xy / v1.ww;
  r1.zw = v1.xy / v1.ww;
  r3.x = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r1.zw).x;
  r4.xyz = tForcedCurFrameMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r1.zw).xyz;
  r3.yz = r3.xx * r0.yw;
  r0.y = r3.x == 10000000.000000;
  r0.w = dot(k_mViewToWorld._m12_m10_m11_m13, r3.xyzw);
  r0.x = r0.y ? r0.x : r3.x;
  r3.x = k_vFogSky.w + r0.w;
  r0.w = dot(r2.yxz, k_vFogSunDir.xyz);
  r1.z = -k_vFogMieB.y * r0.w + k_vFogMieB.x;
  r0.w = r0.w * r0.w + 1.000000000e+000;
  r0.w = 5.968310311e-002 * r0.w;
  r1.z = log2(abs(r1.z));
  r1.z = -1.500000000e+000 * r1.z;
  r1.z = exp2(r1.z);
  r1.y = k_vFogMieB.z * r1.z;
  r3.y = min(r1.y, k_vFogMieA.z);
  r1.x = r0.y ? r1.x : r3.x;
  r1.y = r0.y ? r1.y : r3.y;
  r1.z = k_vFogSky.z + -r3.x;
  r1.z = r1.z / k_vFogMieA.y;
  r1.x = max(r1.x, 0.000000000e+000);
  r1.y = max(r1.y, k_vFogSunColor.w);
  r1.w = -r1.x / k_vFogMieA.x;
  r1.x = -r1.x / k_vFogRayleigh.w;
  r1.xw = float2(1.442695e+000,1.442695e+000) * r1.xw;
  r1.x = exp2(r1.x);
  r1.w = exp2(r1.w);
  r1.w = k_vFogMieB.w + r1.w;
  r1.w = k_vFogMieC.y * r1.w;
  r1.w = 5.000000000e-001 * r1.w;
  r2.yzw = k_vFogMieC.zwz * r2.yxz;
  r2.yzw = tNoiseMap3D.SampleLevel(sBilinear_WRAPWRAPWRAP_Sampler_s, r2.yzw, 0.000000000e+000).xyz;
  r0.z = r0.y ? r0.z : r2.x;
  r0.y = (int)r0.y & (int)k_vFogSky.x;
  r0.z = -1.500000060e-001 + r0.z;
  r0.z = saturate(1.000000000e+000 + -r0.z);
  r0.z = r0.z * r0.z;
  r0.z = r1.w * r0.z;
  r1.w = saturate(-r1.w * k_vFogSky.y + 1.000000000e+000);
  r0.z = min(r0.z, k_vFogMieA.w);
  r0.z = max(r0.z, k_vFogMieC.x);
  r1.y = r1.y * r0.z;
  r3.xyz = k_vFogRayleigh.xyz * r1.xxx + r0.zzz;
  r5.xyz = k_vFogRayleigh.xyz * r1.xxx;
  r5.xyz = r5.xyz * r0.www + r1.yyy;
  r5.xyz = r5.xyz / r3.xyz;
  r1.xyz = -r3.xyz * r1.zzz;
  r0.xzw = -r3.xyz * r0.xxx;
  r0.xzw = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r0.xzw;
  r0.xzw = exp2(r0.xzw);
  r1.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r1.xyz = k_vFogSunColor.xyz * r1.xyz;
  r1.xyz = r5.xyz * r1.xyz;
  r3.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r0.xzw;
  r0.xyz = saturate(r0.yyy * r1.www + r0.xzw);
  r1.xyz = r3.xyz * r1.xyz;
  r2.xyz = r1.xyz * r2.yzw;
  r1.xyz = r2.xyz * k_fNoiseStrength + r1.xyz;
  o0.xyz = r4.xyz * r0.xyz + r1.xyz;
  o0.w = 0.000000000e+000;
  
  
  //Disbale so its easier to see other effects
  // o0.w=0;
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float k_fInvLightRadius;           // Offset:  352 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  368 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  416 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  464 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  528 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  544 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  592 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  608 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  624 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  640 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  656 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  672 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  688 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  704 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  720 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  736 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  800 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  816 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  832 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  848 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  864 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  880 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  896 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  912 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  928 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset:  976 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset:  992 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1008 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1024 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1040 Size:    48 [unused]
//   float k_fNoiseStrength;            // Offset: 1088 Size:     4
//      = 0x42200000 
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16
//   float4 k_vFogSky;                  // Offset:  288 Size:    16
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sBilinear_WRAPWRAPWRAP_Sampler    sampler      NA          NA    0        1
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    1        1
// tNoiseMap3D                       texture  float4          3d    0        1
// tDepthMap                         texture  float4          2d    1        1
// tForcedCurFrameMap                texture  float4          2d    2        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[69], immediateIndexed
dcl_constantbuffer cb12[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 6
add r0.x, l(637100032.000000), cb12[14].w
add r0.y, cb0[11].y, cb12[18].w
add r0.z, r0.y, l(637100032.000000)
mov r1.y, -r0.z
mov r1.xz, -cb0[11].xxzx
dp3 r0.z, r1.xyzx, r1.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v3.yxzy
dp3 r0.w, r1.yxzy, r2.xyzx
mad r0.z, -r0.w, r0.w, r0.z
mad r0.x, r0.x, r0.x, -r0.z
sqrt r0.x, r0.x
add r0.x, r0.x, r0.w
max r0.z, r2.x, l(0.010000)
mul r0.w, r0.x, r0.z
mad r1.x, r0.w, l(0.500000), r0.y
mov r3.w, l(1.000000)
div r0.yw, v2.xxxy, v1.wwww
div r1.zw, v1.xxxy, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r3.x, r1.zwzz, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r1.zwzz, t2.xyzw, s1
mul r3.yz, r0.yywy, r3.xxxx
eq r0.y, r3.x, l(10000000.000000)
dp4 r0.w, cb12[5].zxyw, r3.xyzw
movc r0.x, r0.y, r0.x, r3.x
add r3.x, r0.w, cb12[18].w
dp3 r0.w, r2.yxzy, cb12[20].xyzx
mad r1.z, -cb12[16].y, r0.w, cb12[16].x
mad r0.w, r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.059683)
log r1.z, |r1.z|
mul r1.z, r1.z, l(-1.500000)
exp r1.z, r1.z
mul r1.y, r1.z, cb12[16].z
min r3.y, r1.y, cb12[15].z
movc r1.xy, r0.yyyy, r1.xyxx, r3.xyxx
add r1.z, -r3.x, cb12[18].z
div r1.z, r1.z, cb12[15].y
max r1.x, r1.x, l(0.000000)
max r1.y, r1.y, cb12[19].w
div r1.w, -r1.x, cb12[15].x
div r1.x, -r1.x, cb12[14].w
mul r1.xw, r1.xxxw, l(1.442695, 0.000000, 0.000000, 1.442695)
exp r1.x, r1.x
exp r1.w, r1.w
add r1.w, r1.w, cb12[16].w
mul r1.w, r1.w, cb12[17].y
mul r1.w, r1.w, l(0.500000)
mul r2.yzw, r2.yyxz, cb12[17].zzwz
sample_l_indexable(texture3d)(float,float,float,float) r2.yzw, r2.yzwy, t0.wxyz, s0, l(0.000000)
movc r0.z, r0.y, r0.z, r2.x
and r0.y, r0.y, cb12[18].x
add r0.z, r0.z, l(-0.150000)
add_sat r0.z, -r0.z, l(1.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r1.w
mad_sat r1.w, -r1.w, cb12[18].y, l(1.000000)
min r0.z, r0.z, cb12[15].w
max r0.z, r0.z, cb12[17].x
mul r1.y, r0.z, r1.y
mad r3.xyz, cb12[14].xyzx, r1.xxxx, r0.zzzz
mul r5.xyz, r1.xxxx, cb12[14].xyzx
mad r5.xyz, r5.xyzx, r0.wwww, r1.yyyy
div r5.xyz, r5.xyzx, r3.xyzx
mul r1.xyz, r1.zzzz, -r3.xyzx
mul r0.xzw, r0.xxxx, -r3.xxyz
mul r0.xzw, r0.xxzw, l(1.442695, 0.000000, 1.442695, 1.442695)
exp r0.xzw, r0.xxzw
mul r1.xyz, r1.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r1.xyz, r1.xyzx
mul r1.xyz, r1.xyzx, cb12[19].xyzx
mul r1.xyz, r1.xyzx, r5.xyzx
add r3.xyz, -r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad_sat r0.xyz, r0.yyyy, r1.wwww, r0.xzwx
mul r1.xyz, r1.xyzx, r3.xyzx
mul r2.xyz, r2.yzwy, r1.xyzx
mad r1.xyz, r2.xyzx, cb0[68].xxxx, r1.xyzx
mad o0.xyz, r4.xyzx, r0.xyzx, r1.xyzx
mov o0.w, l(0)
ret 
// Approximately 81 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
