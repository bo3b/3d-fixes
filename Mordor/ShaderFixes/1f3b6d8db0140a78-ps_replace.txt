
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float k_fRevealValue : packoffset(c22) = float(1.000000e+000);
  float k_fRevealWidth : packoffset(c22.y) = float(1.000000e-001);
  float3 k_cEmissiveRampColor : packoffset(c23) = float3(0.000000e+000,1.000000e+000,1.000000e+000);
  float k_fEmissiveRampBrightness : packoffset(c23.w) = float(2.000000e+000);
  float k_fEmissiveRampPower : packoffset(c24) = float(2.000000e+000);
  float3 k_cEmissiveTintColor : packoffset(c24.y) = float3(0.000000e+000,1.000000e+000,1.000000e+000);
  float k_fEmissiveMaskPanU : packoffset(c25) = float(0.000000e+000);
  float k_fEmissiveMaskPanV : packoffset(c25.y) = float(0.000000e+000);
  float k_fEmissiveScale : packoffset(c25.z) = float(0.000000e+000);
  float k_fMaxSpecularPower : packoffset(c25.w) = float(6.400000e+001);
  float k_fRenderObjectID : packoffset(c26);
  int k_bRendersEmissive : packoffset(c26.y) = int(1.401298e-045);
  float k_fInvLightRadius : packoffset(c26.z);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c27);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c30);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c33);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c37);
  row_major float3x4 k_mWorldToVolume : packoffset(c38);
  float3 k_vDirectional_Dir : packoffset(c41);
  float4 k_vObjectLightColor : packoffset(c42);
  float3 k_vObjectSpaceLightPos : packoffset(c43);
  float4 k_vSpecularColor : packoffset(c44);
  float4 k_vSpotProjector_ClipFar : packoffset(c45);
  float4 k_vSpotProjector_ClipNear : packoffset(c46);
  float3 k_vHalfDims : packoffset(c47);
  float4 k_vShadowMapParams : packoffset(c48);
  float4 k_vShadowMapParams2 : packoffset(c49);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c50);
  float4 k_vShadowCascadeOffsetX : packoffset(c54);
  float4 k_vShadowCascadeOffsetZ : packoffset(c55);
  float k_fStaticLightVolume_Mip : packoffset(c56);
  float4 k_vShadowSplitDistSquared : packoffset(c57);
  float4 k_vShadowSplitDistSelect : packoffset(c58);
  float4 k_vShadowMoveX : packoffset(c59);
  float4 k_vShadowMoveY : packoffset(c60);
  float4 k_vShadowMoveZ : packoffset(c61);
  float4 k_vShadowScaleXY : packoffset(c62);
  float4 k_vShadowScaleX : packoffset(c63);
  float4 k_vShadowScaleY : packoffset(c64);
  float4 k_vShadowScaleZ : packoffset(c65);
  float3 k_vLightBleed_Offset : packoffset(c66);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c67);
  float k_fLightLayer : packoffset(c68);
  row_major float3x4 k_mViewToLight : packoffset(c69);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s0);
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tEmissiveMaskMap : register(t0);
Texture2D<float4> tNormalMap : register(t1);
Texture2D<float4> tDiffuseMap : register(t2);
Texture2D<float4> tSpecularMap : register(t3);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD2,
  float3 v3 : TEXCOORD3,
  float3 v4 : TEXCOORD4,
  float4 v5 : COLOR0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.x = 1.000000000e+000 + k_fRevealWidth;
  r0.yz = float2(1.000000e+000,9.950000e-001) + -v5.ww;
  r0.x = k_fRevealValue * r0.x + r0.y;
  r0.y = saturate(ceil(r0.z));
  r0.x = -1.000000000e+000 + r0.x;
  r0.z = 1.000000e+000 / k_fRevealWidth;
  r0.x = saturate(r0.x * r0.z);
  r0.z = r0.x * -2.000000000e+000 + 3.000000000e+000;
  r0.x = r0.x * r0.x;
  r0.x = r0.z * r0.x;
  r0.z = r0.y * r0.x + -3.764705956e-001;
  r0.x = -r0.y * r0.x + 1.000000000e+000;
  r0.x = log2(r0.x);
  r0.x = k_fEmissiveRampPower * r0.x;
  r0.x = exp2(r0.x);
  r0.x = k_fEmissiveRampBrightness * r0.x;
  r0.y = r0.z < 0.000000000e+000;
  if (r0.y != 0) discard;
  r0.yz = k_fTime * k_fEmissiveMaskPanU + v1.xy;
  r1.xyzw = tEmissiveMaskMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.yz).xyzw;
  r1.xyzw = float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000) + r1.xyzw;
  r1.xyzw = v5.yyyy * r1.xyzw + float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000);
  r0.yzw = r1.xyz * r1.www;
  r0.yzw = v5.xxx * r0.yzw;
  r0.yzw = k_cEmissiveTintColor.xyz * r0.yzw;
  r0.yzw = k_fEmissiveScale * r0.yzw;
  o0.xyz = k_cEmissiveRampColor.xyz * r0.xxx + r0.yzw;
  o0.w = 1.000000000e+000;
  r0.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).yw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.z = sqrt(r0.w);
  r1.x = dot(v2.xyz, r0.xyz);
  r1.y = dot(v3.xyz, r0.xyz);
  r1.z = dot(v4.xyz, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  o1.xyz = r0.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o1.w = k_fRenderObjectID;
  o2.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyzw;
  o3.w = 0.000000000e+000;
  r0.xyz = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, v1.xy).xyz;
  o3.x = k_fMaxSpecularPower * r0.z;
  o3.yz = r0.yx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float k_fRevealValue;              // Offset:  352 Size:     4
//      = 0x3f800000 
//   float k_fRevealWidth;              // Offset:  356 Size:     4
//      = 0x3dcccccd 
//   float3 k_cEmissiveRampColor;       // Offset:  368 Size:    12
//      = 0x00000000 0x3f800000 0x3f800000 
//   float k_fEmissiveRampBrightness;   // Offset:  380 Size:     4
//      = 0x40000000 
//   float k_fEmissiveRampPower;        // Offset:  384 Size:     4
//      = 0x40000000 
//   float3 k_cEmissiveTintColor;       // Offset:  388 Size:    12
//      = 0x00000000 0x3f800000 0x3f800000 
//   float k_fEmissiveMaskPanU;         // Offset:  400 Size:     4
//      = 0x00000000 
//   float k_fEmissiveMaskPanV;         // Offset:  404 Size:     4
//      = 0x00000000 
//   float k_fEmissiveScale;            // Offset:  408 Size:     4
//      = 0x00000000 
//   float k_fMaxSpecularPower;         // Offset:  412 Size:     4
//      = 0x42800000 
//   float k_fRenderObjectID;           // Offset:  416 Size:     4
//   int k_bRendersEmissive;            // Offset:  420 Size:     4 [unused]
//      = 0x00000001 
//   float k_fInvLightRadius;           // Offset:  424 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  432 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  480 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  528 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  592 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  608 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  656 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  672 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  688 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  704 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  720 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  736 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  752 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  768 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  784 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  800 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  864 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  880 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  896 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  912 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  928 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  976 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  992 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset: 1008 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset: 1024 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset: 1040 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset: 1056 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1072 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1088 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1104 Size:    48 [unused]
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// tEmissiveMaskMap                  texture  float4          2d    0        1
// tNormalMap                        texture  float4          2d    1        1
// tDiffuseMap                       texture  float4          2d    2        1
// tSpecularMap                      texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[27], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 2
add r0.x, cb0[22].y, l(1.000000)
add r0.yz, -v5.wwww, l(0.000000, 1.000000, 0.995000, 0.000000)
mad r0.x, cb0[22].x, r0.x, r0.y
round_pi_sat r0.y, r0.z
add r0.x, r0.x, l(-1.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[22].y
mul_sat r0.x, r0.z, r0.x
mad r0.z, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.z
mad r0.z, r0.y, r0.x, l(-0.376471)
mad r0.x, -r0.y, r0.x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb0[24].x
exp r0.x, r0.x
mul r0.x, r0.x, cb0[23].w
lt r0.y, r0.z, l(0.000000)
discard_nz r0.y
mad r0.yz, cb13[1].xxxx, cb0[25].xxyx, v1.xxyx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.yzyy, t0.xyzw, s0
add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
mad r1.xyzw, v5.yyyy, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mul r0.yzw, r1.wwww, r1.xxyz
mul r0.yzw, r0.yyzw, v5.xxxx
mul r0.yzw, r0.yyzw, cb0[24].yyzw
mul r0.yzw, r0.yyzw, cb0[25].zzzz
mad o0.xyz, cb0[23].xyzx, r0.xxxx, r0.yzwy
mov o0.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t1.ywxz, s0
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.z, r0.w
dp3 r1.x, v2.xyzx, r0.xyzx
dp3 r1.y, v3.xyzx, r0.xyzx
dp3 r1.z, v4.xyzx, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o1.w, cb0[26].x
sample_indexable(texture2d)(float,float,float,float) o2.xyzw, v1.xyxx, t2.xyzw, s1
mov o3.w, l(0)
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t3.xyzw, s0
mul o3.x, r0.z, cb0[25].w
mov o3.yz, r0.yyxy
ret 
// Approximately 47 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
