
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c7);

  int WorldEdit_AlphaRef : packoffset(c15) = int(0.000000e+000);
  int WorldEdit_RenderType : packoffset(c15.y) = int(1.401298e-045);
  float3 k_cAmbientLightColor : packoffset(c16) = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  float3 k_cDirLightColor : packoffset(c17) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fDensity : packoffset(c17.w) = float(5.000000e+000);
  float k_fDirLightMul : packoffset(c18) = float(1.000000e+000);
  float k_fFogDistMul : packoffset(c18.y) = float(1.000000e+000);
  float k_fThickness : packoffset(c18.z) = float(1.000000e+003);
  float3 k_vUVPan1 : packoffset(c19) = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  float3 k_vUVPan2 : packoffset(c20) = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  float4 k_vUVVTile : packoffset(c21) = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fTime : packoffset(c22);
  row_major float4x4 k_mObjectToClip : packoffset(c23);
  row_major float3x4 k_mObjectToWorld : packoffset(c27);
  float4 k_vFogMieA : packoffset(c30);
  float4 k_vFogMieB : packoffset(c31);
  float4 k_vFogMieC : packoffset(c32);
  float4 k_vFogRayleigh : packoffset(c33);
  float4 k_vFogSky : packoffset(c34);
  float4 k_vFogSunColor : packoffset(c35);
  float3 k_vFogSunDir : packoffset(c36);
  float3 k_vObjectSpaceEyePos : packoffset(c37);
  float2 k_vScene_TexCoordScale : packoffset(c38);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToClip._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(k_mObjectToClip._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(k_mObjectToClip._m20_m21_m22_m23, r0.xyzw);
  r1.w = dot(k_mObjectToClip._m30_m31_m32_m33, r0.xyzw);
  r0.x = dot(k_mObjectToWorld._m10_m11_m12_m13, r0.xyzw);
  r0.x = k_vFogSky.w + r0.x;
  
float4 stereo = StereoParams.Load(0);
float4 r23;
r23.xyzw = r1.xyzw;
r1.x += stereo.x * (r1.w - stereo.y); 

  o0.xyzw = r23.xyzw;
  o2.zw = r1.zw;
  o1.xyzw = v2.xyxy;
  r0.yz = k_vScene_TexCoordScale.xy * r1.ww;
  r0.w = k_fFogDistMul * r1.w;
  r1.zw = float2(1.000000e+000,-1.000000e+000) * k_vScene_TexCoordScale.xy;
  o2.xy = r1.xy * r1.zw + r0.yz;
  r0.y = 1.999999949e-005 * abs(r0.w);
  r0.y = min(r0.y, 1.000000000e+000);
  r0.y = 1.000000000e+000 + -r0.y;
  r1.xyz = k_vObjectSpaceEyePos.xyz + -v0.xyz;
  r2.x = dot(k_mObjectToWorld._m00_m01_m02, r1.xyz);
  r2.z = dot(k_mObjectToWorld._m20_m21_m22, r1.xyz);
  r2.y = dot(k_mObjectToWorld._m10_m11_m12, r1.xyz);
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xzw = r2.xyz * r0.zzz;
  r0.z = -r2.y * r0.z + -1.500000060e-001;
  r0.z = saturate(1.000000000e+000 + -r0.z);
  r0.z = r0.z * r0.z;
  r1.w = dot(-r2.xzw, k_vFogSunDir.xyz);
  r2.x = -k_vFogMieB.y * r1.w + k_vFogMieB.x;
  r1.w = r1.w * r1.w + 1.000000000e+000;
  r1.w = 5.968310311e-002 * r1.w;
  r2.x = log2(abs(r2.x));
  r2.x = -1.500000000e+000 * r2.x;
  r2.x = exp2(r2.x);
  r2.y = k_vFogMieB.z * r2.x + -k_vFogMieA.z;
  r2.x = k_vFogMieB.z * r2.x;
  r2.y = max(r2.y, 0.000000000e+000);
  r0.y = -r2.y * r0.y + r2.x;
  r0.y = max(r0.y, k_vFogSunColor.w);
  r2.x = -r0.x / k_vFogMieA.x;
  r2.x = 1.442695022e+000 * r2.x;
  r2.x = exp2(r2.x);
  r2.x = k_vFogMieB.w + r2.x;
  r2.x = k_vFogMieC.y * r2.x;
  r2.x = 5.000000000e-001 * r2.x;
  r0.z = r2.x * r0.z;
  r0.z = min(r0.z, k_vFogMieA.w);
  r0.z = max(r0.z, k_vFogMieC.x);
  r0.y = r0.y * r0.z;
  r2.x = -r0.x / k_vFogRayleigh.w;
  r0.x = k_vFogSky.z + -r0.x;
  r0.x = r0.x / k_vFogMieA.y;
  r2.x = 1.442695022e+000 * r2.x;
  r2.x = exp2(r2.x);
  r2.yzw = k_vFogRayleigh.xyz * r2.xxx;
  r3.xyz = k_vFogRayleigh.xyz * r2.xxx + r0.zzz;
  r2.xyz = r2.yzw * r1.www + r0.yyy;
  r2.xyz = r2.xyz / r3.xyz;
  r0.xyz = -r3.xyz * r0.xxx;
  r3.xyz = -r3.xyz * abs(r0.www);
  r3.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r0.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r4.xyz = log2(k_vFogSunColor.xyz);
  r4.xyz = float3(4.545455e-001,4.545455e-001,4.545455e-001) * r4.xyz;
  r4.xyz = exp2(r4.xyz);
  r0.xyz = r4.xyz * r0.xyz;
  r0.xyz = r2.xyz * r0.xyz;
  r2.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r3.xyz;
  o3.w = r3.x;
  r0.xyz = r0.xyz * r2.xyz + float3(-4.000000e-003,-4.000000e-003,-4.000000e-003);
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r2.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r2.xyz = r2.xyz * r0.xyz;
  r3.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(1.700000e+000,1.700000e+000,1.700000e+000);
  r0.xyz = r0.xyz * r3.xyz + float3(6.000000e-002,6.000000e-002,6.000000e-002);
  o3.xyz = r2.xyz / r0.xyz;
  o4.xyzw = v5.xyzw;
  r0.x = abs(v3.y) * -1.872929931e-002 + 7.426100224e-002;
  r0.x = r0.x * abs(v3.y) + -2.121143937e-001;
  r0.x = r0.x * abs(v3.y) + 1.570728779e+000;
  r0.y = 1.000000000e+000 + -abs(-v3.y);
  r0.y = sqrt(r0.y);
  r0.z = r0.x * r0.y;
  r0.z = r0.z * -2.000000000e+000 + 3.141592741e+000;
  r0.w = v3.y < -v3.y;
  r0.z = r0.w ? r0.z : 0;
  r0.x = r0.x * r0.y + r0.z;
  r0.yz = sin(r0.xx);
  r0.x = v3.y;
  o5.xyz = float3(5.000000e-001,5.000000e-001,-5.000000e-001) * r0.xyz;
  o6.x = dot(v3.xyz, r1.xyz);
  o6.y = dot(v4.xyz, r1.xyz);
  o6.z = dot(v1.xyz, r1.xyz);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//       float3 m_Normal;               // Offset:   32
//       float2 m_TexCoord;             // Offset:   48
//       float3 m_Tangent;              // Offset:   64
//       float3 m_Binormal;             // Offset:   80
//       float4 m_Color;                // Offset:   96
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    96 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:  112
//       float3 m_Normal;               // Offset:  128
//       float2 m_TexCoord;             // Offset:  144
//       float3 m_Tangent;              // Offset:  160
//       float3 m_Binormal;             // Offset:  176
//       float4 m_Color;                // Offset:  192
//       float4 m_Weights;              // Offset:  208
//       float4 m_Indices;              // Offset:  224
//
//   } MaterialVertexDef_Skeletal;      // Offset:  112 Size:   128 [unused]
//   int WorldEdit_AlphaRef;            // Offset:  240 Size:     4 [unused]
//      = 0x00000000 
//   int WorldEdit_RenderType;          // Offset:  244 Size:     4 [unused]
//      = 0x00000001 
//   float3 k_cAmbientLightColor;       // Offset:  256 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float3 k_cDirLightColor;           // Offset:  272 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float k_fDensity;                  // Offset:  284 Size:     4 [unused]
//      = 0x40a00000 
//   float k_fDirLightMul;              // Offset:  288 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fFogDistMul;               // Offset:  292 Size:     4
//      = 0x3f800000 
//   float k_fThickness;                // Offset:  296 Size:     4 [unused]
//      = 0x447a0000 
//   float3 k_vUVPan1;                  // Offset:  304 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float3 k_vUVPan2;                  // Offset:  320 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float4 k_vUVVTile;                 // Offset:  336 Size:    16 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 0x3f800000 
//   float k_fTime;                     // Offset:  352 Size:     4 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  368 Size:    64
//   row_major float3x4 k_mObjectToWorld;// Offset:  432 Size:    48
//   float4 k_vFogMieA;                 // Offset:  480 Size:    16
//   float4 k_vFogMieB;                 // Offset:  496 Size:    16
//   float4 k_vFogMieC;                 // Offset:  512 Size:    16
//   float4 k_vFogRayleigh;             // Offset:  528 Size:    16
//   float4 k_vFogSky;                  // Offset:  544 Size:    16
//   float4 k_vFogSunColor;             // Offset:  560 Size:    16
//   float3 k_vFogSunDir;               // Offset:  576 Size:    12
//   float3 k_vObjectSpaceEyePos;       // Offset:  592 Size:    12
//   float2 k_vScene_TexCoordScale;     // Offset:  608 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[39], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_temps 5
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[23].xyzw, r0.xyzw
dp4 r1.y, cb0[24].xyzw, r0.xyzw
dp4 r1.z, cb0[25].xyzw, r0.xyzw
dp4 r1.w, cb0[26].xyzw, r0.xyzw
dp4 r0.x, cb0[28].xyzw, r0.xyzw
add r0.x, r0.x, cb0[34].w
mov o0.xyzw, r1.xyzw
mov o2.zw, r1.zzzw
mov o1.xyzw, v2.xyxy
mul r0.yz, r1.wwww, cb0[38].xxyx
mul r0.w, r1.w, cb0[18].y
mul r1.zw, cb0[38].xxxy, l(0.000000, 0.000000, 1.000000, -1.000000)
mad o2.xy, r1.xyxx, r1.zwzz, r0.yzyy
mul r0.y, |r0.w|, l(0.000020)
min r0.y, r0.y, l(1.000000)
add r0.y, -r0.y, l(1.000000)
add r1.xyz, -v0.xyzx, cb0[37].xyzx
dp3 r2.x, cb0[27].xyzx, r1.xyzx
dp3 r2.z, cb0[29].xyzx, r1.xyzx
dp3 r2.y, cb0[28].xyzx, r1.xyzx
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xzw, r0.zzzz, r2.xxyz
mad r0.z, -r2.y, r0.z, l(-0.150000)
add_sat r0.z, -r0.z, l(1.000000)
mul r0.z, r0.z, r0.z
dp3 r1.w, -r2.xzwx, cb0[36].xyzx
mad r2.x, -cb0[31].y, r1.w, cb0[31].x
mad r1.w, r1.w, r1.w, l(1.000000)
mul r1.w, r1.w, l(0.059683)
log r2.x, |r2.x|
mul r2.x, r2.x, l(-1.500000)
exp r2.x, r2.x
mad r2.y, cb0[31].z, r2.x, -cb0[30].z
mul r2.x, r2.x, cb0[31].z
max r2.y, r2.y, l(0.000000)
mad r0.y, -r2.y, r0.y, r2.x
max r0.y, r0.y, cb0[35].w
div r2.x, -r0.x, cb0[30].x
mul r2.x, r2.x, l(1.442695)
exp r2.x, r2.x
add r2.x, r2.x, cb0[31].w
mul r2.x, r2.x, cb0[32].y
mul r2.x, r2.x, l(0.500000)
mul r0.z, r0.z, r2.x
min r0.z, r0.z, cb0[30].w
max r0.z, r0.z, cb0[32].x
mul r0.y, r0.z, r0.y
div r2.x, -r0.x, cb0[33].w
add r0.x, -r0.x, cb0[34].z
div r0.x, r0.x, cb0[30].y
mul r2.x, r2.x, l(1.442695)
exp r2.x, r2.x
mul r2.yzw, r2.xxxx, cb0[33].xxyz
mad r3.xyz, cb0[33].xyzx, r2.xxxx, r0.zzzz
mad r2.xyz, r2.yzwy, r1.wwww, r0.yyyy
div r2.xyz, r2.xyzx, r3.xyzx
mul r0.xyz, r0.xxxx, -r3.xyzx
mul r3.xyz, |r0.wwww|, -r3.xyzx
mul r3.xyz, r3.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r3.xyz, r3.xyzx
mul r0.xyz, r0.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r0.xyz, r0.xyzx
log r4.xyz, cb0[35].xyzx
mul r4.xyz, r4.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r4.xyz, r4.xyzx
mul r0.xyz, r0.xyzx, r4.xyzx
mul r0.xyz, r0.xyzx, r2.xyzx
add r2.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o3.w, r3.x
mad r0.xyz, r0.xyzx, r2.xyzx, l(-0.004000, -0.004000, -0.004000, 0.000000)
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mad r2.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mul r2.xyz, r0.xyzx, r2.xyzx
mad r3.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(1.700000, 1.700000, 1.700000, 0.000000)
mad r0.xyz, r0.xyzx, r3.xyzx, l(0.060000, 0.060000, 0.060000, 0.000000)
div o3.xyz, r2.xyzx, r0.xyzx
mov o4.xyzw, v5.xyzw
mad r0.x, |v3.y|, l(-0.018729), l(0.074261)
mad r0.x, r0.x, |v3.y|, l(-0.212114)
mad r0.x, r0.x, |v3.y|, l(1.570729)
add r0.y, -|v3.y|, l(1.000000)
sqrt r0.y, r0.y
mul r0.z, r0.y, r0.x
mad r0.z, r0.z, l(-2.000000), l(3.141593)
lt r0.w, v3.y, -v3.y
and r0.z, r0.w, r0.z
mad r0.x, r0.x, r0.y, r0.z
sincos r0.yz, null, r0.xxxx
mov r0.x, v3.y
mul o5.xyz, r0.xyzx, l(0.500000, 0.500000, -0.500000, 0.000000)
dp3 o6.x, v3.xyzx, r1.xyzx
dp3 o6.y, v4.xyzx, r1.xyzx
dp3 o6.z, v1.xyzx, r1.xyzx
ret 
// Approximately 97 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
