
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float3 m_Normal;
    float2 m_TexCoord;
    float3 m_Tangent;
    float3 m_Binormal;
    float4 m_Color;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c7);

  int k_fSortBias : packoffset(c15) = int(-1.0e+000);
  // int k_fSortBias : packoffset(c15) = int(-1.#QNAN0e+000);
  float3 k_cColor : packoffset(c15.y) = float3(6.590000e-001,8.670000e-001,9.330000e-001);
  float3 k_cHotHandColor : packoffset(c16) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float3 k_cSpecularColor : packoffset(c17) = float3(5.020000e-001,7.294000e-001,1.000000e+000);
  float k_fAlphaFloor : packoffset(c17.w) = float(1.000000e-001);
  float k_fBrightness : packoffset(c18) = float(1.000000e+000);
  float k_fDepthAdjust : packoffset(c18.y) = float(1.000000e+000);
  float k_fDesaturate : packoffset(c18.z) = float(0.000000e+000);
  float k_fHDRScale : packoffset(c18.w) = float(1.000000e+000);
  float k_fHotHandBrightness : packoffset(c19) = float(0.000000e+000);
  float k_fHotHandLerp : packoffset(c19.y) = float(2.300000e-001);
  float k_fHotHandOpacity : packoffset(c19.z) = float(0.000000e+000);
  float k_fHotHandPower : packoffset(c19.w) = float(3.000000e+000);
  float k_fHotHandWidth : packoffset(c20) = float(3.500000e-001);
  float k_fOpacity : packoffset(c20.y) = float(1.000000e+000);
  float k_fSpecularPower : packoffset(c20.z) = float(2.000000e+002);
  float k_fSpecularScale : packoffset(c20.w) = float(1.200000e+000);
  float k_fTODBrightness : packoffset(c21) = float(1.000000e+000);
  float k_fTODLerp : packoffset(c21.y) = float(1.000000e+000);
  row_major float4x4 k_mObjectToWorld_3DSMAX_ : packoffset(c22);
  float3 k_vFresnelControl : packoffset(c26) = float3(9.000000e-001,5.000000e-001,7.000000e-001);
  float4 k_vMaskProjection : packoffset(c27) = float4(5.000000e-001,5.300000e-001,1.420000e+002,2.000000e+002);
  float3 k_vShimmerBack : packoffset(c28) = float3(0.000000e+000,1.000000e-001,1.000000e+000);
  float3 k_vShimmerFront : packoffset(c29) = float3(0.000000e+000,1.000000e-001,1.000000e+000);
  row_major float4x4 k_mObjectToClip : packoffset(c30);
  row_major float3x4 k_mObjectToWorld : packoffset(c34);
  float4 k_vHDRLuminanceWeights : packoffset(c37);
  float4 k_vObjectColor : packoffset(c38);
  float3 k_vObjectSpaceEyePos : packoffset(c39);
  float2 k_vScene_TexCoordScale : packoffset(c40);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5,
  out float4 o7 : COLOR0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToClip._m20_m21_m22_m23, r0.xyzw);
  r1.z = k_fDepthAdjust + r1.x;
  r1.x = dot(k_mObjectToClip._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(k_mObjectToClip._m10_m11_m12_m13, r0.xyzw);
  r1.w = dot(k_mObjectToClip._m30_m31_m32_m33, r0.xyzw);


//Mike_ar69 - Stereo Shift
float4 r23;
float4 stereo = StereoParams.Load(0);
r23.xyzw = r1.xyzw;
r1.x += stereo.x * (r1.w - stereo.y);
o0.xyzw = r23.xyzw;


  o2.zw = r1.zw;
  r0.xy = k_vScene_TexCoordScale.xy * r1.ww;
  o1.xy = v2.xy;
  r0.zw = float2(1.000000e+000,-1.000000e+000) * k_vScene_TexCoordScale.xy;
  o2.xy = r1.xy * r0.zw + r0.xy;
  r0.xyz = k_vObjectSpaceEyePos.xyz + -v0.xyz;
  o3.x = dot(k_mObjectToWorld._m00_m01_m02, r0.xyz);
  o3.y = dot(k_mObjectToWorld._m10_m11_m12, r0.xyz);
  o3.z = dot(k_mObjectToWorld._m20_m21_m22, r0.xyz);
  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v3.xyz * r0.xxx;
  o4.x = dot(k_mObjectToWorld._m00_m01_m02, r0.xyz);
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v4.xyz * r0.www;
  o4.y = dot(k_mObjectToWorld._m00_m01_m02, r1.xyz);
  r0.w = dot(v1.xyz, v1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v1.xyz * r0.www;
  o4.z = dot(k_mObjectToWorld._m00_m01_m02, r2.xyz);
  o5.x = dot(k_mObjectToWorld._m10_m11_m12, r0.xyz);
  o6.x = dot(k_mObjectToWorld._m20_m21_m22, r0.xyz);
  o5.y = dot(k_mObjectToWorld._m10_m11_m12, r1.xyz);
  o6.y = dot(k_mObjectToWorld._m20_m21_m22, r1.xyz);
  o5.z = dot(k_mObjectToWorld._m10_m11_m12, r2.xyz);
  o6.z = dot(k_mObjectToWorld._m20_m21_m22, r2.xyz);
  r0.xy = float2(1.000000e+000,1.000000e+000) / k_vMaskProjection.zw;
  r0.xy = r0.xy * v0.xy + k_vMaskProjection.xy;
  o7.xy = -r0.xy;
  o7.z = 0.000000000e+000;
  o7.w = v5.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//       float3 m_Normal;               // Offset:   32
//       float2 m_TexCoord;             // Offset:   48
//       float3 m_Tangent;              // Offset:   64
//       float3 m_Binormal;             // Offset:   80
//       float4 m_Color;                // Offset:   96
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    96 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:  112
//       float3 m_Normal;               // Offset:  128
//       float2 m_TexCoord;             // Offset:  144
//       float3 m_Tangent;              // Offset:  160
//       float3 m_Binormal;             // Offset:  176
//       float4 m_Color;                // Offset:  192
//       float4 m_Weights;              // Offset:  208
//       float4 m_Indices;              // Offset:  224
//
//   } MaterialVertexDef_Skeletal;      // Offset:  112 Size:   128 [unused]
//   int k_fSortBias;                   // Offset:  240 Size:     4 [unused]
//      = 0xffffff9c 
//   float3 k_cColor;                   // Offset:  244 Size:    12 [unused]
//      = 0x3f28b439 0x3f5df3b6 0x3f6ed917 
//   float3 k_cHotHandColor;            // Offset:  256 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float3 k_cSpecularColor;           // Offset:  272 Size:    12 [unused]
//      = 0x3f008312 0x3f3ab9f5 0x3f800000 
//   float k_fAlphaFloor;               // Offset:  284 Size:     4 [unused]
//      = 0x3dcccccd 
//   float k_fBrightness;               // Offset:  288 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fDepthAdjust;              // Offset:  292 Size:     4
//      = 0x3f800000 
//   float k_fDesaturate;               // Offset:  296 Size:     4 [unused]
//      = 0x00000000 
//   float k_fHDRScale;                 // Offset:  300 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fHotHandBrightness;        // Offset:  304 Size:     4 [unused]
//      = 0x00000000 
//   float k_fHotHandLerp;              // Offset:  308 Size:     4 [unused]
//      = 0x3e6b851f 
//   float k_fHotHandOpacity;           // Offset:  312 Size:     4 [unused]
//      = 0x00000000 
//   float k_fHotHandPower;             // Offset:  316 Size:     4 [unused]
//      = 0x40400000 
//   float k_fHotHandWidth;             // Offset:  320 Size:     4 [unused]
//      = 0x3eb33333 
//   float k_fOpacity;                  // Offset:  324 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fSpecularPower;            // Offset:  328 Size:     4 [unused]
//      = 0x43480000 
//   float k_fSpecularScale;            // Offset:  332 Size:     4 [unused]
//      = 0x3f99999a 
//   float k_fTODBrightness;            // Offset:  336 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fTODLerp;                  // Offset:  340 Size:     4 [unused]
//      = 0x3f800000 
//   row_major float4x4 k_mObjectToWorld_3DSMAX_;// Offset:  352 Size:    64 [unused]
//   float3 k_vFresnelControl;          // Offset:  416 Size:    12 [unused]
//      = 0x3f666666 0x3f000000 0x3f333333 
//   float4 k_vMaskProjection;          // Offset:  432 Size:    16
//      = 0x3f000000 0x3f07ae14 0x430e0000 0x43480000 
//   float3 k_vShimmerBack;             // Offset:  448 Size:    12 [unused]
//      = 0x00000000 0x3dcccccd 0x3f800000 
//   float3 k_vShimmerFront;            // Offset:  464 Size:    12 [unused]
//      = 0x00000000 0x3dcccccd 0x3f800000 
//   row_major float4x4 k_mObjectToClip;// Offset:  480 Size:    64
//   row_major float3x4 k_mObjectToWorld;// Offset:  544 Size:    48
//   float4 k_vHDRLuminanceWeights;     // Offset:  592 Size:    16 [unused]
//   float4 k_vObjectColor;             // Offset:  608 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  624 Size:    12
//   float2 k_vScene_TexCoordScale;     // Offset:  640 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// COLOR                    0   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[41], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.w
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_temps 3
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[32].xyzw, r0.xyzw
add r1.z, r1.x, cb0[18].y
dp4 r1.x, cb0[30].xyzw, r0.xyzw
dp4 r1.y, cb0[31].xyzw, r0.xyzw
dp4 r1.w, cb0[33].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw
mov o2.zw, r1.zzzw
mul r0.xy, r1.wwww, cb0[40].xyxx
mov o1.xy, v2.xyxx
mul r0.zw, cb0[40].xxxy, l(0.000000, 0.000000, 1.000000, -1.000000)
mad o2.xy, r1.xyxx, r0.zwzz, r0.xyxx
add r0.xyz, -v0.xyzx, cb0[39].xyzx
dp3 o3.x, cb0[34].xyzx, r0.xyzx
dp3 o3.y, cb0[35].xyzx, r0.xyzx
dp3 o3.z, cb0[36].xyzx, r0.xyzx
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.xyzx
dp3 o4.x, cb0[34].xyzx, r0.xyzx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v4.xyzx
dp3 o4.y, cb0[34].xyzx, r1.xyzx
dp3 r0.w, v1.xyzx, v1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v1.xyzx
dp3 o4.z, cb0[34].xyzx, r2.xyzx
dp3 o5.x, cb0[35].xyzx, r0.xyzx
dp3 o6.x, cb0[36].xyzx, r0.xyzx
dp3 o5.y, cb0[35].xyzx, r1.xyzx
dp3 o6.y, cb0[36].xyzx, r1.xyzx
dp3 o5.z, cb0[35].xyzx, r2.xyzx
dp3 o6.z, cb0[36].xyzx, r2.xyzx
div r0.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[27].zwzz
mad r0.xy, r0.xyxx, v0.xyxx, cb0[27].xyxx
mov o7.xy, -r0.xyxx
mov o7.z, l(0)
mov o7.w, v5.w
ret 
// Approximately 41 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
