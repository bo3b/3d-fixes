
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float2 k_vTimeLagR : packoffset(c22) = float2(-2.500000e-001,-1.000000e-001);
  float k_fWindBlend : packoffset(c22.z) = float(1.000000e+000);
  float k_fWindPhase : packoffset(c22.w) = float(1.000000e+003);
  float k_fBendability : packoffset(c23) = float(0.000000e+000);
  float4 k_vWindFreqCalm : packoffset(c24) = float4(5.000000e+000,1.000000e+000,5.000000e+000,1.500000e+000);
  float4 k_vWindFreqGust : packoffset(c25) = float4(1.500000e+001,1.000000e+000,3.000000e+001,1.500000e+000);
  float3 k_vInteraction : packoffset(c26) = float3(2.500000e+001,2.500000e+001,7.000000e+000);
  float2 k_vFadeDistance : packoffset(c27) = float2(1.000000e+003,1.000000e+003);
  float k_fEdgeFadePower : packoffset(c27.z) = float(1.000000e+000);
  float2 k_vTintMapRange : packoffset(c28) = float2(1.000000e+003,1.000000e+003);
  float k_fTintMapMinFade : packoffset(c28.z) = float(1.000000e+000);
  bool k_bUseWorldTintMap : packoffset(c28.w) = bool(0.000000e+000);
  float k_fRevealValue : packoffset(c29) = float(1.000000e+000);
  float k_fRevealWidth : packoffset(c29.y) = float(1.000000e-001);
  float3 k_cEmissiveRampColor : packoffset(c30) = float3(0.000000e+000,1.000000e+000,1.000000e+000);
  float k_fEmissiveRampBrightness : packoffset(c30.w) = float(2.000000e+000);
  float k_fEmissiveRampPower : packoffset(c31) = float(2.000000e+000);
  float k_fMaxSpecularPower : packoffset(c31.y) = float(6.400000e+001);
  int k_fVertexAnimation : packoffset(c31.z) = int(1.401298e-045);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}

cbuffer CBuffer_Bones : register(b1)
{
  float4 k_mModelObjectNodes[64] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  float4 v6 : BLENDWEIGHT0,
  float4 v7 : BLENDINDICES0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask;
  r0.x = k_mObjectToWorld._m03;
  r0.y = k_mObjectToWorld._m13;
  r0.z = k_mObjectToWorld._m23;
  r0.x = dot(float3(1.000000e+000,1.000000e+000,1.000000e+000), r0.xyz);
  r0.y = dot(float3(1.000000e+000,1.000000e+000,1.000000e+000), v0.xyz);
  r0.z = dot(k_mObjectToWorld._m00_m01_m02, k_mObjectToWorld._m00_m01_m02);
  r0.z = sqrt(r0.z);
  r0.w = k_fWindPhase * r0.z;
  r0.y = r0.y / r0.w;
  r0.x = r0.x + r0.y;
  r1.xyzw = k_vWindFreqGust.xyzw + -k_vWindFreqCalm.xyzw;
  r0.y = k_vWindDirection.w * k_fWindBlend;
  r0.w = saturate(1.666666716e-001 * r0.y);
  r1.xyzw = r0.wwww * r1.xyzw + k_vWindFreqCalm.xyzw;
  r0.xw = k_fTime * r1.yw + r0.xx;
  r1.xy = r1.xz * r0.zz;
  r0.xz = k_vTimeLagR.xy * v5.xx + r0.xw;
  r0.xz = sin(r0.xz);
  r0.xw = r0.xz * r1.xy;
  r1.x = 2.500000000e-001 * r0.x;
  r0.z = r0.z * r1.y + r1.x;
  r1.xyz = k_vWindDirection.yyy * k_mObjectToWorld._m11_m10_m12;
  r1.xyz = k_vWindDirection.xxx * k_mObjectToWorld._m01_m00_m02 + r1.xyz;
  r1.xyz = k_vWindDirection.zzz * k_mObjectToWorld._m21_m20_m22 + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = r1.xyz * r0.zzz;
  r0.x = r0.y * k_fBendability + r0.x;
  r0.x = r0.w * 2.500000000e-001 + r0.x;
  r0.xyz = r0.xxx * r1.yxz + r2.xyz;
  r0.w = saturate(1.000000000e+000 + -v2.y);
  r0.w = v5.y * r0.w;
  r1.x = r0.w * r0.w;
  r0.xyz = r0.xyz * r1.xxx + v0.xyz;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r0.xyz = r1.xxx * r0.xyz;
  r1.x = dot(v0.xyz, v0.xyz);
  r1.x = sqrt(r1.x);
  r2.xyz = r1.xxx * r0.xyz;
  r2.w = 1.000000000e+000;
  r3.x = dot(k_mObjectToWorld._m00_m01_m02_m03, r2.xyzw);
  r3.y = dot(k_mObjectToWorld._m20_m21_m22_m23, r2.xyzw);
  r1.yz = -k_vVegetationForce2.xz + r3.xy;
  r3.xy = -k_vVegetationForce1.xz + r3.xy;
  r0.y = dot(r1.yz, r1.yz);
  r0.y = sqrt(r0.y);
  r0.y = r0.y / k_vVegetationRadius.y;
  r1.y = dot(r3.xy, r3.xy);
  r1.z = sqrt(r1.y);
  r1.y = rsqrt(r1.y);
  r1.yw = r3.xy * r1.yy;
  r1.z = r1.z / k_vVegetationRadius.x;
  r0.y = saturate(min(r0.y, r1.z));
  r0.y = 1.000000000e+000 + -r0.y;
  r1.z = dot(k_mObjectToWorld._m10_m11_m12_m13, r2.xyzw);
  r1.z = k_vVegetationForce1.y + -r1.z;
  r1.z = k_vVegetationRadius.x >= r1.z;
  r1.z = r1.z ? 1.000000 : 0;
  r3.x = r1.z * r0.y;
  r1.yw = r3.xx * r1.yw;
  r1.yw = r1.yw * r0.ww;
  r0.w = k_fTime * k_vInteraction.z;
  r0.w = sin(r0.w);
  r0.y = r0.y * r1.z + r0.w;
  r0.y = k_vInteraction.y * r0.y + k_vInteraction.x;
  r0.w = k_vVegetationForce1.w * k_fBendability;
  r0.y = r0.w * r0.y;
  r0.yw = r0.yy * r1.yw;
  r1.yz = k_mObjectToWorld._m20_m22 * r0.ww;
  r0.yw = r0.yy * k_mObjectToWorld._m00_m02 + r1.yz;
  r2.xz = r0.xz * r1.xx + r0.yw;
  r0.xyz = float3(2.550020e+002,2.550020e+002,2.550020e+002) * v7.zyx;
  r0.xyz = (int3)r0.xyz;
  r1.xyz = (uint3)r0.xyz << int3(1,1,1);
  r0.xyz = mad((int3)r0.xyz, int3(2,2,2), int3(1,1,1));
  r3.xyz = v6.xyz;
  r4.w = k_mModelObjectNodes[r1.x].y * r3.x;
  r5.w = k_mModelObjectNodes[r1.y].y * r3.y;
  r0.w = k_mModelObjectNodes[r0.x].w * k_mModelObjectNodes[r0.x].x;
  r1.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + -r0.w;
  r0.w = k_mModelObjectNodes[r0.x].y * k_mModelObjectNodes[r0.x].z + r0.w;
  r0.w = v6.x * r0.w;
  r1.w = v6.x * r1.w;
  r3.w = 2.000000000e+000;
  r4.z = r3.w * r1.w;
  r1.w = k_mModelObjectNodes[r0.y].w * k_mModelObjectNodes[r0.y].x;
  r6.x = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.y].y * k_mModelObjectNodes[r0.y].z + r1.w;
  r1.w = v6.y * r1.w;
  r7.y = r1.w * r3.w;
  r1.w = v6.y * r6.x;
  r5.z = r1.w * r3.w;
  r6.xyz = k_mModelObjectNodes[r0.x].wxw * k_mModelObjectNodes[r0.x].zzy;
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + r6.x;
  r1.w = v6.x * r1.w;
  r4.x = r1.w * r3.w;
  r8.xyz = k_mModelObjectNodes[r0.x].xyz * k_mModelObjectNodes[r0.x].xyz;
  r8.xyz = r8.yxx + r8.zzy;
  r8.xyz = -r8.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r4.y = r8.y * r3.x;
  r9.xyz = k_mModelObjectNodes[r0.y].wxw * k_mModelObjectNodes[r0.y].zzy;
  r1.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + r9.x;
  r1.w = v6.y * r1.w;
  r5.x = r1.w * r3.w;
  r10.xyz = k_mModelObjectNodes[r0.y].xyz * k_mModelObjectNodes[r0.y].xyz;
  r10.xyz = r10.yxx + r10.zzy;
  r10.xyz = -r10.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r5.y = r10.y * r3.y;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r5.w = k_mModelObjectNodes[r1.z].y * r3.z;
  r1.w = k_mModelObjectNodes[r0.z].w * k_mModelObjectNodes[r0.z].x;
  r6.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + -r1.w;
  r1.w = k_mModelObjectNodes[r0.z].y * k_mModelObjectNodes[r0.z].z + r1.w;
  r1.w = v6.z * r1.w;
  r11.y = r1.w * r3.w;
  r1.w = v6.z * r6.w;
  r5.z = r1.w * r3.w;
  r12.xyz = k_mModelObjectNodes[r0.z].wxw * k_mModelObjectNodes[r0.z].zzy;
  r1.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + r12.x;
  r1.w = v6.z * r1.w;
  r5.x = r1.w * r3.w;
  r13.xyz = k_mModelObjectNodes[r0.z].xyz * k_mModelObjectNodes[r0.z].xyz;
  r13.xyz = r13.yxx + r13.zzy;
  r13.xyz = -r13.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r5.y = r13.y * r3.z;
  r4.xyzw = r5.xyzw + r4.xyzw;
  r4.y = dot(r4.xyzw, r2.xyzw);
  r1.w = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].z + -r6.z;
  r1.w = v6.x * r1.w;
  r5.x = r1.w * r3.w;
  r5.y = r3.w * r0.w;
  r0.w = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].z + -r9.z;
  r0.w = v6.y * r0.w;
  r7.x = r0.w * r3.w;
  r5.z = r8.z * r3.x;
  r8.x = r8.x * r3.x;
  r7.z = r10.z * r3.y;
  r10.x = r10.x * r3.y;
  r5.w = k_mModelObjectNodes[r1.x].z * r3.x;
  r7.w = k_mModelObjectNodes[r1.y].z * r3.y;
  r5.xyzw = r7.xyzw + r5.xyzw;
  r0.w = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].z + -r12.z;
  r0.w = v6.z * r0.w;
  r11.x = r0.w * r3.w;
  r11.z = r13.z * r3.z;
  r7.x = r13.x * r3.z;
  r11.w = k_mModelObjectNodes[r1.z].z * r3.z;
  r5.xyzw = r11.xyzw + r5.xyzw;
  r4.z = dot(r5.xyzw, r2.xyzw);
  r8.w = k_mModelObjectNodes[r1.x].x * r3.x;
  r10.w = k_mModelObjectNodes[r1.y].x * r3.y;
  r7.w = k_mModelObjectNodes[r1.z].x * r3.z;
  r0.x = k_mModelObjectNodes[r0.x].x * k_mModelObjectNodes[r0.x].y + -r6.x;
  r0.w = r6.y + r6.z;
  r0.xw = v6.xx * r0.xw;
  r8.yz = r0.xw * r3.ww;
  r0.x = k_mModelObjectNodes[r0.y].x * k_mModelObjectNodes[r0.y].y + -r9.x;
  r0.y = k_mModelObjectNodes[r0.z].x * k_mModelObjectNodes[r0.z].y + -r12.x;
  r0.z = r12.y + r12.z;
  r0.xyz = v6.yzz * r0.xyz;
  r7.yz = r0.yz * r3.ww;
  r0.y = r9.y + r9.z;
  r0.y = v6.y * r0.y;
  r10.yz = r0.xy * r3.ww;
  r0.xyzw = r10.xyzw + r8.xyzw;
  r0.xyzw = r0.xyzw + r7.xyzw;
  r4.x = dot(r0.xyzw, r2.xyzw);
  r4.w = 1.000000000e+000;
  o0.x = dot(k_mObjectToClip._m00_m01_m02_m03, r4.xyzw);
  o0.y = dot(k_mObjectToClip._m10_m11_m12_m13, r4.xyzw);
  r0.x = dot(k_mObjectToClip._m20_m21_m22_m23, r4.xyzw);
  r0.y = dot(k_mObjectToClip._m30_m31_m32_m33, r4.xyzw);
  o0.z = min(r0.x, k_vScene_ZRange.z);
  o0.w = r0.y;
  o1.zw = r0.xy;
  o1.xy = v2.xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float2 k_vTimeLagR;                // Offset:  352 Size:     8
//      = 0xbe800000 0xbdcccccd 
//   float k_fWindBlend;                // Offset:  360 Size:     4
//      = 0x3f800000 
//   float k_fWindPhase;                // Offset:  364 Size:     4
//      = 0x447a0000 
//   float k_fBendability;              // Offset:  368 Size:     4
//      = 0x00000000 
//   float4 k_vWindFreqCalm;            // Offset:  384 Size:    16
//      = 0x40a00000 0x3f800000 0x40a00000 0x3fc00000 
//   float4 k_vWindFreqGust;            // Offset:  400 Size:    16
//      = 0x41700000 0x3f800000 0x41f00000 0x3fc00000 
//   float3 k_vInteraction;             // Offset:  416 Size:    12
//      = 0x41c80000 0x41c80000 0x40e00000 
//   float2 k_vFadeDistance;            // Offset:  432 Size:     8 [unused]
//      = 0x447a0000 0x447a0000 
//   float k_fEdgeFadePower;            // Offset:  440 Size:     4 [unused]
//      = 0x3f800000 
//   float2 k_vTintMapRange;            // Offset:  448 Size:     8 [unused]
//      = 0x447a0000 0x447a0000 
//   float k_fTintMapMinFade;           // Offset:  456 Size:     4 [unused]
//      = 0x3f800000 
//   bool k_bUseWorldTintMap;           // Offset:  460 Size:     4 [unused]
//      = 0x00000000 
//   float k_fRevealValue;              // Offset:  464 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fRevealWidth;              // Offset:  468 Size:     4 [unused]
//      = 0x3dcccccd 
//   float3 k_cEmissiveRampColor;       // Offset:  480 Size:    12 [unused]
//      = 0x00000000 0x3f800000 0x3f800000 
//   float k_fEmissiveRampBrightness;   // Offset:  492 Size:     4 [unused]
//      = 0x40000000 
//   float k_fEmissiveRampPower;        // Offset:  496 Size:     4 [unused]
//      = 0x40000000 
//   float k_fMaxSpecularPower;         // Offset:  500 Size:     4 [unused]
//      = 0x42800000 
//   int k_fVertexAnimation;            // Offset:  504 Size:     4 [unused]
//      = 0x00000001 
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
// cbuffer CBuffer_Bones
// {
//
//   float4 k_mModelObjectNodes[64];    // Offset:    0 Size:  1024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_Bones                     cbuffer      NA          NA    1        1
// CBuffer_View                      cbuffer      NA          NA   12        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float       
// BINORMAL                 0   xyz         4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float   xy  
// BLENDWEIGHT              0   xyzw        6     NONE   float   xyz 
// BLENDINDICES             0   xyzw        7     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[27], immediateIndexed
dcl_constantbuffer cb12[34], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_constantbuffer cb1[64], dynamicIndexed
dcl_input v0.xyz
dcl_input v2.xy
dcl_input v5.xy
dcl_input v6.xyz
dcl_input v7.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 14
mov r0.x, cb0[7].w
mov r0.y, cb0[8].w
mov r0.z, cb0[9].w
dp3 r0.x, l(1.000000, 1.000000, 1.000000, 0.000000), r0.xyzx
dp3 r0.y, l(1.000000, 1.000000, 1.000000, 0.000000), v0.xyzx
dp3 r0.z, cb0[7].xyzx, cb0[7].xyzx
sqrt r0.z, r0.z
mul r0.w, r0.z, cb0[22].w
div r0.y, r0.y, r0.w
add r0.x, r0.y, r0.x
add r1.xyzw, -cb0[24].xyzw, cb0[25].xyzw
mul r0.y, cb0[22].z, cb12[30].w
mul_sat r0.w, r0.y, l(0.166667)
mad r1.xyzw, r0.wwww, r1.xyzw, cb0[24].xyzw
mad r0.xw, cb13[1].xxxx, r1.yyyw, r0.xxxx
mul r1.xy, r0.zzzz, r1.xzxx
mad r0.xz, cb0[22].xxyx, v5.xxxx, r0.xxwx
sincos r0.xz, null, r0.xxzx
mul r0.xw, r1.xxxy, r0.xxxz
mul r1.x, r0.x, l(0.250000)
mad r0.z, r0.z, r1.y, r1.x
mul r1.xyz, cb0[8].yxzy, cb12[30].yyyy
mad r1.xyz, cb12[30].xxxx, cb0[7].yxzy, r1.xyzx
mad r1.xyz, cb12[30].zzzz, cb0[9].yxzy, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r2.xyz, r0.zzzz, r1.xyzx
mad r0.x, r0.y, cb0[23].x, r0.x
mad r0.x, r0.w, l(0.250000), r0.x
mad r0.xyz, r0.xxxx, r1.yxzy, r2.xyzx
add_sat r0.w, -v2.y, l(1.000000)
mul r0.w, r0.w, v5.y
mul r1.x, r0.w, r0.w
mad r0.xyz, r0.xyzx, r1.xxxx, v0.xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.x, r1.x
mul r0.xyz, r0.xyzx, r1.xxxx
dp3 r1.x, v0.xyzx, v0.xyzx
sqrt r1.x, r1.x
mul r2.xyz, r0.xyzx, r1.xxxx
mov r2.w, l(1.000000)
dp4 r3.x, cb0[7].xyzw, r2.xyzw
dp4 r3.y, cb0[9].xyzw, r2.xyzw
add r1.yz, r3.xxyx, -cb12[32].xxzx
add r3.xy, r3.xyxx, -cb12[31].xzxx
dp2 r0.y, r1.yzyy, r1.yzyy
sqrt r0.y, r0.y
div r0.y, r0.y, cb12[33].y
dp2 r1.y, r3.xyxx, r3.xyxx
sqrt r1.z, r1.y
rsq r1.y, r1.y
mul r1.yw, r1.yyyy, r3.xxxy
div r1.z, r1.z, cb12[33].x
min_sat r0.y, r0.y, r1.z
add r0.y, -r0.y, l(1.000000)
dp4 r1.z, cb0[8].xyzw, r2.xyzw
add r1.z, -r1.z, cb12[31].y
ge r1.z, cb12[33].x, r1.z
and r1.z, r1.z, l(0x3f800000)
mul r3.x, r0.y, r1.z
mul r1.yw, r1.yyyw, r3.xxxx
mul r1.yw, r0.wwww, r1.yyyw
mul r0.w, cb0[26].z, cb13[1].x
sincos r0.w, null, r0.w
mad r0.y, r0.y, r1.z, r0.w
mad r0.y, cb0[26].y, r0.y, cb0[26].x
mul r0.w, cb0[23].x, cb12[31].w
mul r0.y, r0.y, r0.w
mul r0.yw, r1.yyyw, r0.yyyy
mul r1.yz, r0.wwww, cb0[9].xxzx
mad r0.yw, r0.yyyy, cb0[7].xxxz, r1.yyyz
mad r2.xz, r0.xxzx, r1.xxxx, r0.yywy
mul r0.xyz, v7.zyxz, l(255.001953, 255.001953, 255.001953, 0.000000)
ftoi r0.xyz, r0.xyzx
ishl r1.xyz, r0.xyzx, l(1, 1, 1, 0)
imad r0.xyz, r0.xyzx, l(2, 2, 2, 0), l(1, 1, 1, 0)
mov r3.xyz, v6.xyzx
mul r4.w, r3.x, cb1[r1.x + 0].y
mul r5.w, r3.y, cb1[r1.y + 0].y
mul r0.w, cb1[r0.x + 0].x, cb1[r0.x + 0].w
mad r1.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, -r0.w
mad r0.w, cb1[r0.x + 0].y, cb1[r0.x + 0].z, r0.w
mul r0.w, r0.w, v6.x
mul r1.w, r1.w, v6.x
mov r3.w, l(2.000000)
mul r4.z, r1.w, r3.w
mul r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].w
mad r6.x, cb1[r0.y + 0].y, cb1[r0.y + 0].z, -r1.w
mad r1.w, cb1[r0.y + 0].y, cb1[r0.y + 0].z, r1.w
mul r1.w, r1.w, v6.y
mul r7.y, r3.w, r1.w
mul r1.w, r6.x, v6.y
mul r5.z, r3.w, r1.w
mul r6.xyz, cb1[r0.x + 0].zzyz, cb1[r0.x + 0].wxww
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].y, r6.x
mul r1.w, r1.w, v6.x
mul r4.x, r3.w, r1.w
mul r8.xyz, cb1[r0.x + 0].xyzx, cb1[r0.x + 0].xyzx
add r8.xyz, r8.zzyz, r8.yxxy
mad r8.xyz, -r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.y, r3.x, r8.y
mul r9.xyz, cb1[r0.y + 0].zzyz, cb1[r0.y + 0].wxww
mad r1.w, cb1[r0.y + 0].x, cb1[r0.y + 0].y, r9.x
mul r1.w, r1.w, v6.y
mul r5.x, r3.w, r1.w
mul r10.xyz, cb1[r0.y + 0].xyzx, cb1[r0.y + 0].xyzx
add r10.xyz, r10.zzyz, r10.yxxy
mad r10.xyz, -r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r5.y, r3.y, r10.y
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.w, r3.z, cb1[r1.z + 0].y
mul r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].w
mad r6.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, -r1.w
mad r1.w, cb1[r0.z + 0].y, cb1[r0.z + 0].z, r1.w
mul r1.w, r1.w, v6.z
mul r11.y, r3.w, r1.w
mul r1.w, r6.w, v6.z
mul r5.z, r3.w, r1.w
mul r12.xyz, cb1[r0.z + 0].zzyz, cb1[r0.z + 0].wxww
mad r1.w, cb1[r0.z + 0].x, cb1[r0.z + 0].y, r12.x
mul r1.w, r1.w, v6.z
mul r5.x, r3.w, r1.w
mul r13.xyz, cb1[r0.z + 0].xyzx, cb1[r0.z + 0].xyzx
add r13.xyz, r13.zzyz, r13.yxxy
mad r13.xyz, -r13.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r5.y, r3.z, r13.y
add r4.xyzw, r4.xyzw, r5.xyzw
dp4 r4.y, r4.xyzw, r2.xyzw
mad r1.w, cb1[r0.x + 0].x, cb1[r0.x + 0].z, -r6.z
mul r1.w, r1.w, v6.x
mul r5.x, r3.w, r1.w
mul r5.y, r0.w, r3.w
mad r0.w, cb1[r0.y + 0].x, cb1[r0.y + 0].z, -r9.z
mul r0.w, r0.w, v6.y
mul r7.x, r3.w, r0.w
mul r5.z, r3.x, r8.z
mul r8.x, r3.x, r8.x
mul r7.z, r3.y, r10.z
mul r10.x, r3.y, r10.x
mul r5.w, r3.x, cb1[r1.x + 0].z
mul r7.w, r3.y, cb1[r1.y + 0].z
add r5.xyzw, r5.xyzw, r7.xyzw
mad r0.w, cb1[r0.z + 0].x, cb1[r0.z + 0].z, -r12.z
mul r0.w, r0.w, v6.z
mul r11.x, r3.w, r0.w
mul r11.z, r3.z, r13.z
mul r7.x, r3.z, r13.x
mul r11.w, r3.z, cb1[r1.z + 0].z
add r5.xyzw, r5.xyzw, r11.xyzw
dp4 r4.z, r5.xyzw, r2.xyzw
mul r8.w, r3.x, cb1[r1.x + 0].x
mul r10.w, r3.y, cb1[r1.y + 0].x
mul r7.w, r3.z, cb1[r1.z + 0].x
mad r0.x, cb1[r0.x + 0].x, cb1[r0.x + 0].y, -r6.x
add r0.w, r6.z, r6.y
mul r0.xw, r0.xxxw, v6.xxxx
mul r8.yz, r3.wwww, r0.xxwx
mad r0.x, cb1[r0.y + 0].x, cb1[r0.y + 0].y, -r9.x
mad r0.y, cb1[r0.z + 0].x, cb1[r0.z + 0].y, -r12.x
add r0.z, r12.z, r12.y
mul r0.xyz, r0.xyzx, v6.yzzy
mul r7.yz, r3.wwww, r0.yyzy
add r0.y, r9.z, r9.y
mul r0.y, r0.y, v6.y
mul r10.yz, r3.wwww, r0.xxyx
add r0.xyzw, r8.xyzw, r10.xyzw
add r0.xyzw, r7.xyzw, r0.xyzw
dp4 r4.x, r0.xyzw, r2.xyzw
mov r4.w, l(1.000000)
dp4 o0.x, cb0[0].xyzw, r4.xyzw
dp4 o0.y, cb0[1].xyzw, r4.xyzw
dp4 r0.x, cb0[2].xyzw, r4.xyzw
dp4 r0.y, cb0[3].xyzw, r4.xyzw
min o0.z, r0.x, cb12[25].z
mov o0.w, r0.y
mov o1.zw, r0.xxxy
mov o1.xy, v2.xyxx
ret 
// Approximately 179 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
