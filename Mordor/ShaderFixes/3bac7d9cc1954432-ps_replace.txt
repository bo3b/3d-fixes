//Ocean double imaging
cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float2 k_vTessellation : packoffset(c22) = float2(1.500000e+001,6.300000e+001);
  float4 k_vFade : packoffset(c23) = float4(5.000000e+003,1.000000e+004,1.000000e+003,5.000000e+003);
  float4 k_vDisplacement : packoffset(c24) = float4(3.000000e+001,1.500000e+003,1.280000e+002,1.000000e+001);
  float k_fOffset : packoffset(c25) = float(-2.500000e-001);
  float2 k_vMipRange : packoffset(c25.y) = float2(0.000000e+000,1.000000e+003);
  float2 k_vDispPanRate : packoffset(c26) = float2(5.143700e-002,7.375100e-003);
  float4 k_vWashingMachine : packoffset(c27) = float4(8.000000e+000,1.000000e-002,2.926120e+000,2.172630e+000);
  float4 k_vDistPanTile : packoffset(c28) = float4(1.792300e-002,3.175000e-003,5.000000e-001,2.500000e-001);
  float2 k_fTileNormalMapUV : packoffset(c29) = float2(1.000000e+000,1.000000e+000);
  float2 k_fPanNormalMapUV : packoffset(c29.z) = float2(0.000000e+000,0.000000e+000);
  float k_fNormalMapFade : packoffset(c30) = float(0.000000e+000);
  float k_fRefractScale : packoffset(c30.y) = float(5.000000e+001);
  float k_fEnvMapStrength : packoffset(c30.z) = float(1.000000e+000);
  float3 k_cFogColor : packoffset(c31) = float3(0.000000e+000,4.000000e-003,1.180000e-002);
  float3 k_cFogColorB : packoffset(c32) = float3(0.000000e+000,4.000000e-003,1.180000e-002);
  float4 k_vLightFilterClarity : packoffset(c33) = float4(9.950000e-001,9.980000e-001,1.000000e+000,5.000000e+002);
  float4 k_vFoamTileRate : packoffset(c34) = float4(3.000000e+000,2.000000e+000,1.500000e+000,1.000000e+000);
  float4 k_vFoamPanRate : packoffset(c35) = float4(1.000000e-001,1.000000e-001,1.000000e-001,1.000000e-001);
  float k_fFoamIntensity : packoffset(c36) = float(1.000000e+000);
}

cbuffer CBuffer_Frame : register(b13)
{
  float k_fRandom : packoffset(c0);
  float k_fTime : packoffset(c1);
  float2 k_fDeltaTime : packoffset(c2);
  float k_fRealTime : packoffset(c3);
  float2 k_vGlobalTessellation : packoffset(c4);
}
SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s : register(s1);
SamplerState sAniso4X_CLAMPCLAMPCLAMP_Sampler_s : register(s2);
Texture2D<float4> tDepthMap : register(t0);
Texture2D<float4> tFarNormMap : register(t1);
Texture2D<float4> tDetailNormalMap : register(t2);
Texture2D<float4> tCurFrameMap : register(t3);
TextureCube<float4> tReflectionMap : register(t4);
Texture2D<float4> tFoamMap : register(t5);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : COLOR0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  
float4 r24;
r24.xyzw = v2.xyzw;
float4 stereo = StereoParams.Load(0);
r24.x += stereo.x * (r24.w - stereo.y)*0.5;  
  r0.xy = k_fTileNormalMapUV.xy * v1.xy;
  r0.zw = k_fTime * k_fPanNormalMapUV.xy + r0.xy;
  r0.xy = k_fTime * -k_fPanNormalMapUV.xy + r0.xy;
 
  r0.xy = tDetailNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.xy).yw;
  r1.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.xy = tDetailNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r0.zw).yw;
  r0.xy = r0.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.w = -r0.x * r0.x + 1.000000000e+000;
  r0.w = -r0.y * r0.y + r0.w;
  r0.z = sqrt(r0.w);
  r0.w = -r1.x * r1.x + 1.000000000e+000;
  r0.w = -r1.y * r1.y + r0.w;
  r1.z = sqrt(r0.w);
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = k_fNormalMapFade + r0.z;
  r0.z = dot(r0.xyw, r0.xyw);
  r0.z = rsqrt(r0.z);
  r0.xyz = r0.xyw * r0.zzz;
  r0.z = v5.y * 5.000000000e+000 + r0.z;
  r1.xy = k_fTime * k_vDistPanTile.xy + v1.xy;
  r1.xy = k_vDistPanTile.zz * r1.xy;
  r1.xy = tFarNormMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r1.xy).yw;
  r1.zw = -k_fTime * k_vDistPanTile.xy + v1.xy;
  r1.zw = k_vDistPanTile.ww * r1.zw;
  r1.zw = tFarNormMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r1.zw).yw;
  r1.xy = r1.xy + r1.zw;
  r1.xy = float2(-1.000000e+000,-1.000000e+000) + r1.xy;
  r0.w = 1.000000000e+000 + -v5.z;
  r1.z = 2.000000000e+000;
  r1.xyz = r1.xyz * r0.www + v4.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = r1.xzy * r0.zzz;
  r1.w = -r1.x;
  r0.z = dot(r1.zw, r1.zw);
  r0.z = rsqrt(r0.z);
  r3.x = r1.z * r0.z;
  r3.y = -r1.x * r0.z;
  r1.yz = float2(-1.000000e+000,1.000000e+000) * r1.yz;
  r3.z = 0.000000000e+000;
  r0.xzw = r0.xxx * r3.xyz + r2.xyz;
  r1.w = dot(r1.yz, r1.yz);
  r1.w = rsqrt(r1.w);
  r1.x = 0.000000000e+000;
  r1.xyz = r1.xyz * r1.www;
  r0.xyz = r0.yyy * r1.xyz + r0.xzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v3.xyz, v3.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v3.xyz * r0.www;
  r0.w = dot(-r1.xyz, r0.xyz);
  r0.w = r0.w + r0.w;
  r2.xyz = r0.xyz * -r0.www + -r1.xyz;
  r0.y = saturate(dot(r1.xyz, r0.xyz));
  r0.y = 1.000000000e+000 + -r0.y;
  r1.xyz = tReflectionMap.Sample(sAniso4X_CLAMPCLAMPCLAMP_Sampler_s, r2.xyz).xyz;
  r0.w = r0.y * r0.y;
  r0.w = r0.w * r0.w;
  r0.y = r0.y * r0.w;
  r0.y = r0.y * 8.999999762e-001 + 1.000000015e-001;
  r1.xyz = r0.yyy * r1.xyz;
  r2.xy = r24.xy / v2.ww; //v2.xy / v2.ww;
  r2.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r2.xy).x;
  r0.y = -v2.w + r2.z;
  r0.y = saturate(9.999999776e-003 * r0.y);
  r0.y = max(r0.y, 1.000000015e-001);
  r0.y = k_fRefractScale * r0.y;
  r0.yw = r0.xz * r0.yy;
  r0.x = abs(r0.x) + abs(r0.z);
  r0.yz = r0.yw / v2.ww;
  r3.xy = r2.xy + r0.yz;
  
  r3.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r3.xy).x;
  
  r0.y = r3.z < v2.w;
  r0.yzw = r0.yyy ? r2.xyz : r3.xyz;
  r0.w = -v2.w + r0.w;
  r2.xyz = tCurFrameMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r0.yz).xyz;
  r0.y = sqrt(r0.w);
  r0.y = saturate(r0.y / k_vLightFilterClarity.w);
  r3.xyz = k_cFogColorB.xyz + -k_cFogColor.xyz;
  r3.xyz = v5.xxx * r3.xyz + k_cFogColor.xyz;
  r3.xyz = r3.xyz * r0.yyy;
  r4.xyz = log2(abs(k_vLightFilterClarity.xyz));
  r4.xyz = r4.xyz * r0.www;
  r0.y = saturate(1.000000015e-001 * r0.w);
  r4.xyz = exp2(r4.xyz);
  r3.xyz = r2.xyz * r4.xyz + r3.xyz;
  r1.xyz = k_fEnvMapStrength * r1.xyz + r3.xyz;
  r0.z = saturate(v4.w * 2.000000000e+000 + r0.x);
  r3.xyzw = k_fTime * k_vFoamPanRate.xyzw;
  r3.xyzw = v1.xyxy * k_vFoamTileRate.xyzw + r3.xyzw;
  r0.w = tFoamMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r3.xy).y;
  r3.xy = tFoamMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s, r3.zw).xy;
  r1.w = v5.z * r0.w;
  r0.w = v4.w + r0.w;
  r0.w = v5.w * r0.w;
  r0.w = r0.w * r3.y;
  r1.w = r1.w * r3.x;
  r1.w = 5.000000000e-001 * r1.w;
  r0.z = r1.w * r0.z + r0.w;
  r0.x = v5.y * r0.x + r0.z;
  r0.xzw = r0.xxx * k_fFoamIntensity + r1.xyz;
  r0.xzw = r0.xzw + -r2.xyz;
  o0.xyz = r0.yyy * r0.xzw + r2.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 k_mObjectToClip;// Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  112 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  160 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  176 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  192 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  256 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  304 Size:    48 [unused]
//   float2 k_vTessellation;            // Offset:  352 Size:     8 [unused]
//      = 0x41700000 0x427c0000 
//   float4 k_vFade;                    // Offset:  368 Size:    16 [unused]
//      = 0x459c4000 0x461c4000 0x447a0000 0x459c4000 
//   float4 k_vDisplacement;            // Offset:  384 Size:    16 [unused]
//      = 0x41f00000 0x44bb8000 0x43000000 0x41200000 
//   float k_fOffset;                   // Offset:  400 Size:     4 [unused]
//      = 0xbe800000 
//   float2 k_vMipRange;                // Offset:  404 Size:     8 [unused]
//      = 0x00000000 0x447a0000 
//   float2 k_vDispPanRate;             // Offset:  416 Size:     8 [unused]
//      = 0x3d52af9b 0x3bf1aad3 
//   float4 k_vWashingMachine;          // Offset:  432 Size:    16 [unused]
//      = 0x41000000 0x3c23d70a 0x403b458d 0x400b0c5f 
//   float4 k_vDistPanTile;             // Offset:  448 Size:    16
//      = 0x3c92d341 0x3b5013a9 0x3f000000 0x3e800000 
//   float2 k_fTileNormalMapUV;         // Offset:  464 Size:     8
//      = 0x3f800000 0x3f800000 
//   float2 k_fPanNormalMapUV;          // Offset:  472 Size:     8
//      = 0x00000000 0x00000000 
//   float k_fNormalMapFade;            // Offset:  480 Size:     4
//      = 0x00000000 
//   float k_fRefractScale;             // Offset:  484 Size:     4
//      = 0x42480000 
//   float k_fEnvMapStrength;           // Offset:  488 Size:     4
//      = 0x3f800000 
//   float3 k_cFogColor;                // Offset:  496 Size:    12
//      = 0x00000000 0x3b83126f 0x3c4154ca 
//   float3 k_cFogColorB;               // Offset:  512 Size:    12
//      = 0x00000000 0x3b83126f 0x3c4154ca 
//   float4 k_vLightFilterClarity;      // Offset:  528 Size:    16
//      = 0x3f7eb852 0x3f7f7cee 0x3f800000 0x43fa0000 
//   float4 k_vFoamTileRate;            // Offset:  544 Size:    16
//      = 0x40400000 0x40000000 0x3fc00000 0x3f800000 
//   float4 k_vFoamPanRate;             // Offset:  560 Size:    16
//      = 0x3dcccccd 0x3dcccccd 0x3dcccccd 0x3dcccccd 
//   float k_fFoamIntensity;            // Offset:  576 Size:     4
//      = 0x3f800000 
//
// }
//
// cbuffer CBuffer_Frame
// {
//
//   float k_fRandom;                   // Offset:    0 Size:     4 [unused]
//   float k_fTime;                     // Offset:   16 Size:     4
//   float2 k_fDeltaTime;               // Offset:   32 Size:     8 [unused]
//   float k_fRealTime;                 // Offset:   48 Size:     4 [unused]
//   float2 k_vGlobalTessellation;      // Offset:   64 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso4X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// sAniso4X_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    2        1
// tDepthMap                         texture  float4          2d    0        1
// tFarNormMap                       texture  float4          2d    1        1
// tDetailNormalMap                  texture  float4          2d    2        1
// tCurFrameMap                      texture  float4          2d    3        1
// tReflectionMap                    texture  float4        cube    4        1
// tFoamMap                          texture  float4          2d    5        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_Frame                     cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[37], immediateIndexed
dcl_constantbuffer cb13[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_output o0.xyzw
dcl_temps 5
mul r0.xy, v1.xyxx, cb0[29].xyxx
mad r0.zw, cb13[1].xxxx, cb0[29].zzzw, r0.xxxy
mad r0.xy, cb13[1].xxxx, -cb0[29].zwzz, r0.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t2.ywxz, s1
mad r1.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.zwzz, t2.ywxz, s1
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.w, -r0.x, r0.x, l(1.000000)
mad r0.w, -r0.y, r0.y, r0.w
sqrt r0.z, r0.w
mad r0.w, -r1.x, r1.x, l(1.000000)
mad r0.w, -r1.y, r1.y, r0.w
sqrt r1.z, r0.w
add r0.xyz, r0.xyzx, r1.xyzx
add r0.w, r0.z, cb0[30].x
dp3 r0.z, r0.xywx, r0.xywx
rsq r0.z, r0.z
mul r0.xyz, r0.zzzz, r0.xywx
mad r0.z, v5.y, l(5.000000), r0.z
mad r1.xy, cb13[1].xxxx, cb0[28].xyxx, v1.xyxx
mul r1.xy, r1.xyxx, cb0[28].zzzz
sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t1.ywxz, s1
mad r1.zw, -cb13[1].xxxx, cb0[28].xxxy, v1.xxxy
mul r1.zw, r1.zzzw, cb0[28].wwww
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t1.xzyw, s1
add r1.xy, r1.zwzz, r1.xyxx
add r1.xy, r1.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
add r0.w, -v5.z, l(1.000000)
mov r1.z, l(2.000000)
mad r1.xyz, r1.xyzx, r0.wwww, v4.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mul r2.xyz, r0.zzzz, r1.xzyx
mov r1.w, -r1.x
dp2 r0.z, r1.zwzz, r1.zwzz
rsq r0.z, r0.z
mul r3.x, r0.z, r1.z
mul r3.y, r0.z, -r1.x
mul r1.yz, r1.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
mov r3.z, l(0)
mad r0.xzw, r0.xxxx, r3.xxyz, r2.xxyz
dp2 r1.w, r1.yzyy, r1.yzyy
rsq r1.w, r1.w
mov r1.x, l(0)
mul r1.xyz, r1.wwww, r1.xyzx
mad r0.xyz, r0.yyyy, r1.xyzx, r0.xzwx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v3.xyzx
dp3 r0.w, -r1.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r2.xyz, r0.xyzx, -r0.wwww, -r1.xyzx
dp3_sat r0.y, r1.xyzx, r0.xyzx
add r0.y, -r0.y, l(1.000000)
sample_indexable(texturecube)(float,float,float,float) r1.xyz, r2.xyzx, t4.xyzw, s2
mul r0.w, r0.y, r0.y
mul r0.w, r0.w, r0.w
mul r0.y, r0.w, r0.y
mad r0.y, r0.y, l(0.900000), l(0.100000)
mul r1.xyz, r1.xyzx, r0.yyyy
div r2.xy, v2.xyxx, v2.wwww
sample_indexable(texture2d)(float,float,float,float) r2.z, r2.xyxx, t0.yzxw, s0
add r0.y, r2.z, -v2.w
mul_sat r0.y, r0.y, l(0.010000)
max r0.y, r0.y, l(0.100000)
mul r0.y, r0.y, cb0[30].y
mul r0.yw, r0.yyyy, r0.xxxz
add r0.x, |r0.z|, |r0.x|
div r0.yz, r0.yywy, v2.wwww
add r3.xy, r0.yzyy, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r3.z, r3.xyxx, t0.yzxw, s0
lt r0.y, r3.z, v2.w
movc r0.yzw, r0.yyyy, r2.xxyz, r3.xxyz
add r0.w, r0.w, -v2.w
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.yzyy, t3.xyzw, s0
sqrt r0.y, r0.w
div_sat r0.y, r0.y, cb0[33].w
add r3.xyz, -cb0[31].xyzx, cb0[32].xyzx
mad r3.xyz, v5.xxxx, r3.xyzx, cb0[31].xyzx
mul r3.xyz, r0.yyyy, r3.xyzx
log r4.xyz, |cb0[33].xyzx|
mul r4.xyz, r0.wwww, r4.xyzx
mul_sat r0.y, r0.w, l(0.100000)
exp r4.xyz, r4.xyzx
mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
mad r1.xyz, cb0[30].zzzz, r1.xyzx, r3.xyzx
mad_sat r0.z, v4.w, l(2.000000), r0.x
mul r3.xyzw, cb0[35].xyzw, cb13[1].xxxx
mad r3.xyzw, v1.xyxy, cb0[34].xyzw, r3.xyzw
sample_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t5.xzwy, s1
sample_indexable(texture2d)(float,float,float,float) r3.xy, r3.zwzz, t5.xyzw, s1
mul r1.w, r0.w, v5.z
add r0.w, r0.w, v4.w
mul r0.w, r0.w, v5.w
mul r0.w, r3.y, r0.w
mul r1.w, r3.x, r1.w
mul r1.w, r1.w, l(0.500000)
mad r0.z, r1.w, r0.z, r0.w
mad r0.x, v5.y, r0.x, r0.z
mad r0.xzw, r0.xxxx, cb0[36].xxxx, r1.xxyz
add r0.xzw, -r2.xxyz, r0.xxzw
mad o0.xyz, r0.yyyy, r0.xzwx, r2.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 108 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
