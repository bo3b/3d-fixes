//Fire explosions
cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c2);

  float k_fIntensityScale : packoffset(c5) = float(1.000000e+000);
  float k_fPanNormalU : packoffset(c5.y) = float(0.000000e+000);
  float k_fPanNormalV : packoffset(c5.z) = float(0.000000e+000);
  float k_fPanSampleGreenU : packoffset(c5.w) = float(0.000000e+000);
  float k_fPanSampleGreenV : packoffset(c6) = float(0.000000e+000);
  float k_fPanSampleRedU : packoffset(c6.y) = float(0.000000e+000);
  float k_fPanSampleRedV : packoffset(c6.z) = float(0.000000e+000);
  float k_fRefractStrength : packoffset(c6.w) = float(5.000000e-002);
  float k_fTextureBlend : packoffset(c7) = float(5.000000e-001);
  float2 k_vNormalTile : packoffset(c7.y) = float2(1.000000e+000,1.000000e+000);
  float2 k_vSampleGreenTile : packoffset(c8) = float2(1.000000e+000,1.000000e+000);
  float2 k_vSampleRedTile : packoffset(c8.z) = float2(1.000000e+000,1.000000e+000);
  float3 k_vSlopeBlend : packoffset(c9) = float3(-1.000000e+000,-1.000000e+000,1.000000e+000);
  float k_fTime : packoffset(c9.w);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c10);
  row_major float4x4 k_mObjectToClip : packoffset(c13);
  row_major float3x4 k_mObjectToWorld : packoffset(c17);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c20);
  float3 k_vDirectional_Dir : packoffset(c24);
  float4 k_vFullViewPlane : packoffset(c25);
  float4 k_vHDRLuminanceWeights : packoffset(c26);
  float3 k_vHalfDims : packoffset(c27);
  float4 k_vObjectColor : packoffset(c28);
  float4 k_vObjectLightColor : packoffset(c29);
  float3 k_vObjectSpaceEyePos : packoffset(c30);
  float2 k_vPerspOrthoMask : packoffset(c31);
  float2 k_vScene_TexCoordScale : packoffset(c31.z);
  float4 k_vShadowCascadeOffsetZ : packoffset(c32);
  float4 k_vShadowMapParams2 : packoffset(c33);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float2 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3)
{
  float4 r0,r1;
  uint4 bitmask;
  
o4.xyzw = k_vFullViewPlane.xyzw;
  
  r0.xy = k_vHalfDims.xy * v0.xy;
  r0.z = v0.z * k_vHalfDims.z + k_vHalfDims.z;
  r0.w = 1.000000000e+000;
  r1.x = dot(k_mObjectToWorld._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(k_mObjectToWorld._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(k_mObjectToWorld._m20_m21_m22_m23, r0.xyzw);
  r1.w = 1.000000000e+000;
  r0.x = dot(k_mObjectToClip._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(k_mObjectToClip._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(k_mObjectToClip._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(k_mObjectToClip._m30_m31_m32_m33, r1.xyzw);
  o2.xyz = k_vObjectSpaceEyePos.xyz + -r1.xyz;
  
float4 stereo = StereoParams.Load(0);
float4 r23, r20;
r23.xyzw = r0.xyzw;
r0.x += stereo.x * (r0.w - stereo.y); 
o0.xyzw = r23.xyzw;   
  
  // o0.xyzw = r0.xyzw;
  o1.zw = r0.zw;
  r1.xy = k_vScene_TexCoordScale.xy * r0.ww;
  r0.zw = k_vFullViewPlane.xy * r0.ww;
  r1.zw = float2(1.000000e+000,-1.000000e+000) * k_vScene_TexCoordScale.xy;
  r0.xy = r0.xy * r1.zw + r1.xy;
  
  o1.xy = r0.xy;
  o3.xy = r0.xy * k_vFullViewPlane.zw + r0.zw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    12 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:   32
//       float4 m_Weights;              // Offset:   48
//       float4 m_Indices;              // Offset:   64
//
//   } MaterialVertexDef_Skeletal;      // Offset:   32 Size:    48 [unused]
//   float k_fIntensityScale;           // Offset:   80 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fPanNormalU;               // Offset:   84 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanNormalV;               // Offset:   88 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanSampleGreenU;          // Offset:   92 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanSampleGreenV;          // Offset:   96 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanSampleRedU;            // Offset:  100 Size:     4 [unused]
//      = 0x00000000 
//   float k_fPanSampleRedV;            // Offset:  104 Size:     4 [unused]
//      = 0x00000000 
//   float k_fRefractStrength;          // Offset:  108 Size:     4 [unused]
//      = 0x3d4ccccd 
//   float k_fTextureBlend;             // Offset:  112 Size:     4 [unused]
//      = 0x3f000000 
//   float2 k_vNormalTile;              // Offset:  116 Size:     8 [unused]
//      = 0x3f800000 0x3f800000 
//   float2 k_vSampleGreenTile;         // Offset:  128 Size:     8 [unused]
//      = 0x3f800000 0x3f800000 
//   float2 k_vSampleRedTile;           // Offset:  136 Size:     8 [unused]
//      = 0x3f800000 0x3f800000 
//   float3 k_vSlopeBlend;              // Offset:  144 Size:    12 [unused]
//      = 0xbf800000 0xbf800000 0x3f800000 
//   float k_fTime;                     // Offset:  156 Size:     4 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  160 Size:    48 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  208 Size:    64
//   row_major float3x4 k_mObjectToWorld;// Offset:  272 Size:    48
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  320 Size:    64 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  384 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  400 Size:    16
//   float4 k_vHDRLuminanceWeights;     // Offset:  416 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  432 Size:    12
//   float4 k_vObjectColor;             // Offset:  448 Size:    16 [unused]
//   float4 k_vObjectLightColor;        // Offset:  464 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  480 Size:    12
//   float2 k_vPerspOrthoMask;          // Offset:  496 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  504 Size:     8
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  512 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  528 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xy          3     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[32], immediateIndexed
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xy
dcl_temps 2
mul r0.xy, v0.xyxx, cb0[27].xyxx
mad r0.z, v0.z, cb0[27].z, cb0[27].z
mov r0.w, l(1.000000)
dp4 r1.x, cb0[17].xyzw, r0.xyzw
dp4 r1.y, cb0[18].xyzw, r0.xyzw
dp4 r1.z, cb0[19].xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 r0.x, cb0[13].xyzw, r1.xyzw
dp4 r0.y, cb0[14].xyzw, r1.xyzw
dp4 r0.z, cb0[15].xyzw, r1.xyzw
dp4 r0.w, cb0[16].xyzw, r1.xyzw
add o2.xyz, -r1.xyzx, cb0[30].xyzx
mov o0.xyzw, r0.xyzw
mov o1.zw, r0.zzzw
mul r1.xy, r0.wwww, cb0[31].zwzz
mul r0.zw, r0.wwww, cb0[25].xxxy
mul r1.zw, cb0[31].zzzw, l(0.000000, 0.000000, 1.000000, -1.000000)
mad r0.xy, r0.xyxx, r1.zwzz, r1.xyxx
mov o1.xy, r0.xyxx
mad o3.xy, r0.xyxx, cb0[25].zwzz, r0.zwzz
ret 
// Approximately 21 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
