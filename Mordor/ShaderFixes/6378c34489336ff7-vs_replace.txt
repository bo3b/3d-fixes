
cbuffer _Globals : register(b0)
{
  float k_fBlendSmoothness0 : packoffset(c0) = float(1.000000e-002);
  float k_fBlendSmoothness1 : packoffset(c0.y) = float(1.000000e-002);
  row_major float4x4 k_mObjectToClip : packoffset(c1);
  row_major float3x4 k_mObjectToView : packoffset(c5);
  row_major float3x4 k_mObjectToWorld : packoffset(c8);
  float4 k_vObjectColor : packoffset(c11);
  float3 k_vObjectSpaceEyePos : packoffset(c12);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c13);
  row_major float3x4 k_mPrevObjectToView : packoffset(c17);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c20);
  float k_fScaleLayer0 : packoffset(c23) = float(1.000000e+000);
  float k_fScaleLayer1 : packoffset(c23.y) = float(1.000000e+000);
  float k_fScaleLayer2 : packoffset(c23.z) = float(1.000000e+000);
  float3 k_vSpecularPower3 : packoffset(c24) = float3(1.600000e+001,1.600000e+001,1.600000e+001);
  float k_fRenderObjectID : packoffset(c24.w);
  int WorldPacker_Context : packoffset(c25) = int(0.000000e+000);
  float k_fInvLightRadius : packoffset(c25.y);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c26);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c29);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c32);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c36);
  row_major float3x4 k_mWorldToVolume : packoffset(c37);
  float3 k_vDirectional_Dir : packoffset(c40);
  float4 k_vObjectLightColor : packoffset(c41);
  float3 k_vObjectSpaceLightPos : packoffset(c42);
  float4 k_vSpecularColor : packoffset(c43);
  float4 k_vSpotProjector_ClipFar : packoffset(c44);
  float4 k_vSpotProjector_ClipNear : packoffset(c45);
  float3 k_vHalfDims : packoffset(c46);
  float4 k_vShadowMapParams : packoffset(c47);
  float4 k_vShadowMapParams2 : packoffset(c48);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c49);
  float4 k_vShadowCascadeOffsetX : packoffset(c53);
  float4 k_vShadowCascadeOffsetZ : packoffset(c54);
  float k_fStaticLightVolume_Mip : packoffset(c55);
  float4 k_vShadowSplitDistSquared : packoffset(c56);
  float4 k_vShadowSplitDistSelect : packoffset(c57);
  float4 k_vShadowMoveX : packoffset(c58);
  float4 k_vShadowMoveY : packoffset(c59);
  float4 k_vShadowMoveZ : packoffset(c60);
  float4 k_vShadowScaleXY : packoffset(c61);
  float4 k_vShadowScaleX : packoffset(c62);
  float4 k_vShadowScaleY : packoffset(c63);
  float4 k_vShadowScaleZ : packoffset(c64);
  float3 k_vLightBleed_Offset : packoffset(c65);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c66);
  float k_fLightLayer : packoffset(c67);
  row_major float3x4 k_mViewToLight : packoffset(c68);
}

Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : SV_POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TANGENT0,
  float3 v4 : BINORMAL0,
  float4 v5 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD2,
  out float3 o3 : TEXCOORD3,
  out float3 o4 : TEXCOORD4,
  out float4 o5 : COLOR0)
{
  float4 r0;
  uint4 bitmask;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  o0.x = dot(k_mObjectToClip._m00_m01_m02_m03, r0.xyzw);
  o0.y = dot(k_mObjectToClip._m10_m11_m12_m13, r0.xyzw);
  o0.z = dot(k_mObjectToClip._m20_m21_m22_m23, r0.xyzw);
  o0.w = dot(k_mObjectToClip._m30_m31_m32_m33, r0.xyzw);
  
// float4 stereo = StereoParams.Load(0);
// o0.x += stereo.x * (o0.w - stereo.y);
  
  o1.xy = v2.xy;
  o2.x = dot(k_mObjectToWorld._m00_m01_m02, v3.xyz);
  o2.y = dot(k_mObjectToWorld._m00_m01_m02, v4.xyz);
  o2.z = dot(k_mObjectToWorld._m00_m01_m02, v1.xyz);
  o3.x = dot(k_mObjectToWorld._m10_m11_m12, v3.xyz);
  o3.y = dot(k_mObjectToWorld._m10_m11_m12, v4.xyz);
  o3.z = dot(k_mObjectToWorld._m10_m11_m12, v1.xyz);
  o4.x = dot(k_mObjectToWorld._m20_m21_m22, v3.xyz);
  o4.y = dot(k_mObjectToWorld._m20_m21_m22, v4.xyz);
  o4.z = dot(k_mObjectToWorld._m20_m21_m22, v1.xyz);
  o5.xyzw = k_vObjectColor.xyzw * v5.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fBlendSmoothness0;         // Offset:    0 Size:     4 [unused]
//      = 0x3c23d70a 
//   float k_fBlendSmoothness1;         // Offset:    4 Size:     4 [unused]
//      = 0x3c23d70a 
//   row_major float4x4 k_mObjectToClip;// Offset:   16 Size:    64
//   row_major float3x4 k_mObjectToView;// Offset:   80 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  128 Size:    48
//   float4 k_vObjectColor;             // Offset:  176 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  192 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  208 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  272 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  320 Size:    48 [unused]
//   float k_fScaleLayer0;              // Offset:  368 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fScaleLayer1;              // Offset:  372 Size:     4 [unused]
//      = 0x3f800000 
//   float k_fScaleLayer2;              // Offset:  376 Size:     4 [unused]
//      = 0x3f800000 
//   float3 k_vSpecularPower3;          // Offset:  384 Size:    12 [unused]
//      = 0x41800000 0x41800000 0x41800000 
//   float k_fRenderObjectID;           // Offset:  396 Size:     4 [unused]
//   int WorldPacker_Context;           // Offset:  400 Size:     4 [unused]
//      = 0x00000000 
//   float k_fInvLightRadius;           // Offset:  404 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:  416 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:  464 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  512 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  576 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  592 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  640 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  656 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  672 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  688 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  704 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  720 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  736 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  752 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  768 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  784 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  848 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  864 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  880 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  896 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  912 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  928 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  944 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  960 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  976 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  992 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset: 1008 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset: 1024 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset: 1040 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset: 1056 Size:    16 [unused]
//   float k_fLightLayer;               // Offset: 1072 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset: 1088 Size:    48 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[12], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_temps 1
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 o0.x, cb0[1].xyzw, r0.xyzw
dp4 o0.y, cb0[2].xyzw, r0.xyzw
dp4 o0.z, cb0[3].xyzw, r0.xyzw
dp4 o0.w, cb0[4].xyzw, r0.xyzw
mov o1.xy, v2.xyxx
dp3 o2.x, cb0[8].xyzx, v3.xyzx
dp3 o2.y, cb0[8].xyzx, v4.xyzx
dp3 o2.z, cb0[8].xyzx, v1.xyzx
dp3 o3.x, cb0[9].xyzx, v3.xyzx
dp3 o3.y, cb0[9].xyzx, v4.xyzx
dp3 o3.z, cb0[9].xyzx, v1.xyzx
dp3 o4.x, cb0[10].xyzx, v3.xyzx
dp3 o4.y, cb0[10].xyzx, v4.xyzx
dp3 o4.z, cb0[10].xyzx, v1.xyzx
mul o5.xyzw, v5.xyzw, cb0[11].xyzw
ret 
// Approximately 18 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
